<?xml version="1.0" encoding="utf-8"?>
<project version="0.18.1" title="">
  <file path="eZ/Publish/Core/Base/ServiceContainer.php" hash="bca3e264ab6e331291641cec5d60b249">
    <parse_markers>
      <error line="72" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dependencies in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/ServiceContainer.php</error>
    </parse_markers>
    <namespace-alias name="ConfigurationManager">eZ\Publish\Core\Base\ConfigurationManager</namespace-alias>
    <namespace-alias name="BadConfiguration">eZ\Publish\Core\Base\Exception\BadConfiguration</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">eZ\Publish\Core\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="MissingClass">eZ\Publish\Core\Base\Exception\MissingClass</namespace-alias>
    <namespace-alias name="ReflectionClass">ReflectionClass</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base" line="56" package="Default">
      <name>ServiceContainer</name>
      <full_name>\eZ\Publish\Core\Base\ServiceContainer</full_name>
      <extends/>
      <docblock line="17">
        <description><![CDATA[Service container class]]></description>
        <long-description><![CDATA[<p>A dependency injection container that uses configuration for defining dependencies.</p>

<p>Usage:</p>

<pre><code>$sc = new eZ\Publish\Core\Base\ServiceContainer( Configuration::getInstance('service')-&gt;getAll() );
$sc-&gt;getRepository-&gt;getContentService()...;
</code></pre>

<p>Or overriding $dependencies (in unit tests):
( $dependencies keys should have same value as service.ini "arguments" values explained bellow )</p>

<pre><code>$sc = new eZ\Publish\Core\Base\ServiceContainer(
    Configuration::getInstance('service')-&gt;getAll(),
    array(
        '@persistence_handler' =&gt; new \ezp\Persistence\Storage\InMemory\Handler()
    )
);
$sc-&gt;getRepository-&gt;getContentService()...;
</code></pre>

<p>Settings are defined in service.ini like the following example:</p>

<pre><code>[repository]
shared=true
class=eZ\Publish\Core\Base\Repository
arguments[persistence_handler]=@inmemory_persistence_handler

[inmemory_persistence_handler]
shared=true
class=ezp\Persistence\Storage\InMemory\Handler
</code></pre>]]></long-description>
        <tag line="17" name="todo" description="Update service.ini reference bellow&#10;# @see \eZ\Publish\Core\Base\settings\service.ini For more options and examples.&#10;&quot;arguments&quot; values in service.ini can start with either @ in case of other services being dependency, $ if a&#10;predefined global variable is to be used ( currently: $_SERVER, $_REQUEST, $_COOKIE, $_FILES and $serviceContainer )&#10;or plain scalar if that is to be given directly as argument value."/>
      </docblock>
      <property final="false" static="false" visibility="private" line="63" package="Default">
        <name>$dependencies</name>
        <default><![CDATA[]]></default>
        <docblock line="58">
          <description><![CDATA[Holds service objects and variables]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="var" description="" type="\object[]">
            <type by_reference="false">\object[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="70" package="Default">
        <name>$settings</name>
        <default><![CDATA[]]></default>
        <docblock line="65">
          <description><![CDATA[Array of optional settings overrides]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="var" description="" type="\array[]">
            <type by_reference="false">\array[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="78" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Construct object with optional configuration overrides]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="param" description="Services settings" type="array" variable="$settings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="72" name="param" description="Optional initial dependencies" type="\mixed[]|\object[]" variable="$dependencies">
            <type by_reference="false">\mixed[]</type>
            <type by_reference="false">\object[]</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$settings</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="78">
          <name>$dependencies</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="97" package="Default">
        <name>getConfigurationManager</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Service function to get ConfigurationManager object]]></description>
          <long-description><![CDATA[<p>Alias with type hints for $repo->get( 'configuration' );</p>]]></long-description>
          <tag line="89" name="uses" description="\eZ\Publish\Core\Base\get()" refers="\eZ\Publish\Core\Base\get()"/>
          <tag line="89" name="return" description="" type="\eZ\Publish\Core\Base\ConfigurationManager">
            <type by_reference="false">\eZ\Publish\Core\Base\ConfigurationManager</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="113" package="Default">
        <name>getRepository</name>
        <type>function</type>
        <docblock line="105">
          <description><![CDATA[Service function to get Repository object]]></description>
          <long-description><![CDATA[<p>Alias with type hints for $repo->get( 'repository' );</p>]]></long-description>
          <tag line="105" name="uses" description="\eZ\Publish\Core\Base\get()" refers="\eZ\Publish\Core\Base\get()"/>
          <tag line="105" name="return" description="" type="\eZ\Publish\API\Repository\Repository">
            <type by_reference="false">\eZ\Publish\API\Repository\Repository</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="129" package="Default">
        <name>get</name>
        <type>function</type>
        <docblock line="120">
          <description><![CDATA[Get service by name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="120" name="uses" description="\eZ\Publish\Core\Base\lookupArguments()" refers="\eZ\Publish\Core\Base\lookupArguments()"/>
          <tag line="120" name="throws" description="" type="\eZ\Publish\Core\Base\Exception\BadConfiguration">
            <type by_reference="false">\eZ\Publish\Core\Base\Exception\BadConfiguration</type>
          </tag>
          <tag line="120" name="throws" description="" type="\eZ\Publish\Core\Base\Exception\MissingClass">
            <type by_reference="false">\eZ\Publish\Core\Base\Exception\MissingClass</type>
          </tag>
          <tag line="120" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="120" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$serviceName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="eZ\Publish\Core\Base" line="197" package="Default">
        <name>lookupArguments</name>
        <type>function</type>
        <docblock line="189">
          <description><![CDATA[Lookup arguments for variable, service or arrays for recursive lookup]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="189" name="throws" description="" type="\eZ\Publish\Core\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\eZ\Publish\Core\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="189" name="param" description="" type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="189" name="param" description="&amp;$keys Optional, keys in array will be appended in the order they are found (but not recursively)" type="array" variable="$keys">
            <type by_reference="false">array</type>
          </tag>
          <tag line="189" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="197">
          <name>$arguments</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="197">
          <name>$keys</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/Configuration.php" hash="defb48374509a0ac0f2416782c625a59">
    <parse_markers>
      <critical line="88" code="50019">No short description for property $filePermission</critical>
      <critical line="93" code="50019">No short description for property $dirPermission</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Configuration.php</error>
    </parse_markers>
    <namespace-alias name="Parser">eZ\Publish\Core\Base\Configuration\Parser</namespace-alias>
    <namespace-alias name="BadConfiguration">eZ\Publish\Core\Base\Exception\BadConfiguration</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">eZ\Publish\Core\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="ezcPhpGenerator">ezcPhpGenerator</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base" line="29" package="Default">
      <name>Configuration</name>
      <full_name>\eZ\Publish\Core\Base\Configuration</full_name>
      <extends/>
      <docblock line="18">
        <description><![CDATA[Configuration instance class]]></description>
        <long-description><![CDATA[<p>A configuration class with override setting support that uses parsers to deal with
files so you can support ini/yaml/xml/json given it is defined when setting up the class.</p>

<p>By default values are cached to a raw php files and files are not read again unless
development mode is on and some file has been removed or modified since cache was created.</p>]]></long-description>
        <tag line="18" name="uses" description="\ezcPhpGenerator" refers="\ezcPhpGenerator"/>
      </docblock>
      <constant namespace="eZ\Publish\Core\Base" line="36" package="Default">
        <name>CONFIG_CACHE_DIR</name>
        <value><![CDATA['var/cache/ini/']]></value>
        <docblock line="31">
          <description><![CDATA[Constant path to directory for configuration cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\Core\Base" line="43" package="Default">
        <name>TEMP_INI_UNSET_VAR</name>
        <value><![CDATA['__UNSET__']]></value>
        <docblock line="38">
          <description><![CDATA[Constant string used as a temporary unset variable during ini parsing]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\Core\Base" line="50" package="Default">
        <name>CONFIG_CACHE_REV</name>
        <value><![CDATA[3]]></value>
        <docblock line="45">
          <description><![CDATA[Constant integer to check against configuration cache format revision]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="private" line="57" package="Default">
        <name>$paths</name>
        <default><![CDATA[array()]]></default>
        <docblock line="52">
          <description><![CDATA[The instance path array, scoped in the order they should be parsed]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="65" package="Default">
        <name>$pathsHash</name>
        <default><![CDATA['']]></default>
        <docblock line="59">
          <description><![CDATA[The instance configuration path array md5 hash, for use in cache names.]]></description>
          <long-description><![CDATA[<p>Empty if it needs to be regenerated</p>]]></long-description>
          <tag line="59" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="72" package="Default">
        <name>$moduleName</name>
        <default><![CDATA[null]]></default>
        <docblock line="67">
          <description><![CDATA[The instance module name, set by {@link __construct()}]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="79" package="Default">
        <name>$raw</name>
        <default><![CDATA[null]]></default>
        <docblock line="74">
          <description><![CDATA[The in memory representation of the current raw configuration data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="var" description="" type="null|array">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="86" package="Default">
        <name>$globalConfiguration</name>
        <default><![CDATA[]]></default>
        <docblock line="81">
          <description><![CDATA[Global settings (see config.php-RECOMMENDED)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="91" package="Default">
        <name>$filePermission</name>
        <default><![CDATA[0644]]></default>
        <docblock line="88">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="96" package="Default">
        <name>$dirPermission</name>
        <default><![CDATA[0755]]></default>
        <docblock line="93">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="105" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="98">
          <description><![CDATA[Create instance of Configuration]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="param" description="The name of the module (and in case of ini files, same as ini filename w/o suffix)" type="string" variable="$moduleName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="98" name="param" description="Paths to look for settings in." type="array" variable="$paths">
            <type by_reference="false">array</type>
          </tag>
          <tag line="98" name="param" description="Global settings for module" type="array" variable="$globalConfiguration">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$moduleName</name>
          <default><![CDATA['base']]></default>
          <type/>
        </argument>
        <argument line="105">
          <name>$paths</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="105">
          <name>$globalConfiguration</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="125" package="Default">
        <name>getDirs</name>
        <type>function</type>
        <docblock line="118">
          <description><![CDATA[Get raw instance override path list data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="throws" description="If scope has wrong value" type="\eZ\Publish\Core\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\eZ\Publish\Core\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="118" name="param" description="See {@link $globalPaths} for scope values (first level keys)" type="string" variable="$scope">
            <type by_reference="false">string</type>
          </tag>
          <tag line="118" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="125">
          <name>$scope</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="eZ\Publish\Core\Base" line="140" package="Default">
        <name>pathsHash</name>
        <type>function</type>
        <docblock line="135">
          <description><![CDATA[Get cache hash based on override dirs]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="135" name="return" description="md5 hash" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="152" package="Default">
        <name>reload</name>
        <type>function</type>
        <docblock line="149">
          <description><![CDATA[Reload cache data conditionally if path hash has changed on current instance]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="164" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="158">
          <description><![CDATA[Load the configuration from cache or from source (if $useCache is false or there is no cache)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="158" name="param" description="Lets you specify if there is a cache file, will check if null and $useCache is true" type="bool|null" variable="$hasCache">
            <type by_reference="false">bool</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="158" name="param" description="Will skip using cached config files (slow), when null depends on [ini]\use-cache setting" type="bool" variable="$useCache">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="164">
          <name>$hasCache</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="164">
          <name>$useCache</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="eZ\Publish\Core\Base" line="223" package="Default">
        <name>createCacheName</name>
        <type>function</type>
        <docblock line="217">
          <description><![CDATA[Create cache name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="217" name="param" description="" type="string" variable="$configurationPathsHash">
            <type by_reference="false">string</type>
          </tag>
          <tag line="217" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="223">
          <name>$configurationPathsHash</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="eZ\Publish\Core\Base" line="234" package="Default">
        <name>hasCache</name>
        <type>function</type>
        <docblock line="228">
          <description><![CDATA[Check if cache file exists.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="228" name="param" description="As generated by {@link createCacheName()}" type="string" variable="$cacheName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="228" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="234">
          <name>$cacheName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="eZ\Publish\Core\Base" line="245" package="Default">
        <name>readCache</name>
        <type>function</type>
        <docblock line="239">
          <description><![CDATA[Load cache file, use {@link hasCache()} to make sure it exists first!]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="239" name="param" description="As generated by {@link createCacheName()}" type="string" variable="$cacheName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="239" name="return" description="" type="array|null">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="245">
          <name>$cacheName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="eZ\Publish\Core\Base" line="290" package="Default">
        <name>generateRawData</name>
        <type>function</type>
        <docblock line="282">
          <description><![CDATA[Generate raw data for use in cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="282" name="param" description="" type="string" variable="$configurationPathsHash">
            <type by_reference="false">string</type>
          </tag>
          <tag line="282" name="param" description="" type="array" variable="$configurationData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="282" name="param" description="Optional, stored in cache to be able to check modified time in future devMode" type="array" variable="$sourceFiles">
            <type by_reference="false">array</type>
          </tag>
          <tag line="282" name="param" description="Optional, stored in cache to be able to debug it more easily" type="array" variable="$sourcePaths">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="290">
          <name>$configurationPathsHash</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="290">
          <name>$configurationData</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="290">
          <name>$sourceFiles</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
        <argument line="290">
          <name>$sourcePaths</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="eZ\Publish\Core\Base" line="311" package="Default">
        <name>parse</name>
        <type>function</type>
        <docblock line="302">
          <description><![CDATA[Parse configuration files]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="302" name="param" description="" type="array" variable="$configurationPaths">
            <type by_reference="false">array</type>
          </tag>
          <tag line="302" name="param" description="ByRef value or source files that has been/is going to be parsed files you pass in will not be checked if they exists." type="array" variable="$sourceFiles">
            <type by_reference="false">array</type>
          </tag>
          <tag line="302" name="return" description="Data structure for parsed ini files" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="302" name="throws" description="If no parser have been defined" type="\eZ\Publish\Core\Base\Exception\BadConfiguration">
            <type by_reference="false">\eZ\Publish\Core\Base\Exception\BadConfiguration</type>
          </tag>
        </docblock>
        <argument line="311">
          <name>$configurationPaths</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="311">
          <name>$sourceFiles</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="eZ\Publish\Core\Base" line="371" package="Default">
        <name>recursiveArrayClearing</name>
        <type>function</type>
        <docblock line="365">
          <description><![CDATA[Recursively clear array values]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="365" name="param" description="" type="array" variable="$iniArray">
            <type by_reference="false">array</type>
          </tag>
          <tag line="365" name="param" description="" type="array|null" variable="$configurationPiece">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="371">
          <name>$iniArray</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="371">
          <name>$configurationPiece</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="eZ\Publish\Core\Base" line="398" package="Default">
        <name>storeCache</name>
        <type>function</type>
        <docblock line="392">
          <description><![CDATA[Store cache file, overwrites any existing file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="392" name="param" description="As generated by {@link createCacheName()}" type="string" variable="$cacheName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="392" name="param" description="As generated by {@link generateRawData()}" type="array" variable="$rawData">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="398">
          <name>$cacheName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="398">
          <name>$rawData</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="442" package="Default">
        <name>get</name>
        <type>function</type>
        <docblock line="433">
          <description><![CDATA[Gets a configuration value, or $fallBackValue if undefined
Triggers warning if key is not set and $fallBackValue is null]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="433" name="param" description="The configuration section to get value for" type="string" variable="$section">
            <type by_reference="false">string</type>
          </tag>
          <tag line="433" name="param" description="The configuration key to get value for" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="433" name="param" description="value to return if setting is undefined." type="mixed" variable="$fallBackValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="433" name="return" description="(null if key is undefined and no $fallBackValue is provided)" type="mixed|null">
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="442">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="442">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="442">
          <name>$fallBackValue</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="463" package="Default">
        <name>getSection</name>
        <type>function</type>
        <docblock line="455">
          <description><![CDATA[Gets a configuration values for a section or $fallBackValue if undefined
Triggers warning if section is not set and $fallBackValue is null]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="455" name="param" description="The configuration section to get value for" type="string" variable="$section">
            <type by_reference="false">string</type>
          </tag>
          <tag line="455" name="param" description="value to return if section is undefined." type="mixed" variable="$fallBackValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="455" name="return" description="(null if key is undefined and no $fallBackValue is provided)" type="array|null">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="463">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="463">
          <name>$fallBackValue</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="481" package="Default">
        <name>getAll</name>
        <type>function</type>
        <docblock line="476">
          <description><![CDATA[Gets all section and configuration value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="476" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="494" package="Default">
        <name>set</name>
        <type>function</type>
        <docblock line="486">
          <description><![CDATA[Gets a configuration value, or null if not set.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="486" name="param" description="The configuration section to get value for" type="string" variable="$section">
            <type by_reference="false">string</type>
          </tag>
          <tag line="486" name="param" description="The configuration key to get value for" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="486" name="param" description="value to return if setting is not defined." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="486" name="return" description="Return true if section existed and was overwritten" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="494">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="494">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="494">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="513" package="Default">
        <name>has</name>
        <type>function</type>
        <docblock line="506">
          <description><![CDATA[Checks if a configuration section and optionally key is set.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="506" name="param" description="" type="string" variable="$section">
            <type by_reference="false">string</type>
          </tag>
          <tag line="506" name="param" description="Optional, only checks if section exists if null" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="506" name="return" description="Return true if setting exist" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="513">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="513">
          <name>$key</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="529" package="Default">
        <name>hasValue</name>
        <type>function</type>
        <docblock line="521">
          <description><![CDATA[Checks if a configuration section & key is set and has a value.]]></description>
          <long-description><![CDATA[<p>(ie. a check using !empty())</p>]]></long-description>
          <tag line="521" name="param" description="" type="string" variable="$section">
            <type by_reference="false">string</type>
          </tag>
          <tag line="521" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="521" name="return" description="Return true if setting exist and has value" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="529">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="529">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/Exception.php" hash="c2f33cd18aa7a17cd99d6cae8542a347">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Exception.php</error>
    </parse_markers>
    <interface namespace="eZ\Publish\Core\Base" line="20" package="Default">
      <name>Exception</name>
      <full_name>\eZ\Publish\Core\Base\Exception</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Provides the Exception interface for eZ Publish]]></description>
        <long-description><![CDATA[<p>Makes it possible to catch eZ Publish exceptions.</p>]]></long-description>
        <tag line="12" name="use" description=": class MyException extends SomeSplException implements eZ\Publish\Core\Base\Exception"/>
      </docblock>
    </interface>
  </file>
  <file path="eZ/Publish/Core/Base/Configuration/Parser.php" hash="0cfa804d8ef99eaab9501c39bea9f5a0">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Configuration/Parser.php</error>
    </parse_markers>
    <interface namespace="eZ\Publish\Core\Base\Configuration" line="16" package="Default">
      <name>Parser</name>
      <full_name>\eZ\Publish\Core\Base\Configuration\Parser</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Configuration Interfaces for configuration parser & writer]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Configuration" line="23" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Construct an instance of Parser]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="" type="array" variable="$globalConfiguration">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$globalConfiguration</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Configuration" line="62" package="Default">
        <name>parse</name>
        <type>function</type>
        <docblock line="25">
          <description><![CDATA[Parse file and return raw configuration data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="param" description="A valid file name" type="string" variable="$fileName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="25" name="param" description="" type="string" variable="$fileContent">
            <type by_reference="false">string</type>
          </tag>
          <tag line="25" name="return" description="A plain array structure of configuration data where array clearing is marked with {@link Configuration::TEMP_INI_UNSET_VAR} and php variables are plain php values(numbers, floats, true and false). In addition strings are rtrimmed to avoid common user mistakes when dealing with configuration data (trailing whitespace). eg (ini example): [section] list[] list[]=item list[]=false var=true num=2 float=1.2 string=1,5 Result: array( 'section' =&gt; array( 'list' =&gt; array( '__UNSET__', 'item', false, ), 'var' =&gt; true, 'num' =&gt; 2, 'float' =&gt; 1.2, 'string' =&gt; '1,5', ) )" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="25" name="todo" description="Define exceptions"/>
        </docblock>
        <argument line="62">
          <name>$fileName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="62">
          <name>$fileContent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Configuration" line="73" package="Default">
        <name>write</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Store raw configuration data to file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="see" description="\eZ\Publish\Core\Base\Configuration\parse()" refers="\eZ\Publish\Core\Base\Configuration\parse()"/>
          <tag line="64" name="param" description="A valid file name, will be overwritten if it exists" type="string" variable="$fileName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="64" name="param" description="" type="array" variable="$configurationData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="64" name="todo" description="Define exceptions"/>
        </docblock>
        <argument line="73">
          <name>$fileName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="73">
          <name>$configurationData</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/Core/Base/Configuration/Parser/Ini.php" hash="d8f77795c3e571a482d1a7416e39cf5a">
    <parse_markers>
      <critical line="55" code="50019">No short description for property $filePermission</critical>
      <critical line="60" code="50019">No short description for property $dirPermission</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Configuration/Parser/Ini.php</error>
    </parse_markers>
    <namespace-alias name="Configuration">eZ\Publish\Core\Base\Configuration</namespace-alias>
    <namespace-alias name="Parser">eZ\Publish\Core\Base\Configuration\Parser</namespace-alias>
    <namespace-alias name="Logic">eZ\Publish\Core\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="ezcConfiguration">ezcConfiguration</namespace-alias>
    <namespace-alias name="ezcConfigurationIniReader">ezcConfigurationIniReader</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base\Configuration\Parser" line="22" package="Default">
      <name>Ini</name>
      <full_name>\eZ\Publish\Core\Base\Configuration\Parser\Ini</full_name>
      <extends/>
      <extends>\eZ\Publish\Core\Base\Configuration\Parser</extends>
      <docblock line="19">
        <description><![CDATA[Configuration Ini Parser / writer]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="eZ\Publish\Core\Base\Configuration\Parser" line="30" package="Default">
        <name>TEMP_INI_TRUE_VAR</name>
        <value><![CDATA['__TRUE__']]></value>
        <docblock line="24">
          <description><![CDATA[Constant string used as a temporary true variable during ini parsing to avoid
parse_ini_file from casting it to 1]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Configuration\Parser" line="38" package="Default">
        <name>TEMP_INI_FALSE_VAR</name>
        <value><![CDATA['__FALSE__']]></value>
        <docblock line="32">
          <description><![CDATA[Constant string used as a temporary false variable during ini parsing to avoid
parse_ini_file from casting it to 0]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Configuration\Parser" line="46" package="Default">
        <name>TEMP_INI_KEY_VAR</name>
        <value><![CDATA['__KEY__']]></value>
        <docblock line="40">
          <description><![CDATA[Constant string used as a temporary array key separator when merging several dimensions
for php_ini_string support, {@see parsePhpPostArrayFilter()} & {@see parserPhpDimensionArraySupport()}]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="53" package="Default">
        <name>$strictMode</name>
        <default><![CDATA[false]]></default>
        <docblock line="48">
          <description><![CDATA[Defines if strict mode should be used (parse_ini_string), otherwise use ezcConfigurationIniReader]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" package="Default">
        <name>$filePermission</name>
        <default><![CDATA[0644]]></default>
        <docblock line="55">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" package="Default">
        <name>$dirPermission</name>
        <default><![CDATA[0755]]></default>
        <docblock line="60">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Configuration\Parser" line="70" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Construct an instance of Ini Parser]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="param" description="" type="array" variable="$globalConfiguration">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$globalConfiguration</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Configuration\Parser" line="91" package="Default">
        <name>parse</name>
        <type>function</type>
        <docblock line="82">
          <description><![CDATA[Parse file and return raw configuration data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="todo" description="Change impl to use exceptions instead of trigger_error in most cases"/>
          <tag line="82" name="param" description="A valid file name" type="string" variable="$fileName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="82" name="param" description="" type="string" variable="$fileContent">
            <type by_reference="false">string</type>
          </tag>
          <tag line="82" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$fileName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="91">
          <name>$fileContent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="eZ\Publish\Core\Base\Configuration\Parser" line="119" package="Default">
        <name>parseFilePhp</name>
        <type>function</type>
        <docblock line="110">
          <description><![CDATA[Parse configuration file using parse_ini_string (only supported on php 5.3 and up)]]></description>
          <long-description><![CDATA[<p>This parser is stricter then ezcConfigurationIniReader and does not support many of
the ini files eZ Publish use because things like regex as ini variable and so on.</p>]]></long-description>
          <tag line="110" name="param" description="" type="string" variable="$fileContent">
            <type by_reference="false">string</type>
          </tag>
          <tag line="110" name="return" description="Data structure for parsed ini file or false if it fails" type="array|false">
            <type by_reference="false">array</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$fileContent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="eZ\Publish\Core\Base\Configuration\Parser" line="165" package="Default">
        <name>parseFileEzc</name>
        <type>function</type>
        <docblock line="157">
          <description><![CDATA[Parse configuration file using ezcConfigurationIniReader]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="157" name="todo" description="Change impl to use exceptions instead of trigger_error"/>
          <tag line="157" name="param" description="" type="string" variable="$fileContent">
            <type by_reference="false">string</type>
          </tag>
          <tag line="157" name="return" description="Data structure for parsed ini file" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="165">
          <name>$fileContent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="eZ\Publish\Core\Base\Configuration\Parser" line="237" package="Default">
        <name>parserPhpDimensionArraySupport</name>
        <type>function</type>
        <docblock line="229">
          <description><![CDATA[Pre processing needed for php ini parsers to support three dimensional arrays]]></description>
          <long-description><![CDATA[<p>Injects constants which is later cleaned up in {@link parsePhpPostArrayFilter()}.</p>]]></long-description>
          <tag line="229" name="param" description="" type="string" variable="$fileContent">
            <type by_reference="false">string</type>
          </tag>
          <tag line="229" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="237">
          <name>$fileContent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="eZ\Publish\Core\Base\Configuration\Parser" line="287" package="Default">
        <name>parsePhpPostFilter</name>
        <type>function</type>
        <docblock line="280">
          <description><![CDATA[Transform temporary values the php equivalent to make sure parsed ini settings
are the same as with ezcConfigurationIniReader.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="280" name="param" description="" type="mixed" variable="$iniValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="280" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="287">
          <name>$iniValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="eZ\Publish\Core\Base\Configuration\Parser" line="318" package="Default">
        <name>parsePhpPostArrayFilter</name>
        <type>function</type>
        <docblock line="309">
          <description><![CDATA[Transform temporary array values the php equivalent to make sure parsed ini settings
are the same as with ezcConfigurationIniReader.]]></description>
          <long-description><![CDATA[<p>Deals specifically with post parse fixes for three dimensional arrays.</p>]]></long-description>
          <tag line="309" name="param" description="" type="array" variable="$array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="309" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="318">
          <name>$array</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="eZ\Publish\Core\Base\Configuration\Parser" line="385" package="Default">
        <name>parserClearArraySupport</name>
        <type>function</type>
        <docblock line="377">
          <description><![CDATA[Common pre processing needed for both ezc and php parsers]]></description>
          <long-description><![CDATA[<p>Marks array clearing, so post parser code in {@link Configuration::parse()} can detect it</p>]]></long-description>
          <tag line="377" name="param" description="" type="string" variable="$fileContent">
            <type by_reference="false">string</type>
          </tag>
          <tag line="377" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="385">
          <name>$fileContent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Configuration\Parser" line="405" package="Default">
        <name>write</name>
        <type>function</type>
        <docblock line="397">
          <description><![CDATA[Store raw configuration data to file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="397" name="see" description="\eZ\Publish\Core\Base\Configuration\Parser::parse()" refers="\eZ\Publish\Core\Base\Configuration\Parser::parse()"/>
          <tag line="397" name="todo" description="Test.."/>
          <tag line="397" name="param" description="A valid file name, will be overwritten if it exists" type="string" variable="$fileName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="397" name="param" description="" type="array" variable="$configurationData">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="405">
          <name>$fileName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="405">
          <name>$configurationData</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/Exception/PropertyNull.php" hash="cf08d90bb75340a160204647a48086e0">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Exception/PropertyNull.php</error>
    </parse_markers>
    <namespace-alias name="Exception">eZ\Publish\Core\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base\Exception" line="22" package="Default">
      <name>PropertyNull</name>
      <full_name>\eZ\Publish\Core\Base\Exception\PropertyNull</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\eZ\Publish\Core\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[PropertyNull Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new PropertyNull( 'nodeId', <strong>CLASS</strong> );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: Property '{$propertyName}' did not have a value[ on class '{$className}']]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Optionally to specify class in abstract/parent classes" type="string|null" variable="$className">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$className</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/Exception/NotFound.php" hash="a710f8b3c34fa39314eb6b99d75b2285">
    <parse_markers>
      <error line="34" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Exception/NotFound.php</error>
    </parse_markers>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base\Exception" line="20" package="Default">
      <name>NotFound</name>
      <full_name>\eZ\Publish\Core\Base\Exception\NotFound</full_name>
      <extends>\eZ\Publish\Core\Base\Exception\Http</extends>
      <docblock line="13">
        <description><![CDATA[Not Found Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new NotFound( 'Content', 42 );</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="26" package="Default">
        <name>$what</name>
        <default><![CDATA[]]></default>
        <docblock line="22">
          <description><![CDATA[What was not found]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="28">
          <description><![CDATA[Identifier of what was not found]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Exception" line="41" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Generates: Could not find '{$what}' with identifier '{$identifier}']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="" type="mixed" variable="$identifier">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="34" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$what</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="41">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="41">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/Exception/PropertyType.php" hash="513a425089912796c6d0869c75d0d217">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Exception/PropertyType.php</error>
    </parse_markers>
    <namespace-alias name="Exception">eZ\Publish\Core\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base\Exception" line="22" package="Default">
      <name>PropertyType</name>
      <full_name>\eZ\Publish\Core\Base\Exception\PropertyType</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\eZ\Publish\Core\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Property Type Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new PropertyType( 'nodeId', 'int', <strong>CLASS</strong> );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Exception" line="32" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: Property '{$propertyName}' can only be of type '{$type}']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Optionally to specify class in abstract/parent classes" type="string|null" variable="$className">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$className</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/Exception/BadConfiguration.php" hash="f5f10bf15b87b595099cf755a8dbbb1f">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Exception/BadConfiguration.php</error>
    </parse_markers>
    <namespace-alias name="Exception">eZ\Publish\Core\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="LogicException">LogicException</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base\Exception" line="22" package="Default">
      <name>BadConfiguration</name>
      <full_name>\eZ\Publish\Core\Base\Exception\BadConfiguration</full_name>
      <extends>\LogicException</extends>
      <extends>\eZ\Publish\Core\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[BadConfiguration Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new BadConfiguration( "base&#92;[configuration]&#92;parsers", "could not parse configuration files" );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: '$setting' setting is invalid[, $consequence]]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$setting">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Optional string to explain consequence of configuration mistake" type="string|null" variable="$consequence">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$setting</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$consequence</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/Exception/MissingClass.php" hash="6b21d5fe33b6cc23260943cb1dc1c2d5">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Exception/MissingClass.php</error>
    </parse_markers>
    <namespace-alias name="Exception">eZ\Publish\Core\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="LogicException">LogicException</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base\Exception" line="22" package="Default">
      <name>MissingClass</name>
      <full_name>\eZ\Publish\Core\Base\Exception\MissingClass</full_name>
      <extends>\LogicException</extends>
      <extends>\eZ\Publish\Core\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[MissingClass Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new MissingClass( $className, 'field type' );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: Could not find[ {$classType}] class '{$className}']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Optional string to specify what kind of class this is" type="string|null" variable="$classType">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$className</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$classType</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/Exception/Http.php" hash="3a784bd0976ca9146323693d1dbaf0a4">
    <parse_markers>
      <error line="39" code="50012">No short description for method __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Exception/Http.php</error>
    </parse_markers>
    <namespace-alias name="Exception">eZ\Publish\Core\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="RuntimeException">RuntimeException</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\Core\Base\Exception" line="21" package="Default">
      <name>Http</name>
      <full_name>\eZ\Publish\Core\Base\Exception\Http</full_name>
      <extends>\RuntimeException</extends>
      <extends>\eZ\Publish\Core\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Abstract Http Exception implementation]]></description>
        <long-description><![CDATA[<p>Exceptions that map to any of the http errors should extend this class.</p>]]></long-description>
      </docblock>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="23">
        <name>BAD_REQUEST</name>
        <value><![CDATA[400]]></value>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="24">
        <name>UNAUTHORIZED</name>
        <value><![CDATA[401]]></value>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="25">
        <name>PAYMENT_REQUIRED</name>
        <value><![CDATA[402]]></value>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="26">
        <name>FORBIDDEN</name>
        <value><![CDATA[403]]></value>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="27">
        <name>NOT_FOUND</name>
        <value><![CDATA[404]]></value>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="28">
        <name>METHOD_NOT_ALLOWED</name>
        <value><![CDATA[405]]></value>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="29">
        <name>NOT_ACCEPTABLE</name>
        <value><![CDATA[406]]></value>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="30">
        <name>CONFLICT</name>
        <value><![CDATA[409]]></value>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="31">
        <name>GONE</name>
        <value><![CDATA[410]]></value>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="33">
        <name>UNSUPPORTED_MEDIA_TYPE</name>
        <value><![CDATA[415]]></value>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="35">
        <name>INTERNAL_ERROR</name>
        <value><![CDATA[500]]></value>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="36">
        <name>NOT_IMPLEMENTED</name>
        <value><![CDATA[501]]></value>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="37">
        <name>SERVICE_UNAVAILABLE</name>
        <value><![CDATA[503]]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Exception" line="44" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="39" name="param" description="Must be one of the available constants on this class" type="int" variable="$code">
            <type by_reference="false">int</type>
          </tag>
          <tag line="39" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$message</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="44">
          <name>$code</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="44">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/Exception/PropertyPermission.php" hash="37c894bfa2bbfedeba7ccd8c5cd01774">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Exception/PropertyPermission.php</error>
    </parse_markers>
    <namespace-alias name="Exception">eZ\Publish\Core\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base\Exception" line="22" package="Default">
      <name>PropertyPermission</name>
      <full_name>\eZ\Publish\Core\Base\Exception\PropertyPermission</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\eZ\Publish\Core\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Property Permission Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new PropertyPermission( 'nodeId', PropertyPermission::READ, <strong>CLASS</strong> );</p>]]></long-description>
      </docblock>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="27" package="Default">
        <name>READ</name>
        <value><![CDATA['readable']]></value>
        <docblock line="24">
          <description><![CDATA[Used when the property is not readable]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\Core\Base\Exception" line="32" package="Default">
        <name>WRITE</name>
        <value><![CDATA['writable']]></value>
        <docblock line="29">
          <description><![CDATA[Used when the property is not writable]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Exception" line="42" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Generates: Property '{$propertyName}' is not {$mode}]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="" type="string" variable="$mode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="Optionally to specify class in abstract/parent classes" type="string|null" variable="$className">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="34" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$mode</name>
          <default><![CDATA[self::READ]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$className</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/Exception/Logic.php" hash="9756322c1b94714eaf02aa23952f239f">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Exception/Logic.php</error>
    </parse_markers>
    <namespace-alias name="Exception">eZ\Publish\Core\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="LogicException">LogicException</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base\Exception" line="22" package="Default">
      <name>Logic</name>
      <full_name>\eZ\Publish\Core\Base\Exception\Logic</full_name>
      <extends>\LogicException</extends>
      <extends>\eZ\Publish\Core\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Logic Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new Logic( "readWriteProperties", "property {$property} could not be found." );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: '$what' has a logic error[, $consequence]]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Optional string to explain consequence of configuration mistake" type="string|null" variable="$consequence">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$what</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$consequence</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/Exception/InvalidArgumentValue.php" hash="0742a6bd3edd58504955cadbf7509463">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Exception/InvalidArgumentValue.php</error>
    </parse_markers>
    <namespace-alias name="Exception">eZ\Publish\Core\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base\Exception" line="21" package="Default">
      <name>InvalidArgumentValue</name>
      <full_name>\eZ\Publish\Core\Base\Exception\InvalidArgumentValue</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\eZ\Publish\Core\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Invalid Argument Type Exception implementation]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="use" description=": throw new InvalidArgument( 'nodes', 'array' );"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Generates: Argument '{$argumentName}' got invalid value '{$value}']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="string" variable="$argumentName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="23" name="param" description="Optionally to specify class in abstract/parent classes" type="string|null" variable="$className">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="23" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$argumentName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$className</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/Exception/PropertyNotFound.php" hash="ad0df3f211cafeb5e6bc77ab9766b8bf">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/Exception/PropertyNotFound.php</error>
    </parse_markers>
    <namespace-alias name="Exception">eZ\Publish\Core\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base\Exception" line="22" package="Default">
      <name>PropertyNotFound</name>
      <full_name>\eZ\Publish\Core\Base\Exception\PropertyNotFound</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\eZ\Publish\Core\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Property Not Found Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new PropertyNotFound( 'nodeId', <strong>CLASS</strong> );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: Property '{$propertyName}' not found]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Optionally to specify class in abstract/parent classes" type="string|null" variable="$className">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$className</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/ClassLoader.php" hash="f33b0789a00f5b955e91b394fd51a7c6">
    <parse_markers>
      <critical line="38" code="50019">No short description for property $repositories</critical>
      <critical line="43" code="50019">No short description for property $mode</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/ClassLoader.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base" line="24" package="Default">
      <name>ClassLoader</name>
      <full_name>\eZ\Publish\Core\Base\ClassLoader</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Provides PSR-0 ClassLoader]]></description>
        <long-description><![CDATA[<p>Use:
require 'eZ/Publish/Core/Base/ClassLoader.php'
spl_autoload_register( array( new eZ\Publish\Core\Base\ClassLoader(
    array(
        'Vendor&#92;Module' => 'Vendor/Module'
    )[,
    eZ\Publish\Core\Base\ClassLoader::MODE_PSR_0_STRICT] // optional strict mode where underscore is ignored
), 'load' ) );</p>]]></long-description>
      </docblock>
      <constant namespace="eZ\Publish\Core\Base" line="30" package="Default">
        <name>MODE_PSR_0_STRICT</name>
        <value><![CDATA[1]]></value>
        <docblock line="26">
          <description><![CDATA[Mode for "PSR-0 strict", where underscore is ignored]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\Core\Base" line="36" package="Default">
        <name>MODE_SKIP_FILE_CHECK</name>
        <value><![CDATA[2]]></value>
        <docblock line="32">
          <description><![CDATA[Skip doing a file_exists() check on matching namespaces]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$repositories</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$mode</name>
        <default><![CDATA[]]></default>
        <docblock line="43">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="54" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[Construct a autoload instance]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="param" description="containing namespace as key and path as value" type="array" variable="$repositories">
            <type by_reference="false">array</type>
          </tag>
          <tag line="48" name="param" description="One or more of of the MODE constance, these are opt-in to make class loader stricter" type="int" variable="$mode">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$repositories</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="54">
          <name>$mode</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="66" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Autoload classes following PSR-0 naming]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="param" description="" type="" variable="$className"/>
          <tag line="60" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$className</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/Base/ConfigurationManager.php" hash="542504db9d5bf1016f96663a72af672e">
    <parse_markers>
      <error line="67" code="50015">Argument $globalPaths is missing from the Docblock of __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/Base/ConfigurationManager.php</error>
    </parse_markers>
    <namespace-alias name="InvalidArgumentValue">eZ\Publish\Core\Base\Exception\InvalidArgumentValue</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\Base" line="37" package="Default">
      <name>ConfigurationManager</name>
      <full_name>\eZ\Publish\Core\Base\ConfigurationManager</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[Configuration manager class]]></description>
        <long-description><![CDATA[<p>Setup:</p>

<pre><code>// Setup global configuration that needs to be defined before loading setting files
$manager = new ConfigurationManager( include 'config.php' );
</code></pre>

<p>Usage:</p>

<pre><code>// Default value on $module is 'base', so this will parse base.ini[.append.php] files given setup above
$bool = $manager-&gt;getConfiguration('base')-&gt;get( 'ClassLoader', 'Repositories' );
</code></pre>

<p>Usage2:</p>

<pre><code>$array = $manager-&gt;getConfiguration( 'content' )-&gt;get( 'Fields', 'Type' );
</code></pre>]]></long-description>
        <tag line="15" name="uses" description="\ezcPhpGenerator" refers="\ezcPhpGenerator"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="51" package="Default">
        <name>$globalPaths</name>
        <default><![CDATA[]]></default>
        <docblock line="39">
          <description><![CDATA[The global configuration path array, scoped in the order they should be parsed]]></description>
          <long-description><![CDATA[<p>Usually something like:
array(
   'base' => array( 'settings/' ),
   'modules' => array(),
   'access' => array(),
   'global' => array( 'settings/override/' ),
 )</p>]]></long-description>
          <tag line="39" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" package="Default">
        <name>$globalConfiguration</name>
        <default><![CDATA[array()]]></default>
        <docblock line="53">
          <description><![CDATA[The global configuration data (overrides all other configuration)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="65" package="Default">
        <name>$instances</name>
        <default><![CDATA[array()]]></default>
        <docblock line="60">
          <description><![CDATA[List of instances pr settings type (array key).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="var" description="" type="\eZ\Publish\Core\Base\Configuration[]">
            <type by_reference="false">\eZ\Publish\Core\Base\Configuration[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="72" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Create a instance of Configuration Manager]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="param" description="" type="array" variable="$globalConfiguration">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$globalConfiguration</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="74">
          <name>$globalPaths</name>
          <default><![CDATA[array(
             'base' => array( 'settings/' ),
             'modules' => array( 'eZ/Publish/Core/settings/' ),
             'access' => array(),
             'global' => array( 'settings/override/' ),
        )]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="93" package="Default">
        <name>getConfiguration</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[Get configuration instance and load it automatically]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="uses" description="\eZ\Publish\Core\Base\load()" refers="\eZ\Publish\Core\Base\load()"/>
          <tag line="86" name="param" description="The name of the module (w/o .ini suffix as we would want to support other formats in the future)" type="string" variable="$moduleName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="86" name="return" description="" type="\eZ\Publish\Core\Base\Configuration">
            <type by_reference="false">\eZ\Publish\Core\Base\Configuration</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$moduleName</name>
          <default><![CDATA['base']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="112" package="Default">
        <name>getGlobalConfiguration</name>
        <type>function</type>
        <docblock line="107">
          <description><![CDATA[Get global configuration data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="107" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="124" package="Default">
        <name>getGlobalDirs</name>
        <type>function</type>
        <docblock line="117">
          <description><![CDATA[Get raw global override path list data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="117" name="throws" description="If scope has wrong value" type="\eZ\Publish\Core\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\eZ\Publish\Core\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="117" name="param" description="See {@link $globalPaths} for scope values (first level keys)" type="string" variable="$scope">
            <type by_reference="false">string</type>
          </tag>
          <tag line="117" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$scope</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="144" package="Default">
        <name>setGlobalDirs</name>
        <type>function</type>
        <docblock line="134">
          <description><![CDATA[Set raw global override path list data.]]></description>
          <long-description><![CDATA[<p>Note: Full reset of Configuration instances are done when this function is called.</p>]]></long-description>
          <tag line="134" name="throws" description="If scope has wrong value" type="\eZ\Publish\Core\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\eZ\Publish\Core\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="134" name="param" description="" type="array" variable="$paths">
            <type by_reference="false">array</type>
          </tag>
          <tag line="134" name="param" description="See {@link $globalPaths} for scope values (first level keys)" type="string" variable="$scope">
            <type by_reference="false">string</type>
          </tag>
          <tag line="134" name="return" description="Return true if paths actually changed, and thus instances where reset." type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$paths</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="144">
          <name>$scope</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\Base" line="174" package="Default">
        <name>reset</name>
        <type>function</type>
        <docblock line="169">
          <description><![CDATA[Reset instance list, in most cases it should be enough to call reloadAll]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="169" name="param" description="Optionally Reset a specific instance if string" type="string|null" variable="$moduleName">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$moduleName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/API/Content/SectionService.php" hash="67dde796dcbf7b858b74a38fb6900fcf" package="eZ\Publish\Core\API">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\Core\API"/>
    </docblock>
    <parse_markers>
      <critical line="29" code="50019">No short description for property $repository</critical>
      <critical line="34" code="50019">No short description for property $handler</critical>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $repository in __construct()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $handler in __construct()</error>
      <critical line="2" code="50008">No short description for file eZ/Publish/Core/API/Content/SectionService.php</critical>
    </parse_markers>
    <namespace-alias name="SectionCreateStruct">eZ\Publish\API\Repository\Values\Content\SectionCreateStruct</namespace-alias>
    <namespace-alias name="NotFound">eZ\Publish\Core\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">eZ\Publish\Core\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="PersistenceInvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="PersistenceNotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="Content">eZ\Publish\API\Repository\Values\Content\Content</namespace-alias>
    <namespace-alias name="ContentInfo">eZ\Publish\API\Repository\Values\Content\ContentInfo</namespace-alias>
    <namespace-alias name="Section">eZ\Publish\API\Repository\Values\Content\Section</namespace-alias>
    <namespace-alias name="Location">eZ\Publish\API\Repository\Values\Content\Location</namespace-alias>
    <namespace-alias name="SectionUpdateStruct">eZ\Publish\API\Repository\Values\Content\SectionUpdateStruct</namespace-alias>
    <namespace-alias name="SectionServiceInterface">eZ\Publish\API\Repository\SectionService</namespace-alias>
    <namespace-alias name="Handler">ezp\Persistence\Handler</namespace-alias>
    <namespace-alias name="RepositoryInterface">eZ\Publish\API\Repository\Repository</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\API\Content" line="27" package="eZ\Publish\Core\API">
      <name>SectionService</name>
      <full_name>\eZ\Publish\Core\API\Content\SectionService</full_name>
      <extends/>
      <extends>\eZ\Publish\API\Repository\SectionService</extends>
      <docblock line="22">
        <description><![CDATA[Section service, used for section operations]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="22" name="package" description="eZ\Publish\Core\API"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="32" package="Default">
        <name>$repository</name>
        <default><![CDATA[]]></default>
        <docblock line="29">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="var" description="" type="\eZ\Publish\API\Repository\Repository">
            <type by_reference="false">\eZ\Publish\API\Repository\Repository</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="34">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="\ezp\Persistence\Handler">
            <type by_reference="false">\ezp\Persistence\Handler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API\Content" line="45" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Setups service with reference to repository object that created it & corresponding handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="" type="\eZ\Publish\API\Repository\Repository" variable="$repository">
            <type by_reference="false">\eZ\Publish\API\Repository\Repository</type>
          </tag>
          <tag line="39" name="param" description="" type="\ezp\Persistence\Handler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Handler</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>RepositoryInterface</type>
        </argument>
        <argument line="45">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>Handler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API\Content" line="61" package="Default">
        <name>createSection</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Creates the a new Section in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\SectionCreateStruct" variable="$sectionCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\SectionCreateStruct</type>
          </tag>
          <tag line="51" name="return" description="The newly create section" type="\eZ\Publish\API\Repository\Values\Content\Section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
          <tag line="51" name="throws" description="If the current user user is not allowed to create a section" type="\eZ\Publish\API\Repository\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\UnauthorizedException</type>
          </tag>
          <tag line="51" name="throws" description="If the new identifier in $sectionCreateStruct already exists" type="\eZ\Publish\API\Repository\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\IllegalArgumentException</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$sectionCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>SectionCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API\Content" line="97" package="Default">
        <name>updateSection</name>
        <type>function</type>
        <docblock line="85">
          <description><![CDATA[Updates the given in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Section" variable="$section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
          <tag line="85" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\SectionUpdateStruct" variable="$sectionUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\SectionUpdateStruct</type>
          </tag>
          <tag line="85" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
          <tag line="85" name="throws" description="if section could not be found" type="\eZ\Publish\API\Repository\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\NotFoundException</type>
          </tag>
          <tag line="85" name="throws" description="If the current user user is not allowed to create a section" type="\eZ\Publish\API\Repository\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\UnauthorizedException</type>
          </tag>
          <tag line="85" name="throws" description="If the new identifier already exists (if set in the update struct)" type="\eZ\Publish\API\Repository\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\IllegalArgumentException</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
        <argument line="97">
          <name>$sectionUpdateStruct</name>
          <default><![CDATA[]]></default>
          <type>SectionUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API\Content" line="136" package="Default">
        <name>loadSection</name>
        <type>function</type>
        <docblock line="126">
          <description><![CDATA[Loads a Section from its id ($sectionId)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="126" name="param" description="" type="int" variable="$sectionId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="126" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
          <tag line="126" name="throws" description="if section could not be found" type="\eZ\Publish\API\Repository\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\NotFoundException</type>
          </tag>
          <tag line="126" name="throws" description="If the current user user is not allowed to read a section" type="\eZ\Publish\API\Repository\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\UnauthorizedException</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API\Content" line="157" package="Default">
        <name>loadSections</name>
        <type>function</type>
        <docblock line="150">
          <description><![CDATA[Loads all sections]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="150" name="return" description="of {@link Section}" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="150" name="throws" description="If the current user user is not allowed to read a section" type="\eZ\Publish\API\Repository\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\UnauthorizedException</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API\Content" line="187" package="Default">
        <name>loadSectionByIdentifier</name>
        <type>function</type>
        <docblock line="177">
          <description><![CDATA[Loads a Section from its identifier ($sectionIdentifier)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="177" name="param" description="" type="string" variable="$sectionIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="177" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
          <tag line="177" name="throws" description="if section could not be found" type="\eZ\Publish\API\Repository\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\NotFoundException</type>
          </tag>
          <tag line="177" name="throws" description="If the current user user is not allowed to read a section" type="\eZ\Publish\API\Repository\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\UnauthorizedException</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$sectionIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API\Content" line="203" package="Default">
        <name>countAssignedContents</name>
        <type>function</type>
        <docblock line="196">
          <description><![CDATA[Counts the contents which $section is assigned to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="196" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Section" variable="$section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
          <tag line="196" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="203">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API\Content" line="217" package="Default">
        <name>assignSection</name>
        <type>function</type>
        <docblock line="208">
          <description><![CDATA[assigns the content to the given section
this method overrides the current assigned section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="208" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="208" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Section" variable="$section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
          <tag line="208" name="throws" description="If user does not have access to view provided object" type="\eZ\Publish\API\Repository\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\UnauthorizedException</type>
          </tag>
        </docblock>
        <argument line="217">
          <name>$contentInfo</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
        <argument line="217">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API\Content" line="232" package="Default">
        <name>assignSectionToSubTree</name>
        <type>function</type>
        <docblock line="219">
          <description><![CDATA[Assigns $section to the contents held by $startingPoint location and
all contents held by descendants locations of $startingPoint to which the user has
the permission to assign a section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="219" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$startingPoint">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
          <tag line="219" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Section" variable="$section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
          <tag line="219" name="return" description="a list (string) of descendants which are not changed due to permissions" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="219" name="throws" description="If the current user is not allowed to assign a section to the starting point" type="\eZ\Publish\API\Repository\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\UnauthorizedException</type>
          </tag>
        </docblock>
        <argument line="232">
          <name>$startingPoint</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
        <argument line="232">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API\Content" line="244" package="Default">
        <name>deleteSection</name>
        <type>function</type>
        <docblock line="234">
          <description><![CDATA[Deletes $section from content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="234" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Section" variable="$section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
          <tag line="234" name="throws" description="If the specified section is not found" type="\eZ\Publish\API\Repository\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\NotFoundException</type>
          </tag>
          <tag line="234" name="throws" description="If the current user user is not allowed to delete a section" type="\eZ\Publish\API\Repository\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\UnauthorizedException</type>
          </tag>
          <tag line="234" name="throws" description="if section can not be deleted because it is still assigned to some contents." type="\eZ\Publish\API\Repository\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\BadStateException</type>
          </tag>
        </docblock>
        <argument line="244">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API\Content" line="263" package="Default">
        <name>newSectionCreateStruct</name>
        <type>function</type>
        <docblock line="258">
          <description><![CDATA[instanciates a new SectionCreateStruct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="258" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\SectionCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\SectionCreateStruct</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API\Content" line="270" package="Default">
        <name>newSectionUpdateStruct</name>
        <type>function</type>
        <docblock line="265">
          <description><![CDATA[instanciates a new SectionUpdateStruct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="265" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\SectionUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\SectionUpdateStruct</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/Core/API/Repository.php" hash="73ee69e135c56b174bb83115a83c1d67">
    <parse_markers>
      <error line="62" code="50014">Name of argument $persistenceHandler does not match with the DocBlock's name $handler in __construct()</error>
      <error line="62" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $persistenceHandler in __construct()</error>
      <error line="62" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $ioHandler in __construct()</error>
      <notice line="62" code="50013">Parameter $handler could not be found in __construct()</notice>
      <error line="113" code="50012">No short description for method hasAccess()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/Core/API/Repository.php</error>
    </parse_markers>
    <namespace-alias name="BadConfiguration">eZ\Publish\Core\Base\Exception\BadConfiguration</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">eZ\Publish\Core\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="Logic">eZ\Publish\Core\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="IoHandler">ezp\Io\Handler</namespace-alias>
    <namespace-alias name="PersistenceHandler">ezp\Persistence\Handler</namespace-alias>
    <namespace-alias name="RepositoryInterface">eZ\Publish\API\Repository\Repository</namespace-alias>
    <namespace-alias name="ContentService">eZ\Publish\Core\API\Content\ContentService</namespace-alias>
    <namespace-alias name="LanguageService">eZ\Publish\Core\API\Content\LanguageService</namespace-alias>
    <namespace-alias name="LocationService">eZ\Publish\Core\API\Content\LocationService</namespace-alias>
    <namespace-alias name="SectionService">eZ\Publish\Core\API\Content\SectionService</namespace-alias>
    <namespace-alias name="ContentTypeService">eZ\Publish\Core\API\ContentType\ContentTypeService</namespace-alias>
    <namespace-alias name="RoleService">eZ\Publish\Core\API\User\RoleService</namespace-alias>
    <namespace-alias name="UserService">eZ\Publish\Core\API\User\UserService</namespace-alias>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="User">eZ\Publish\API\Repository\Values\User\User</namespace-alias>
    <namespace-alias name="RuntimeException">RuntimeException</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\Core\API" line="32" package="Default">
      <name>Repository</name>
      <full_name>\eZ\Publish\Core\API\Repository</full_name>
      <extends/>
      <extends>\eZ\Publish\API\Repository\Repository</extends>
      <docblock line="28">
        <description><![CDATA[Repository class]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="39" package="Default">
        <name>$persistenceHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="34">
          <description><![CDATA[Repository Handler object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="\ezp\Persistence\Handler">
            <type by_reference="false">\ezp\Persistence\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$ioHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="41">
          <description><![CDATA[Io Handler object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="var" description="" type="\ezp\Io\Handler">
            <type by_reference="false">\ezp\Io\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="53" package="Default">
        <name>$user</name>
        <default><![CDATA[]]></default>
        <docblock line="48">
          <description><![CDATA[Currently logged in user object for permission purposes]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="var" description="" type="\eZ\Publish\API\Repository\Values\User\User">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" package="Default">
        <name>$sectionService</name>
        <default><![CDATA[]]></default>
        <docblock line="55">
          <description><![CDATA[Instance of section service]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="var" description="" type="\eZ\Publish\Core\API\Content\SectionService">
            <type by_reference="false">\eZ\Publish\Core\API\Content\SectionService</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="71" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[<p>Construct repository object with provided storage engine</p>]]></long-description>
          <tag line="62" name="param" description="" type="\ezp\Persistence\Handler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Handler</type>
          </tag>
          <tag line="62" name="param" description="" type="\ezp\Io\Handler" variable="$ioHandler">
            <type by_reference="false">\ezp\Io\Handler</type>
          </tag>
          <tag line="62" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\User|null" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$persistenceHandler</name>
          <default><![CDATA[]]></default>
          <type>PersistenceHandler</type>
        </argument>
        <argument line="71">
          <name>$ioHandler</name>
          <default><![CDATA[]]></default>
          <type>IoHandler</type>
        </argument>
        <argument line="71">
          <name>$user</name>
          <default><![CDATA[null]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="90" package="Default">
        <name>getCurrentUser</name>
        <type>function</type>
        <docblock line="85">
          <description><![CDATA[Get current user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\User">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="103" package="Default">
        <name>setCurrentUser</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Set current user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="95" name="return" description="Old user" type="\eZ\Publish\API\Repository\Values\User\User">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="95" name="throws" description="If provided user does not have a valid id value" type="\eZ\Publish\Core\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\eZ\Publish\Core\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="121" package="Default">
        <name>hasAccess</name>
        <type>function</type>
        <docblock line="113">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="113" name="param" description="" type="string" variable="$module">
            <type by_reference="false">string</type>
          </tag>
          <tag line="113" name="param" description="" type="string" variable="$function">
            <type by_reference="false">string</type>
          </tag>
          <tag line="113" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="113" name="return" description="if limitations are on this function an array of limitations is returned" type="boolean|array">
            <type by_reference="false">boolean</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="121">
          <name>$module</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="121">
          <name>$function</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="121">
          <name>$user</name>
          <default><![CDATA[null]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="140" package="Default">
        <name>canUser</name>
        <type>function</type>
        <docblock line="126">
          <description><![CDATA[Check if current user has access to a certain function on a model]]></description>
          <long-description><![CDATA[<p>Indicates if the current user is allowed to perform an action given by the function on the given
objects</p>]]></long-description>
          <tag line="126" name="param" description="" type="string" variable="$module">
            <type by_reference="false">string</type>
          </tag>
          <tag line="126" name="param" description="" type="string" variable="$function">
            <type by_reference="false">string</type>
          </tag>
          <tag line="126" name="param" description="" type="\eZ\Publish\API\Repository\Values\ValueObject" variable="$value">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ValueObject</type>
          </tag>
          <tag line="126" name="param" description="" type="\eZ\Publish\API\Repository\Values\ValueObject" variable="$target">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ValueObject</type>
          </tag>
          <tag line="126" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="126" name="throws" description="On invalid $function value" type="\eZ\Publish\Core\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\eZ\Publish\Core\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="126" name="throws" description="On limitation used in policies but not in $model::defintion()" type="\eZ\Publish\Core\Base\Exception\Logic">
            <type by_reference="false">\eZ\Publish\Core\Base\Exception\Logic</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$module</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="140">
          <name>$function</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="140">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>ValueObject</type>
        </argument>
        <argument line="140">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type>ValueObject</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="207" package="Default">
        <name>getContentService</name>
        <type>function</type>
        <docblock line="199">
          <description><![CDATA[Get Content Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Content objects and it's aggregate members.</p>]]></long-description>
          <tag line="199" name="return" description="" type="\eZ\Publish\API\Repository\ContentService">
            <type by_reference="false">\eZ\Publish\API\Repository\ContentService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="216" package="Default">
        <name>getContentLanguageService</name>
        <type>function</type>
        <docblock line="209">
          <description><![CDATA[Get Content Language Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Content language objects</p>]]></long-description>
          <tag line="209" name="return" description="" type="\eZ\Publish\API\Repository\LanguageService">
            <type by_reference="false">\eZ\Publish\API\Repository\LanguageService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="226" package="Default">
        <name>getContentTypeService</name>
        <type>function</type>
        <docblock line="218">
          <description><![CDATA[Get Content Type Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Content Type objects and it's aggregate members.
( Group, Field &amp; FieldCategory )</p>]]></long-description>
          <tag line="218" name="return" description="" type="\eZ\Publish\API\Repository\ContentTypeService">
            <type by_reference="false">\eZ\Publish\API\Repository\ContentTypeService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="235" package="Default">
        <name>getLocationService</name>
        <type>function</type>
        <docblock line="228">
          <description><![CDATA[Get Content Location Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Location objects and subtrees</p>]]></long-description>
          <tag line="228" name="return" description="" type="\eZ\Publish\API\Repository\LocationService">
            <type by_reference="false">\eZ\Publish\API\Repository\LocationService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="245" package="Default">
        <name>getTrashService</name>
        <type>function</type>
        <docblock line="237">
          <description><![CDATA[Get Content Trash service]]></description>
          <long-description><![CDATA[<p>Trash service allows to perform operations related to location trash
(trash/untrash, load/list from trash...)</p>]]></long-description>
          <tag line="237" name="return" description="" type="\eZ\Publish\API\Repository\TrashService">
            <type by_reference="false">\eZ\Publish\API\Repository\TrashService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="254" package="Default">
        <name>getSectionService</name>
        <type>function</type>
        <docblock line="247">
          <description><![CDATA[Get Content Section Service]]></description>
          <long-description><![CDATA[<p>Get Section service that lets you manipulate section objects</p>]]></long-description>
          <tag line="247" name="return" description="" type="\eZ\Publish\API\Repository\SectionService">
            <type by_reference="false">\eZ\Publish\API\Repository\SectionService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="270" package="Default">
        <name>getUserService</name>
        <type>function</type>
        <docblock line="263">
          <description><![CDATA[Get User Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Users and UserGroup</p>]]></long-description>
          <tag line="263" name="return" description="" type="\eZ\Publish\API\Repository\UserService">
            <type by_reference="false">\eZ\Publish\API\Repository\UserService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="277" package="Default">
        <name>getRoleService</name>
        <type>function</type>
        <docblock line="272">
          <description><![CDATA[Get RoleService]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="272" name="return" description="" type="\eZ\Publish\API\Repository\RoleService">
            <type by_reference="false">\eZ\Publish\API\Repository\RoleService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="285" package="Default">
        <name>beginTransaction</name>
        <type>function</type>
        <docblock line="279">
          <description><![CDATA[Begin transaction]]></description>
          <long-description><![CDATA[<p>Begins an transaction, make sure you'll call commit or rollback when done,
otherwise work will be lost.</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="297" package="Default">
        <name>commit</name>
        <type>function</type>
        <docblock line="290">
          <description><![CDATA[Commit transaction]]></description>
          <long-description><![CDATA[<p>Commit transaction, or throw exceptions if no transactions has been started.</p>]]></long-description>
          <tag line="290" name="throws" description="If no transaction has been started" type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\Core\API" line="309" package="Default">
        <name>rollback</name>
        <type>function</type>
        <docblock line="302">
          <description><![CDATA[Rollback transaction]]></description>
          <long-description><![CDATA[<p>Rollback transaction, or throw exceptions if no transactions has been started.</p>]]></long-description>
          <tag line="302" name="throws" description="If no transaction has been started" type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/LocationService.php" hash="5886dd25a0bf3303966459d2934e5cae" package="eZ\Publish\API\Repository">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository"/>
    </docblock>
    <parse_markers>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $subtree in copySubtree()</error>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $targetParentLocation in copySubtree()</error>
      <error line="63" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentInfo in loadMainLocation()</error>
      <error line="75" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentInfo in loadLocations()</error>
      <error line="75" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $rootLocation in loadLocations()</error>
      <error line="90" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in loadLocationChildren()</error>
      <error line="102" code="50014">Name of argument $content does not match with the DocBlock's name $contentInfo in createLocation()</error>
      <error line="102" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in createLocation()</error>
      <error line="102" code="50014">Name of argument $locationCreateStruct does not match with the DocBlock's name $location in createLocation()</error>
      <error line="102" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $locationCreateStruct in createLocation()</error>
      <notice line="102" code="50013">Parameter $contentInfo could not be found in createLocation()</notice>
      <notice line="102" code="50013">Parameter $location could not be found in createLocation()</notice>
      <error line="118" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in updateLocation()</error>
      <error line="118" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $locationUpdateStruct in updateLocation()</error>
      <error line="131" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location1 in swapLocation()</error>
      <error line="131" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location2 in swapLocation()</error>
      <error line="141" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in hideLocation()</error>
      <error line="152" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in unhideLocation()</error>
      <error line="166" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in moveSubtree()</error>
      <error line="166" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $newParentLocation in moveSubtree()</error>
      <error line="179" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in deleteLocation()</error>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/LocationService.php</critical>
    </parse_markers>
    <namespace-alias name="LocationUpdateStruct">eZ\Publish\API\Repository\Values\Content\LocationUpdateStruct</namespace-alias>
    <namespace-alias name="LocationCreateStruct">eZ\Publish\API\Repository\Values\Content\LocationCreateStruct</namespace-alias>
    <namespace-alias name="ContentInfo">eZ\Publish\API\Repository\Values\Content\ContentInfo</namespace-alias>
    <namespace-alias name="Location">eZ\Publish\API\Repository\Values\Content\Location</namespace-alias>
    <interface namespace="eZ\Publish\API\Repository" line="19" package="eZ\Publish\API\Repository">
      <name>LocationService</name>
      <full_name>\eZ\Publish\API\Repository\LocationService</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Location service, used for complex subtree operations]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="12" name="example" description="Examples/location.php"/>
        <tag line="12" name="package" description="eZ\Publish\API\Repository"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="37" package="Default">
        <name>copySubtree</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Copies the subtree starting from $subtree as a new subtree of $targetLocation]]></description>
          <long-description><![CDATA[<p>Only the items on which the user has read access are copied.</p>]]></long-description>
          <tag line="21" name="throws" description="If the current user user is not allowed copy the subtree to the given parent location" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="21" name="throws" description="if the target location is a sub location of the given location" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="21" name="param" description="- the subtree denoted by the location to copy" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$subtree">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
          <tag line="21" name="param" description="- the target parent location for the copy operation" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$targetParentLocation">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
          <tag line="21" name="return" description="The newly created location of the copied subtree" type="\eZ\Publish\API\Repository\Values\Content\Location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
          <tag line="21" name="todo" description="enhancement - this method should return a result structure containing the new location and a list&#10;of locations which are not copied due to permission denials."/>
        </docblock>
        <argument line="37">
          <name>$subtree</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
        <argument line="37">
          <name>$targetParentLocation</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="49" package="Default">
        <name>loadLocation</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Loads a location object from its $locationId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="throws" description="If the current user user is not allowed to read this location" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="39" name="throws" description="If the specified location is not found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="39" name="param" description="" type="integer" variable="$locationId">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="39" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="61" package="Default">
        <name>loadLocationByRemoteId</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Loads a location object from its $remoteId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="throws" description="If the current user user is not allowed to read this location" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="51" name="throws" description="If the specified location is not found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="51" name="param" description="" type="string" variable="$remoteId">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$remoteId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="73" package="Default">
        <name>loadMainLocation</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[loads the main loaction of a content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="throws" description="If the current user user is not allowed to read this location" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="63" name="throws" description="if there is no published version yet" type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="63" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="63" name="return" description="(in 5.x the return value also can be null if the content has no location)" type="\eZ\Publish\API\Repository\Values\Content\Location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$contentInfo</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="88" package="Default">
        <name>loadLocations</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Loads the locations for the given content object.]]></description>
          <long-description><![CDATA[<p>If a $rootLocation is given, only locations that belong to this location are returned.
The location list is also filtered by permissions on reading locations.</p>]]></long-description>
          <tag line="75" name="throws" description="if there is no published version yet" type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="75" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="75" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$rootLocation">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
          <tag line="75" name="return" description="an array of {@link Location}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$contentInfo</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
        <argument line="88">
          <name>$rootLocation</name>
          <default><![CDATA[null]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="100" package="Default">
        <name>loadLocationChildren</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Load children which are readable by the current user of a location object sorted by sortField and sortOrder]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
          <tag line="90" name="param" description="the start offset for paging" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="90" name="param" description="the number of locations returned. If $limit = -1 all children starting at $offset are returned" type="int" variable="$limit">
            <type by_reference="false">int</type>
          </tag>
          <tag line="90" name="return" description="of {@link Location}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
        <argument line="100">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="100">
          <name>$limit</name>
          <default><![CDATA[-1]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="116" package="Default">
        <name>createLocation</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Creates the new $location in the content repository for the given content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="throws" description="If the current user user is not allowed to create this location" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="102" name="throws" description="if the content is already below the specified parent or the parent is a sub location of the location the content or if set the remoteId existis already" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="102" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="102" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\LocationCreateStruct" variable="$location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\LocationCreateStruct</type>
          </tag>
          <tag line="102" name="return" description="the newly created Location" type="\eZ\Publish\API\Repository\Values\Content\Location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
        </docblock>
        <argument line="116">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
        <argument line="116">
          <name>$locationCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>LocationCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="129" package="Default">
        <name>updateLocation</name>
        <type>function</type>
        <docblock line="118">
          <description><![CDATA[Updates $location in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="throws" description="If the current user user is not allowed to update this location" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="118" name="throws" description="if if set the remoteId existis already" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="118" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
          <tag line="118" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\LocationUpdateStruct" variable="$locationUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\LocationUpdateStruct</type>
          </tag>
          <tag line="118" name="return" description="the updated Location" type="\eZ\Publish\API\Repository\Values\Content\Location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
        <argument line="129">
          <name>$locationUpdateStruct</name>
          <default><![CDATA[]]></default>
          <type>LocationUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="139" package="Default">
        <name>swapLocation</name>
        <type>function</type>
        <docblock line="131">
          <description><![CDATA[Swaps the contents hold by the $location1 and $location2]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="131" name="throws" description="If the current user user is not allowed to swap content" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="131" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$location1">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
          <tag line="131" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$location2">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$location1</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
        <argument line="139">
          <name>$location2</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="150" package="Default">
        <name>hideLocation</name>
        <type>function</type>
        <docblock line="141">
          <description><![CDATA[Hides the $location and marks invisible all descendants of $location.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="141" name="throws" description="If the current user user is not allowed to hide this location" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="141" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
          <tag line="141" name="return" description="$location, with updated hidden value" type="\eZ\Publish\API\Repository\Values\Content\Location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
        </docblock>
        <argument line="150">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="164" package="Default">
        <name>unhideLocation</name>
        <type>function</type>
        <docblock line="152">
          <description><![CDATA[Unhides the $location.]]></description>
          <long-description><![CDATA[<p>This method and marks visible all descendants of $locations
until a hidden location is found.</p>]]></long-description>
          <tag line="152" name="throws" description="If the current user user is not allowed to unhide this location" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="152" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
          <tag line="152" name="return" description="$location, with updated hidden value" type="\eZ\Publish\API\Repository\Values\Content\Location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
        </docblock>
        <argument line="164">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="177" package="Default">
        <name>moveSubtree</name>
        <type>function</type>
        <docblock line="166">
          <description><![CDATA[Moves the subtree to $newParentLocation]]></description>
          <long-description><![CDATA[<p>If a user has the permission to move the location to a target location
he can do it regardless of an existing descendant on which the user has no permission.</p>]]></long-description>
          <tag line="166" name="throws" description="If the current user user is not allowed to move this location to the target" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="166" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
          <tag line="166" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$newParentLocation">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
        </docblock>
        <argument line="177">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
        <argument line="177">
          <name>$newParentLocation</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="186" package="Default">
        <name>deleteLocation</name>
        <type>function</type>
        <docblock line="179">
          <description><![CDATA[Deletes $location and all its descendants.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="179" name="throws" description="If the current user is not allowed to delete this location or a descendant" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="179" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
        </docblock>
        <argument line="186">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="196" package="Default">
        <name>newLocationCreateStruct</name>
        <type>function</type>
        <docblock line="189">
          <description><![CDATA[Instantiates a new location create class]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="189" name="param" description="the parent under which the new location should be created" type="int" variable="$parentLocationId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="189" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\LocationCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\LocationCreateStruct</type>
          </tag>
        </docblock>
        <argument line="196">
          <name>$parentLocationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="203" package="Default">
        <name>newLocationUpdateStruct</name>
        <type>function</type>
        <docblock line="198">
          <description><![CDATA[Instantiates a new location update class]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="198" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\LocationUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\LocationUpdateStruct</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/API/Repository/ContentService.php" hash="c291259fe168157cf1856e147a8ee710" package="eZ\Publish\API\Repository">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository"/>
    </docblock>
    <parse_markers>
      <error line="57" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentInfo in loadVersionInfo()</error>
      <error line="87" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentInfo in loadContentByContentInfo()</error>
      <error line="103" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $versionInfo in loadContentByVersionInfo()</error>
      <error line="147" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentCreateStruct in createContent()</error>
      <error line="170" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentInfo in updateContentMetadata()</error>
      <error line="170" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentMetadataUpdateStruct in updateContentMetadata()</error>
      <error line="185" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentInfo in deleteContent()</error>
      <error line="194" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentInfo in createContentDraft()</error>
      <error line="194" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $versionInfo in createContentDraft()</error>
      <error line="225" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $translationInfo in translateVersion()</error>
      <error line="225" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $translationValues in translateVersion()</error>
      <error line="225" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in translateVersion()</error>
      <error line="247" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $versionInfo in updateContent()</error>
      <error line="247" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentUpdateStruct in updateContent()</error>
      <error line="262" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $versionInfo in publishVersion()</error>
      <error line="277" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $versionInfo in deleteVersion()</error>
      <error line="287" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentInfo in loadVersions()</error>
      <error line="298" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentInfo in copyContent()</error>
      <error line="298" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $destinationLocationCreateStruct in copyContent()</error>
      <error line="298" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $versionInfo in copyContent()</error>
      <error line="312" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in findContent()</error>
      <error line="326" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in findSingle()</error>
      <error line="342" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $versionInfo in loadRelations()</error>
      <error line="353" code="50014">Name of argument $content does not match with the DocBlock's name $contentInfo in loadReverseRelations()</error>
      <error line="353" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in loadReverseRelations()</error>
      <notice line="353" code="50013">Parameter $contentInfo could not be found in loadReverseRelations()</notice>
      <error line="367" code="50014">Name of argument $sourceVersion does not match with the DocBlock's name $versionInfo in addRelation()</error>
      <error line="367" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $sourceVersion in addRelation()</error>
      <error line="367" code="50014">Name of argument $destinationContent does not match with the DocBlock's name $destination in addRelation()</error>
      <error line="367" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $destinationContent in addRelation()</error>
      <notice line="367" code="50013">Parameter $versionInfo could not be found in addRelation()</notice>
      <notice line="367" code="50013">Parameter $destination could not be found in addRelation()</notice>
      <error line="383" code="50014">Name of argument $sourceVersion does not match with the DocBlock's name $versionInfo in deleteRelation()</error>
      <error line="383" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $sourceVersion in deleteRelation()</error>
      <error line="383" code="50014">Name of argument $destinationContent does not match with the DocBlock's name $destination in deleteRelation()</error>
      <error line="383" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $destinationContent in deleteRelation()</error>
      <notice line="383" code="50013">Parameter $versionInfo could not be found in deleteRelation()</notice>
      <notice line="383" code="50013">Parameter $destination could not be found in deleteRelation()</notice>
      <error line="395" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $translationInfo in addTranslationInfo()</error>
      <error line="408" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentInfo in loadTranslationInfos()</error>
      <error line="424" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in newContentCreateStruct()</error>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/ContentService.php</critical>
    </parse_markers>
    <namespace-alias name="ContentUpdateStruct">eZ\Publish\API\Repository\Values\Content\ContentUpdateStruct</namespace-alias>
    <namespace-alias name="ContentType">eZ\Publish\API\Repository\Values\ContentType\ContentType</namespace-alias>
    <namespace-alias name="Query">eZ\Publish\API\Repository\Values\Content\Query</namespace-alias>
    <namespace-alias name="TranslationInfo">eZ\Publish\API\Repository\Values\Content\TranslationInfo</namespace-alias>
    <namespace-alias name="TranslationValues">eZ\Publish\API\Repository\Values\Content\TranslationValues</namespace-alias>
    <namespace-alias name="ContentCreateStruct">eZ\Publish\API\Repository\Values\Content\ContentCreateStruct</namespace-alias>
    <namespace-alias name="ContentMetaDataUpdateStruct">eZ\Publish\API\Repository\Values\Content\ContentMetaDataUpdateStruct</namespace-alias>
    <namespace-alias name="VersionInfo">eZ\Publish\API\Repository\Values\Content\VersionInfo</namespace-alias>
    <namespace-alias name="Content">eZ\Publish\API\Repository\Values\Content\Content</namespace-alias>
    <namespace-alias name="ContentInfo">eZ\Publish\API\Repository\Values\Content\ContentInfo</namespace-alias>
    <interface namespace="eZ\Publish\API\Repository" line="26" package="eZ\Publish\API\Repository">
      <name>ContentService</name>
      <full_name>\eZ\Publish\API\Repository\ContentService</full_name>
      <extends/>
      <docblock line="19">
        <description><![CDATA[This class provides service methods for managing content]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="19" name="example" description="Examples/content.php"/>
        <tag line="19" name="package" description="eZ\Publish\API\Repository"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="41" package="Default">
        <name>loadContentInfo</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Loads a content info object.]]></description>
          <long-description><![CDATA[<p>To load fields use loadContent</p>]]></long-description>
          <tag line="29" name="throws" description="if the user is not allowed to read the content" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="29" name="throws" description="- if the content with the given id does not exist" type="\eZ\Publish\API\Repository\Exceptions\NotFoundExceptoin">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundExceptoin</type>
          </tag>
          <tag line="29" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="29" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="55" package="Default">
        <name>loadContenInfotByRemoteId</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Loads a content info object for the given remoteId.]]></description>
          <long-description><![CDATA[<p>To load fields use loadContent</p>]]></long-description>
          <tag line="43" name="throws" description="if the user is not allowd to create the content in the given location" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="43" name="throws" description="- if the content with the given remote id does not exist" type="\eZ\Publish\API\Repository\Exceptions\NotFoundExceptoin">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundExceptoin</type>
          </tag>
          <tag line="43" name="param" description="" type="string" variable="$remoteId">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$remoteId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="70" package="Default">
        <name>loadVersionInfo</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[loads a version info of the given content object.]]></description>
          <long-description><![CDATA[<p>If no version number is given, the method returns the current version</p>]]></long-description>
          <tag line="57" name="throws" description="- if the version with the given number does not exist" type="\eZ\Publish\API\Repository\Exceptions\NotFoundExceptoin">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundExceptoin</type>
          </tag>
          <tag line="57" name="throws" description="if the user is not allowed to load this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="57" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="57" name="param" description="the version number. If not given the current version is returned." type="int" variable="$versionNo">
            <type by_reference="false">int</type>
          </tag>
          <tag line="57" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$contentInfo</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
        <argument line="70">
          <name>$versionNo</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="85" package="Default">
        <name>loadVersionInfoById</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[loads a version info of the given content object id.]]></description>
          <long-description><![CDATA[<p>If no version number is given, the method returns the current version</p>]]></long-description>
          <tag line="72" name="throws" description="- if the version with the given number does not exist" type="\eZ\Publish\API\Repository\Exceptions\NotFoundExceptoin">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundExceptoin</type>
          </tag>
          <tag line="72" name="throws" description="if the user is not allowed to load this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="72" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="72" name="param" description="the version number. If not given the current version is returned." type="int" variable="$versionNo">
            <type by_reference="false">int</type>
          </tag>
          <tag line="72" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="85">
          <name>$versionNo</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="101" package="Default">
        <name>loadContentByContentInfo</name>
        <type>function</type>
        <docblock line="87">
          <description><![CDATA[loads content in a version for the given content info object.]]></description>
          <long-description><![CDATA[<p>If no version number is given, the method returns the current version</p>]]></long-description>
          <tag line="87" name="throws" description="- if version with the given number does not exist" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="87" name="throws" description="if the user is not allowed to load this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="87" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="87" name="param" description="A language filter for fields. If not given all languages are returned" type="array" variable="$languages">
            <type by_reference="false">array</type>
          </tag>
          <tag line="87" name="param" description="the version number. If not given the current version is returned." type="int" variable="$versionNo">
            <type by_reference="false">int</type>
          </tag>
          <tag line="87" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Content">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Content</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$contentInfo</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
        <argument line="101">
          <name>$languages</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
        <argument line="101">
          <name>$versionNo</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="113" package="Default">
        <name>loadContentByVersionInfo</name>
        <type>function</type>
        <docblock line="103">
          <description><![CDATA[loads content in the version given by version info.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="throws" description="if the user is not allowed to load this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="103" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo" variable="$versionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
          <tag line="103" name="param" description="A language filter for fields. If not given all languages are returned" type="array" variable="$languages">
            <type by_reference="false">array</type>
          </tag>
          <tag line="103" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Content">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Content</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$versionInfo</name>
          <default><![CDATA[]]></default>
          <type>VersionInfo</type>
        </argument>
        <argument line="113">
          <name>$languages</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="129" package="Default">
        <name>loadContent</name>
        <type>function</type>
        <docblock line="115">
          <description><![CDATA[loads content in a version of the given content object.]]></description>
          <long-description><![CDATA[<p>If no version number is given, the method returns the current version</p>]]></long-description>
          <tag line="115" name="throws" description="- if the content or version with the given id does not exist" type="\eZ\Publish\API\Repository\Exceptions\NotFoundExceptoin">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundExceptoin</type>
          </tag>
          <tag line="115" name="throws" description="if the user is not allowed to load this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="115" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="115" name="param" description="A language filter for fields. If not given all languages are returned" type="array" variable="$languages">
            <type by_reference="false">array</type>
          </tag>
          <tag line="115" name="param" description="the version number. If not given the current version is returned." type="int" variable="$versionNo">
            <type by_reference="false">int</type>
          </tag>
          <tag line="115" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Content">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Content</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="129">
          <name>$languages</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
        <argument line="129">
          <name>$versionNo</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="145" package="Default">
        <name>loadVersionByRemoteId</name>
        <type>function</type>
        <docblock line="131">
          <description><![CDATA[loads content in a version for the content object reference by the given remote id.]]></description>
          <long-description><![CDATA[<p>If no version is given, the method returns the current version</p>]]></long-description>
          <tag line="131" name="throws" description="- if the content or version with the given remote id does not exist" type="\eZ\Publish\API\Repository\Exceptions\NotFoundExceptoin">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundExceptoin</type>
          </tag>
          <tag line="131" name="throws" description="if the user is not allowed to load this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="131" name="param" description="" type="string" variable="$remoteId">
            <type by_reference="false">string</type>
          </tag>
          <tag line="131" name="param" description="A language filter for fields. If not given all languages are returned" type="array" variable="$languages">
            <type by_reference="false">array</type>
          </tag>
          <tag line="131" name="param" description="the version number. If not given the current version is returned." type="int" variable="$versionNo">
            <type by_reference="false">int</type>
          </tag>
          <tag line="131" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Content">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Content</type>
          </tag>
        </docblock>
        <argument line="145">
          <name>$remoteId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="145">
          <name>$languages</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
        <argument line="145">
          <name>$versionNo</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="168" package="Default">
        <name>createContent</name>
        <type>function</type>
        <docblock line="147">
          <description><![CDATA[Creates a new content draft assigned to the authenticated user.]]></description>
          <long-description><![CDATA[<p>If a different userId is given in $contentCreateStruct it is assigned to the given user
but this required special rights for the authenticated user
(this is useful for content staging where the transfer process does not
have to authenticate with the user which created the content object in the source server).
The user has to publish the draft if it should be visible.
In 4.x at least one location has to be provided in the location creation array.</p>]]></long-description>
          <tag line="147" name="throws" description="if the user is not allowed to create the content in the given location" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="147" name="throws" description="if there is a provided remoteId which exists in the system or (4.x) there is no location provided" type="\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException</type>
          </tag>
          <tag line="147" name="throws" description="if a field in the $contentCreateStruct is not valid" type="\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException</type>
          </tag>
          <tag line="147" name="throws" description="if a required field is missing" type="\eZ\Publish\API\Repository\Exceptions\ContentValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentValidationException</type>
          </tag>
          <tag line="147" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentCreateStruct" variable="$contentCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentCreateStruct</type>
          </tag>
          <tag line="147" name="param" description="an array of {@link \eZ\Publish\API\Repository\Values\Content\LocationCreateStruct} for each location parent under which a location should be created for the content" type="array" variable="$locationCreateStructs">
            <type by_reference="false">array</type>
          </tag>
          <tag line="147" name="return" description="- the newly created content draft" type="\eZ\Publish\API\Repository\Values\Content\Content">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Content</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$contentCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>ContentCreateStruct</type>
        </argument>
        <argument line="168">
          <name>$locationCreateStructs</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="183" package="Default">
        <name>updateContentMetadata</name>
        <type>function</type>
        <docblock line="170">
          <description><![CDATA[Updates the metadata.]]></description>
          <long-description><![CDATA[<p>(see {@link ContentMetadataUpdateStruct}) of a content object - to update fields use updateContent</p>]]></long-description>
          <tag line="170" name="throws" description="if the user is not allowd to update the content meta data" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="170" name="throws" description="if the remoteId in $contentMetadataUpdateStruct is set but already existis" type="\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException</type>
          </tag>
          <tag line="170" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="170" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentMetadataUpdateStruct" variable="$contentMetadataUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentMetadataUpdateStruct</type>
          </tag>
          <tag line="170" name="return" description="the content with the updated attributes" type="\eZ\Publish\API\Repository\Values\Content\Content">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Content</type>
          </tag>
        </docblock>
        <argument line="183">
          <name>$contentInfo</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
        <argument line="183">
          <name>$contentMetadataUpdateStruct</name>
          <default><![CDATA[]]></default>
          <type>ContentMetaDataUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="192" package="Default">
        <name>deleteContent</name>
        <type>function</type>
        <docblock line="185">
          <description><![CDATA[deletes a content object including all its versions and locations including their subtrees.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="185" name="throws" description="if the user is not allowd to delete the content (in one of the locations of the given content object)" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="185" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
        </docblock>
        <argument line="192">
          <name>$contentInfo</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="209" package="Default">
        <name>createContentDraft</name>
        <type>function</type>
        <docblock line="194">
          <description><![CDATA[creates a draft from a publshed or archived version.]]></description>
          <long-description><![CDATA[<p>If no version is given, the current published version is used.
4.x: The draft is created with the initialLanguge code of the source version or if not present with the main language.
It can be changed on updating the version.</p>]]></long-description>
          <tag line="194" name="throws" description="if the user is not allowed to create the draft" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="194" name="throws" description="if there is no published version or the version info points to a draft" type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="194" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="194" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo" variable="$versionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
          <tag line="194" name="return" description="- the newly created content draft" type="\eZ\Publish\API\Repository\Values\Content\Content">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Content</type>
          </tag>
        </docblock>
        <argument line="209">
          <name>$contentInfo</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
        <argument line="209">
          <name>$versionInfo</name>
          <default><![CDATA[null]]></default>
          <type>VersionInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="222" package="Default">
        <name>loadContentDrafts</name>
        <type>function</type>
        <docblock line="211">
          <description><![CDATA[Load drafts for a user.]]></description>
          <long-description><![CDATA[<p>If no user is given the drafts for the authenticated user a returned</p>]]></long-description>
          <tag line="211" name="throws" description="if the user is not allowed to load the draft list" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="211" name="param" description="" type="\eZ\Publish\API\Repository\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\User</type>
          </tag>
          <tag line="211" name="return" description="the drafts ({@link VersionInfo}) owned by the given user" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
        </docblock>
        <argument line="222">
          <name>$user</name>
          <default><![CDATA[null]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="245" package="Default">
        <name>translateVersion</name>
        <type>function</type>
        <docblock line="225">
          <description><![CDATA[Translate a version]]></description>
          <long-description><![CDATA[<p>updates the destination version given in $translationInfo with the provided translated fields in $translationValues</p>]]></long-description>
          <tag line="225" name="example" description="Examples/translation_5x.php"/>
          <tag line="225" name="throws" description="if the user is not allowed to update this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="225" name="throws" description="if the given destiantioon version is not a draft" type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="225" name="throws" description="if a required field is set to an empty value" type="\eZ\Publish\API\Repository\Exceptions\ContentValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentValidationException</type>
          </tag>
          <tag line="225" name="throws" description="if a field in the $translationValues is not valid" type="\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException</type>
          </tag>
          <tag line="225" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\TranslationInfo" variable="$translationInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\TranslationInfo</type>
          </tag>
          <tag line="225" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\TranslationValues" variable="$translationValues">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\TranslationValues</type>
          </tag>
          <tag line="225" name="param" description="If set, this user is taken as modifier of the version" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="225" name="return" description="the content draft with the translated fields" type="\eZ\Publish\API\Repository\Values\Content\Content">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Content</type>
          </tag>
          <tag line="225" name="since" description="5.0"/>
        </docblock>
        <argument line="245">
          <name>$translationInfo</name>
          <default><![CDATA[]]></default>
          <type>TranslationInfo</type>
        </argument>
        <argument line="245">
          <name>$translationValues</name>
          <default><![CDATA[]]></default>
          <type>TranslationValues</type>
        </argument>
        <argument line="245">
          <name>$user</name>
          <default><![CDATA[null]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="260" package="Default">
        <name>updateContent</name>
        <type>function</type>
        <docblock line="247">
          <description><![CDATA[Updates the fields of a draft.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="247" name="throws" description="if the user is not allowed to update this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="247" name="throws" description="if the version is not a draft" type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="247" name="throws" description="if a field in the $contentUpdateStruct is not valid" type="\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException</type>
          </tag>
          <tag line="247" name="throws" description="if a required field is set to an empty value" type="\eZ\Publish\API\Repository\Exceptions\ContentValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentValidationException</type>
          </tag>
          <tag line="247" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo" variable="$versionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
          <tag line="247" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentUpdateStruct" variable="$contentUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentUpdateStruct</type>
          </tag>
          <tag line="247" name="return" description="the content draft with the updated fields" type="\eZ\Publish\API\Repository\Values\Content\Content">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Content</type>
          </tag>
        </docblock>
        <argument line="260">
          <name>$versionInfo</name>
          <default><![CDATA[]]></default>
          <type>VersionInfo</type>
        </argument>
        <argument line="260">
          <name>$contentUpdateStruct</name>
          <default><![CDATA[]]></default>
          <type>ContentUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="275" package="Default">
        <name>publishVersion</name>
        <type>function</type>
        <docblock line="262">
          <description><![CDATA[Publishes a content version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="262" name="throws" description="if the user is not allowed to publish this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="262" name="throws" description="if the version is not a draft" type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="262" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo" variable="$versionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
          <tag line="262" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Content">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Content</type>
          </tag>
          <tag line="262" name="throws" description="if the user is not allowed to publish this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="262" name="throws" description="if the version is not a draft" type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
        </docblock>
        <argument line="275">
          <name>$versionInfo</name>
          <default><![CDATA[]]></default>
          <type>VersionInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="285" package="Default">
        <name>deleteVersion</name>
        <type>function</type>
        <docblock line="277">
          <description><![CDATA[removes the given version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="277" name="throws" description="if the version is in state published" type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="277" name="throws" description="if the user is not allowed to remove this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="277" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo" variable="$versionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
        </docblock>
        <argument line="285">
          <name>$versionInfo</name>
          <default><![CDATA[]]></default>
          <type>VersionInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="296" package="Default">
        <name>loadVersions</name>
        <type>function</type>
        <docblock line="287">
          <description><![CDATA[Loads all versions for the given content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="287" name="throws" description="if the user is not allowed to list versions" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="287" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="287" name="return" description="an array of {@link \eZ\Publish\API\Repository\Values\Content\VersionInfo} sorted by creation date" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo[]">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo[]</type>
          </tag>
        </docblock>
        <argument line="296">
          <name>$contentInfo</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="310" package="Default">
        <name>copyContent</name>
        <type>function</type>
        <docblock line="298">
          <description><![CDATA[copies the content to a new location. If no version is given,
all versions are copied, otherwise only the given version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="298" name="throws" description="if the user is not allowed to copy the content to the given location" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="298" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="298" name="param" description="the target location where the content is copied to" type="\eZ\Publish\API\Repository\Values\Content\LocationCreateStruct" variable="$destinationLocationCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\LocationCreateStruct</type>
          </tag>
          <tag line="298" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo" variable="$versionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
          <tag line="298" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Content">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Content</type>
          </tag>
        </docblock>
        <argument line="310">
          <name>$contentInfo</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
        <argument line="310">
          <name>$destinationLocationCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>LocationCreateStruct</type>
        </argument>
        <argument line="310">
          <name>$versionInfo</name>
          <default><![CDATA[null]]></default>
          <type>VersionInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="324" package="Default">
        <name>findContent</name>
        <type>function</type>
        <docblock line="312">
          <description><![CDATA[finds content objects for the given query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="312" name="TODO" description="define structs for the field filters"/>
          <tag line="312" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Query" variable="$query">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query</type>
          </tag>
          <tag line="312" name="param" description="- a map of filters for the returned fields. Currently supported: &lt;code&gt;array(&quot;languages&quot; =&gt; array(&lt;language1&gt;,..))&lt;/code&gt;." type="array" variable="$fieldFilters">
            <type by_reference="false">array</type>
          </tag>
          <tag line="312" name="param" description="if true only the objects which is the user allowed to read are returned." type="boolean" variable="$filterOnUserPermissions">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="312" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\SearchResult">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\SearchResult</type>
          </tag>
        </docblock>
        <argument line="324">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>Query</type>
        </argument>
        <argument line="324">
          <name>$fieldFilters</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="324">
          <name>$filterOnUserPermissions</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="340" package="Default">
        <name>findSingle</name>
        <type>function</type>
        <docblock line="326">
          <description><![CDATA[Performs a query for a single content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="326" name="throws" description="if the user is not allowed to read the found content object" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="326" name="TODO" description="throw an exception if the found object count is &gt; 1"/>
          <tag line="326" name="TODO" description="define structs for the field filters"/>
          <tag line="326" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Query" variable="$query">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query</type>
          </tag>
          <tag line="326" name="param" description="- a map of filters for the returned fields. Currently supported: &lt;code&gt;array(&quot;languages&quot; =&gt; array(&lt;language1&gt;,..))&lt;/code&gt;." type="array" variable="$fieldFilters">
            <type by_reference="false">array</type>
          </tag>
          <tag line="326" name="param" description="if true only the objects which is the user allowed to read are returned." type="boolean" variable="$filterOnUserPermissions">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="326" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\SearchResult">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\SearchResult</type>
          </tag>
        </docblock>
        <argument line="340">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>Query</type>
        </argument>
        <argument line="340">
          <name>$fieldFilters</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="340">
          <name>$filterOnUserPermissions</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="351" package="Default">
        <name>loadRelations</name>
        <type>function</type>
        <docblock line="342">
          <description><![CDATA[load all outgoing relations for the given version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="342" name="throws" description="if the user is not allowed to read this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="342" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo" variable="$versionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
          <tag line="342" name="return" description="an array of {@link Relation}" type="\eZ\Publish\API\Repository\Values\Content\Relation[]">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Relation[]</type>
          </tag>
        </docblock>
        <argument line="351">
          <name>$versionInfo</name>
          <default><![CDATA[]]></default>
          <type>VersionInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="365" package="Default">
        <name>loadReverseRelations</name>
        <type>function</type>
        <docblock line="353">
          <description><![CDATA[Loads all incoming relations for a content object.]]></description>
          <long-description><![CDATA[<p>The relations come only
from published versions of the source content objects</p>]]></long-description>
          <tag line="353" name="throws" description="if the user is not allowed to read this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="353" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="353" name="return" description="an array of {@link Relation}" type="\eZ\Publish\API\Repository\Values\Content\Relation[]">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Relation[]</type>
          </tag>
        </docblock>
        <argument line="365">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="381" package="Default">
        <name>addRelation</name>
        <type>function</type>
        <docblock line="367">
          <description><![CDATA[Adds a relation of type common.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="367" name="throws" description="if the user is not allowed to edit this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="367" name="throws" description="if the version is not a draft The source of the relation is the content and version referenced by $versionInfo." type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="367" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo" variable="$versionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
          <tag line="367" name="param" description="the destination of the relation" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$destination">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="367" name="return" description="the newly created relation" type="\eZ\Publish\API\Repository\Values\Content\Relation">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Relation</type>
          </tag>
        </docblock>
        <argument line="381">
          <name>$sourceVersion</name>
          <default><![CDATA[]]></default>
          <type>VersionInfo</type>
        </argument>
        <argument line="381">
          <name>$destinationContent</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="393" package="Default">
        <name>deleteRelation</name>
        <type>function</type>
        <docblock line="383">
          <description><![CDATA[Removes a relation of type COMMON from a draft.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="383" name="throws" description="if the user is not allowed edit this version" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="383" name="throws" description="if the version is not a draft" type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="383" name="throws" description="if there is no relation of type COMMON for the given destination" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="383" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo" variable="$versionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
          <tag line="383" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$destination">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
        </docblock>
        <argument line="393">
          <name>$sourceVersion</name>
          <default><![CDATA[]]></default>
          <type>VersionInfo</type>
        </argument>
        <argument line="393">
          <name>$destinationContent</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="406" package="Default">
        <name>addTranslationInfo</name>
        <type>function</type>
        <docblock line="395">
          <description><![CDATA[add translation information to the content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="395" name="example" description="Examples/translation_5x.php"/>
          <tag line="395" name="throws" description="if the user is not allowed add a translation info" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="395" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\TranslationInfo" variable="$translationInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\TranslationInfo</type>
          </tag>
          <tag line="395" name="since" description="5.0"/>
        </docblock>
        <argument line="406">
          <name>$translationInfo</name>
          <default><![CDATA[]]></default>
          <type>TranslationInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="421" package="Default">
        <name>loadTranslationInfos</name>
        <type>function</type>
        <docblock line="408">
          <description><![CDATA[lists the translations done on this content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="408" name="throws" description="if the user is not allowed read trnaslation infos" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="408" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="408" name="param" description="" type="array" variable="$filter">
            <type by_reference="false">array</type>
          </tag>
          <tag line="408" name="todo" description="TBD - filter by sourceversion destination version and languages"/>
          <tag line="408" name="return" description="an array of {@link TranslationInfo}" type="\eZ\Publish\API\Repository\Values\Content\TranslationInfo[]">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\TranslationInfo[]</type>
          </tag>
          <tag line="408" name="since" description="5.0"/>
        </docblock>
        <argument line="421">
          <name>$contentInfo</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
        <argument line="421">
          <name>$filter</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="432" package="Default">
        <name>newContentCreateStruct</name>
        <type>function</type>
        <docblock line="424">
          <description><![CDATA[Instantiates a new content create struct object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="424" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentType" variable="$contentType">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
          </tag>
          <tag line="424" name="param" description="" type="string" variable="$mainLanguageCode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="424" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentCreateStruct</type>
          </tag>
        </docblock>
        <argument line="432">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>ContentType</type>
        </argument>
        <argument line="432">
          <name>$mainLanguageCode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="439" package="Default">
        <name>newContentMetadataUpdateStruct</name>
        <type>function</type>
        <docblock line="434">
          <description><![CDATA[Instantiates a new content meta data update struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="434" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentMetadataUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentMetadataUpdateStruct</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="445" package="Default">
        <name>newContentUpdateStruct</name>
        <type>function</type>
        <docblock line="441">
          <description><![CDATA[Instantiates a new content update struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="441" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentUpdateStruct</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="451" package="Default">
        <name>newTranslationInfo</name>
        <type>function</type>
        <docblock line="447">
          <description><![CDATA[Instantiates a new TranslationInfo object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="447" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\TranslationInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\TranslationInfo</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="457" package="Default">
        <name>newTranslationValues</name>
        <type>function</type>
        <docblock line="453">
          <description><![CDATA[Instantiates a Translation object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="453" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\TranslationValues">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\TranslationValues</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/API/Repository/TrashService.php" hash="618bce491d495d118744155528d2b13e" package="eZ\Publish\API\Repository">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository"/>
    </docblock>
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in trash()</error>
      <error line="45" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $trashItem in recover()</error>
      <error line="45" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $newParentLocation in recover()</error>
      <error line="69" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $trashItem in deleteTrashItem()</error>
      <error line="80" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in findTrashItems()</error>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/TrashService.php</critical>
    </parse_markers>
    <namespace-alias name="Location">eZ\Publish\API\Repository\Values\Content\Location</namespace-alias>
    <namespace-alias name="SearchResult">eZ\Publish\API\Repository\Values\Content\SearchResult</namespace-alias>
    <namespace-alias name="TrashItem">eZ\Publish\API\Repository\Values\Content\TrashItem</namespace-alias>
    <interface namespace="eZ\Publish\API\Repository" line="16" package="eZ\Publish\API\Repository">
      <name>TrashService</name>
      <full_name>\eZ\Publish\API\Repository\TrashService</full_name>
      <extends/>
      <docblock line="11">
        <description><![CDATA[Location service, used for complex subtree operations]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="11" name="package" description="eZ\Publish\API\Repository"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="30" package="Default">
        <name>loadTrashItem</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Loads a trashed location object from its $id.]]></description>
          <long-description><![CDATA[<p>Note that $id is identical to original location, which has been previously trashed</p>]]></long-description>
          <tag line="18" name="throws" description="if the user is not allowd to read the trashed location" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="18" name="throws" description="- if the location with the given id does not exist" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="18" name="param" description="" type="integer" variable="$trashItemId">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="18" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\TrashItem">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\TrashItem</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$trashItemId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="43" package="Default">
        <name>trash</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Sends $location and all its children to trash and returns the corresponding trash item.]]></description>
          <long-description><![CDATA[<p>Content is left untouched.</p>]]></long-description>
          <tag line="32" name="throws" description="if the user is not allowd to trash the given location" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="32" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Location" variable="$location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
          <tag line="32" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\TrashItem">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\TrashItem</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="57" package="Default">
        <name>recover</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Recovers the $trashedLocation at its original place if possible.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="throws" description="if the user is not allowd to recover the trash item at the parent location location If $newParentLocation is provided, $trashedLocation will be restored under it." type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="45" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\TrashItem" variable="$trashItem">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\TrashItem</type>
          </tag>
          <tag line="45" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\LocationCreate" variable="$newParentLocation">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\LocationCreate</type>
          </tag>
          <tag line="45" name="return" description="the newly created or recovered location" type="\eZ\Publish\API\Repository\Values\Content\Location">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Location</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$trashItem</name>
          <default><![CDATA[]]></default>
          <type>TrashItem</type>
        </argument>
        <argument line="57">
          <name>$newParentLocation</name>
          <default><![CDATA[null]]></default>
          <type>LocationCreate</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="67" package="Default">
        <name>emptyTrash</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Empties trash.]]></description>
          <long-description><![CDATA[<p>All locations contained in the trash will be removed. Content objects will be removed
if all locations of the content are gone.</p>]]></long-description>
          <tag line="59" name="throws" description="if the user is not allowd to empty the trash" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="78" package="Default">
        <name>deleteTrashItem</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[Deletes a trash item.]]></description>
          <long-description><![CDATA[<p>The corresponding content object will be removed</p>]]></long-description>
          <tag line="69" name="throws" description="if the user is not allowd to delete this trash item" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="69" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\TrashItem" variable="$trashItem">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\TrashItem</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$trashItem</name>
          <default><![CDATA[]]></default>
          <type>TrashItem</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="89" package="Default">
        <name>findTrashItems</name>
        <type>function</type>
        <docblock line="80">
          <description><![CDATA[Returns a collection of Trashed locations contained in the trash.]]></description>
          <long-description><![CDATA[<p>$query allows to filter/sort the elements to be contained in the collection.</p>]]></long-description>
          <tag line="80" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Query" variable="$query">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query</type>
          </tag>
          <tag line="80" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\SearchResult">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\SearchResult</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>Query</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/API/Repository/SectionService.php" hash="69d9df458efde8cd569ec60fbe0ac3bc" package="eZ\Publish\API\Repository">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository"/>
    </docblock>
    <parse_markers>
      <error line="34" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $section in updateSection()</error>
      <error line="34" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $sectionUpdateStruct in updateSection()</error>
      <error line="80" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $section in countAssignedContents()</error>
      <error line="89" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentInfo in assignSection()</error>
      <error line="89" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $section in assignSection()</error>
      <error line="101" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $section in deleteSection()</error>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/SectionService.php</critical>
    </parse_markers>
    <namespace-alias name="SectionCreateStruct">eZ\Publish\API\Repository\Values\Content\SectionCreateStruct</namespace-alias>
    <namespace-alias name="Content">eZ\Publish\API\Repository\Values\Content\Content</namespace-alias>
    <namespace-alias name="ContentInfo">eZ\Publish\API\Repository\Values\Content\ContentInfo</namespace-alias>
    <namespace-alias name="Section">eZ\Publish\API\Repository\Values\Content\Section</namespace-alias>
    <namespace-alias name="Location">eZ\Publish\API\Repository\Values\Content\Location</namespace-alias>
    <namespace-alias name="SectionUpdateStruct">eZ\Publish\API\Repository\Values\Content\SectionUpdateStruct</namespace-alias>
    <interface namespace="eZ\Publish\API\Repository" line="20" package="eZ\Publish\API\Repository">
      <name>SectionService</name>
      <full_name>\eZ\Publish\API\Repository\SectionService</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[Section service, used for section operations]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="package" description="eZ\Publish\API\Repository"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="32" package="Default">
        <name>createSection</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[Creates the a new Section in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="throws" description="If the current user user is not allowed to create a section" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="22" name="throws" description="If the new identifier in $sectionCreateStruct already exists" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="22" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\SectionCreateStruct" variable="$sectionCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\SectionCreateStruct</type>
          </tag>
          <tag line="22" name="return" description="The newly create section" type="\eZ\Publish\API\Repository\Values\Content\Section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$sectionCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>SectionCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="45" package="Default">
        <name>updateSection</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Updates the given in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="throws" description="If the current user user is not allowed to create a section" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="34" name="throws" description="If the new identifier already exists (if set in the update struct)" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="34" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Section" variable="$section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
          <tag line="34" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\SectionUpdateStruct" variable="$sectionUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\SectionUpdateStruct</type>
          </tag>
          <tag line="34" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
        <argument line="45">
          <name>$sectionUpdateStruct</name>
          <default><![CDATA[]]></default>
          <type>SectionUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="57" package="Default">
        <name>loadSection</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Loads a Section from its id ($sectionId)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="throws" description="if section could not be found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="47" name="throws" description="If the current user user is not allowed to read a section" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="47" name="param" description="" type="int" variable="$sectionId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="47" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="66" package="Default">
        <name>loadSections</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Loads all sections]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="throws" description="If the current user user is not allowed to read a section" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="59" name="return" description="of {@link \eZ\Publish\API\Repository\Values\Content\Section}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="78" package="Default">
        <name>loadSectionByIdentifier</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Loads a Section from its identifier ($sectionIdentifier)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="throws" description="if section could not be found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="68" name="throws" description="If the current user user is not allowed to read a section" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="68" name="param" description="" type="string" variable="$sectionIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$sectionIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="87" package="Default">
        <name>countAssignedContents</name>
        <type>function</type>
        <docblock line="80">
          <description><![CDATA[Counts the contents which $section is assigned to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Section" variable="$section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
          <tag line="80" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="98" package="Default">
        <name>assignSection</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[assigns the content to the given section
this method overrides the current assigned section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="throws" description="If user does not have access to view provided object" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="89" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
          <tag line="89" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Section" variable="$section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$contentInfo</name>
          <default><![CDATA[]]></default>
          <type>ContentInfo</type>
        </argument>
        <argument line="98">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="111" package="Default">
        <name>deleteSection</name>
        <type>function</type>
        <docblock line="101">
          <description><![CDATA[Deletes $section from content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="101" name="throws" description="If the specified section is not found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="101" name="throws" description="If the current user user is not allowed to delete a section" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="101" name="throws" description="if section can not be deleted because it is still assigned to some contents." type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="101" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Section" variable="$section">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Section</type>
          </tag>
        </docblock>
        <argument line="111">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="118" package="Default">
        <name>newSectionCreateStruct</name>
        <type>function</type>
        <docblock line="113">
          <description><![CDATA[instanciates a new SectionCreateStruct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="113" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\SectionCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\SectionCreateStruct</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="125" package="Default">
        <name>newSectionUpdateStruct</name>
        <type>function</type>
        <docblock line="120">
          <description><![CDATA[instanciates a new SectionUpdateStruct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="120" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\SectionUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\SectionUpdateStruct</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/API/Repository/IOService.php" hash="7f5ec31f614b22dab002698764f4063f">
    <parse_markers>
      <error line="36" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $binaryFileCreateStruct in createBinaryFile()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/IOService.php</error>
    </parse_markers>
    <namespace-alias name="BinaryFile">eZ\Publish\API\Repository\Values\IO\BinaryFile</namespace-alias>
    <interface namespace="eZ\Publish\API\Repository" line="12" package="eZ\Publish\API\Repository">
      <name>IOService</name>
      <full_name>\eZ\Publish\API\Repository\IOService</full_name>
      <extends/>
      <docblock line="6">
        <description><![CDATA[The io service for managing binary files]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="6" name="package" description="eZ\Publish\API\Repository"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="23" package="Default">
        <name>newBinaryCreateStructFromUploadedFile</name>
        <type>function</type>
        <docblock line="14">
          <description><![CDATA[Creates a BinaryFileCreateStruct object from the uploaded file $uploadedFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="14" name="throws" description="When given an invalid uploaded file" type="\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException</type>
          </tag>
          <tag line="14" name="param" description="The $_POST hash of an uploaded file" type="array" variable="$uploadedFile">
            <type by_reference="false">array</type>
          </tag>
          <tag line="14" name="return" description="" type="\eZ\Publish\API\Repository\Values\IO\BinaryFileCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\IO\BinaryFileCreateStruct</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$uploadedFile</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="34" package="Default">
        <name>newBinaryCreateStructFromLocalFile</name>
        <type>function</type>
        <docblock line="25">
          <description><![CDATA[Creates a BinaryFileCreateStruct object from $localFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="throws" description="When given a non existing / unreadable file" type="\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException</type>
          </tag>
          <tag line="25" name="param" description="Path to local file" type="string" variable="$localFile">
            <type by_reference="false">string</type>
          </tag>
          <tag line="25" name="return" description="" type="\eZ\Publish\API\Repository\Values\IO\BinaryFileCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\IO\BinaryFileCreateStruct</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$localFile</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="43" package="Default">
        <name>createBinaryFile</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Creates a  binary file in the the repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="" type="\eZ\Publish\API\Repository\Values\IO\BinaryFileCreateStruct" variable="$binaryFileCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\IO\BinaryFileCreateStruct</type>
          </tag>
          <tag line="36" name="return" description="The created BinaryFile object" type="\eZ\Publish\API\Repository\Values\IO\BinaryFile">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\IO\BinaryFile</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$binaryFileCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>BinaryFileCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="50" package="Default">
        <name>deleteBinaryFile</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Deletes the BinaryFile with $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="" type="\eZ\Publish\API\Repository\Values\IO\BinaryFile" variable="$binaryFile">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\IO\BinaryFile</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$binaryFile</name>
          <default><![CDATA[]]></default>
          <type>BinaryFile</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="61" package="Default">
        <name>loadBinaryFile</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Loads the binary file with $id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="throws" description="" type="\eZ\Publish\API\Repository\Exceptions\NotFoundExcption">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundExcption</type>
          </tag>
          <tag line="52" name="param" description="" type="string" variable="$binaryFileid">
            <type by_reference="false">string</type>
          </tag>
          <tag line="52" name="return" description="" type="\eZ\Publish\API\Repository\Values\IO\BinaryFile">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\IO\BinaryFile</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$binaryFileid</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="71" package="Default">
        <name>getFileInputStream</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Returns a read (mode: rb) file resource to the binary file identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="param" description="" type="\eZ\Publish\API\Repository\Values\IO\BinaryFile" variable="$binaryFile">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\IO\BinaryFile</type>
          </tag>
          <tag line="64" name="return" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$binaryFile</name>
          <default><![CDATA[]]></default>
          <type>BinaryFile</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="80" package="Default">
        <name>getFileContents</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Returns the content of the binary file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="param" description="" type="\eZ\Publish\API\Repository\Values\IO\BinaryFile" variable="$binaryFile">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\IO\BinaryFile</type>
          </tag>
          <tag line="73" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$binaryFile</name>
          <default><![CDATA[]]></default>
          <type>BinaryFile</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/API/Repository/UserService.php" hash="e872c22f26d6d19fd24577aab8ab0dc8" package="eZ\Publish\API\Repository">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository"/>
    </docblock>
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userGroupCreateStruct in createUserGroup()</error>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $parentGroup in createUserGroup()</error>
      <error line="54" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userGroup in loadSubUserGroups()</error>
      <error line="66" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userGroup in deleteUserGroup()</error>
      <error line="78" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userGroup in moveUserGroup()</error>
      <error line="78" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $newParent in moveUserGroup()</error>
      <error line="89" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userGroup in updateUserGroup()</error>
      <error line="89" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userGroupUpdateStruct in updateUserGroup()</error>
      <error line="106" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userCreateStruct in createUser()</error>
      <error line="144" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in deleteUser()</error>
      <error line="153" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in updateUser()</error>
      <error line="153" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userUpdateStruct in updateUser()</error>
      <error line="168" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in assignUserToUserGroup()</error>
      <error line="168" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userGroup in assignUserToUserGroup()</error>
      <error line="180" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in unAssignUssrFromUserGroup()</error>
      <error line="180" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userGroup in unAssignUssrFromUserGroup()</error>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/UserService.php</critical>
    </parse_markers>
    <namespace-alias name="UserCreateStruct">eZ\Publish\API\Repository\Values\User\UserCreateStruct</namespace-alias>
    <namespace-alias name="UserUpdateStruct">eZ\Publish\API\Repository\Values\User\UserUpdateStruct</namespace-alias>
    <namespace-alias name="User">eZ\Publish\API\Repository\Values\User\User</namespace-alias>
    <namespace-alias name="UserGroup">eZ\Publish\API\Repository\Values\User\UserGroup</namespace-alias>
    <namespace-alias name="UserGroupCreateStruct">eZ\Publish\API\Repository\Values\User\UserGroupCreateStruct</namespace-alias>
    <namespace-alias name="UserGroupUpdateStruct">eZ\Publish\API\Repository\Values\User\UserGroupUpdateStruct</namespace-alias>
    <interface namespace="eZ\Publish\API\Repository" line="21" package="eZ\Publish\API\Repository">
      <name>UserService</name>
      <full_name>\eZ\Publish\API\Repository\UserService</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[This service provides methods for managing users and user groups]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="example" description="Examples/user.php"/>
        <tag line="14" name="package" description="eZ\Publish\API\Repository"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="40" package="Default">
        <name>createUserGroup</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Creates a new user group using the data provided in the ContentCreateStruct parameter]]></description>
          <long-description><![CDATA[<p>In 4.x in the content type parameter in the profile is ignored
- the content type is determined via configuration and can be set to null.
The returned version is published.</p>]]></long-description>
          <tag line="23" name="param" description="a structure for setting all necessary data to create this user group" type="\eZ\Publish\API\Repository\Values\User\UserGroupCreateStruct" variable="$userGroupCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroupCreateStruct</type>
          </tag>
          <tag line="23" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup" variable="$parentGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
          <tag line="23" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
          <tag line="23" name="throws" description="if the authenticated user is not allowed to create a user group" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="23" name="throws" description="if the input structure has invalid data" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="23" name="throws" description="if a field in the $userGroupCreateStruct is not valid" type="\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException</type>
          </tag>
          <tag line="23" name="throws" description="if a required field is missing" type="\eZ\Publish\API\Repository\Exceptions\ContentValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentValidationException</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$userGroupCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>UserGroupCreateStruct</type>
        </argument>
        <argument line="40">
          <name>$parentGroup</name>
          <default><![CDATA[]]></default>
          <type>UserGroup</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="52" package="Default">
        <name>loadUserGroup</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Loads a user group for the given id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="42" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
          <tag line="42" name="throws" description="if the authenticated user is not allowed to create a user group" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="42" name="throws" description="if the user group with the given id was not found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="64" package="Default">
        <name>loadSubUserGroups</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Loads the sub groups of a user group]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup" variable="$userGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
          <tag line="54" name="return" description="an array of {@link \eZ\Publish\API\Repository\Values\User\UserGroup}" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="54" name="throws" description="if the authenticated user is not allowed to read the user group" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="54" name="throws" description="if the user group with the given id was not found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$userGroup</name>
          <default><![CDATA[]]></default>
          <type>UserGroup</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="76" package="Default">
        <name>deleteUserGroup</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[Removes a user group]]></description>
          <long-description><![CDATA[<p>the users which are not assigned to other groups will be deleted.</p>]]></long-description>
          <tag line="66" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup" variable="$userGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
          <tag line="66" name="throws" description="if the authenticated user is not allowed to create a user group" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="66" name="throws" description="if the user group with the given id was not found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$userGroup</name>
          <default><![CDATA[]]></default>
          <type>UserGroup</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="87" package="Default">
        <name>moveUserGroup</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Moves the user group to another parent]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup" variable="$userGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
          <tag line="78" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup" variable="$newParent">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
          <tag line="78" name="throws" description="if the authenticated user is not allowed to move the user group" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="78" name="throws" description="if the user group with the given id was not found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$userGroup</name>
          <default><![CDATA[]]></default>
          <type>UserGroup</type>
        </argument>
        <argument line="87">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type>UserGroup</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="104" package="Default">
        <name>updateUserGroup</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Updates the group profile with fields and meta data]]></description>
          <long-description><![CDATA[<p>4.x: If the versionUpdateStruct is set in $userGroupUpdateStruct, this method internally creates a content draft, updates ts with the provided data
and publishes the draft. If a draft is explititely required, the user group can be updated via the content service methods.</p>]]></long-description>
          <tag line="89" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup" variable="$userGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
          <tag line="89" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroupUpdateStruct" variable="$userGroupUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroupUpdateStruct</type>
          </tag>
          <tag line="89" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
          <tag line="89" name="throws" description="if the authenticated user is not allowed to move the user group" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="89" name="throws" description="if a field in the $userGroupUpdateStruct is not valid" type="\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException</type>
          </tag>
          <tag line="89" name="throws" description="if a required field is set empty" type="\eZ\Publish\API\Repository\Exceptions\ContentValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentValidationException</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$userGroup</name>
          <default><![CDATA[]]></default>
          <type>UserGroup</type>
        </argument>
        <argument line="104">
          <name>$userGroupUpdateStruct</name>
          <default><![CDATA[]]></default>
          <type>UserGroupUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="119" package="Default">
        <name>createUser</name>
        <type>function</type>
        <docblock line="106">
          <description><![CDATA[Create a new user. The created user is published by this method]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="param" description="the data used for creating the user" type="\eZ\Publish\API\Repository\Values\User\UserCreateStruct" variable="$userCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserCreateStruct</type>
          </tag>
          <tag line="106" name="param" description="the groups of type {@link \eZ\Publish\API\Repository\Values\User\UserGroup} which are assigned to the user after creation" type="array" variable="$parentGroups">
            <type by_reference="false">array</type>
          </tag>
          <tag line="106" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\User">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="106" name="throws" description="if the authenticated user is not allowed to move the user group" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="106" name="throws" description="if a user group was not found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="106" name="throws" description="if a field in the $userCreateStruct is not valid" type="\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException</type>
          </tag>
          <tag line="106" name="throws" description="if a required field is missing" type="\eZ\Publish\API\Repository\Exceptions\ContentValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentValidationException</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$userCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>UserCreateStruct</type>
        </argument>
        <argument line="119">
          <name>$parentGroups</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="130" package="Default">
        <name>loadUser</name>
        <type>function</type>
        <docblock line="121">
          <description><![CDATA[Loads a user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="121" name="param" description="" type="integer" variable="$userId">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="121" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\User">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="121" name="throws" description="if a user with the given id was not found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
        </docblock>
        <argument line="130">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="142" package="Default">
        <name>loadUserByCredentials</name>
        <type>function</type>
        <docblock line="132">
          <description><![CDATA[Loads a user for the given login and password]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="param" description="" type="string" variable="$login">
            <type by_reference="false">string</type>
          </tag>
          <tag line="132" name="param" description="the plain password" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="132" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\User">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="132" name="throws" description="if a user with the given credentials was not found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$login</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="142">
          <name>$password</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="151" package="Default">
        <name>deleteUser</name>
        <type>function</type>
        <docblock line="144">
          <description><![CDATA[This method deletes a user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="144" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="144" name="throws" description="if the authenticated user is not allowed to delete the user" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
        </docblock>
        <argument line="151">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="166" package="Default">
        <name>updateUser</name>
        <type>function</type>
        <docblock line="153">
          <description><![CDATA[Updates a user]]></description>
          <long-description><![CDATA[<p>4.x: If the versionUpdateStruct is set in the user update structure, this method internally creates a content draft, updates ts with the provided data
and publishes the draft. If a draft is explititely required, the user group can be updated via the content service methods.</p>]]></long-description>
          <tag line="153" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="153" name="param" description="\eZ\Publish\API\Repository\Values\User\UserUpdateStruct" type="" variable="$userUpdateStruct"/>
          <tag line="153" name="throws" description="if the authenticated user is not allowed to update the user" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="153" name="throws" description="if a field in the $userUpdateStruct is not valid" type="\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException</type>
          </tag>
          <tag line="153" name="throws" description="if a required field is set empty" type="\eZ\Publish\API\Repository\Exceptions\ContentValidationException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\ContentValidationException</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
        <argument line="166">
          <name>$userUpdateStruct</name>
          <default><![CDATA[]]></default>
          <type>UserUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="178" package="Default">
        <name>assignUserToUserGroup</name>
        <type>function</type>
        <docblock line="168">
          <description><![CDATA[Assigns a new user group to the user]]></description>
          <long-description><![CDATA[<p>If the user is already in the given user group this method does nothing.</p>]]></long-description>
          <tag line="168" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="168" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup" variable="$userGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
          <tag line="168" name="throws" description="if the authenticated user is not allowed to assign the user group to the user" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
        </docblock>
        <argument line="178">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
        <argument line="178">
          <name>$userGroup</name>
          <default><![CDATA[]]></default>
          <type>UserGroup</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="189" package="Default">
        <name>unAssignUssrFromUserGroup</name>
        <type>function</type>
        <docblock line="180">
          <description><![CDATA[Removes a user group from the user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="180" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="180" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup" variable="$userGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
          <tag line="180" name="throws" description="if the authenticated user is not allowed to remove the user group from the user" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="180" name="throws" description="if the user is not in the given user group" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
        </docblock>
        <argument line="189">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
        <argument line="189">
          <name>$userGroup</name>
          <default><![CDATA[]]></default>
          <type>UserGroup</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="202" package="Default">
        <name>newUserCreateStruct</name>
        <type>function</type>
        <docblock line="191">
          <description><![CDATA[Instantiate a user create class]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="191" name="param" description="the login of the new user" type="string" variable="$login">
            <type by_reference="false">string</type>
          </tag>
          <tag line="191" name="param" description="the email of the new user" type="string" variable="$email">
            <type by_reference="false">string</type>
          </tag>
          <tag line="191" name="param" description="the plain password of the new user" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="191" name="param" description="the main language for the underlying content object" type="string" variable="$mainLanguageCode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="191" name="param" description="5.x the content type for the underlying content object. In 4.x it is ignored and taken from the configuration" type="\eZ\Publish\API\Repository\ContentType" variable="$contentType">
            <type by_reference="false">\eZ\Publish\API\Repository\ContentType</type>
          </tag>
          <tag line="191" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\UserCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserCreateStruct</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$login</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="202">
          <name>$email</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="202">
          <name>$password</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="202">
          <name>$mainLanguageCode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="202">
          <name>$contentType</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="212" package="Default">
        <name>newUserGroupCreateStruct</name>
        <type>function</type>
        <docblock line="204">
          <description><![CDATA[Instantiate a user group create class]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="204" name="param" description="The main language for the underlying content object" type="string" variable="$mainLanguageCode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="204" name="param" description="5.x the content type for the underlying content object. In 4.x it is ignored and taken from the configuration" type="null|\eZ\Publish\API\Repository\Values\ContentType\ContentType" variable="$contentType">
            <type by_reference="false">null</type>
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
          </tag>
          <tag line="204" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroupCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroupCreateStruct</type>
          </tag>
        </docblock>
        <argument line="212">
          <name>$mainLanguageCode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="212">
          <name>$contentType</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="219" package="Default">
        <name>newUserUpdateStruct</name>
        <type>function</type>
        <docblock line="214">
          <description><![CDATA[Instantiate a new user update struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="214" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\UserUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserUpdateStruct</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="226" package="Default">
        <name>newUserGroupUpdateStruct</name>
        <type>function</type>
        <docblock line="221">
          <description><![CDATA[Instantiate a new user group update struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="221" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroupUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroupUpdateStruct</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/VersionInfo.php" hash="5d91f9f6d4881638ed05e8e2fd1e6cb4">
    <parse_markers>
      <critical line="76" code="50019">No short description for property $createdDate</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/VersionInfo.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="ContentInfo">eZ\Publish\API\Repository\Values\Content\ContentInfo</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content" line="23" package="Default">
      <name>VersionInfo</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\VersionInfo</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="8">
        <description><![CDATA[This class holds version information data. It also contains the coresponding {@link Content} to
which the version belongs to.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="8" name="property-read" description="returns an array with language code keys and name values" type="array" variable="$names">
          <type by_reference="false">array</type>
        </tag>
        <tag line="8" name="property-read" description="calls getContentInfo()" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
        </tag>
        <tag line="8" name="property-read" description="the internal id of the version" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="8" name="property-read" description="the version number of this version (which only increments in scope of a single Content object)" type="int" variable="$versionNo">
          <type by_reference="false">int</type>
        </tag>
        <tag line="8" name="property-read" description="the last modified date of this version" type="\eZ\Publish\API\Repository\Values\Content\DateTime" variable="$modifiedDate">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\DateTime</type>
        </tag>
        <tag line="8" name="property-read" description="the creation date of this version" type="\eZ\Publish\API\Repository\Values\Content\DateTime" variable="$createdDate">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\DateTime</type>
        </tag>
        <tag line="8" name="property-read" description="the user id of the user which created this version" type="int" variable="$creatorId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="8" name="property-read" description="the status of this version. One of VersionInfo::STATUS_DRAFT, VersionInfo::STATUS_PUBLISHED, VersionInfo::STATUS_ARCHIVED" type="int" variable="$status">
          <type by_reference="false">int</type>
        </tag>
        <tag line="8" name="property-read" description="the language code of the version. This value is used to flag a version as a translation to specific language" type="string" variable="$initialLanguageCode">
          <type by_reference="false">string</type>
        </tag>
        <tag line="8" name="property-read" description="a collection of all languages which exist in this version." type="array" variable="$languageCodes">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="25">
        <name>STATUS_DRAFT</name>
        <value><![CDATA[0]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="26">
        <name>STATUS_PUBLISHED</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="27">
        <name>STATUS_ARCHIVED</name>
        <value><![CDATA[2]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="34" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="29">
          <description><![CDATA[Version ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="44" package="Default">
        <name>$versionNo</name>
        <default><![CDATA[]]></default>
        <docblock line="36">
          <description><![CDATA[Version number.]]></description>
          <long-description><![CDATA[<p>In contrast to {@link $id}, this is the version number, which only
increments in scope of a single Content object.</p>]]></long-description>
          <tag line="36" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="67" package="Default">
        <name>$modifiedDate</name>
        <default><![CDATA[]]></default>
        <docblock line="62">
          <description><![CDATA[the last modified date of this version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\DateTime">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="74" package="Default">
        <name>$creatorId</name>
        <default><![CDATA[]]></default>
        <docblock line="69">
          <description><![CDATA[Creator user ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="79" package="Default">
        <name>$createdDate</name>
        <default><![CDATA[]]></default>
        <docblock line="76">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\DateTime">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="86" package="Default">
        <name>$status</name>
        <default><![CDATA[]]></default>
        <docblock line="81">
          <description><![CDATA[One of VersionInfo::STATUS_DRAFT, VersionInfo::STATUS_PUBLISHED, VersionInfo::STATUS_ARCHIVED]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="var" description="Constant." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="93" package="Default">
        <name>$initialLanguageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="88">
          <description><![CDATA[In 4.x this is the language code which is used for labeling a translation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="102" package="Default">
        <name>$languageCodes</name>
        <default><![CDATA[array()]]></default>
        <docblock line="95">
          <description><![CDATA[List of languages in this version]]></description>
          <long-description><![CDATA[<p>Reflects which languages fields exists in for this version.</p>]]></long-description>
          <tag line="95" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="51" package="Default">
        <name>getContentInfo</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Content of the content this version belongs to.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="60" package="Default">
        <name>getName</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[Returns the name computed from the name schema in the given language.]]></description>
          <long-description><![CDATA[<p>If no language is given the name in initial language of the version if present, otherwise null.</p>]]></long-description>
          <tag line="53" name="param" description="" type="string" variable="$languageCode">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$languageCode</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/TranslationValues.php" hash="92c845b0c637e2fde74e8937d11240a1">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/TranslationValues.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content" line="8" package="Default">
      <name>TranslationValues</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\TranslationValues</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\ValueObject</extends>
      <docblock line="3">
        <description><![CDATA[This value object is used for adding a translation to a version]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="3" name="property-write" description="" type="\eZ\Publish\API\Repository\Values\Content\FieldCollection" variable="$fields">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\FieldCollection</type>
        </tag>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="19" package="Default">
        <name>setField</name>
        <type>function</type>
        <docblock line="11">
          <description><![CDATA[Adds a translated field to the field collection in the given language
This method is also be implemented by ArrayAccess so that
$fielfs[$fieldDefIdentifer] = $value is an equivalent call]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="11" name="param" description="the identifier of the field definition" type="string" variable="$fieldDefIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="11" name="param" description="Either a plain value which is understandable by the field type or an instance of a Value class provided by the field type" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="19">
          <name>$fieldDefIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="19">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/TrashItem.php" hash="b69090a87d2c30e8fb996da28fa3f036">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/TrashItem.php</error>
    </parse_markers>
    <namespace-alias name="Location">eZ\Publish\API\Repository\Values\Content\Location</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content" line="11" package="Default">
      <name>TrashItem</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\TrashItem</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Location</extends>
      <docblock line="6">
        <description><![CDATA[this class represents a trash item, which is actually a trashed location]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/LanguageCreateStruct.php" hash="e95a38014824e0ead5651eff0547823b">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/LanguageCreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content" line="10" package="Default">
      <name>LanguageCreateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\LanguageCreateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[This class represents a value for creating a language]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="18" package="Default">
        <name>$languageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="13">
          <description><![CDATA[the languageCode code]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="13" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="25" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[Human readable name of the language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$enabled</name>
        <default><![CDATA[true]]></default>
        <docblock line="27">
          <description><![CDATA[indicates if the langiuage is enabled or not.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Content.php" hash="1ed551c73939b4ab2978928e0b262883">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Content.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="VersionInfo">eZ\Publish\API\Repository\Values\Content\VersionInfo</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content" line="20" package="Default">
      <name>Content</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Content</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="8">
        <description><![CDATA[this class represents a content object in a specific version]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="8" name="property-read" description="convenience getter for $versionInfo-&gt;contentInfo" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
        </tag>
        <tag line="8" name="property-read" description="convenience getter for $contentInfo-&gt;contentType" type="\eZ\Publish\API\Repository\Values\Content\ContentType" variable="$contentType">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentType</type>
        </tag>
        <tag line="8" name="property-read" description="convenience getter for retrieving the contentId: $versionInfo-&gt;content-&gt;contentId" type="int" variable="$contentId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="8" name="property-read" description="calls getVersionInfo()" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo" variable="$versionInfo">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
        </tag>
        <tag line="8" name="property-read" description="access fields" type="array" variable="$fields">
          <type by_reference="false">array</type>
        </tag>
        <tag line="8" name="property-read" description="calls getRelations()" type="array" variable="$relations">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="27" package="Default">
        <name>getVersionInfo</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[returns the VersionInfo for this version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="41" package="Default">
        <name>getFieldValue</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[returns a field value for the given value
$version->fields[$fieldDefId][$languageCode] is an equivalent call
if no language is given on a translatable field this method returns
the value of the initial language of the version if present, otherwise null.]]></description>
          <long-description><![CDATA[<p>On non translatable fields this method ignores the languageCode parameter.</p>]]></long-description>
          <tag line="29" name="param" description="" type="string" variable="$fieldDefIdentifer">
            <type by_reference="false">string</type>
          </tag>
          <tag line="29" name="param" description="" type="string" variable="$languageCode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="29" name="return" description="a primitive type or a field type Value object depending on the field type." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$fieldDefIdentifer</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="41">
          <name>$languageCode</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="48" package="Default">
        <name>getRelations</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[returns the outgoing relations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="return" description="an array of {@link Relation}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="55" package="Default">
        <name>getFields</name>
        <type>function</type>
        <docblock line="50">
          <description><![CDATA[This method returns the complete fields collection]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="return" description="an array of {@link Field}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="66" package="Default">
        <name>getFieldsByLanguage</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[This method returns the fields for a given language and non translatable fields]]></description>
          <long-description><![CDATA[<p>If note set the initilaLanguage of the content version is used.</p>]]></long-description>
          <tag line="57" name="param" description="" type="string" variable="$languageCode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="return" description="an array of {@link Field} with field identifier as keys" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$languageCode</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/SortClause/Target/FieldSortClauseTarget.php" hash="c328a099eb2f29738a66f991ed7104eb" package="eZ\Publish\API\Repository\Values\Content\Query">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
    </docblock>
    <parse_markers>
      <error line="17" code="50018">No DocBlock was found for property $typeIdentifier</error>
      <error line="18" code="50018">No DocBlock was found for property $fieldIdentifier</error>
      <error line="20" code="50010">No DocBlock was found for method __construct()</error>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/Values/Content/Query/SortClause/Target/FieldSortClauseTarget.php</critical>
    </parse_markers>
    <namespace-alias name="SortClauseTarget">eZ\Publish\API\Repository\Values\Content\Query\SortClause\Target</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause\Target" line="15" package="eZ\Publish\API\Repository\Values\Content\Query">
      <name>FieldSortClauseTarget</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\SortClause\Target\FieldSortClauseTarget</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\SortClause\Target</extends>
      <docblock line="11">
        <description><![CDATA[Struct that stores extra target informations for a SortClause object]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="11" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="17">
        <name>$typeIdentifier</name>
        <default><![CDATA[]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="18">
        <name>$fieldIdentifier</name>
        <default><![CDATA[]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause\Target" line="20">
        <name>__construct</name>
        <type>function</type>
        <argument line="20">
          <name>$typeIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="20">
          <name>$fieldIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/SortClause/FieldSortClause.php" hash="785576ce716c75bb999a3d47efb75da6">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/SortClause/FieldSortClause.php</error>
    </parse_markers>
    <namespace-alias name="FieldSortClauseTarget">eZ\Publish\API\Repository\Values\Content\Query\SortClause\Target\FieldSortClauseTarget</namespace-alias>
    <namespace-alias name="Query">eZ\Publish\API\Repository\Values\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">eZ\Publish\API\Repository\Values\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="12" package="Default">
      <name>FieldSortClause</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\SortClause\FieldSortClause</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\SortClause</extends>
      <docblock line="9">
        <description><![CDATA[Sets sort direction on a field value for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="20" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="14">
          <description><![CDATA[Constructs a new Field SortClause on Type $typeIdentifier and Field $fieldIdentifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="14" name="param" description="" type="string" variable="$typeIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="14" name="param" description="" type="string" variable="$fieldIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="14" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="20">
          <name>$typeIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="20">
          <name>$fieldIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="20">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/SortClause/ContentName.php" hash="0ffffdf0a938160fa0f1ce0319a77756">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/SortClause/ContentName.php</error>
    </parse_markers>
    <namespace-alias name="Query">eZ\Publish\API\Repository\Values\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">eZ\Publish\API\Repository\Values\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="10" package="Default">
      <name>ContentName</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\SortClause\ContentName</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\SortClause</extends>
      <docblock line="7">
        <description><![CDATA[Sets sort direction on Content name for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="16" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="12">
          <description><![CDATA[Constructs a new ContentName SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="12" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="16">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/SortClause/LocationPath.php" hash="d20dad3633b58579f3ff238f63a8eb55">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/SortClause/LocationPath.php</error>
    </parse_markers>
    <namespace-alias name="Query">eZ\Publish\API\Repository\Values\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">eZ\Publish\API\Repository\Values\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="10" package="Default">
      <name>LocationPath</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\SortClause\LocationPath</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\SortClause</extends>
      <docblock line="7">
        <description><![CDATA[Sets sort direction on the location path date for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="16" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="12">
          <description><![CDATA[Constructs a new LocationPath SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="12" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="16">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/SortClause/SectionIdentifier.php" hash="2adf3b4253c2cf2bd8be1ad5c1b052c2">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/SortClause/SectionIdentifier.php</error>
    </parse_markers>
    <namespace-alias name="Query">eZ\Publish\API\Repository\Values\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">eZ\Publish\API\Repository\Values\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="10" package="Default">
      <name>SectionIdentifier</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\SortClause\SectionIdentifier</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\SortClause</extends>
      <docblock line="7">
        <description><![CDATA[Sets sort direction on Section identifier for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="16" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="12">
          <description><![CDATA[Constructs a new SectionIdentifier SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="12" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="16">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/SortClause/DateCreated.php" hash="48c8b276fe083be6504582fb752d0095">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/SortClause/DateCreated.php</error>
    </parse_markers>
    <namespace-alias name="Query">eZ\Publish\API\Repository\Values\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">eZ\Publish\API\Repository\Values\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="10" package="Default">
      <name>DateCreated</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\SortClause\DateCreated</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\SortClause</extends>
      <docblock line="7">
        <description><![CDATA[Sets sort direction on the content creation date for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="16" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="12">
          <description><![CDATA[Constructs a new DateCreated SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="12" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="16">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/SortClause/LocationDepth.php" hash="f8b19e079607477432edcea11c449c3f">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/SortClause/LocationDepth.php</error>
    </parse_markers>
    <namespace-alias name="Query">eZ\Publish\API\Repository\Values\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">eZ\Publish\API\Repository\Values\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="10" package="Default">
      <name>LocationDepth</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\SortClause\LocationDepth</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\SortClause</extends>
      <docblock line="7">
        <description><![CDATA[Sets sort direction on the location depth string for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="16" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="12">
          <description><![CDATA[Constructs a new LocationDepth SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="12" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="16">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/SortClause/Target.php" hash="6fcfb14ad6765d19297527d6b9db8ab4" package="eZ\Publish\API\Repository\Values\Content\Query">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
    </docblock>
    <parse_markers>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/Values/Content/Query/SortClause/Target.php</critical>
    </parse_markers>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="13" package="eZ\Publish\API\Repository\Values\Content\Query">
      <name>Target</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\SortClause\Target</full_name>
      <extends/>
      <docblock line="9">
        <description><![CDATA[Struct that stores extra target informations for a SortClause object]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="9" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
      </docblock>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/SortClause/SectionName.php" hash="5d7ec4aedd9160c4b81d248cb47a6f77">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/SortClause/SectionName.php</error>
    </parse_markers>
    <namespace-alias name="Query">eZ\Publish\API\Repository\Values\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">eZ\Publish\API\Repository\Values\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="10" package="Default">
      <name>SectionName</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\SortClause\SectionName</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\SortClause</extends>
      <docblock line="7">
        <description><![CDATA[Sets sort direction on Section name for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="16" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="12">
          <description><![CDATA[Constructs a new SectionName SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="12" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="16">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/SortClause/LocationPriority.php" hash="c9160bd1a806931f5f86a73dad46728a">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/SortClause/LocationPriority.php</error>
    </parse_markers>
    <namespace-alias name="Query">eZ\Publish\API\Repository\Values\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">eZ\Publish\API\Repository\Values\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="10" package="Default">
      <name>LocationPriority</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\SortClause\LocationPriority</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\SortClause</extends>
      <docblock line="7">
        <description><![CDATA[Sets sort direction on the location priority date for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="16" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="12">
          <description><![CDATA[Constructs a new LocationPriority SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="12" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="16">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/SortClause/LocationPathString.php" hash="93cd3bd22a1454f266558248565c9f8a">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/SortClause/LocationPathString.php</error>
    </parse_markers>
    <namespace-alias name="Query">eZ\Publish\API\Repository\Values\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">eZ\Publish\API\Repository\Values\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="10" package="Default">
      <name>LocationPathString</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\SortClause\LocationPathString</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\SortClause</extends>
      <docblock line="7">
        <description><![CDATA[Sets sort direction on the location path string for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="16" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="12">
          <description><![CDATA[Constructs a new LocationPathString SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="12" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="16">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/SortClause/DateModified.php" hash="0d7906c35e41d36916ff4ba8b34cd681">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/SortClause/DateModified.php</error>
    </parse_markers>
    <namespace-alias name="Query">eZ\Publish\API\Repository\Values\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">eZ\Publish\API\Repository\Values\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="10" package="Default">
      <name>DateModified</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\SortClause\DateModified</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\SortClause</extends>
      <docblock line="7">
        <description><![CDATA[Sets sort direction on the content modification date for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\SortClause" line="16" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="12">
          <description><![CDATA[Constructs a new DateCreated SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="12" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="16">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/CriterionInterface.php" hash="abcec947a5e11347a99a3afec60cc043" package="eZ\Publish\API\Repository\Values\Content\Query">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
    </docblock>
    <parse_markers>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/Values/Content/Query/CriterionInterface.php</critical>
    </parse_markers>
    <interface namespace="eZ\Publish\API\Repository\Values\Content\Query" line="13" package="eZ\Publish\API\Repository\Values\Content\Query">
      <name>CriterionInterface</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</full_name>
      <extends/>
      <docblock line="9">
        <description><![CDATA[Base interface for Criterion implementations]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="9" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query" line="24" package="Default">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <docblock line="15">
          <description><![CDATA[Creates a new Criterion for $target with operator $operator on $value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="15" name="param" description="The target (field identifier for a field, metadata identifier, etc)" type="string" variable="$target">
            <type by_reference="false">string</type>
          </tag>
          <tag line="15" name="param" description="The criterion operator, from Criterion\Operator" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="15" name="param" description="The Criterion value, either as an individual item or an array" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="15" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="24">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="24">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query" line="55" package="Default">
        <name>getSpecifications</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Criterion description function.]]></description>
          <long-description><![CDATA[<p>Returns the combination of the Criterion's supported operator/value,
as an array of eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications objects
- Operator is one supported Operator, as an Operator::* constant
- ValueType is the type of input value this operator requires, either array or single
- SupportedTypes is an array of types the operator will accept
- ValueCountLimitation is an integer saying how many values are expected.</p>

<pre><code>// IN and EQ are supported
return array(
    // The EQ operator expects a single value, either as an integer or a string
    new Specifications(
        Operator::EQ,
        Specifications::INPUT_TYPE_SINGLE,
        array( Specifications::INPUT_VALUE_INTEGER, Specifications::INPUT_VALUE_STRING ),
    ),
    // The IN operator expects an array of values, of either integers or strings
    new Specifications(
        Operator::IN,
        Specifications::INPUT_TYPE_ARRAY,
        array( Specifications::INPUT_VALUE_INTEGER, Specifications::INPUT_VALUE_STRING )
    )
)*
</code></pre>]]></long-description>
          <tag line="26" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications[]">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications[]</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/ContentTypeGroupId.php" hash="f40c23b36a87acf369f9160f07df35dc">
    <parse_markers>
      <error line="31" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="45" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/ContentTypeGroupId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="15" package="Default">
      <name>ContentTypeGroupId</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\ContentTypeGroupId</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="7">
        <description><![CDATA[A criterion that will match content based on its ContentTypeGroup id.]]></description>
        <long-description><![CDATA[<p>The ContentType must belong to at least one of the matched ContentTypeGroups</p>

<p>Supported operators:
- IN: will match from a list of ContentTypeGroup id
- EQ: will match against one ContentTypeGroup id</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="26" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Creates a new ContentTypeGroup criterion]]></description>
          <long-description><![CDATA[<p>Content will be matched if it matches one of the contentTypeGroupId in $value</p>]]></long-description>
          <tag line="17" name="param" description="One or more contentTypeGroupId that must be matched" type="integer|\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="17" name="throws" description="if the parameters don't match what the criterion expects" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="31">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="45">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="45">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/Operator.php" hash="b9dfc3c707e97f4a1116b61ed65ca0d9" package="eZ\Publish\API\Repository\Values\Content\Query">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
    </docblock>
    <parse_markers>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/Values/Content/Query/Criterion/Operator.php</critical>
    </parse_markers>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="14" package="eZ\Publish\API\Repository\Values\Content\Query">
      <name>Operator</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator</full_name>
      <extends/>
      <docblock line="8">
        <description><![CDATA[Operators struct]]></description>
        <long-description><![CDATA[<p>Note that the method is abstract as there is no point in instanciating it</p>]]></long-description>
        <tag line="8" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
      </docblock>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="16">
        <name>EQ</name>
        <value><![CDATA["="]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="17">
        <name>GT</name>
        <value><![CDATA[">"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="18">
        <name>GTE</name>
        <value><![CDATA[">="]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="19">
        <name>LT</name>
        <value><![CDATA["<"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="20">
        <name>LTE</name>
        <value><![CDATA["<="]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="21">
        <name>IN</name>
        <value><![CDATA["in"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="22">
        <name>BETWEEN</name>
        <value><![CDATA["between"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="23">
        <name>LIKE</name>
        <value><![CDATA["like"]]></value>
      </constant>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/LogicalAnd.php" hash="33d99a4f00177c9e5cfac6c5b0881134">
    <parse_markers>
      <error line="9" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criteria in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/LogicalAnd.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="7" package="Default">
      <name>LogicalAnd</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\LogicalAnd</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\LogicalOperator</extends>
      <docblock line="4">
        <description><![CDATA[This class does...]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="16" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="9">
          <description><![CDATA[Creates a new AND logic criterion.]]></description>
          <long-description><![CDATA[<p>This criterion will only match if ALL of the given criteria match</p>]]></long-description>
          <tag line="9" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(Criterion)" variable="$criteria">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(Criterion)</type>
          </tag>
        </docblock>
        <argument line="16">
          <name>$criteria</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/FullText.php" hash="5ce6cbeab19ffc31105cdf101ebc1943">
    <parse_markers>
      <error line="29" code="50014">Name of argument $value does not match with the DocBlock's name $text in __construct()</error>
      <notice line="29" code="50013">Parameter $text could not be found in __construct()</notice>
      <error line="39" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="46" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/FullText.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="27" package="Default">
      <name>FullText</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\FullText</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="7">
        <description><![CDATA[Full text search criterion]]></description>
        <long-description><![CDATA[<p>The string provided in this criterion is matched as a full text query
against all indexed content objects in the storage layer.</p>

<p>Normalization and querying capabilities might depend on the system
configuration or the used search engine and might differ. The following
basic query seamtics are supported:</p>

<ul>
<li><p>If multiple words are specified an AND query is performed. OR queries are
not yet supported.</p></li>
<li><p>Simple wild cards are supported. If an asterisk (<em>) is used at the end or
beginning of a word this is translated into a wild card query. Thus "fo</em>"
would match "foo" and "foobar", for example.</p></li>
<li><p>Simple stop word removal might be applied to the words provided in the
query.</p></li>
</ul>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="34" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Creates a FullText criterion on $text, using the IN Operator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="param" description="The text to match on" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="39">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="46">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="46">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/Operator/Specifications.php" hash="507a2b65fbc6db0c325ced03f22e5117" package="eZ\Publish\API\Repository\Values\Content\Query">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
    </docblock>
    <parse_markers>
      <error line="58" code="50014">Name of argument $operator does not match with the DocBlock's name $valueFormat in __construct()</error>
      <error line="58" code="50014">Name of argument $valueFormat does not match with the DocBlock's name $valueTypes in __construct()</error>
      <error line="58" code="50014">Name of argument $valueTypes does not match with the DocBlock's name $valueCount in __construct()</error>
      <error line="58" code="50015">Argument $valueCount is missing from the Docblock of __construct()</error>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/Values/Content/Query/Criterion/Operator/Specifications.php</critical>
    </parse_markers>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator" line="14" package="eZ\Publish\API\Repository\Values\Content\Query">
      <name>Specifications</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</full_name>
      <extends/>
      <docblock line="8">
        <description><![CDATA[This class is used by Criteria to describe which operators they support]]></description>
        <long-description><![CDATA[<p>Instances of this class are returned in an array by the {@see Criterion::getSpecifications()} method</p>]]></long-description>
        <tag line="8" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
      </docblock>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator" line="19" package="Default">
        <name>FORMAT_SINGLE</name>
        <value><![CDATA['single']]></value>
        <docblock line="16">
          <description><![CDATA[Criterion input type description constants.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator" line="20">
        <name>FORMAT_ARRAY</name>
        <value><![CDATA['array']]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator" line="26" package="Default">
        <name>TYPE_INTEGER</name>
        <value><![CDATA[1]]></value>
        <docblock line="22">
          <description><![CDATA[Criterion input value type description constants.]]></description>
          <long-description><![CDATA[<p>Used by {@see getDescription()} to say which type of values an operator expects</p>]]></long-description>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator" line="27">
        <name>TYPE_STRING</name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator" line="28">
        <name>TYPE_BOOLEAN</name>
        <value><![CDATA[4]]></value>
      </constant>
      <property final="false" static="false" visibility="public" line="33" package="Default">
        <name>$operator</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Specified operator, as one of the Operator::* constants]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="40" package="Default">
        <name>$valueFormat</name>
        <default><![CDATA[]]></default>
        <docblock line="35">
          <description><![CDATA[Format supported for the Criterion value, either single (INPUT_TYPE_SINGLE) or multiple (INPUT_TYPE_ARRAY)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="see" description="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\self::INPUT_TYPE_*" refers="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\self::INPUT_TYPE_*"/>
          <tag line="35" name="param" description="self::INPUT_VALUE_*" type="" variable=""/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="47" package="Default">
        <name>$valueTypes</name>
        <default><![CDATA[]]></default>
        <docblock line="42">
          <description><![CDATA[Accepted values types, specifying what type of variables are accepted as a value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="see" description="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\self::INPUT_VALUE_*" refers="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\self::INPUT_VALUE_*"/>
          <tag line="42" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="56" package="Default">
        <name>$valueCount</name>
        <default><![CDATA[]]></default>
        <docblock line="49">
          <description><![CDATA[Limitation on the number of items as the value]]></description>
          <long-description><![CDATA[<p>Only usable if {@see $parameterInputType} is {@see self::INPUT_TYPE_ARRAY}.
Not setting it means that 1...n will be required</p>]]></long-description>
          <tag line="49" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator" line="65" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Creates a new Specifications object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="pparam" description="string $operator The specified operator, as one of the Operator::* constants"/>
          <tag line="58" name="param" description="The accepted value format, either {@see self::FORMAT_ARRAY} or {@see self::FORMAT_SINGLE}" type="string" variable="$valueFormat">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="The supported value types, as a bit field of the {@see self::TYPES_*} constants" type="int" variable="$valueTypes">
            <type by_reference="false">int</type>
          </tag>
          <tag line="58" name="param" description="The required number of values, when the accepted format is {@see self::FORMAT_ARRAY}" type="integer" variable="$valueCount">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="65">
          <name>$valueFormat</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="65">
          <name>$valueTypes</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="65">
          <name>$valueCount</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/RemoteId.php" hash="30c080c6553049dbd7436e21107b56cf">
    <parse_markers>
      <error line="29" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="45" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/RemoteId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="14" package="Default">
      <name>RemoteId</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\RemoteId</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="7">
        <description><![CDATA[A criterion that matches content based on its RemoteId]]></description>
        <long-description><![CDATA[<p>Supported operators:
- IN: will match from a list of RemoteId
- EQ: will match against one RemoteId</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="16">
          <description><![CDATA[Creates a new remoteId criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="16" name="param" description="One or more remoteId that must be matched" type="integer|\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="16" name="throws" description="if a non numeric id is given" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="16" name="throws" description="if the value type doesn't match the operator" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="29">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="45">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="45">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/UserMetadata.php" hash="6c99e41889dc1f2afbeb5ae3f9e0d247">
    <parse_markers>
      <error line="62" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/UserMetadata.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="24" package="Default">
      <name>UserMetadata</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\UserMetadata</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="8">
        <description><![CDATA[A criterion that matches content based on one of the user metadata (owner,
creator, modifier)]]></description>
        <long-description><![CDATA[<p>Supported Operators:
EQ, IN: Matches the provided user ID(s) against the user IDs in the database</p>

<p>Example:</p>

<pre><code>$createdCriterion = new Criterion\UserMetadata(
    Criterion\UserMetadata::CREATOR,
    Operator::IN,
    array( 10, 14 )
);
</code></pre>]]></long-description>
      </docblock>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="29" package="Default">
        <name>OWNER</name>
        <value><![CDATA['owner']]></value>
        <docblock line="26">
          <description><![CDATA[UserMetadata target: Owner user]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="34" package="Default">
        <name>GROUP</name>
        <value><![CDATA['group']]></value>
        <docblock line="31">
          <description><![CDATA[UserMetadata target: Owner user group]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="39" package="Default">
        <name>CREATOR</name>
        <value><![CDATA['creator']]></value>
        <docblock line="36">
          <description><![CDATA[UserMetadata target: Creator]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="44" package="Default">
        <name>MODIFIER</name>
        <value><![CDATA['modifier']]></value>
        <docblock line="41">
          <description><![CDATA[UserMetadata target: Modifier]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="53" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Creates a new UserMetadata criterion on $metadata]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="One of UserMetadata::OWNER, UserMetadata::GROUP, UserMetadata::CREATED or UserMetadata::MODIFIED" type="string" variable="$target">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="param" description="One of the Operator constants" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="46" name="param" description="The match value, either as an array of as a single value, depending on the operator*" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="53">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="53">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="62">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/DateMetadata.php" hash="0a1a661240d2aab8c0aea9b40ebc2889">
    <parse_markers>
      <error line="54" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/DateMetadata.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="26" package="Default">
      <name>DateMetadata</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\DateMetadata</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="8">
        <description><![CDATA[A criterion that matches content based on one of the date metadata (created or modified)]]></description>
        <long-description><![CDATA[<p>Supported Operators:
EQ, IN: matches content whose date is or belongs to a list of timestamps
GT, GTE: matches content whose date is greater than/greater than or equals the given timestamp
LT, LTE: matches content whose date is lower than/lower than or equals the given timestamp
BETWEEN: matches content whose date is between (included) the TWO given timestamps</p>

<p>Example:</p>

<pre><code>$createdCriterion = new Criterion\DateMetadata(
    Criterion\DateMetadata::CREATED,
    Operator::GTE,
    strtotime( 'yesterday' )
);
</code></pre>]]></long-description>
      </docblock>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="31" package="Default">
        <name>MODIFIED</name>
        <value><![CDATA['modified']]></value>
        <docblock line="28">
          <description><![CDATA[DateMetadata target: modification date]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="36" package="Default">
        <name>CREATED</name>
        <value><![CDATA['created']]></value>
        <docblock line="33">
          <description><![CDATA[DateMetadata target: creation date]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="45" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Creates a new DateMetadata criterion on $metadata]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="param" description="One of DateMetadata::CREATED or DateMetadata::MODIFIED" type="string" variable="$target">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="One of the Operator constants" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="The match value, either as an array of as a single value, depending on the operator*" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="54">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/LogicalNot.php" hash="e894c9b6f0c899773fb849600966cabf">
    <parse_markers>
      <error line="11" code="50014">Name of argument $criterion does not match with the DocBlock's name $criteria in __construct()</error>
      <error line="11" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criterion in __construct()</error>
      <notice line="11" code="50013">Parameter $criteria could not be found in __construct()</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/LogicalNot.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="9" package="Default">
      <name>LogicalNot</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\LogicalNot</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\LogicalOperator</extends>
      <docblock line="5">
        <description><![CDATA[A NOT logical criterion]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="20" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="11">
          <description><![CDATA[Creates a new NOT logic criterion.]]></description>
          <long-description><![CDATA[<p>Will match of the given criterion doesn't match</p>]]></long-description>
          <tag line="11" name="param" description="One criterion, as a an array" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(Criterion)" variable="$criteria">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(Criterion)</type>
          </tag>
          <tag line="11" name="throws" description="if more than one criterion is given in the array parameter" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="20">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/ParentLocationId.php" hash="17ff12945a33ec01e58df9bc465acae8">
    <parse_markers>
      <error line="31" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="47" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/ParentLocationId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="16" package="Default">
      <name>ParentLocationId</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\ParentLocationId</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="7">
        <description><![CDATA[A criterion that matches content based on its parent location id]]></description>
        <long-description><![CDATA[<p>Own location id is done using {@see LocationId}</p>

<p>Supported operators:
- IN: matches against a list of location ids
- EQ: matches against a unique location id</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="26" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Creates a new ParentLocationId criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="One or more locationId parent locations must be matched against" type="integer|\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="18" name="throws" description="if a non numeric id is given" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="18" name="throws" description="if the value type doesn't match the operator" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="31">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="47">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="47">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="47">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="47">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/ContentId.php" hash="f3190d7ad84ab5462771dbde3c3b6ca4">
    <parse_markers>
      <error line="29" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="38" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/ContentId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="14" package="Default">
      <name>ContentId</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\ContentId</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="7">
        <description><![CDATA[A criterion that matches content based on its id]]></description>
        <long-description><![CDATA[<p>Supported operators:
- IN: will match from a list of ContentId
- EQ: will match against one ContentId</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="16">
          <description><![CDATA[Creates a new ContentId criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="16" name="param" description="One or more content Id that must be matched." type="integer|\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="16" name="throws" description="if a non numeric id is given" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="16" name="throws" description="if the value type doesn't match the operator" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="29">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="38">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="38">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="38">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="38">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/LocationId.php" hash="b0172ffcf08b323ca62229bd1c36b8c8">
    <parse_markers>
      <error line="18" code="50014">Name of argument $value does not match with the DocBlock's name $target in __construct()</error>
      <notice line="18" code="50013">Parameter $target could not be found in __construct()</notice>
      <notice line="18" code="50013">Parameter $operator could not be found in __construct()</notice>
      <notice line="18" code="50013">Parameter  could not be found in __construct()</notice>
      <error line="36" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="52" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/LocationId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="16" package="Default">
      <name>LocationId</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\LocationId</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="7">
        <description><![CDATA[A criterion that matches content based on its own location id]]></description>
        <long-description><![CDATA[<p>Parent location id is done using {@see ParentLocationId}</p>

<p>Supported operators:
- IN: matches against a list of location ids
- EQ: matches against a unique location id</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Creates a new LocationId criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="Not used" type="null" variable="$target">
            <type by_reference="false">null</type>
          </tag>
          <tag line="18" name="param" description="Possible values: - Operator::IN: match against a list of locationId. $value must be an array of locationId - Operator::EQ: match against a single locationId. $value must be a single locationId" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="18" name="param" description="One or more locationId that must be matched" type="integer|\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)" variable="">
            <type by_reference="false">integer</type>
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="18" name="throws" description="if a non numeric id is given" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="18" name="throws" description="if the value type doesn't match the operator" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="36">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="52">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="52">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="52">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="52">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/Subtree.php" hash="29cb305769751596ec7034ffc94bc9e7">
    <parse_markers>
      <error line="38" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="54" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/Subtree.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="13" package="Default">
      <name>Subtree</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\Subtree</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="8">
        <description><![CDATA[Criterion that matches content that belongs to a given (list of) Subtree(s)]]></description>
        <long-description><![CDATA[<p>Content will be matched if it is part of at least one of the given subtree path strings</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="23" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="15">
          <description><![CDATA[Creates a new SubTree criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="15" name="param" description="an array of subtree path strings, eg: /1/2/" type="string|\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(string)" variable="$value">
            <type by_reference="false">string</type>
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(string)</type>
          </tag>
          <tag line="15" name="throws" description="if a non path string is given" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="15" name="throws" description="if the value type doesn't match the operator" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="38">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="54">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="54">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="54">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="54">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/ContentTypeId.php" hash="59ede5542fb3ead0fa11ca72e53208e8">
    <parse_markers>
      <error line="31" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="40" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/ContentTypeId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="14" package="Default">
      <name>ContentTypeId</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\ContentTypeId</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="7">
        <description><![CDATA[A criterion that matches content based on its ContentType id]]></description>
        <long-description><![CDATA[<p>Supported operators:
- IN: will match from a list of ContentTypeId
- EQ: will match against one ContentTypeId</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="26" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="16">
          <description><![CDATA[Creates a new ContentType criterion]]></description>
          <long-description><![CDATA[<p>Content will be matched if it matches one of the contentTypeId in $value</p>]]></long-description>
          <tag line="16" name="param" description="One or more content Id that must be matched" type="integer|\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="16" name="throws" description="if a non numeric id is given" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="16" name="throws" description="if the value type doesn't match the operator" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="31">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="40">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="40">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="40">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="40">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/LogicalOr.php" hash="d055e1abedcbeccbba97e95fc874cfaf">
    <parse_markers>
      <error line="9" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criteria in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/LogicalOr.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="7" package="Default">
      <name>LogicalOr</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\LogicalOr</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\LogicalOperator</extends>
      <docblock line="4">
        <description><![CDATA[This class does...]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="16" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="9">
          <description><![CDATA[Creates a new OR logic criterion.]]></description>
          <long-description><![CDATA[<p>This criterion will match if AT LEAST ONE of the given criteria match</p>]]></long-description>
          <tag line="9" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(Criterion)" variable="$criteria">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(Criterion)</type>
          </tag>
        </docblock>
        <argument line="16">
          <name>$criteria</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/SectionId.php" hash="be2d305b32c7d358ac6d28e0fe5a8596">
    <parse_markers>
      <error line="14" code="50014">Name of argument $value does not match with the DocBlock's name $target in __construct()</error>
      <notice line="14" code="50013">Parameter $target could not be found in __construct()</notice>
      <notice line="14" code="50013">Parameter $operator could not be found in __construct()</notice>
      <notice line="14" code="50013">Parameter  could not be found in __construct()</notice>
      <error line="34" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="50" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/SectionId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="12" package="Default">
      <name>SectionId</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\SectionId</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="7">
        <description><![CDATA[SectionId Criterion]]></description>
        <long-description><![CDATA[<p>Will match content that belongs to one of the given sections</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="29" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="14">
          <description><![CDATA[Creates a new Section criterion]]></description>
          <long-description><![CDATA[<p>Matches the content against one or more sectionId</p>]]></long-description>
          <tag line="14" name="param" description="Not used" type="null" variable="$target">
            <type by_reference="false">null</type>
          </tag>
          <tag line="14" name="param" description="Possible values: - Operator::IN: match against a list of sectionId. $value must be an array of sectionId - Operator::EQ: match against a single sectionId. $value must be a single sectionId" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="14" name="param" description="One or more sectionId that must be matched" type="integer|\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)" variable="">
            <type by_reference="false">integer</type>
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="14" name="throws" description="if a non numeric id is given" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="14" name="throws" description="if the value type doesn't match the operator" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="34">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="50">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="50">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="50">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="50">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/UrlAlias.php" hash="87805d5dfab4458c7f3c5e642539749b">
    <parse_markers>
      <error line="18" code="50014">Name of argument $value does not match with the DocBlock's name $subtreeId in __construct()</error>
      <notice line="18" code="50013">Parameter $subtreeId could not be found in __construct()</notice>
      <error line="35" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="56" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/UrlAlias.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="16" package="Default">
      <name>UrlAlias</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\UrlAlias</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="7">
        <description><![CDATA[A criterion that matches Content based on Url aliases.]]></description>
        <long-description><![CDATA[<p>Supported operators:
- IN: will match from a list of URL aliases, wildcards allowed, using *:
  /articles/*
- EQ: strict match against one URL alias
- LIKE: fuzzy match using wildcards</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="30" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Creates a new UrlAlias Criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="Possible values: - Operator::IN, requires an array of subtree id as the $value - Operator::EQ, requires a single subtree id as the $value" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="18" name="param" description="an array of subtree ids" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)" variable="$subtreeId">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="18" name="throws" description="if a non numeric id is given" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="18" name="throws" description="if the value type doesn't match the operator" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="35">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="56">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="56">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="56">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="56">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/LogicalOperator.php" hash="68f152f86a4e1f7ec1e0bc27c8df6d00">
    <parse_markers>
      <error line="19" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criteria in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/LogicalOperator.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="11" package="Default">
      <name>LogicalOperator</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\LogicalOperator</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <docblock line="6">
        <description><![CDATA[Note that the class should ideally have been in a Logical namespace, but it would have then be named 'And',
and 'And' is a PHP reserved word.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="17" package="Default">
        <name>$criteria</name>
        <default><![CDATA[array()]]></default>
        <docblock line="13">
          <description><![CDATA[The set of criteria combined by the logical operator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="13" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(Criterion)">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(Criterion)</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Creates a Logic operation with the given criteria]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(Criterion)" variable="$criteria">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\array(Criterion)</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$criteria</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/Field.php" hash="d430dbc05a5d1b00f2360d1ef1d5c4a9">
    <parse_markers>
      <error line="14" code="50014">Name of argument $fieldIdentifer does not match with the DocBlock's name $target in __construct()</error>
      <notice line="14" code="50013">Parameter $target could not be found in __construct()</notice>
      <error line="28" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/Field.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="12" package="Default">
      <name>Field</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\Field</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="7">
        <description><![CDATA[The Field Criterion class.]]></description>
        <long-description><![CDATA[<p>Provides content filtering based on Fields contents &amp; values.</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="23" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="14">
          <description><![CDATA[Creates a new Field Criterion.]]></description>
          <long-description><![CDATA[<p>Matches $field against $value using $operator</p>]]></long-description>
          <tag line="14" name="param" description="The target type/field" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion\FieldIdentifierStruct" variable="$target">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion\FieldIdentifierStruct</type>
          </tag>
          <tag line="14" name="param" description="The match operator" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="14" name="param" description="The value to match against" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$fieldIdentifer</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="23">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="23">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="28">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion/Status.php" hash="89de134506e5f3ffa121fd836a3740a2">
    <parse_markers>
      <error line="55" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="71" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query/Criterion/Status.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="13" package="Default">
      <name>Status</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion\Status</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</extends>
      <extends>\eZ\Publish\API\Repository\Values\Content\Query\CriterionInterface</extends>
      <docblock line="8">
        <description><![CDATA[A criterion that matches content based on its status]]></description>
        <long-description><![CDATA[<p>Multiple statuses can be used, asn array of statuses</p>]]></long-description>
      </docblock>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="18" package="Default">
        <name>STATUS_DRAFT</name>
        <value><![CDATA["draft"]]></value>
        <docblock line="15">
          <description><![CDATA[Status constant: draft]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="23" package="Default">
        <name>STATUS_PUBLISHED</name>
        <value><![CDATA["published"]]></value>
        <docblock line="20">
          <description><![CDATA[Status constant: published]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="28" package="Default">
        <name>STATUS_ARCHIVED</name>
        <value><![CDATA["archived"]]></value>
        <docblock line="25">
          <description><![CDATA[Status constant: archived]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="35" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Creates a new Status criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="param" description="Status: self::STATUS_ARCHIVED, self::STATUS_DRAFT, self::STATUS_PUBLISHED" type="string|\string[]" variable="$value">
            <type by_reference="false">string</type>
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="55">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query\Criterion" line="71">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="71">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="71">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="71">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/Criterion.php" hash="1711cb709667a1ed6f7a4eb9cb149e5f" package="eZ\Publish\API\Repository\Values\Content\Query">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
    </docblock>
    <parse_markers>
      <error line="150" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <critical line="12" code="50005">No short description for class Criterion</critical>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/Values/Content/Query/Criterion.php</critical>
    </parse_markers>
    <namespace-alias name="Specifications">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="Operator">eZ\Publish\API\Repository\Values\Content\Query\Criterion\Operator</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content\Query" line="15" package="eZ\Publish\API\Repository\Values\Content\Query">
      <name>Criterion</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\Criterion</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="12" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="21" package="Default">
        <name>$operator</name>
        <default><![CDATA[]]></default>
        <docblock line="17">
          <description><![CDATA[The operator used by the Criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="27" package="Default">
        <name>$value</name>
        <default><![CDATA[]]></default>
        <docblock line="23">
          <description><![CDATA[The value(s) matched by the criteria]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\Query\array(int|\eZ\Publish\API\Repository\Values\Content\Query\string)">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\array(int</type>
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\string)</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="33" package="Default">
        <name>$target</name>
        <default><![CDATA[]]></default>
        <docblock line="29">
          <description><![CDATA[The target used by the criteria (field, metadata...)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query" line="46" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Performs operator validation based on the Criterion specifications returned by {@see getSpecifications()}]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="param" description="The target the Criterion applies to: metadata identifier, field identifier..." type="string|null" variable="$target">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="35" name="param" description="The operator the Criterion uses. If null is given, will default to Operator::IN if $value is an array, Operator::IN if it is not." type="string|null" variable="$operator">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="35" name="param" description="" type="\string[]|\int[]|int|string" variable="$value">
            <type by_reference="false">\string[]</type>
            <type by_reference="false">\int[]</type>
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="35" name="todo" description="Add a dedicated exception"/>
          <tag line="35" name="throws" description="if the provided operator isn't supported" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="eZ\Publish\API\Repository\Values\Content\Query" line="117" package="Default">
        <name>getValueTypeCheckCallback</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Returns a callback that checks the values types depending on the operator specifications]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="param" description="The accepted values, as a bit field of Specifications::TYPE_* constants" type="int" variable="$valueTypes">
            <type by_reference="false">int</type>
          </tag>
          <tag line="112" name="return" description="" type="callback">
            <type by_reference="false">callback</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$valueTypes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query" line="150">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="150">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="150">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="150">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query/SortClause.php" hash="d37193670c597314cf5c42f9861857ff" package="eZ\Publish\API\Repository\Values\Content\Query">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
    </docblock>
    <parse_markers>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/Values/Content/Query/SortClause.php</critical>
    </parse_markers>
    <namespace-alias name="Query">eZ\Publish\API\Repository\Values\Content\Query</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content\Query" line="16" package="eZ\Publish\API\Repository\Values\Content\Query">
      <name>SortClause</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query\SortClause</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[This class is the base for SortClause classes, used to set sorting of content queries]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="12" name="package" description="eZ\Publish\API\Repository\Values\Content\Query"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$direction</name>
        <default><![CDATA[Query::SORT_ASC]]></default>
        <docblock line="18">
          <description><![CDATA[Sort direction
One of \ezp\Content\Query::SORT_ASC or \ezp\Content\Query::SORT_DESC;]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" package="Default">
        <name>$target</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[Sort target, high level: section_identifier, attribute_value, etc]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$targetData</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Extra target data, required by some sort clauses, field for instance]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\Query\SortClauseTarget">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\SortClauseTarget</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content\Query" line="45" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Constructs a new SortClause on $sortTarget in direction $sortDirection]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="param" description="" type="string" variable="$sortTarget">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="one of ezp\Content\Query::SORT_ASC or ezp\Content\Query::SORT_DESC" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="Extra target data, used by some clauses (field for instance)" type="string" variable="$targetData">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="throws" description="if the given sort order isn't one of ezp\Content\Query::SORT_ASC or ezp\Content\Query::SORT_DESC" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$sortTarget</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$sortDirection</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$targetData</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Query.php" hash="06d829eca549f163336a5afe889f3a29">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Query.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="Criterion">eZ\Publish\API\Repository\Values\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="SortClause">eZ\Publish\API\Repository\Values\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content" line="11" package="Default">
      <name>Query</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Query</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="8">
        <description><![CDATA[This class is used to perform a query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="13">
        <name>SORT_ASC</name>
        <value><![CDATA['ascending']]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="15">
        <name>SORT_DESC</name>
        <value><![CDATA['descending']]></value>
      </constant>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$criterion</name>
        <default><![CDATA[]]></default>
        <docblock line="17">
          <description><![CDATA[The Query criterion
Can contain multiple criterion, as items of a logical one (by default AND)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\Query\Criterion">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query\Criterion</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$sortClauses</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[Query sorting clauses]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="an array of {@link SortClause}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="37" package="Default">
        <name>$offset</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[Query offset]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="44" package="Default">
        <name>$limit</name>
        <default><![CDATA[]]></default>
        <docblock line="39">
          <description><![CDATA[Query limit]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/ContentCreateStruct.php" hash="35d065092961686e2f55efcc84303d64">
    <parse_markers>
      <error line="65" code="50014">Name of argument $fieldDefIdentifier does not match with the DocBlock's name $fieldIdentifier in setField()</error>
      <notice line="65" code="50013">Parameter $fieldIdentifier could not be found in setField()</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/ContentCreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ContentType">eZ\Publish\API\Repository\Values\ContentType\ContentType</namespace-alias>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content" line="11" package="Default">
      <name>ContentCreateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\ContentCreateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="7">
        <description><![CDATA[This class is used for creating a new content object]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="7" name="property-write" description="an array of {@link Field}" type="array" variable="$fields">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="18" package="Default">
        <name>$contentType</name>
        <default><![CDATA[]]></default>
        <docblock line="13">
          <description><![CDATA[The content type for which the new content is created]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="13" name="var" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentType">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="26" package="Default">
        <name>$sectionId</name>
        <default><![CDATA[null]]></default>
        <docblock line="20">
          <description><![CDATA[The section the content is assigned to.]]></description>
          <long-description><![CDATA[<p>If not set the section of the parent is used or a default section.</p>]]></long-description>
          <tag line="20" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="33" package="Default">
        <name>$ownerId</name>
        <default><![CDATA[null]]></default>
        <docblock line="28">
          <description><![CDATA[The owner of the content. If not given the current authenticated user is set as owner.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="40" package="Default">
        <name>$alwaysAvailable</name>
        <default><![CDATA[true]]></default>
        <docblock line="35">
          <description><![CDATA[Indicates if the content object is shown in the mainlanguage if its not present in an other requested language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="47" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[null]]></default>
        <docblock line="42">
          <description><![CDATA[Remote identifier used as a custom identifier for the object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="56" package="Default">
        <name>$mainLanguageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="49">
          <description><![CDATA[the main language code for the content. This language will also
be used for as initial language for the first created version.]]></description>
          <long-description><![CDATA[<p>It is also used as default language for added fields.</p>]]></long-description>
          <tag line="49" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="63" package="Default">
        <name>$modifiedDate</name>
        <default><![CDATA[]]></default>
        <docblock line="58">
          <description><![CDATA[Modification date. If not given the current timestamp is used.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\DateTime">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\DateTime</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="79" package="Default">
        <name>setField</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Adds a field to the field collection.]]></description>
          <long-description><![CDATA[<p>This method could also be implemented by a magic setter so that
$fields[$fieldDefIdentifer][$language] = $value or without language $fielfs[$fieldDefIdentifer] = $value
is an equivalent call.</p>]]></long-description>
          <tag line="65" name="param" description="the identifier of the field definition" type="string" variable="$fieldIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="65" name="param" description="Either a plain value which is understandable by the corresponding field type or an instance of a Value class provided by the field type" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="65" name="param" description="If not given on a translatable field the initial language is used" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$fieldDefIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="79">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="79">
          <name>$language</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/LocationCreateStruct.php" hash="c6ac8da5f22881a3bd81fae48115a613">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/LocationCreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content" line="10" package="Default">
      <name>LocationCreateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\LocationCreateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[This class is used to create a new Location for a content object]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="20" package="Default">
        <name>$priority</name>
        <default><![CDATA[0]]></default>
        <docblock line="12">
          <description><![CDATA[Location priority]]></description>
          <long-description><![CDATA[<p>Position of the Location among its siblings when sorted using priority
sort order.</p>]]></long-description>
          <tag line="12" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="27" package="Default">
        <name>$hidden</name>
        <default><![CDATA[false]]></default>
        <docblock line="22">
          <description><![CDATA[Indicates that the Location entity has been explicitly marked as hidden.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="29">
          <description><![CDATA[An universally unique identifier.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="42" package="Default">
        <name>$isMainLocation</name>
        <default><![CDATA[false]]></default>
        <docblock line="36">
          <description><![CDATA[Indicates if the newly created location should be set as main location.]]></description>
          <long-description><![CDATA[<p>On creating a new content object with only one location this parameter is ignored.</p>]]></long-description>
          <tag line="36" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="51" package="Default">
        <name>$sortField</name>
        <default><![CDATA[Location::SORT_FIELD_NAME]]></default>
        <docblock line="44">
          <description><![CDATA[Specifies which property the child locations should be sorted on.]]></description>
          <long-description><![CDATA[<p>Valid values are found at {@link Location::SORT_FIELD_*}</p>]]></long-description>
          <tag line="44" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="60" package="Default">
        <name>$sortOrder</name>
        <default><![CDATA[Location::SORT_ORDER_ASC]]></default>
        <docblock line="53">
          <description><![CDATA[Specifies whether the sort order should be ascending or descending.]]></description>
          <long-description><![CDATA[<p>Valid values are {@link Location::SORT_ORDER_*}</p>]]></long-description>
          <tag line="53" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="66" package="Default">
        <name>$parentLocationId</name>
        <default><![CDATA[]]></default>
        <docblock line="62">
          <description><![CDATA[The id of the parent location under which the new location should be created.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/TranslationInfo.php" hash="3d8c352d9d7ca952e4654200d31670d8">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/TranslationInfo.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="VersionInfo">eZ\Publish\API\Repository\Values\Content\VersionInfo</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content" line="14" package="Default">
      <name>TranslationInfo</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\TranslationInfo</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="8">
        <description><![CDATA[5.x this class is used for reading and writing translation informations into the repository]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="8" name="property-read" description="returns $sourceVersionInfo-&gt;getContentInfo()" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="21" package="Default">
        <name>$sourceLanguageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="16">
          <description><![CDATA[the language code of the source language of the translation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="16" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="28" package="Default">
        <name>$destinationLanguageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="23">
          <description><![CDATA[the language code of the destination language of the translation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$srcVersionInfo</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[the source version this translation is based on]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="42" package="Default">
        <name>$destinationVersionInfo</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[the destination version this translation is placed in]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionInfo</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/LocationUpdateStruct.php" hash="e22e105213ca6912b71c2f1d8b6d3821">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/LocationUpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content" line="9" package="Default">
      <name>LocationUpdateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\LocationUpdateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="4">
        <description><![CDATA[This class is used for updating location meta data.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="16" package="Default">
        <name>$priority</name>
        <default><![CDATA[]]></default>
        <docblock line="11">
          <description><![CDATA[If set the location priority is changed to the new value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="11" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[if set the location gets a new remoteId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$isMainLocation</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[if set to true this location will set as new main location for the content.]]></description>
          <long-description><![CDATA[<p>If set to false this parameter is ignored.</p>]]></long-description>
          <tag line="25" name="var" description="" type="mixed|true">
            <type by_reference="false">mixed</type>
            <type by_reference="false">true</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="40" package="Default">
        <name>$sortField</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[If set the sortField is changed.]]></description>
          <long-description><![CDATA[<p>The sort field specifies which property the child locations should be sorted on.
Valid values are found at {@link Location::SORT_FIELD_*}</p>]]></long-description>
          <tag line="33" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="49" package="Default">
        <name>$sortOrder</name>
        <default><![CDATA[]]></default>
        <docblock line="42">
          <description><![CDATA[if set the sortOrder is changed.]]></description>
          <long-description><![CDATA[<p>The sort order specifies whether the sort order should be ascending or descending.
Valid values are {@link Location::SORT_ORDER_*}</p>]]></long-description>
          <tag line="42" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Location.php" hash="3bb0a30088fdb02da1771b1938469f07">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Location.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="Content">eZ\Publish\API\Repository\Values\Content\Content</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content" line="25" package="Default">
      <name>Location</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Location</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="7">
        <description><![CDATA[This class represents a location in the repository]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="7" name="property-read" description="calls getContentInfo()" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$contentInfo">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
        </tag>
        <tag line="7" name="property-read" description="calls getContent()-&gt;contentId" type="int" variable="$contentId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="7" name="property-read" description="the id of the location" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="7" name="property-read" description="Position of the Location among its siblings when sorted using priority" type="int" variable="$priority">
          <type by_reference="false">int</type>
        </tag>
        <tag line="7" name="property-read" description="Indicates that the Location is implicitly marked as hidden by a parent location." type="boolean" variable="$hidden">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="7" name="property-read" description="Indicates that the Location is implicitly marked as hidden by a parent location" type="boolean" variable="$invisible">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="7" name="property-read" description="a global unique id of the content object" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="7" name="property-read" description="the id of the parent location" type="\eZ\Publish\API\Repository\Values\Content\$int" variable="$parentId">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\$int</type>
        </tag>
        <tag line="7" name="property-read" description="the path to this location e.g. /1/2/4/23" type="string" variable="$pathString">
          <type by_reference="false">string</type>
        </tag>
        <tag line="7" name="property-read" description="Date of the latest update of a content object in a sub location." type="\eZ\Publish\API\Repository\Values\Content\DateTime" variable="$modifiedSubLocationDate">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\DateTime</type>
        </tag>
        <tag line="7" name="property-read" description="the id of the main location of the content of this location (if equals to $id it indicates that this location is the main location)" type="int" variable="$mainLocationId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="7" name="property-read" description="Specifies which property the child locations should be sorted on. Valid values are found at {@link Location::SORT_FIELD_*}" type="int" variable="$sortField">
          <type by_reference="false">int</type>
        </tag>
        <tag line="7" name="property-read" description="Specifies whether the sort order should be ascending or descending. Valid values are {@link Location::SORT_ORDER_*}" type="int" variable="$sortOrder">
          <type by_reference="false">int</type>
        </tag>
        <tag line="7" name="property-read" description="the number of chidren visible to the authenticated user which has loaded this instance." type="int" variable="$childrenCount">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="27">
        <name>SORT_FIELD_PATH</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="28">
        <name>SORT_FIELD_PUBLISHED</name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="29">
        <name>SORT_FIELD_MODIFIED</name>
        <value><![CDATA[3]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="30">
        <name>SORT_FIELD_SECTION</name>
        <value><![CDATA[4]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="31">
        <name>SORT_FIELD_DEPTH</name>
        <value><![CDATA[5]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="32">
        <name>SORT_FIELD_CLASS_IDENTIFIER</name>
        <value><![CDATA[6]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="33">
        <name>SORT_FIELD_CLASS_NAME</name>
        <value><![CDATA[7]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="34">
        <name>SORT_FIELD_PRIORITY</name>
        <value><![CDATA[8]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="35">
        <name>SORT_FIELD_NAME</name>
        <value><![CDATA[9]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="36">
        <name>SORT_FIELD_MODIFIED_SUBNODE</name>
        <value><![CDATA[10]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="37">
        <name>SORT_FIELD_NODE_ID</name>
        <value><![CDATA[11]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="38">
        <name>SORT_FIELD_CONTENTOBJECT_ID</name>
        <value><![CDATA[12]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="40">
        <name>SORT_ORDER_DESC</name>
        <value><![CDATA[0]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="41">
        <name>SORT_ORDER_ASC</name>
        <value><![CDATA[1]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="48" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="43">
          <description><![CDATA[Location ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="var" description="Location ID." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="58" package="Default">
        <name>$priority</name>
        <default><![CDATA[]]></default>
        <docblock line="50">
          <description><![CDATA[Location priority]]></description>
          <long-description><![CDATA[<p>Position of the Location among its siblings when sorted using priority
sort order.</p>]]></long-description>
          <tag line="50" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="65" package="Default">
        <name>$hidden</name>
        <default><![CDATA[]]></default>
        <docblock line="60">
          <description><![CDATA[Indicates that the Location entity has been explicitly marked as hidden.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" package="Default">
        <name>$invisible</name>
        <default><![CDATA[]]></default>
        <docblock line="67">
          <description><![CDATA[Indicates that the Location is implicitly marked as hidden by a parent
location.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="82" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="75">
          <description><![CDATA[Remote ID.]]></description>
          <long-description><![CDATA[<p>A universally unique identifier.</p>]]></long-description>
          <tag line="75" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="96" package="Default">
        <name>$parentId</name>
        <default><![CDATA[]]></default>
        <docblock line="91">
          <description><![CDATA[Parent ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="var" description="Location ID." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="103" package="Default">
        <name>$pathString</name>
        <default><![CDATA[]]></default>
        <docblock line="98">
          <description><![CDATA[The materialized path of the location entry, eg: /1/2/]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="110" package="Default">
        <name>$modifiedSubLocationDate</name>
        <default><![CDATA[]]></default>
        <docblock line="105">
          <description><![CDATA[Date of the latest update of a content object in a sub location.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\DateTime">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="120" package="Default">
        <name>$mainLocationId</name>
        <default><![CDATA[]]></default>
        <docblock line="112">
          <description><![CDATA[Identifier of the main location.]]></description>
          <long-description><![CDATA[<p>If the content object in this location has multiple locations,
$mainLocationId will point to the main one.</p>]]></long-description>
          <tag line="112" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="127" package="Default">
        <name>$depth</name>
        <default><![CDATA[]]></default>
        <docblock line="122">
          <description><![CDATA[Depth location has in the location tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="122" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="136" package="Default">
        <name>$sortField</name>
        <default><![CDATA[]]></default>
        <docblock line="129">
          <description><![CDATA[Specifies which property the child locations should be sorted on.]]></description>
          <long-description><![CDATA[<p>Valid values are found at {@link Location::SORT_FIELD_*}</p>]]></long-description>
          <tag line="129" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="145" package="Default">
        <name>$sortOrder</name>
        <default><![CDATA[]]></default>
        <docblock line="138">
          <description><![CDATA[Specifies whether the sort order should be ascending or descending.]]></description>
          <long-description><![CDATA[<p>Valid values are {@link Location::SORT_ORDER_*}</p>]]></long-description>
          <tag line="138" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="152" package="Default">
        <name>$childrenCount</name>
        <default><![CDATA[]]></default>
        <docblock line="147">
          <description><![CDATA[the number of chidren visible to the authenticated user which has loaded this instance.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="147" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="89" package="Default">
        <name>getContentInfo</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[returns the content info of the content object of this location]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Language.php" hash="4335c572a11ed133606f468436153da0">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Language.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content" line="14" package="Default">
      <name>Language</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Language</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[This class represents a language in the repository.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="6" name="property-read" description="the language id" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="6" name="property" description="string $languageCode the language code in" type="\eZ\Publish\API\Repository\Values\Content\read" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\read</type>
        </tag>
        <tag line="6" name="property-read" description="human readable name of the language" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="6" name="property-read" description="indicates if the langiuage is enabled or not." type="boolean" variable="$enabled">
          <type by_reference="false">boolean</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="19" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="16">
          <description><![CDATA[The language id (auto generated)]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="26" package="Default">
        <name>$languageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[the languageCode code]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="33" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="28">
          <description><![CDATA[Human readable name of the language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="40" package="Default">
        <name>$enabled</name>
        <default><![CDATA[]]></default>
        <docblock line="35">
          <description><![CDATA[indicates if the langiuage is enabled or not.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/ContentMetadataUpdateStruct.php" hash="314b8240748448dad26292571bd55de7">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/ContentMetadataUpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content" line="11" package="Default">
      <name>ContentMetaDataUpdateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\ContentMetaDataUpdateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="5">
        <description><![CDATA[With this class data can be provided to update version independent fields of the content.]]></description>
        <long-description><![CDATA[<p>It is used in content update methods.</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="18" package="Default">
        <name>$ownerId</name>
        <default><![CDATA[null]]></default>
        <docblock line="13">
          <description><![CDATA[If set this value changes the owner id of the content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="13" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="25" package="Default">
        <name>$publishedDate</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[if set this value overrides the publication date of the content. (Used in staging scenarios)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\DateTime">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$modifieDate</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[If set this value overrides the modification date. (Used for staging scenarios).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\DateTime">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="39" package="Default">
        <name>$mainLanguageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="34">
          <description><![CDATA[if set the main language of the content object is changed.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="46" package="Default">
        <name>$alwaysAvailable</name>
        <default><![CDATA[]]></default>
        <docblock line="41">
          <description><![CDATA[If set this value changes the always available flag]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="53" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="48">
          <description><![CDATA[if set this value  changes the remoteId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/SectionCreateStruct.php" hash="87a7f344d68c132584d6ac658e0b6cd0">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/SectionCreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content" line="9" package="Default">
      <name>SectionCreateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\SectionCreateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[This class represents a section]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="17" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="12">
          <description><![CDATA[Unique identifier of the section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="12" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Name of the section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/ContentInfo.php" hash="8fc5e917780658357b638c2cde3d39f7">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/ContentInfo.php</error>
    </parse_markers>
    <namespace-alias name="ContentType">eZ\Publish\API\Repository\Values\ContentType\ContentType</namespace-alias>
    <namespace-alias name="Location">eZ\Publish\API\Repository\Values\Content\Location</namespace-alias>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content" line="24" package="Default">
      <name>ContentInfo</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\ContentInfo</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="8">
        <description><![CDATA[This class provides all version independent information of the content object.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="8" name="property-read" description="calls {@link getContentType()}" type="\eZ\Publish\API\Repository\Values\ContentType\ContentType" variable="$contentType">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
        </tag>
        <tag line="8" name="property-read" description="The unique id of the content object" type="int" variable="$contentId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="8" name="property-read" description="the computed name (via name schema) in the main language of the content object" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="8" name="property-read" description="the section to which the content is assigned" type="int" variable="$sectionId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="8" name="property-read" description="Current Version number is the version number of the published version or the version number of a newly created draft (which is 1)." type="int" variable="$currentVersionNo">
          <type by_reference="false">int</type>
        </tag>
        <tag line="8" name="property-read" description="true if there exists a published version false otherwise" type="boolean" variable="$published">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="8" name="property-read" description="the user id of the owner of the content" type="int" variable="$ownerId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="8" name="property-read" description="Content modification date" type="\eZ\Publish\API\Repository\Values\Content\DateTime" variable="$modifiedDate">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\DateTime</type>
        </tag>
        <tag line="8" name="property-read" description="date of the last publish operation" type="\eZ\Publish\API\Repository\Values\Content\DateTime" variable="$publishedDate">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\DateTime</type>
        </tag>
        <tag line="8" name="property-read" description="Indicates if the content object is shown in the mainlanguage if its not present in an other requested language" type="boolean" variable="$alwaysAvailable">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="8" name="property-read" description="a global unique id of the content object" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="8" name="property-read" description="The main language code of the content. If the availble flag is set to true the content is shown in this language if the requested language does not exist." type="string" variable="$mainLanguageCode">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$contentId</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[The unique id of the content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[the computed name (via name schema) in the main language of the content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="48" package="Default">
        <name>$sectionId</name>
        <default><![CDATA[]]></default>
        <docblock line="44">
          <description><![CDATA[the section to which the content is assigned]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" package="Default">
        <name>$currentVersionNo</name>
        <default><![CDATA[]]></default>
        <docblock line="50">
          <description><![CDATA[Current Version number is the version number of the published version or the version number of
a newly created draft (which is 1).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" package="Default">
        <name>$published</name>
        <default><![CDATA[]]></default>
        <docblock line="59">
          <description><![CDATA[true if there exists a published version 0 otherwise]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="Constant." type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="71" package="Default">
        <name>$ownerId</name>
        <default><![CDATA[]]></default>
        <docblock line="66">
          <description><![CDATA[the owner of this content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="77" package="Default">
        <name>$modifiedDate</name>
        <default><![CDATA[]]></default>
        <docblock line="73">
          <description><![CDATA[Content modification date]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\DateTime">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="83" package="Default">
        <name>$publishedDate</name>
        <default><![CDATA[]]></default>
        <docblock line="79">
          <description><![CDATA[Content protectedation date]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\DateTime">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="89" package="Default">
        <name>$alwaysAvailable</name>
        <default><![CDATA[]]></default>
        <docblock line="85">
          <description><![CDATA[Indicates if the content object is shown in the mainlanguage if its not present in an other requested language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="95" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="91">
          <description><![CDATA[Remote identifier used as a custom identifier for the object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="101" package="Default">
        <name>$mainLanguageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="97">
          <description><![CDATA[The main language code of the content.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="42" package="Default">
        <name>getContentType</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[The content type of this content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentType">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Relation.php" hash="08091b49cdd95653d56901967e339ac6">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Relation.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="ContentInfo">eZ\Publish\API\Repository\Values\Content\ContentInfo</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content" line="15" package="Default">
      <name>Relation</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Relation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[Class representing a relation between content.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="6" name="property-read" description="the internal id of the relation" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="6" name="property-read" description="the field definition identifier of the field where this relation is anchored if the relation is of type EMBED, LINK, or ATTRIBUTE" type="string" variable="$sourceFieldDefinitionIdentifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="6" name="property-read" description="- calls {@link getSourceContentInfo()}" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$sourceContentInfo">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
        </tag>
        <tag line="6" name="property-read" description="- calls {@link getDestinationContentInfo()}" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo" variable="$destinationContentInfo">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
        </tag>
        <tag line="6" name="property-read" description="The relation type bitmask containing one or more of Relation::COMMON, Relation::EMBED, Relation::LINK, Relation::FIELD" type="int" variable="$type">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="22" package="Default">
        <name>COMMON</name>
        <value><![CDATA[1]]></value>
        <docblock line="17">
          <description><![CDATA[The relation type COMMON is a general relation between object set by a user.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="29" package="Default">
        <name>EMBED</name>
        <value><![CDATA[2]]></value>
        <docblock line="24">
          <description><![CDATA[the relation type EMBED is set for a relation which is anchored as embedded link in an attribute value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="36" package="Default">
        <name>LINK</name>
        <value><![CDATA[4]]></value>
        <docblock line="31">
          <description><![CDATA[the relation type LINK is set for a relation which is anchored as link in an attribute value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\Content" line="43" package="Default">
        <name>FIELD</name>
        <value><![CDATA[8]]></value>
        <docblock line="38">
          <description><![CDATA[the relation type FIELD is set for a relation which is part of an relation attribute value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[Id of the relation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" package="Default">
        <name>$sourceFieldDefinitionIdentifier</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[Source Content Type Field Definition Id.]]></description>
          <long-description><![CDATA[<p>For relation not of type RelationType::COMMON this field denotes the field definition id
of the attribute where the realtion is anchored.</p>]]></long-description>
          <tag line="52" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="82" package="Default">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <docblock line="75">
          <description><![CDATA[The relation type bitmask]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="see" description="\eZ\Publish\API\Repository\Values\Content\Relation::COMMON," refers="\eZ\Publish\API\Repository\Values\Content\Relation::COMMON,"/>
          <tag line="75" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="66" package="Default">
        <name>getSourceContentInfo</name>
        <type>function</type>
        <docblock line="61">
          <description><![CDATA[the content of the source content of the relation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="73" package="Default">
        <name>getDestinationContentInfo</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[the content of the destination content of the relation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentInfo">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentInfo</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/SearchResult.php" hash="3b46b0d46aab1ea80fbd595a8c651585">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/SearchResult.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Value\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content" line="10" package="Default">
      <name>SearchResult</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\SearchResult</full_name>
      <extends>\eZ\Publish\API\Repository\Value\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[This class is returnd by find methods providing a result of a search.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="17" package="Default">
        <name>$query</name>
        <default><![CDATA[]]></default>
        <docblock line="12">
          <description><![CDATA[the query this result is based on]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="12" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\Query">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Query</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$count</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Number of results found by the search]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$items</name>
        <default><![CDATA[array()]]></default>
        <docblock line="26">
          <description><![CDATA[The found items by the search]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="an array of {@link ValueObject}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Section.php" hash="6414e4210f20a4aeba736c88d19d9c91">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Section.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content" line="13" package="Default">
      <name>Section</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Section</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[This class represents a section]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="6" name="property-read" description="the id of the section" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="6" name="property-read" description="the identifier of the section" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="6" name="property-read" description="human readable name of the section" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="20" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="15">
          <description><![CDATA[Id of the section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="15" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="27" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="22">
          <description><![CDATA[Unique identifier of the section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="34" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="29">
          <description><![CDATA[Name of the section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/SectionUpdateStruct.php" hash="9d9b7fe42ed5f3368625d20445e3f5fd">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/SectionUpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content" line="9" package="Default">
      <name>SectionUpdateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\SectionUpdateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[This class represents a section]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="16" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="11">
          <description><![CDATA[If set the Unique identifier of the section is changes]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="11" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[If set the name of the section is changed]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/ContentUpdateStruct.php" hash="1cf306a77ca8cd665b2d5165eb8772bd">
    <parse_markers>
      <critical line="11" code="50019">No short description for property $userId</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/ContentUpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\Content" line="9" package="Default">
      <name>ContentUpdateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\ContentUpdateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="4">
        <description><![CDATA[This class is used for updating the fields of a content object draft]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="4" name="property-write" description="" type="array" variable="$fields">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="14" package="Default">
        <name>$userId</name>
        <default><![CDATA[]]></default>
        <docblock line="11">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="11" name="var" description="modifier of the new version. If not set the current authenticated user is used." type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$initialLanguageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="17">
          <description><![CDATA[The language code of the version. In 4.x this code will be used as the language code of the translation
(which is shown in the admin interface).]]></description>
          <long-description><![CDATA[<p>It is also used as default language for added fields.</p>]]></long-description>
          <tag line="17" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\Content" line="36" package="Default">
        <name>setField</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Adds a field to the field collection.]]></description>
          <long-description><![CDATA[<p>This method could also be implemented by ArrayAccess so that
$fielfs[$fieldDefIdentifer][$language] = $value or without language $fielfs[$fieldDefIdentifer] = $value
is an equivalent call.</p>]]></long-description>
          <tag line="26" name="param" description="the identifier of the field definition" type="string" variable="$fieldDefIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="param" description="Either a plain value which is understandable by the field type or an instance of a Value class provided by the field type" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="26" name="param" description="If not ghiven on a translatable field the initial language is used," type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$fieldDefIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="36">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="36">
          <name>$language</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/Content/Field.php" hash="6a91aa02f01b40d15169bb039c14b5c5">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/Content/Field.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\Content" line="14" package="Default">
      <name>Field</name>
      <full_name>\eZ\Publish\API\Repository\Values\Content\Field</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[This class represents a field of a content object]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="6" name="property-read" description="an internal id of the field" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="6" name="property-read" description="the field definition identifier" type="string" variable="$fieldDefIdentifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="6" name="property-read" description="the value of the field" type="\eZ\Publish\API\Repository\Values\Content\$value" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\$value</type>
        </tag>
        <tag line="6" name="property-read" description="the language code of the field" type="string" variable="$languageCode">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="23" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="16">
          <description><![CDATA[The field id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="16" name="todo" description="may be not needed"/>
          <tag line="16" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="31" package="Default">
        <name>$fieldDefIdentifier</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[The field definition identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$value</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[a field type value or a value type which can be converted by the corresponding field type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$languageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[the language code]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/IO/ContentType.php" hash="8164449ebc7daa2ff9c0e5d16e305ed8">
    <parse_markers>
      <error line="10" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/IO/ContentType.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\IO" line="8" package="Default">
      <name>ContentType</name>
      <full_name>\eZ\Publish\API\Repository\Values\IO\ContentType</full_name>
      <extends/>
      <docblock line="4">
        <description><![CDATA[This struct describes a file content type, as described in RFC 2045, RFC 2046,
RFC 2047, RFC 4288, RFC 4289 and RFC 2049.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="19" package="Default">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <docblock line="15">
          <description><![CDATA[The type (audio, video, text, image)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="15" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="25" package="Default">
        <name>$subType</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[The subtype (mp3, mp4, plain, jpeg, ...)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\IO" line="10">
        <name>__construct</name>
        <type>function</type>
        <argument line="10">
          <name>$mimetype</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\IO" line="30" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Returns the ContentType's string representation: type/subtype]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/IO/BinaryFile.php" hash="33eeae6da6a549b50d5ea60fe5104e04">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/IO/BinaryFile.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\IO" line="18" package="Default">
      <name>BinaryFile</name>
      <full_name>\eZ\Publish\API\Repository\Values\IO\BinaryFile</full_name>
      <extends/>
      <docblock line="4">
        <description><![CDATA[This class provides an abstract access to binary files.]]></description>
        <long-description><![CDATA[<p>It allows reading &amp; writing of files in a unified way</p>]]></long-description>
        <tag line="4" name="property-read" description="The id of the binary file" type="string" variable="$id">
          <type by_reference="false">string</type>
        </tag>
        <tag line="4" name="property-read" description="File size, in bytes" type="int" variable="$size">
          <type by_reference="false">int</type>
        </tag>
        <tag line="4" name="property-read" description="File modification time" type="int" variable="$mtime">
          <type by_reference="false">int</type>
        </tag>
        <tag line="4" name="property-read" description="File creation time" type="int" variable="$ctime">
          <type by_reference="false">int</type>
        </tag>
        <tag line="4" name="property-read" description="File contentType (image/jpeg, audio/mp3, etc)" type="string" variable="$contentType">
          <type by_reference="false">string</type>
        </tag>
        <tag line="4" name="property-read" description="HTTP URI to the binary file" type="string" variable="$uri">
          <type by_reference="false">string</type>
        </tag>
        <tag line="4" name="property-read" description="Original file name" type="string" variable="$originalFile">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[The id of the binary file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$size</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[File size, in bytes]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$mtime</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[File modification time]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="\DateTime">
            <type by_reference="false">\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$ctime</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[File creation time]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="\DateTime">
            <type by_reference="false">\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="48" package="Default">
        <name>$contentType</name>
        <default><![CDATA[]]></default>
        <docblock line="44">
          <description><![CDATA[File contentType (image/jpeg, audio/mp3, etc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="54" package="Default">
        <name>$uri</name>
        <default><![CDATA[]]></default>
        <docblock line="50">
          <description><![CDATA[HTTP URI to the binary file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" package="Default">
        <name>$originalFile</name>
        <default><![CDATA[]]></default>
        <docblock line="56">
          <description><![CDATA[Original file name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/IO/BinaryFileCreateStruct.php" hash="e2817e15aa19c7899059e1d2f2471883">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/IO/BinaryFileCreateStruct.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\IO" line="8" package="Default">
      <name>BinaryFileCreateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\IO\BinaryFileCreateStruct</full_name>
      <extends/>
      <docblock line="5">
        <description><![CDATA[Create struct for BinaryFile objects]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="14" package="Default">
        <name>$contentType</name>
        <default><![CDATA[]]></default>
        <docblock line="10">
          <description><![CDATA[File contentType (image/jpeg, audio/mp3, etc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="10" name="var" description="" type="\eZ\Publish\API\Repository\Values\IO\ContentType">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\IO\ContentType</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="20" package="Default">
        <name>$uri</name>
        <default><![CDATA[]]></default>
        <docblock line="16">
          <description><![CDATA[HTTP URI to the binary file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="16" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="26" package="Default">
        <name>$originalFileName</name>
        <default><![CDATA[]]></default>
        <docblock line="22">
          <description><![CDATA[Original file name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$size</name>
        <default><![CDATA[]]></default>
        <docblock line="28">
          <description><![CDATA[The size of the file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="39" package="Default">
        <name>$inputStream</name>
        <default><![CDATA[]]></default>
        <docblock line="34">
          <description><![CDATA[the input stream]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/ValueObject.php" hash="33200a71394cfae97ca28d482cffa302" package="eZ\Publish\API\Repository\Values">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository\Values"/>
    </docblock>
    <parse_markers>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/Values/ValueObject.php</critical>
    </parse_markers>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <namespace-alias name="PropertyPermission">ezp\Base\Exception\PropertyPermission</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values" line="19" package="eZ\Publish\API\Repository\Values">
      <name>ValueObject</name>
      <full_name>\eZ\Publish\API\Repository\Values\ValueObject</full_name>
      <extends/>
      <docblock line="9">
        <description><![CDATA[The base class for all value objects and structs]]></description>
        <long-description><![CDATA[<p>Supports readonly properties by marking them as protected.
In this case they will only be writable using constructor, and need to be documented
using @property-read <type> <$var> in class doc in addition to inline property doc.
Writable properties must be public and must be documented inline.</p>]]></long-description>
        <tag line="9" name="package" description="eZ\Publish\API\Repository\Values"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values" line="29" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Construct object optionally with a set of properties]]></description>
          <long-description><![CDATA[<p>Readonly properties values must be set using $properties as they are not writable anymore
after object has been created.</p>]]></long-description>
          <tag line="21" name="param" description="" type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$properties</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values" line="51" package="Default">
        <name>__set</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Magic set function handling writes to non public properties]]></description>
          <long-description><![CDATA[<p>Throws PropertyNotFound exception on all writes to undefined properties so typos are not silently accepted and
throws PropertyPermission exception on readonly (protected) properties.</p>]]></long-description>
          <tag line="37" name="param" description="Name of the property" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="37" name="throws" description="When property does not exist" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="37" name="throws" description="When property is readonly (protected)" type="\ezp\Base\Exception\PropertyPermission">
            <type by_reference="false">\ezp\Base\Exception\PropertyPermission</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="51">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values" line="72" package="Default">
        <name>__get</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Magic get function handling read to non public properties]]></description>
          <long-description><![CDATA[<p>Returns value for all readonly (protected) properties.
Throws PropertyNotFound exception on all reads to undefined properties so typos are not silently accepted.</p>]]></long-description>
          <tag line="60" name="param" description="Name of the property" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="60" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="60" name="throws" description="When property does not exist" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/UserCreateStruct.php" hash="855236788e64074659cf06b462616837">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/UserCreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ContentCreateStruct">eZ\Publish\API\Repository\Values\Content\ContentCreateStruct</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User" line="9" package="Default">
      <name>UserCreateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\UserCreateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\ContentCreateStruct</extends>
      <docblock line="6">
        <description><![CDATA[This class is used to create a new user in the repository]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="16" package="Default">
        <name>$login</name>
        <default><![CDATA[]]></default>
        <docblock line="11">
          <description><![CDATA[User login]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="11" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$email</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[User E-Mail address]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$password</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[the plain password]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="37" package="Default">
        <name>$enabled</name>
        <default><![CDATA[true]]></default>
        <docblock line="32">
          <description><![CDATA[indicates if the user is enabled after creation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Policy.php" hash="48e8122fedc7be740d814426c01b2756">
    <parse_markers>
      <error line="50" code="50012">No short description for method getLimitations()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Policy.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User" line="16" package="Default">
      <name>Policy</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Policy</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="7">
        <description><![CDATA[This class represents a policy value]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="7" name="property-read" description="internal id of the policy" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="7" name="property-read" description="the role id this policy belongs to" type="int" variable="$roleId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="7" name="property-read" description="Name of module, associated with the Policy" type="string" variable="$module">
          <type by_reference="false">string</type>
        </tag>
        <tag line="7" name="property-read" description="Name of the module function Or all functions with '*'" type="string" variable="$function">
          <type by_reference="false">string</type>
        </tag>
        <tag line="7" name="property-read" description="an array of \eZ\Publish\API\Repository\Values\User\Limitation" type="array" variable="$limitations">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="23" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[ID of the policy]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$roleId</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[the ID of the role this policy belongs to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" package="Default">
        <name>$module</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[Name of module, associated with the Policy]]></description>
          <long-description><![CDATA[<p>Eg: content</p>]]></long-description>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="48" package="Default">
        <name>$function</name>
        <default><![CDATA[]]></default>
        <docblock line="41">
          <description><![CDATA[Name of the module function Or all functions with '*']]></description>
          <long-description><![CDATA[<p>Eg: read</p>]]></long-description>
          <tag line="41" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User" line="54" package="Default">
        <name>getLimitations</name>
        <type>function</type>
        <docblock line="50">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="return" description="an array of {@link \eZ\Publish\API\Repository\Values\User\Limitation }" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/UserUpdateStruct.php" hash="3e5159e508cecf12c7ee665a89e9b91f">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/UserUpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="VersionUpdateStruct">eZ\Publish\API\Repository\Values\Content\VersionUpdateStruct</namespace-alias>
    <namespace-alias name="ContentUpdateStruct">eZ\Publish\API\Repository\Values\Content\ContentUpdateStruct</namespace-alias>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User" line="12" package="Default">
      <name>UserUpdateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\UserUpdateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="8">
        <description><![CDATA[This class is used to update a user in the repository]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="19" package="Default">
        <name>$email</name>
        <default><![CDATA[null]]></default>
        <docblock line="14">
          <description><![CDATA[if set the email address is updated with this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="14" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="26" package="Default">
        <name>$password</name>
        <default><![CDATA[null]]></default>
        <docblock line="21">
          <description><![CDATA[if set the password is updated with this plain password]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$isEnabled</name>
        <default><![CDATA[null]]></default>
        <docblock line="28">
          <description><![CDATA[Flag to signal if user is enabled or not
If set the enabled status is changed to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="41" package="Default">
        <name>$maxLogin</name>
        <default><![CDATA[null]]></default>
        <docblock line="36">
          <description><![CDATA[Max number of time user is allowed to login
If set the maximal number of logins is changed to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="48" package="Default">
        <name>$versionUpdateStruct</name>
        <default><![CDATA[null]]></default>
        <docblock line="44">
          <description><![CDATA[the update structure  for the profile version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionUpdateStruct</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="54" package="Default">
        <name>$contentUpdateStruct</name>
        <default><![CDATA[null]]></default>
        <docblock line="50">
          <description><![CDATA[the update structure  for the profile meta data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentUpdateStruct</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/UserGroupRoleAssignment.php" hash="11e2cd4630d71302ba05157291b3d2e9">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/UserGroupRoleAssignment.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="UserGroup">eZ\Publish\API\Repository\Values\User\UserGroup</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User" line="10" package="Default">
      <name>UserGroupRoleAssignment</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\UserGroupRoleAssignment</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\RoleAssignment</extends>
      <docblock line="6">
        <description><![CDATA[This class represents a user group to role assignment]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="6" name="property-read" description="calls getUserGroup()" type="\eZ\Publish\API\Repository\Values\User\UserGroup" variable="$userGroup">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
        </tag>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User" line="17" package="Default">
        <name>getUserGroup</name>
        <type>function</type>
        <docblock line="12">
          <description><![CDATA[returns the user group to which the role is assigned to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="12" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Role.php" hash="ee6eed6b270ec9c5a7b37a0c8ab2d6a3">
    <parse_markers>
      <error line="45" code="50015">Argument $module is missing from the Docblock of getPolicy()</error>
      <error line="45" code="50015">Argument $function is missing from the Docblock of getPolicy()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Role.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User" line="14" package="Default">
      <name>Role</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Role</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[This class represents a role]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="6" name="property-read" description="the internal id of the role" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="6" name="property-read" description="the name of the role" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="6" name="property-read" description="the description of the role" type="string" variable="$description">
          <type by_reference="false">string</type>
        </tag>
        <tag line="6" name="property-read" description="an array of the policies {@link \eZ\Publish\API\Repository\Values\User\Policy} of the role." type="array" variable="$policies">
          <type by_reference="false">array</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="21" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="16">
          <description><![CDATA[ID of the user rule]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="16" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="23">
          <description><![CDATA[Name of the role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$description</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[The description of the role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="since" description="5.0"/>
          <tag line="30" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User" line="43" package="Default">
        <name>getPolicies</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[returns the list of policies of this role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="return" description="an array of {@link \eZ\Publish\API\Repository\Values\UserPolicy}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User" line="49" package="Default">
        <name>getPolicy</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[returns the policy for the given module and function]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="return" description="" type="\eZ\Publish\API\Repository\Values\UserPolicy">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\UserPolicy</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$module</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="49">
          <name>$function</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/UserGroupUpdateStruct.php" hash="54001e3758f5893c6670fb70a39cf35d">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/UserGroupUpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="VersionUpdateStruct">eZ\Publish\API\Repository\Values\Content\VersionUpdateStruct</namespace-alias>
    <namespace-alias name="ContentUpdateStruct">eZ\Publish\API\Repository\Values\Content\ContentUpdateStruct</namespace-alias>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User" line="12" package="Default">
      <name>UserGroupUpdateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\UserGroupUpdateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="8">
        <description><![CDATA[This class is used to update a user in the repository]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="18" package="Default">
        <name>$versionUpdateStruct</name>
        <default><![CDATA[null]]></default>
        <docblock line="14">
          <description><![CDATA[the update structure  for the profile version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="14" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\VersionUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\VersionUpdateStruct</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$contentUpdateStruct</name>
        <default><![CDATA[null]]></default>
        <docblock line="20">
          <description><![CDATA[the update structure  for the profile meta data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="\eZ\Publish\API\Repository\Values\Content\ContentUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\ContentUpdateStruct</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/User.php" hash="23b5dcb695e66039f53d86dc312428bf">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/User.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="Version">eZ\Publish\API\Repository\Values\Content\Version</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User" line="19" package="Default">
      <name>User</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\User</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Content</extends>
      <docblock line="8">
        <description><![CDATA[This class represents a user value]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="8" name="property-read" description="the user id which is equal to the underlying content id" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="8" name="property-read" description="" type="string" variable="$login">
          <type by_reference="false">string</type>
        </tag>
        <tag line="8" name="property-read" description="" type="string" variable="$email">
          <type by_reference="false">string</type>
        </tag>
        <tag line="8" name="property-read" description="" type="string" variable="$passwordHash">
          <type by_reference="false">string</type>
        </tag>
        <tag line="8" name="property-read" description="Hash algorithm used to has the password" type="string" variable="$hashAlgorithm">
          <type by_reference="false">string</type>
        </tag>
        <tag line="8" name="property-read" description="User can not login if false" type="boolean" variable="$enabled">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="8" name="property-read" description="maxLogin Max number of time user is allowed to login" type="int" variable="">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[User ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="33" package="Default">
        <name>$login</name>
        <default><![CDATA[]]></default>
        <docblock line="28">
          <description><![CDATA[User login]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$email</name>
        <default><![CDATA[]]></default>
        <docblock line="35">
          <description><![CDATA[User E-Mail address]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$passwordHash</name>
        <default><![CDATA[]]></default>
        <docblock line="42">
          <description><![CDATA[User password hash]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="54" package="Default">
        <name>$hashAlgorithm</name>
        <default><![CDATA[]]></default>
        <docblock line="49">
          <description><![CDATA[Hash algorithm used to has the password]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" package="Default">
        <name>$isEnabled</name>
        <default><![CDATA[false]]></default>
        <docblock line="56">
          <description><![CDATA[Flag to signal if user is enabled or not]]></description>
          <long-description><![CDATA[<p>User can not login if false</p>]]></long-description>
          <tag line="56" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" package="Default">
        <name>$maxLogin</name>
        <default><![CDATA[]]></default>
        <docblock line="65">
          <description><![CDATA[Max number of time user is allowed to login]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="todo" description=": Not used in kernel, should probably be a number of login allowed before changing password.&#10;But new users gets 0 before they activate, admin has 10, and anonymous has 1000 in clean data."/>
          <tag line="65" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/UserGroupCreateStruct.php" hash="753842b5da2a5fdee9bb6d8fe4490642">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/UserGroupCreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ContentCreateStruct">eZ\Publish\API\Repository\Values\Content\ContentCreateStruct</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User" line="9" package="Default">
      <name>UserGroupCreateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\UserGroupCreateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\Content\ContentCreateStruct</extends>
      <docblock line="6">
        <description><![CDATA[This class is used to create a new user group in the repository]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/PolicyUpdateStruct.php" hash="dfe84945a36b9009a14a3bb91b98b17b">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/PolicyUpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User" line="9" package="Default">
      <name>PolicyUpdateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\PolicyUpdateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="5">
        <description><![CDATA[This class is used for updating a policy. The limitations of the policy are replaced
with those which are added in instances of this class]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User" line="17" package="Default">
        <name>addLimitation</name>
        <type>function</type>
        <docblock line="11">
          <description><![CDATA[adds a limitation to the policy - if a Limitation exists with the same identifer
the existing limitation is replaced]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="11" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\Limitation" variable="$limitation">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Limitation</type>
          </tag>
        </docblock>
        <argument line="17">
          <name>$limitation</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/ParentContentTypeLimitation.php" hash="4185027a5123d7b1ab8c2f31c6371d86">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for ParentContentTypeLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/ParentContentTypeLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>ParentContentTypeLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\ParentContentTypeLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="12" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/LocationLimitation.php" hash="3b8114981098eef1e3678f14b47e7e5a">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for LocationLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/LocationLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>LocationLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\LocationLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="12" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/SiteaccessLimitation.php" hash="78d970e315e801e2ebf1cdd11b88c9d4">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for SiteaccessLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/SiteaccessLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>SiteaccessLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\SiteaccessLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="12" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/StateLimitation.php" hash="08d6db1e8a66c23901d736d8556fd846">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for StateLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/StateLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>StateLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\StateLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="12" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/RoleLimitation.php" hash="ca8be1df2b5847174d52290372324d68">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for RoleLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/RoleLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>RoleLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\RoleLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation</extends>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/CustomLimitation.php" hash="b9d9c895112b1ebe226c4130dc9f41ee">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for CustomLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/CustomLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>CustomLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\CustomLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation</extends>
      <property final="false" static="false" visibility="private" line="13" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="8">
          <description><![CDATA[the custom limitation name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="19" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="15">
          <description><![CDATA[constructs a custom limitation for the given limitation name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="15" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="19">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="28" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/ParentDepthLimitation.php" hash="f5987819d347d77967e7556a3a8febf9">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for ParentDepthLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/ParentDepthLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>ParentDepthLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\ParentDepthLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="12" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/SubtreeLimitation.php" hash="3c4bb4ad81c3b048216288a142134c24">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for SubtreeLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/SubtreeLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>SubtreeLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\SubtreeLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation\RoleLimitation</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="12" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/SectionLimitation.php" hash="1a4e7c21ee8d55830e46d4879fdeb596">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for SectionLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/SectionLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>SectionLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\SectionLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation\RoleLimitation</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="12" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/LanguageLimitation.php" hash="11d09dd264b012a64adaa0fb5e5e8e0e">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for LanguageLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/LanguageLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>LanguageLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\LanguageLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="12" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/ParentOwnerLimitation.php" hash="ac74cde83ff9675b7d30ebfa91362f7d">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for ParentOwnerLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/ParentOwnerLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>ParentOwnerLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\ParentOwnerLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="12" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/OwnerLimitation.php" hash="11ca5e677cf09c7f2a8905f33712385e">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for OwnerLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/OwnerLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>OwnerLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\OwnerLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="12" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/UserGroupLimitation.php" hash="7a18b8c4f00d64b10ee959dd5f9b088f">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for UserGroupLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/UserGroupLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>UserGroupLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\UserGroupLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="12" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/ContentTypeLimitation.php" hash="3c2c7fcdf04a26afe0af4b05d751ee7a">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for ContentTypeLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/ContentTypeLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>ContentTypeLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\ContentTypeLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="12" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation/ParentUserGroupLimitation.php" hash="888ded9a02f2939febdea446232896f8">
    <parse_markers>
      <error line="6" code="50000">No DocBlock was found for ParentUserGroupLimitation</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation/ParentUserGroupLimitation.php</error>
    </parse_markers>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="6">
      <name>ParentUserGroupLimitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation\ParentUserGroupLimitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Limitation</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User\Limitation" line="12" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[(non-PHPdoc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="see" description="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()" refers="\User/eZ\Publish\API\Repository\Values\User.Limitation::getIdentifier()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/UserRoleAssignment.php" hash="4c483f778c4c7b56c6c3732564d8dfef">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/UserRoleAssignment.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User" line="12" package="Default">
      <name>UserRoleAssignment</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\UserRoleAssignment</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\RoleAssignment</extends>
      <docblock line="6">
        <description><![CDATA[This classs represents a user to role assignment]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="6" name="property-read" description="calls getUser()" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
        </tag>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User" line="19" package="Default">
        <name>getUser</name>
        <type>function</type>
        <docblock line="14">
          <description><![CDATA[returns the user to which the role is assigned to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="14" name="return" description="" type="\eZ\Publish\API\Repository\Values\UserUser">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\UserUser</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/RoleUpdateStruct.php" hash="c3f6a9e7f2afde628a2de3bce735a040">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/RoleUpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\User" line="9" package="Default">
      <name>RoleUpdateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\RoleUpdateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="5">
        <description><![CDATA[This class is used to update a role]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="16" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="11">
          <description><![CDATA[Name of the role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="11" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$description</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[5.x The description of the role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/UserGroup.php" hash="fc1937da3524bdfa72e7ecfa0db5bf3d">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/UserGroup.php</error>
    </parse_markers>
    <namespace-alias name="Version">eZ\Publish\API\Repository\Values\Content\Version</namespace-alias>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User" line="16" package="Default">
      <name>UserGroup</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\UserGroup</full_name>
      <extends>\eZ\Publish\API\Repository\Values\User\Content</extends>
      <docblock line="9">
        <description><![CDATA[This class represents a user group]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="9" name="property-read" description="" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="9" name="property-read" description="" type="int" variable="$parentId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="9" name="property-read" description="" type="int" variable="$subGroupCount">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[The id of the user group]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$parentId</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[the parent id of the user group]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="37" package="Default">
        <name>$subGroupCount</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[The number of sub groups]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/RoleAssignment.php" hash="769a113ddf2e9f82a7aa90a242ad9d20">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/RoleAssignment.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="RoleLimitation">eZ\Publish\API\Repository\Values\User\Limitation\RoleLimitation</namespace-alias>
    <namespace-alias name="Role">eZ\Publish\API\Repository\Values\User\Role</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User" line="15" package="Default">
      <name>RoleAssignment</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\RoleAssignment</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="9">
        <description><![CDATA[This value object represents an assignment od a user or user group to a role inlcuding a limitation]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="9" name="property-read" description="the limitation of this role assignment" type="\eZ\Publish\API\Repository\Values\User\Limitation\RoleLimitation" variable="$limitation">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Limitation\RoleLimitation</type>
        </tag>
        <tag line="9" name="property-read" description="the role which is assigned to the user or user group" type="\eZ\Publish\API\Repository\Values\User\Role" variable="$role">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User" line="22" package="Default">
        <name>getLimitation</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[returns the limitation of the role assignment]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\Limitation\RoleLimitation">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Limitation\RoleLimitation</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User" line="28" package="Default">
        <name>getRole</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[returns the role to which the user or user group is assigned to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\Role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/RoleCreateStruct.php" hash="1698d0c6e5351223f654bcc1f9996a91">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/RoleCreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User" line="8" package="Default">
      <name>RoleCreateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\RoleCreateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="5">
        <description><![CDATA[This class is used to create a new role]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="16" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="11">
          <description><![CDATA[Name of the role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="11" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$description</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[5.x The description of the role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User" line="30" package="Default">
        <name>addPolicy</name>
        <type>function</type>
        <docblock line="25">
          <description><![CDATA[adds a policy to this role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\PolicyCreate" variable="$policyCreate">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\PolicyCreate</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$policyCreate</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/Limitation.php" hash="0184a0bd1c1500379f1dc26fa94f5ed6">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/Limitation.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User" line="8" package="Default">
      <name>Limitation</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\Limitation</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="5">
        <description><![CDATA[This class represents a Limitation apllied to a policy]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="eZ\Publish\API\Repository\Values\User" line="11">
        <name>CONTENTTYPE</name>
        <value><![CDATA["Class"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\User" line="12">
        <name>LANGUAGE</name>
        <value><![CDATA["Language"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\User" line="13">
        <name>LOCATION</name>
        <value><![CDATA["Node"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\User" line="14">
        <name>OWNER</name>
        <value><![CDATA["Owner"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\User" line="15">
        <name>PARENTOWNER</name>
        <value><![CDATA["ParentOwner"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\User" line="16">
        <name>PARENTCONTENTTYPE</name>
        <value><![CDATA["ParentClass"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\User" line="17">
        <name>PARENTDEPTH</name>
        <value><![CDATA["ParentDepth"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\User" line="18">
        <name>SECTION</name>
        <value><![CDATA["Section"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\User" line="19">
        <name>SITEACCESS</name>
        <value><![CDATA["SiteAccess"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\User" line="20">
        <name>STATE</name>
        <value><![CDATA["State"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\User" line="21">
        <name>SUBTREE</name>
        <value><![CDATA["Subtree"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\User" line="22">
        <name>USERGROUP</name>
        <value><![CDATA["Group"]]></value>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\User" line="23">
        <name>PARENTUSERGROUP</name>
        <value><![CDATA["ParentGroup"]]></value>
      </constant>
      <property final="false" static="false" visibility="public" line="37" package="Default">
        <name>$limitationValues</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[An integer list of ids or identifiers for which the limitation should be applied]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="of mixed" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User" line="30" package="Default">
        <name>getIdentifier</name>
        <type>function</type>
        <docblock line="25">
          <description><![CDATA[returns the limitation identifer (one of the defined constants) or a custom limitation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/User/PolicyCreateStruct.php" hash="ef016a3712421cb6ec4c436722bd8dcf">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/User/PolicyCreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="Limitation">eZ\Publish\API\Repository\Values\User\Limitation</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\User" line="9" package="Default">
      <name>PolicyCreateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\User\PolicyCreateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[This class is used to create a policy]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="18" package="Default">
        <name>$module</name>
        <default><![CDATA[]]></default>
        <docblock line="11">
          <description><![CDATA[Name of module, associated with the Policy]]></description>
          <long-description><![CDATA[<p>Eg: content</p>]]></long-description>
          <tag line="11" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="27" package="Default">
        <name>$function</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[Name of the module function Or all functions with '*']]></description>
          <long-description><![CDATA[<p>Eg: read</p>]]></long-description>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\User" line="34" package="Default">
        <name>addLimitation</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[adds a limitation with the given identifier and list of values]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\Limitation" variable="$limitation">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Limitation</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$limitation</name>
          <default><![CDATA[]]></default>
          <type>Limitation</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/ContentType/ContentType.php" hash="aa1fe036f692b0902d1e0fe0b1df9b30">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/ContentType/ContentType.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="FieldDefinition">eZ\Publish\API\Repository\Values\ContentType\FieldDefinition</namespace-alias>
    <namespace-alias name="ContentTypeGroup">eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\ContentType" line="33" package="Default">
      <name>ContentType</name>
      <full_name>\eZ\Publish\API\Repository\Values\ContentType\ContentType</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="10">
        <description><![CDATA[this class represents a content type value]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="10" name="property-read" description="calls getNames() or on access getName($language)" type="array" variable="$names">
          <type by_reference="false">array</type>
        </tag>
        <tag line="10" name="property-read" description="calls getDescriptions() or on access getDescription($language)" type="array" variable="$descriptions">
          <type by_reference="false">array</type>
        </tag>
        <tag line="10" name="property-read" description="calls getContentTypeGroups" type="array" variable="$contentTypeGroups">
          <type by_reference="false">array</type>
        </tag>
        <tag line="10" name="property-read" description="calls getFieldDefinitions() or on access getFieldDefinition($fieldDefIdentifier)" type="array" variable="$fieldDefinitions">
          <type by_reference="false">array</type>
        </tag>
        <tag line="10" name="property-read" description="the id of the content type" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="10" name="property-read" description="the status of the content type. One of ContentType::STATUS_DEFINED|ContentType::STATUS_DRAFT|ContentType::STATUS_MODIFIED" type="int" variable="$status">
          <type by_reference="false">int</type>
        </tag>
        <tag line="10" name="property-read" description="the identifier of the content type" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="10" name="property-read" description="the date of the creation of this content type" type="\eZ\Publish\API\Repository\Values\ContentType\DateTime" variable="$createdDate">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\DateTime</type>
        </tag>
        <tag line="10" name="property-read" description="the date of the last modification of this content type" type="\eZ\Publish\API\Repository\Values\ContentType\DateTime" variable="$modificationDate">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\DateTime</type>
        </tag>
        <tag line="10" name="property-read" description="the user id of the creator of this content type" type="int" variable="$creatorId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="10" name="property-read" description="the user id of the user which has last modified this content type" type="int" variable="$modifierId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="10" name="property-read" description="a global unique id of the content object" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="10" name="property-read" description="URL alias schema. If nothing is provided, $nameSchema will be used instead." type="string" variable="$urlAliasSchema">
          <type by_reference="false">string</type>
        </tag>
        <tag line="10" name="property-read" description="The name schema." type="string" variable="$nameSchema">
          <type by_reference="false">string</type>
        </tag>
        <tag line="10" name="property-read" description="Determines if the type is allowd to have children" type="boolean" variable="$isContainer">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="10" name="property-read" description="the main language of the content type names and description used for fallback." type="string" variable="$mainLanguageCode">
          <type by_reference="false">string</type>
        </tag>
        <tag line="10" name="property-read" description="if an instance of acontent type is created the always available flag is set by default this this value." type="boolean" variable="$defaultAlwaysAvailable">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="10" name="property-read" description="Specifies which property the child locations should be sorted on by default when created. Valid values are found at {@link Location::SORT_FIELD_*}" type="int" variable="$defaultSortField">
          <type by_reference="false">int</type>
        </tag>
        <tag line="10" name="property-read" description="Specifies whether the sort order should be ascending or descending by default when created. Valid values are {@link Location::SORT_ORDER_*}" type="int" variable="$defaultSortOrder">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <constant namespace="eZ\Publish\API\Repository\Values\ContentType" line="38" package="Default">
        <name>STATUS_DEFINED</name>
        <value><![CDATA[0]]></value>
        <docblock line="35">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="Status constant for defined (aka &quot;published&quot;) Type" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\ContentType" line="43" package="Default">
        <name>STATUS_DRAFT</name>
        <value><![CDATA[1]]></value>
        <docblock line="40">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="Status constant for draft (aka &quot;temporary&quot;) Type" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="eZ\Publish\API\Repository\Values\ContentType" line="48" package="Default">
        <name>STATUS_MODIFIED</name>
        <value><![CDATA[2]]></value>
        <docblock line="45">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="Status constant for modified (aka &quot;deferred for publishing&quot;) Type" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="55" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="50">
          <description><![CDATA[Content type ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" package="Default">
        <name>$status</name>
        <default><![CDATA[]]></default>
        <docblock line="57">
          <description><![CDATA[The status of the content type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="var" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="108" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="103">
          <description><![CDATA[String identifier of a content type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="115" package="Default">
        <name>$createdDate</name>
        <default><![CDATA[]]></default>
        <docblock line="110">
          <description><![CDATA[Creation date of the content type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="var" description="" type="\eZ\Publish\API\Repository\Values\ContentType\DateTime">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="122" package="Default">
        <name>$modifiedDate</name>
        <default><![CDATA[]]></default>
        <docblock line="117">
          <description><![CDATA[Modification date of the content type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="117" name="var" description="" type="\eZ\Publish\API\Repository\Values\ContentType\DateTime">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="129" package="Default">
        <name>$creatorId</name>
        <default><![CDATA[]]></default>
        <docblock line="124">
          <description><![CDATA[Creator user id of the content type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="137" package="Default">
        <name>$modifierId</name>
        <default><![CDATA[]]></default>
        <docblock line="131">
          <description><![CDATA[Modifier user id of the content type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="131" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="144" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="139">
          <description><![CDATA[Unique remote ID of the content type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="139" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="151" package="Default">
        <name>$urlAliasSchema</name>
        <default><![CDATA[]]></default>
        <docblock line="146">
          <description><![CDATA[URL alias schema. If nothing is provided, $nameSchema will be used instead.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="146" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="163" package="Default">
        <name>$nameSchema</name>
        <default><![CDATA[]]></default>
        <docblock line="153">
          <description><![CDATA[Name schema.]]></description>
          <long-description><![CDATA[<p>Can be composed of FieldDefinition identifier place holders.
These place holders must comply this pattern : <field_definition_identifier>.
An OR condition can be used :
&lt;field_def|other_field_def>
In this example, field_def will be used if available. If not, other_field_def will be used for content name generation</p>]]></long-description>
          <tag line="153" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="170" package="Default">
        <name>$isContainer</name>
        <default><![CDATA[]]></default>
        <docblock line="165">
          <description><![CDATA[Determines if the type is a container]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="165" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="177" package="Default">
        <name>$mainLanguageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="172">
          <description><![CDATA[Main language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="172" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="185" package="Default">
        <name>$defaultAlwaysAvailable</name>
        <default><![CDATA[true]]></default>
        <docblock line="179">
          <description><![CDATA[if an instance of acontent type is created the always available flag is set
by default this this value.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="179" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="194" package="Default">
        <name>$defaultSortField</name>
        <default><![CDATA[]]></default>
        <docblock line="187">
          <description><![CDATA[Specifies which property the child locations should be sorted on by default when created]]></description>
          <long-description><![CDATA[<p>Valid values are found at {@link Location::SORT_FIELD_*}</p>]]></long-description>
          <tag line="187" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="203" package="Default">
        <name>$defaultSortOrder</name>
        <default><![CDATA[]]></default>
        <docblock line="196">
          <description><![CDATA[Specifies whether the sort order should be ascending or descending by default when created]]></description>
          <long-description><![CDATA[<p>Valid values are {@link Location::SORT_ORDER_*}</p>]]></long-description>
          <tag line="196" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="74" package="Default">
        <name>getNames</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[This method returns the human readable name in all provided languages
of the content type]]></description>
          <long-description><![CDATA[<p>The structure of the return value is:</p>

<pre><code>array( 'eng' => '<name_eng>', 'de' => '<name_de>' );
</code></pre>]]></long-description>
          <tag line="63" name="return" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="82" package="Default">
        <name>getName</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[this method returns the name of the content type in the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="param" description="" type="string" variable="$languageCode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="76" name="return" description="the name for the given language or null if none existis." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$languageCode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="94" package="Default">
        <name>getDescriptions</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[This method returns the human readable description of the content type]]></description>
          <long-description><![CDATA[<p>The structure of this field is:</p>

<pre><code>array( 'eng' => '<description_eng>', 'de' => '<description_de>' );
</code></pre>]]></long-description>
          <tag line="84" name="return" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="101" package="Default">
        <name>getDescription</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[this method returns the name of the content type in the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="param" description="" type="string" variable="$languageCode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="96" name="return" description="the description for the given language or null if none existis." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$languageCode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="209" package="Default">
        <name>getContentTypeGroups</name>
        <type>function</type>
        <docblock line="205">
          <description><![CDATA[This method returns the content type groups this content type is assigned to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="205" name="return" description="an array of {@link ContentTypeGroup}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="216" package="Default">
        <name>getFieldDefinitions</name>
        <type>function</type>
        <docblock line="211">
          <description><![CDATA[This method returns the content type field definitions from this type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="211" name="return" description="an array of {@link FieldDefinition}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="224" package="Default">
        <name>getFieldDefinition</name>
        <type>function</type>
        <docblock line="218">
          <description><![CDATA[this method returns the field definition for the given identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="218" name="param" description="" type="" variable="$fieldDefinitionIdentifier"/>
          <tag line="218" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\FieldDefinition">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="224">
          <name>$fieldDefinitionIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/ContentType/ContentTypeGroup.php" hash="9dbb02b937c62946174761399354bb12">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/ContentType/ContentTypeGroup.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\ContentType" line="26" package="Default">
      <name>ContentTypeGroup</name>
      <full_name>\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="13">
        <description><![CDATA[This class represents a content type group value]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="13" name="property-read" description="calls getNames() or on access getName($language)" type="\eZ\Publish\API\Repository\Values\ContentType\names" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\names</type>
        </tag>
        <tag line="13" name="property-read" description="calls getDescriptions() or on access getDescription($language)" type="\eZ\Publish\API\Repository\Values\ContentType\descriptions" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\descriptions</type>
        </tag>
        <tag line="13" name="property-read" description="the id of the content type group" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property-read" description="the identifier of the content type group" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="13" name="property-read" description="the date of the creation of this content type group" type="\eZ\Publish\API\Repository\Values\ContentType\DateTime" variable="$createdDate">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\DateTime</type>
        </tag>
        <tag line="13" name="property-read" description="the date of the last modification of this content type group" type="\eZ\Publish\API\Repository\Values\ContentType\DateTime" variable="$modificationDate">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\DateTime</type>
        </tag>
        <tag line="13" name="property-read" description="the user id of the creator of this content type group" type="int" variable="$creatorId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property-read" description="the user id of the user which has last modified this content type group" type="int" variable="$modifierId">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="33" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="28">
          <description><![CDATA[Primary key]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="35">
          <description><![CDATA[Readable string identifier of a group]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$createdDate</name>
        <default><![CDATA[]]></default>
        <docblock line="42">
          <description><![CDATA[Created date (timestamp)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="" type="\eZ\Publish\API\Repository\Values\ContentType\DateTime">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="54" package="Default">
        <name>$modifiedDate</name>
        <default><![CDATA[]]></default>
        <docblock line="49">
          <description><![CDATA[Modified date (timestamp)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="var" description="" type="\eZ\Publish\API\Repository\Values\ContentType\DateTime">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" package="Default">
        <name>$creatorId</name>
        <default><![CDATA[]]></default>
        <docblock line="56">
          <description><![CDATA[Creator user id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="69" package="Default">
        <name>$modifierId</name>
        <default><![CDATA[]]></default>
        <docblock line="63">
          <description><![CDATA[Modifier user id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="83" package="Default">
        <name>getNames</name>
        <type>function</type>
        <docblock line="71">
          <description><![CDATA[5.x only
This method returns the human readable name in all provided languages
of the content type]]></description>
          <long-description><![CDATA[<p>The structure of the return value is:</p>

<pre><code>array( 'eng' => '<name_eng>', 'de' => '<name_de>' );
</code></pre>]]></long-description>
          <tag line="71" name="return" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="91" package="Default">
        <name>getName</name>
        <type>function</type>
        <docblock line="85">
          <description><![CDATA[5.x only
this method returns the name of the content type in the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="param" description="" type="string" variable="$languageCode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="85" name="return" description="the name for the given language or null if none existis." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$languageCode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="103" package="Default">
        <name>getDescriptions</name>
        <type>function</type>
        <docblock line="93">
          <description><![CDATA[5.x only
This method returns the human readable description of the content type
The structure of this field is:
<code>
array( 'eng' => '<description_eng>', 'de' => '<description_de>' );
</code>]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="return" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="111" package="Default">
        <name>getDescription</name>
        <type>function</type>
        <docblock line="105">
          <description><![CDATA[5.x only
this method returns the name of the content type in the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="param" description="" type="string" variable="$languageCode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="105" name="return" description="the description for the given language or null if none existis." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="111">
          <name>$languageCode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/ContentType/FieldDefinition.php" hash="cfc60b93b62c5d0321fcaec1d002c857">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/ContentType/FieldDefinition.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Value\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="eZ\Publish\API\Repository\Values\ContentType" line="22" package="Default">
      <name>FieldDefinition</name>
      <full_name>\eZ\Publish\API\Repository\Values\ContentType\FieldDefinition</full_name>
      <extends>\eZ\Publish\API\Repository\Value\ValueObject</extends>
      <docblock line="4">
        <description><![CDATA[This class represents a field definiton]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="4" name="property-read" description="calls getNames() or on access getName($language)" type="\eZ\Publish\API\Repository\Values\ContentType\$names" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$names</type>
        </tag>
        <tag line="4" name="property-read" description="calls getDescriptions() or on access getDescription($language)" type="\eZ\Publish\API\Repository\Values\ContentType\$descriptions" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$descriptions</type>
        </tag>
        <tag line="4" name="property-read" description="calls getFieldSettings()" type="\eZ\Publish\API\Repository\Values\ContentType\$fieldSettings" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$fieldSettings</type>
        </tag>
        <tag line="4" name="property-read" description="calls getValidators()" type="\eZ\Publish\API\Repository\Values\ContentType\$validators" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$validators</type>
        </tag>
        <tag line="4" name="property-read" description="the id of the field definition" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="4" name="property-read" description="the identifier of the field definition" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="4" name="property-read" description="the field group name" type="string" variable="$fieldGroup">
          <type by_reference="false">string</type>
        </tag>
        <tag line="4" name="property-read" description="the position of the field definition in the content typr" type="int" variable="$position">
          <type by_reference="false">int</type>
        </tag>
        <tag line="4" name="property-read" description="String identifier of the field type" type="string" variable="$fieldType">
          <type by_reference="false">string</type>
        </tag>
        <tag line="4" name="property-read" description="indicatats if fields of this definition are translatable" type="boolean" variable="$isTranslatable">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="4" name="property-read" description="indicates if this field is required in the content object" type="boolean" variable="$isRequired">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="4" name="property-read" description="indicates if the field is searchable" type="boolean" variable="$isSearchable">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="4" name="property-read" description="indicates if this field is used for information collection" type="boolean" variable="$isInfoCollector">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="4" name="property-read" description="the default value of the field" type="\eZ\Publish\API\Repository\Values\ContentType\$defaultValue" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$defaultValue</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[the unique id of this field definition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Readable string identifier of a field definition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="83" package="Default">
        <name>$fieldGroup</name>
        <default><![CDATA[]]></default>
        <docblock line="78">
          <description><![CDATA[Field group name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="90" package="Default">
        <name>$position</name>
        <default><![CDATA[]]></default>
        <docblock line="85">
          <description><![CDATA[the position of the field definition in the content typr]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="97" package="Default">
        <name>$fieldType</name>
        <default><![CDATA[]]></default>
        <docblock line="92">
          <description><![CDATA[String identifier of the field type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="104" package="Default">
        <name>$isTranslatable</name>
        <default><![CDATA[]]></default>
        <docblock line="99">
          <description><![CDATA[If the field is translatable]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="99" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="111" package="Default">
        <name>$isRequired</name>
        <default><![CDATA[]]></default>
        <docblock line="106">
          <description><![CDATA[Is the field required]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="118" package="Default">
        <name>$isInfoCollector</name>
        <default><![CDATA[]]></default>
        <docblock line="113">
          <description><![CDATA[the flag if this field is used for information collection]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="113" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="137" package="Default">
        <name>$defaultValue</name>
        <default><![CDATA[]]></default>
        <docblock line="132">
          <description><![CDATA[Default value of the field]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="144" package="Default">
        <name>$isSearchable</name>
        <default><![CDATA[]]></default>
        <docblock line="139">
          <description><![CDATA[Indicates if th the content is searchable by this attribute]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="139" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="49" package="Default">
        <name>getNames</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[This method returns the human readable name of this field in all provided languages
of the content type]]></description>
          <long-description><![CDATA[<p>The structure of the return value is:</p>

<pre><code>array( 'eng' => '<name_eng>', 'de' => '<name_de>' );
</code></pre>]]></long-description>
          <tag line="38" name="return" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="57" package="Default">
        <name>getName</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[this method returns the name of the field in the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="" type="string" variable="$languageCode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="return" description="the name for the given language or null if none existis." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$languageCode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="69" package="Default">
        <name>getDescriptions</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[This method returns the human readable description of the field]]></description>
          <long-description><![CDATA[<p>The structure of this field is:</p>

<pre><code>array( 'eng' => '<description_eng>', 'de' => '<description_de>' );
</code></pre>]]></long-description>
          <tag line="59" name="return" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="76" package="Default">
        <name>getDescription</name>
        <type>function</type>
        <docblock line="71">
          <description><![CDATA[this method returns the name of the field in the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="param" description="" type="string" variable="$languageCode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="71" name="return" description="the description for the given language or null if none existis." type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$languageCode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="124" package="Default">
        <name>getValidators</name>
        <type>function</type>
        <docblock line="120">
          <description><![CDATA[this method returns the validators of this field definition supported by the field type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="120" name="return" description="an array of {@link Validator}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="130" package="Default">
        <name>getFieldSettings</name>
        <type>function</type>
        <docblock line="126">
          <description><![CDATA[this method returns settings for the field definition supported by the field type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="126" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/ContentType/ContentTypeGroupCreateStruct.php" hash="7c9ec4973992fd93977c7b7d6111ca25">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/ContentType/ContentTypeGroupCreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\ContentType" line="14" package="Default">
      <name>ContentTypeGroupCreateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupCreateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="5">
        <description><![CDATA[This class is used for creating a content type group]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="5" name="property-write" description="calls setName($language)" type="\eZ\Publish\API\Repository\Values\ContentType\$names" variable="$names[$language]">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$names</type>
        </tag>
        <tag line="5" name="property-write" description="calls setName() for setting a namein the initial language" type="\eZ\Publish\API\Repository\Values\ContentType\$name" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$name</type>
        </tag>
        <tag line="5" name="property-write" description="calls setDescription($language)" type="\eZ\Publish\API\Repository\Values\ContentType\$descriptions" variable="$descriptions[$language]">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$descriptions</type>
        </tag>
        <tag line="5" name="property-write" description="calls setDescription() for setting a description in an initial language" type="\eZ\Publish\API\Repository\Values\ContentType\$description" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$description</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="21" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="16">
          <description><![CDATA[Readable string identifier of a group]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="16" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="28" package="Default">
        <name>$creatorId</name>
        <default><![CDATA[null]]></default>
        <docblock line="23">
          <description><![CDATA[if set this value overrides the current user as creator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$created</name>
        <default><![CDATA[null]]></default>
        <docblock line="30">
          <description><![CDATA[If set this value overrides the current time for creation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="(unix timestamp)" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="43" package="Default">
        <name>$initialLanguageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[5.x only
the initial language code]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="52" package="Default">
        <name>setName</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[5.x only
set a content type group name for the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="45" name="param" description="if not given the initialLanguage is used as default" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="52">
          <name>$language</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="61" package="Default">
        <name>setDescription</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[5.x only
set a content type description for the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="" type="string" variable="$description">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="param" description="if not given the initialLanguage is used as default" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$description</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="61">
          <name>$language</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/ContentType/FieldDefinitionCreateStruct.php" hash="12eb2d2fb68bb8094ab65bc5936ce858">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/ContentType/FieldDefinitionCreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\ContentType" line="13" package="Default">
      <name>FieldDefinitionCreateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionCreateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[this class is used to create a field definition]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="6" name="property-write" description="calls setName($language)" type="\eZ\Publish\API\Repository\Values\ContentType\$names" variable="$names[$language]">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$names</type>
        </tag>
        <tag line="6" name="property-write" description="calls setName() for setting a namein the initial language" type="\eZ\Publish\API\Repository\Values\ContentType\$name" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$name</type>
        </tag>
        <tag line="6" name="property-write" description="calls setDescription($language)" type="\eZ\Publish\API\Repository\Values\ContentType\$descriptions" variable="$descriptions[$language]">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$descriptions</type>
        </tag>
        <tag line="6" name="property-write" description="calls setDescription() for setting a description in an initial language" type="\eZ\Publish\API\Repository\Values\ContentType\$description" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$description</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="20" package="Default">
        <name>$fieldTypeIdentifier</name>
        <default><![CDATA[]]></default>
        <docblock line="15">
          <description><![CDATA[String identifier of the field type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="15" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="27" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="22">
          <description><![CDATA[Readable string identifier of a field definition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$fieldGroup</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[Field group name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="58" package="Default">
        <name>$position</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[the position of the field definition in the content typr
if not set the field is added at the end]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="65" package="Default">
        <name>$isTranslatable</name>
        <default><![CDATA[]]></default>
        <docblock line="60">
          <description><![CDATA[Indicates if the field is translatable]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="72" package="Default">
        <name>$isRequired</name>
        <default><![CDATA[]]></default>
        <docblock line="67">
          <description><![CDATA[Indicates if the field is required]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="79" package="Default">
        <name>$isInfoCollector</name>
        <default><![CDATA[]]></default>
        <docblock line="74">
          <description><![CDATA[indicates if this attribute is used for information collection]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="100" package="Default">
        <name>$defaultValue</name>
        <default><![CDATA[]]></default>
        <docblock line="95">
          <description><![CDATA[Default value of the field]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="107" package="Default">
        <name>$isSearchable</name>
        <default><![CDATA[]]></default>
        <docblock line="102">
          <description><![CDATA[Indicates if th the content is searchable by this attribute]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="35" package="Default">
        <name>setName</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[set a field definition name for the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="29" name="param" description="" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="35">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="43" package="Default">
        <name>setDescription</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[set a  fie definition description for the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="param" description="" type="string" variable="$description">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$description</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="43">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="86" package="Default">
        <name>setValidator</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[sets a validator which has to be supported by the field type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\Validator" variable="$validator">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\Validator</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$validator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="93" package="Default">
        <name>setFieldSettings</name>
        <type>function</type>
        <docblock line="88">
          <description><![CDATA[sets a field settings map supported by the field type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="param" description="" type="array" variable="$fieldSettings">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$fieldSettings</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/ContentType/Validator.php" hash="38cf0ae1c2b2371e6b3a8ade32032b8b">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/ContentType/Validator.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\ContentType" line="11" package="Default">
      <name>Validator</name>
      <full_name>\eZ\Publish\API\Repository\Values\ContentType\Validator</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[This class represents a validatoor provided by a field type.]]></description>
        <long-description><![CDATA[<p>It consists of a name and a set of paraameters. This field type implementations
are providing a set of concrete validators.</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="17" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="13">
          <description><![CDATA[The name of the validator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="13" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$parameters</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[a map of the parameters of the validator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/ContentType/ContentTypeGroupUpdateStruct.php" hash="4eaa3beb96fe8d7b175f04c8368248c3">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/ContentType/ContentTypeGroupUpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\ContentType" line="12" package="Default">
      <name>ContentTypeGroupUpdateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupUpdateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="5">
        <description><![CDATA[This clas is used for updating a content type group]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="5" name="property-write" description="calls setName($language)" type="\eZ\Publish\API\Repository\Values\ContentType\$names" variable="$names[$language]">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$names</type>
        </tag>
        <tag line="5" name="property-write" description="calls setName() for setting a namein the initial language" type="\eZ\Publish\API\Repository\Values\ContentType\$name" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$name</type>
        </tag>
        <tag line="5" name="property-write" description="calls setDescription($language)" type="\eZ\Publish\API\Repository\Values\ContentType\$descriptions" variable="$descriptions[$language]">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$descriptions</type>
        </tag>
        <tag line="5" name="property-write" description="calls setDescription() for setting a description in an initial language" type="\eZ\Publish\API\Repository\Values\ContentType\$description" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$description</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="20" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="15">
          <description><![CDATA[Readable string identifier of a group]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="15" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="27" package="Default">
        <name>$modifierId</name>
        <default><![CDATA[null]]></default>
        <docblock line="22">
          <description><![CDATA[if set this value overrides the current user as modifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$modified</name>
        <default><![CDATA[null]]></default>
        <docblock line="29">
          <description><![CDATA[If set this value overrides the current time for modified]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="var" description="(unix timestamp)" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="42" package="Default">
        <name>$initialLanguageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="36">
          <description><![CDATA[5.x only
if set the initial language code is changed to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="51" package="Default">
        <name>setName</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[5.x only
set a content type group name for the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="44" name="param" description="if not given the initialLanguage is used as default" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="51">
          <name>$language</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="60" package="Default">
        <name>setDescription</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[5.x only
set a content type description for the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="param" description="" type="string" variable="$description">
            <type by_reference="false">string</type>
          </tag>
          <tag line="53" name="param" description="if not given the initialLanguage is used as default" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$description</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="60">
          <name>$language</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/ContentType/ContentTypeDraft.php" hash="54a33baede2e3f6524dd9e425e51ff40">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/ContentType/ContentTypeDraft.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\ContentType" line="9" package="Default">
      <name>ContentTypeDraft</name>
      <full_name>\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ContentType\ContentType</extends>
      <docblock line="4">
        <description><![CDATA[This class represents a draft of a content type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/ContentType/FieldDefinitionUpdateStruct.php" hash="005a3e913c50a2d43d12fc06890cd644">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/ContentType/FieldDefinitionUpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\ContentType" line="14" package="Default">
      <name>FieldDefinitionUpdateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionUpdateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="6">
        <description><![CDATA[this class is used to update a field definition]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="6" name="property-write" description="$names[$language] calls setName($language)" type="array" variable="$names">
          <type by_reference="false">array</type>
        </tag>
        <tag line="6" name="property-write" description="calls setName() for setting a namein the initial language" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="6" name="property-write" description="$descriptions[$language] calls setDescription($language)" type="array" variable="$descriptions">
          <type by_reference="false">array</type>
        </tag>
        <tag line="6" name="property-write" description="calls setDescription() for setting a description in an initial language" type="string" variable="$description">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="21" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="16">
          <description><![CDATA[If set the identifier of a field definition is changed to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="16" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="44" package="Default">
        <name>$fieldGroup</name>
        <default><![CDATA[]]></default>
        <docblock line="39">
          <description><![CDATA[if set the field group is changed to this name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="51" package="Default">
        <name>$position</name>
        <default><![CDATA[]]></default>
        <docblock line="46">
          <description><![CDATA[if set the position of the field in the content type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="58" package="Default">
        <name>$isTranslatable</name>
        <default><![CDATA[]]></default>
        <docblock line="53">
          <description><![CDATA[if set translatable flag is set to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="65" package="Default">
        <name>$isRequired</name>
        <default><![CDATA[]]></default>
        <docblock line="60">
          <description><![CDATA[if set the required flag is set to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="72" package="Default">
        <name>$isInfoCollector</name>
        <default><![CDATA[]]></default>
        <docblock line="67">
          <description><![CDATA[if set the information collector flag is set to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="95" package="Default">
        <name>$defaultValue</name>
        <default><![CDATA[]]></default>
        <docblock line="90">
          <description><![CDATA[If set the default value for this field is changed to the given value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="102" package="Default">
        <name>$isSearchable</name>
        <default><![CDATA[]]></default>
        <docblock line="97">
          <description><![CDATA[If set the the searchable flag is set to this value.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="29" package="Default">
        <name>setName</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[set a field definition name for the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="29">
          <name>$language</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="37" package="Default">
        <name>setDescription</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[set a  fie definition description for the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="param" description="" type="string" variable="$description">
            <type by_reference="false">string</type>
          </tag>
          <tag line="31" name="param" description="" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$description</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="37">
          <name>$language</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="81" package="Default">
        <name>setValidator</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[sets a validator which has to be supported by the field type.]]></description>
          <long-description><![CDATA[<p>if a validator existis with the given name the validator parameters are replaced by the given ones.
Otherwise the given validator is added.</p>]]></long-description>
          <tag line="74" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\Validator" variable="$validator">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\Validator</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$validator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="88" package="Default">
        <name>setFieldSettings</name>
        <type>function</type>
        <docblock line="83">
          <description><![CDATA[replaces the field settings map supported by the field type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="param" description="" type="array" variable="$fieldSettings">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$fieldSettings</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/ContentType/ContentTypeUpdateStruct.php" hash="ea256a95618c352b2afbc8b2ef30a2cc">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/ContentType/ContentTypeUpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\ContentType" line="13" package="Default">
      <name>ContentTypeUpdateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\ContentType\ContentTypeUpdateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="5">
        <description><![CDATA[This class is used for updating a content type]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="5" name="property-write" description="calls setName($language)" type="\eZ\Publish\API\Repository\Values\ContentType\$names" variable="$names[$language]">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$names</type>
        </tag>
        <tag line="5" name="property-write" description="calls setName() for setting a namein the initial language" type="\eZ\Publish\API\Repository\Values\ContentType\$name" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$name</type>
        </tag>
        <tag line="5" name="property-write" description="calls setDescription($language)" type="\eZ\Publish\API\Repository\Values\ContentType\$descriptions" variable="$descriptions[$language]">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$descriptions</type>
        </tag>
        <tag line="5" name="property-write" description="calls setDescription() for setting a description in an initial language" type="\eZ\Publish\API\Repository\Values\ContentType\$description" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$description</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="20" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="15">
          <description><![CDATA[If set the identifier of a type is changed to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="15" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="27" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="22">
          <description><![CDATA[If set the remote ID is changed to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$urlAliasSchema</name>
        <default><![CDATA[]]></default>
        <docblock line="29">
          <description><![CDATA[If set the URL alias schema is changed to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="41" package="Default">
        <name>$nameSchema</name>
        <default><![CDATA[]]></default>
        <docblock line="36">
          <description><![CDATA[If set the name schema is changed to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="48" package="Default">
        <name>$isContainer</name>
        <default><![CDATA[]]></default>
        <docblock line="43">
          <description><![CDATA[If set the container fllag is set to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="55" package="Default">
        <name>$initialLanguageId</name>
        <default><![CDATA[]]></default>
        <docblock line="50">
          <description><![CDATA[If set the initial language is changed to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="62" package="Default">
        <name>$defaultSortField</name>
        <default><![CDATA[]]></default>
        <docblock line="57">
          <description><![CDATA[If set the default sort field is changed to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="69" package="Default">
        <name>$defaultSortOrder</name>
        <default><![CDATA[]]></default>
        <docblock line="64">
          <description><![CDATA[If set the default sort order is set to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="76" package="Default">
        <name>$defaultAlwaysAvailable</name>
        <default><![CDATA[]]></default>
        <docblock line="71">
          <description><![CDATA[If set the default always available flag is set to this value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="83" package="Default">
        <name>$modifierId</name>
        <default><![CDATA[null]]></default>
        <docblock line="78">
          <description><![CDATA[If set this value overrides the current user as creator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="90" package="Default">
        <name>$modified</name>
        <default><![CDATA[null]]></default>
        <docblock line="85">
          <description><![CDATA[If set this value overrides the current time for creation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="var" description="(unix timestamp)" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="98" package="Default">
        <name>setName</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[set a content type name for the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="92" name="param" description="if not given the initialLanguage is used as default" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="98">
          <name>$language</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="106" package="Default">
        <name>setDescription</name>
        <type>function</type>
        <docblock line="100">
          <description><![CDATA[set a content type description for the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="param" description="" type="string" variable="$description">
            <type by_reference="false">string</type>
          </tag>
          <tag line="100" name="param" description="if not given the initialLanguage is used as default" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$description</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="106">
          <name>$language</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Values/ContentType/ContentTypeCreateStruct.php" hash="183ddf9fc48817102e34187df077a5aa">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Values/ContentType/ContentTypeCreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="FieldDefinitionCreate">eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionCreate</namespace-alias>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="Location">eZ\Publish\API\Repository\Values\Content\Location</namespace-alias>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Values\ContentType" line="19" package="Default">
      <name>ContentTypeCreateStruct</name>
      <full_name>\eZ\Publish\API\Repository\Values\ContentType\ContentTypeCreateStruct</full_name>
      <extends>\eZ\Publish\API\Repository\Values\ValueObject</extends>
      <docblock line="10">
        <description><![CDATA[this clss is used for creating content types]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="10" name="property-write" description="calls setName($language)" type="\eZ\Publish\API\Repository\Values\ContentType\$names" variable="$names[$language]">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$names</type>
        </tag>
        <tag line="10" name="property-write" description="calls setName() for setting a namein the initial language" type="\eZ\Publish\API\Repository\Values\ContentType\$name" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$name</type>
        </tag>
        <tag line="10" name="property-write" description="calls setDescription($language)" type="\eZ\Publish\API\Repository\Values\ContentType\$descriptions" variable="$descriptions[$language]">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$descriptions</type>
        </tag>
        <tag line="10" name="property-write" description="calls setDescription() for setting a description in an initial language" type="\eZ\Publish\API\Repository\Values\ContentType\$description" variable="">
          <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\$description</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="26" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[String identifier of a type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="33" package="Default">
        <name>$initialLanguageCode</name>
        <default><![CDATA[]]></default>
        <docblock line="28">
          <description><![CDATA[Initial language Code.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="40" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="35">
          <description><![CDATA[The renote id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="47" package="Default">
        <name>$urlAliasSchema</name>
        <default><![CDATA[]]></default>
        <docblock line="42">
          <description><![CDATA[URL alias schema]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="54" package="Default">
        <name>$nameSchema</name>
        <default><![CDATA[]]></default>
        <docblock line="49">
          <description><![CDATA[Name schema]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="61" package="Default">
        <name>$isContainer</name>
        <default><![CDATA[false]]></default>
        <docblock line="56">
          <description><![CDATA[Determines if the type is a container]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="70" package="Default">
        <name>$defaultSortField</name>
        <default><![CDATA[Location::SORT_FIELD_PUBLISHED]]></default>
        <docblock line="63">
          <description><![CDATA[Specifies which property the child locations should be sorted on by default when created]]></description>
          <long-description><![CDATA[<p>Valid values are found at {@link Location::SORT_FIELD_*}</p>]]></long-description>
          <tag line="63" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="79" package="Default">
        <name>$defaultSortOrder</name>
        <default><![CDATA[Location::SORT_ORDER_DESC]]></default>
        <docblock line="72">
          <description><![CDATA[Specifies whether the sort order should be ascending or descending by default when created]]></description>
          <long-description><![CDATA[<p>Valid values are {@link Location::SORT_ORDER_*}</p>]]></long-description>
          <tag line="72" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="87" package="Default">
        <name>$defaultAlwaysAvailable</name>
        <default><![CDATA[true]]></default>
        <docblock line="81">
          <description><![CDATA[if an instance of acontent type is created the always available flag is set
by default this this value.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="116" package="Default">
        <name>$creatorId</name>
        <default><![CDATA[null]]></default>
        <docblock line="112">
          <description><![CDATA[if set this value overrides the current user as creator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="122" package="Default">
        <name>$created</name>
        <default><![CDATA[null]]></default>
        <docblock line="118">
          <description><![CDATA[If set this value overrides the current time for creation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="var" description="(unix timestamp)" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="95" package="Default">
        <name>setName</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[set a content type name for the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="89" name="param" description="if not given the initialLanguage is used as default" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="95">
          <name>$language</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="103" package="Default">
        <name>setDescription</name>
        <type>function</type>
        <docblock line="97">
          <description><![CDATA[set a content type description for the given language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="param" description="" type="string" variable="$description">
            <type by_reference="false">string</type>
          </tag>
          <tag line="97" name="param" description="if not given the initialLanguage is used as default" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$description</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="103">
          <name>$language</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Values\ContentType" line="110" package="Default">
        <name>addFieldDefinition</name>
        <type>function</type>
        <docblock line="105">
          <description><![CDATA[adds a new field definition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionCreate" variable="$fieldDef">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionCreate</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Exceptions/ForbiddenException.php" hash="fccd80080d9cfbd514de33e8b79cab33">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Exceptions/ForbiddenException.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Exceptions" line="10" package="eZ\Publish\API\Repository\Exceptions">
      <name>ForbiddenException</name>
      <full_name>\eZ\Publish\API\Repository\Exceptions\ForbiddenException</full_name>
      <extends>\eZ\Publish\API\Repository\Exceptions\RuntimeException</extends>
      <docblock line="4">
        <description><![CDATA[An Exception which is thrown if an operation cannot be performed by a service
although the current user
would have permission to perform this action.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="4" name="package" description="eZ\Publish\API\Repository\Exceptions"/>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Exceptions" line="16" package="Default">
        <name>getErrorCode</name>
        <type>function</type>
        <docblock line="12">
          <description><![CDATA[returns an additional error code which indicates why an action could not be performed]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="12" name="return" description="an error code" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Exceptions/IllegalArgumentException.php" hash="265c7ce1161503826b8473fc5080db07">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Exceptions/IllegalArgumentException.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Exceptions" line="8" package="Default">
      <name>IllegalArgumentException</name>
      <full_name>\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</full_name>
      <extends>\eZ\Publish\API\Repository\Exceptions\ForbiddenException</extends>
      <docblock line="3">
        <description><![CDATA[This exception is throen if a service method is called with an illegal or non appriprite value]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Exceptions/ContentValidationException.php" hash="e6241bda32fb1b18fbbfe279dfb22440">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Exceptions/ContentValidationException.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Exceptions" line="6" package="Default">
      <name>ContentValidationException</name>
      <full_name>\eZ\Publish\API\Repository\Exceptions\ContentValidationException</full_name>
      <extends>\eZ\Publish\API\Repository\Exceptions\ForbiddenException</extends>
      <docblock line="3">
        <description><![CDATA[This Exception is thrown on create or update content one or more given fields are not valid]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Exceptions/BadStateException.php" hash="7efd37d3aced210665e0895f34f49713">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Exceptions/BadStateException.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Exceptions" line="6" package="Default">
      <name>BadStateException</name>
      <full_name>\eZ\Publish\API\Repository\Exceptions\BadStateException</full_name>
      <extends>\eZ\Publish\API\Repository\Exceptions\ForbiddenException</extends>
      <docblock line="3">
        <description><![CDATA[This Exception is thrown if a method is called with an value referencing an object which is not in the right state]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Exceptions/ContentFieldValidationException.php" hash="e16bb31343d95c12a95acce13a66a4df">
    <parse_markers>
      <error line="8" code="50012">No short description for method getFieldExceptions()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Exceptions/ContentFieldValidationException.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Exceptions" line="6" package="Default">
      <name>ContentFieldValidationException</name>
      <full_name>\eZ\Publish\API\Repository\Exceptions\ContentFieldValidationException</full_name>
      <extends>\eZ\Publish\API\Repository\Exceptions\ForbiddenException</extends>
      <docblock line="3">
        <description><![CDATA[This Exception is thrown on create or update content one or more given fields are not valid]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="eZ\Publish\API\Repository\Exceptions" line="12" package="Default">
        <name>getFieldExceptions</name>
        <type>function</type>
        <docblock line="8">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="8" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Exceptions/UnauthorizedException.php" hash="cd4d146861e23ae8a28a5028ab9dc5dc">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Exceptions/UnauthorizedException.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Exceptions" line="6" package="Default">
      <name>UnauthorizedException</name>
      <full_name>\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</full_name>
      <extends>\eZ\Publish\API\Repository\Exceptions\RuntimeException</extends>
      <docblock line="3">
        <description><![CDATA[This Exception is thrown if theuser has is not allowed to perform a service operation]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/Exceptions/NotFoundException.php" hash="d9ca4dcf43669f4105302cb3e258575c">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Exceptions/NotFoundException.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="eZ\Publish\API\Repository\Exceptions" line="10" package="eZ\Publish\API\Repository\Exceptions">
      <name>NotFoundException</name>
      <full_name>\eZ\Publish\API\Repository\Exceptions\NotFoundException</full_name>
      <extends>\eZ\Publish\API\Repository\Exceptions\RuntimeException</extends>
      <docblock line="4">
        <description><![CDATA[This Exception is thrown if an object referencenced by an id or identifier
could not be found in the repository.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="4" name="package" description="eZ\Publish\API\Repository\Exceptions"/>
      </docblock>
    </class>
  </file>
  <file path="eZ/Publish/API/Repository/RoleService.php" hash="e5321d0c98f2efde2612d5703febaa90">
    <parse_markers>
      <error line="22" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $roleCreateStruct in createRole()</error>
      <error line="34" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in updateRole()</error>
      <error line="34" code="50014">Name of argument $update does not match with the DocBlock's name $roleUpdateStruct in updateRole()</error>
      <error line="34" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $update in updateRole()</error>
      <notice line="34" code="50013">Parameter $roleUpdateStruct could not be found in updateRole()</notice>
      <error line="47" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in addPolicy()</error>
      <error line="47" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $policyCreateStruct in addPolicy()</error>
      <error line="59" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in removePolicy()</error>
      <error line="59" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $policy in removePolicy()</error>
      <error line="71" code="50014">Name of argument $policy does not match with the DocBlock's name $policyUpdateStruct in updatePolicy()</error>
      <error line="71" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $policy in updatePolicy()</error>
      <error line="71" code="50014">Name of argument $policyUpdateStruct does not match with the DocBlock's name $policy in updatePolicy()</error>
      <error line="71" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $policyUpdateStruct in updatePolicy()</error>
      <error line="105" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in deleteRole()</error>
      <error line="125" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in assignRoleToUserGroup()</error>
      <error line="125" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userGroup in assignRoleToUserGroup()</error>
      <error line="125" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $roleLimitation in assignRoleToUserGroup()</error>
      <error line="136" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in unassignRoleFromUserGroup()</error>
      <error line="136" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userGroup in unassignRoleFromUserGroup()</error>
      <error line="147" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in assignRoleToUser()</error>
      <error line="147" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in assignRoleToUser()</error>
      <error line="147" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $roleLimitation in assignRoleToUser()</error>
      <error line="160" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in unassignRoleFromUser()</error>
      <error line="160" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in unassignRoleFromUser()</error>
      <error line="171" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in getRoleAssignments()</error>
      <error line="182" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in getRoleAssignmentsForUser()</error>
      <error line="193" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userGroup in getRoleAssignmentsForUserGroup()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/RoleService.php</error>
    </parse_markers>
    <namespace-alias name="PolicyUpdateStruct">eZ\Publish\API\Repository\Values\User\PolicyUpdateStruct</namespace-alias>
    <namespace-alias name="Policy">eZ\Publish\API\Repository\Values\User\Policy</namespace-alias>
    <namespace-alias name="RoleUpdateStruct">eZ\Publish\API\Repository\Values\User\RoleUpdateStruct</namespace-alias>
    <namespace-alias name="PolicyCreateStruct">eZ\Publish\API\Repository\Values\User\PolicyCreateStruct</namespace-alias>
    <namespace-alias name="Role">eZ\Publish\API\Repository\Values\User\Role</namespace-alias>
    <namespace-alias name="RoleCreateStruct">eZ\Publish\API\Repository\Values\User\RoleCreateStruct</namespace-alias>
    <namespace-alias name="RoleAssignment">eZ\Publish\API\Repository\Values\User\RoleAssignment</namespace-alias>
    <namespace-alias name="RoleLimitation">eZ\Publish\API\Repository\Values\User\Limitation\RoleLimitation</namespace-alias>
    <interface namespace="eZ\Publish\API\Repository" line="20" package="eZ\Publish\API\Repository">
      <name>RoleService</name>
      <full_name>\eZ\Publish\API\Repository\RoleService</full_name>
      <extends/>
      <docblock line="13">
        <description><![CDATA[This service provides methods for managing Roles and Policies]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="13" name="todo" description="add get roles for user including limitations"/>
        <tag line="13" name="package" description="eZ\Publish\API\Repository"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="32" package="Default">
        <name>createRole</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[Creates a new Role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="throws" description="if the authenticated user is not allowed to create a role" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="22" name="throws" description="if the name of the role already exists" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="22" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\RoleCreateStruct" variable="$roleCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\RoleCreateStruct</type>
          </tag>
          <tag line="22" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\Role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$roleCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>RoleCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="45" package="Default">
        <name>updateRole</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Updates the name and (5.x) description of the role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="throws" description="if the authenticated user is not allowed to update a role" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="34" name="throws" description="if the name of the role already exists" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="34" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\Role" variable="$role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
          <tag line="34" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\RoleUpdateStruct" variable="$roleUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\RoleUpdateStruct</type>
          </tag>
          <tag line="34" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\Role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
        <argument line="45">
          <name>$update</name>
          <default><![CDATA[]]></default>
          <type>RoleUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="57" package="Default">
        <name>addPolicy</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[adds a new policy to the role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="throws" description="if the authenticated user is not allowed to add a policy" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="47" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\Role" variable="$role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
          <tag line="47" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\PolicyCreateStruct" variable="$policyCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\PolicyCreateStruct</type>
          </tag>
          <tag line="47" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\Role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
        <argument line="57">
          <name>$policyCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>PolicyCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="69" package="Default">
        <name>removePolicy</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[removes a policy from the role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="throws" description="if the authenticated user is not allowed to remove a policy" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="59" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\Role" variable="$role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
          <tag line="59" name="param" description="the policy to remove from the role" type="\eZ\Publish\API\Repository\Values\User\Policy" variable="$policy">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Policy</type>
          </tag>
          <tag line="59" name="return" description="the updated role" type="\eZ\Publish\API\Repository\Values\User\Role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
        <argument line="69">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="82" package="Default">
        <name>updatePolicy</name>
        <type>function</type>
        <docblock line="71">
          <description><![CDATA[Updates the limitations of a policy. The module and function cannot be changed and
the limitaions are replaced by the ones in $roleUpdateStruct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="throws" description="if the authenticated user is not allowed to u�date a policy" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="71" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\PolicyUpdateStruct" variable="$policyUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\PolicyUpdateStruct</type>
          </tag>
          <tag line="71" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\Policy" variable="$policy">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Policy</type>
          </tag>
          <tag line="71" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\Policy">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Policy</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
        <argument line="82">
          <name>$policyUpdateStruct</name>
          <default><![CDATA[]]></default>
          <type>PolicyUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="94" package="Default">
        <name>loadRole</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[loads a role for the given name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="throws" description="if the authenticated user is not allowed to read this role" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="84" name="throws" description="if a role with the given name was not found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="84" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="84" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\Role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="103" package="Default">
        <name>loadRoles</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[loads all roles]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="throws" description="if the authenticated user is not allowed to read the roles" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="96" name="return" description="an array of {@link \eZ\Publish\API\Repository\Values\User\Role}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="112" package="Default">
        <name>deleteRole</name>
        <type>function</type>
        <docblock line="105">
          <description><![CDATA[deletes the given role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="throws" description="if the authenticated user is not allowed to delete this role" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="105" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\Role" variable="$role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="123" package="Default">
        <name>loadPoliciesByUserId</name>
        <type>function</type>
        <docblock line="114">
          <description><![CDATA[loads all policies from roles which are assigned to a user or to user groups to which the user belongs]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="114" name="throws" description="if a user with the given id was not found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="114" name="param" description="" type="" variable="$userId"/>
          <tag line="114" name="return" description="an array of {@link Policy}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="134" package="Default">
        <name>assignRoleToUserGroup</name>
        <type>function</type>
        <docblock line="125">
          <description><![CDATA[assigns a role to the given user group]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="125" name="throws" description="if the authenticated user is not allowed to assign a role" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="125" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\Role" variable="$role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
          <tag line="125" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup" variable="$userGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
          <tag line="125" name="param" description="an optional role limitation (which is either a subtree limitation or section limitation)" type="\eZ\Publish\API\Repository\Values\User\RoleLimitation" variable="$roleLimitation">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\RoleLimitation</type>
          </tag>
        </docblock>
        <argument line="134">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
        <argument line="134">
          <name>$userGroup</name>
          <default><![CDATA[]]></default>
          <type>UserGroup</type>
        </argument>
        <argument line="134">
          <name>$roleLimitation</name>
          <default><![CDATA[null]]></default>
          <type>RoleLimitation</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="145" package="Default">
        <name>unassignRoleFromUserGroup</name>
        <type>function</type>
        <docblock line="136">
          <description><![CDATA[removes a role from the given user group.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="136" name="throws" description="if the authenticated user is not allowed to remove a role" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="136" name="throws" description="If the role is not assigned to the given user group" type="\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException</type>
          </tag>
          <tag line="136" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\Role" variable="$role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
          <tag line="136" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup" variable="$userGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
        </docblock>
        <argument line="145">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
        <argument line="145">
          <name>$userGroup</name>
          <default><![CDATA[]]></default>
          <type>UserGroup</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="158" package="Default">
        <name>assignRoleToUser</name>
        <type>function</type>
        <docblock line="147">
          <description><![CDATA[assigns a role to the given user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="147" name="throws" description="if the authenticated user is not allowed to assign a role" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="147" name="todo" description="add limitations"/>
          <tag line="147" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\Role" variable="$role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
          <tag line="147" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="147" name="param" description="an optional role limitation (which is either a subtree limitation or section limitation)" type="\eZ\Publish\API\Repository\Values\User\RoleLimitation" variable="$roleLimitation">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\RoleLimitation</type>
          </tag>
        </docblock>
        <argument line="158">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
        <argument line="158">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
        <argument line="158">
          <name>$roleLimitation</name>
          <default><![CDATA[null]]></default>
          <type>RoleLimitation</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="169" package="Default">
        <name>unassignRoleFromUser</name>
        <type>function</type>
        <docblock line="160">
          <description><![CDATA[removes a role from the given user.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="160" name="throws" description="if the authenticated user is not allowed to remove a role" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="160" name="throws" description="If the role is not assigned to the user" type="\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException</type>
          </tag>
          <tag line="160" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\Role" variable="$role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
          <tag line="160" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
        <argument line="169">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="180" package="Default">
        <name>getRoleAssignments</name>
        <type>function</type>
        <docblock line="171">
          <description><![CDATA[returns the assigned user and user groups to this role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="171" name="throws" description="if the authenticated user is not allowed to read a role" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="171" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\Role" variable="$role">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\Role</type>
          </tag>
          <tag line="171" name="return" description="an array of {@link RoleAssignment}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="191" package="Default">
        <name>getRoleAssignmentsForUser</name>
        <type>function</type>
        <docblock line="182">
          <description><![CDATA[returns the roles assigned to the given user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="182" name="throws" description="if the authenticated user is not allowed to read a user" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="182" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="182" name="return" description="an array of {@link UserRoleAssignment}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="191">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="202" package="Default">
        <name>getRoleAssignmentsForUserGroup</name>
        <type>function</type>
        <docblock line="193">
          <description><![CDATA[returns the roles assigned to the given user group]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="193" name="throws" description="if the authenticated user is not allowed to read a user group" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="193" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\UserGroup" variable="$userGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\UserGroup</type>
          </tag>
          <tag line="193" name="return" description="an array of {@link UserGroupRoleAssignment}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$userGroup</name>
          <default><![CDATA[]]></default>
          <type>UserGroup</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="211" package="Default">
        <name>newRoleCreateStruct</name>
        <type>function</type>
        <docblock line="204">
          <description><![CDATA[instanciates a role create class]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="204" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="204" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\RoleCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\RoleCreateStruct</type>
          </tag>
        </docblock>
        <argument line="211">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="221" package="Default">
        <name>newPolicyCreateStruct</name>
        <type>function</type>
        <docblock line="213">
          <description><![CDATA[instanciates a policy create class]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="213" name="param" description="" type="string" variable="$module">
            <type by_reference="false">string</type>
          </tag>
          <tag line="213" name="param" description="" type="string" variable="$function">
            <type by_reference="false">string</type>
          </tag>
          <tag line="213" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\PolicyCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\PolicyCreateStruct</type>
          </tag>
        </docblock>
        <argument line="221">
          <name>$module</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="221">
          <name>$function</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="228" package="Default">
        <name>newPolicyUpdateStruct</name>
        <type>function</type>
        <docblock line="223">
          <description><![CDATA[instanciates a policy update class]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="223" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\PolicyUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\PolicyUpdateStruct</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="235" package="Default">
        <name>newRoleUpdateStruct</name>
        <type>function</type>
        <docblock line="230">
          <description><![CDATA[instanciates a policy update class]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="230" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\RoleUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\RoleUpdateStruct</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/API/Repository/Repository.php" hash="ea176383bc80c6987367a78f096c3549" package="eZ\Publish\API\Repository">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository"/>
    </docblock>
    <parse_markers>
      <error line="26" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in setCurrentUser()</error>
      <error line="33" code="50012">No short description for method hasAccess()</error>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in hasAccess()</error>
      <error line="43" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in canUser()</error>
      <error line="43" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $target in canUser()</error>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/Repository.php</critical>
    </parse_markers>
    <namespace-alias name="ValueObject">eZ\Publish\API\Repository\Values\ValueObject</namespace-alias>
    <namespace-alias name="User">eZ\Publish\API\Repository\Values\User\User</namespace-alias>
    <interface namespace="eZ\Publish\API\Repository" line="16" package="eZ\Publish\API\Repository">
      <name>Repository</name>
      <full_name>\eZ\Publish\API\Repository\Repository</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Repository class]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="12" name="package" description="eZ\Publish\API\Repository"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="24" package="Default">
        <name>getCurrentUser</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Get current user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="return" description="" type="\eZ\Publish\API\Repository\Values\User\User">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="31" package="Default">
        <name>setCurrentUser</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[sets the current user to the user with the given user id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="41" package="Default">
        <name>hasAccess</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="" type="string" variable="$module">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="param" description="" type="string" variable="$function">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="param" description="" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="33" name="return" description="if limitations are on this function an array of limitations is returned" type="boolean|array">
            <type by_reference="false">boolean</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$module</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="41">
          <name>$function</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="41">
          <name>$user</name>
          <default><![CDATA[null]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="52" package="Default">
        <name>canUser</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Indicates if the current user is allowed to perform an action given by the function on the given
objects]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="" type="string" variable="$module">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="param" description="" type="string" variable="$function">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="param" description="" type="\eZ\Publish\API\Repository\Values\ValueObject" variable="$value">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ValueObject</type>
          </tag>
          <tag line="43" name="param" description="" type="\eZ\Publish\API\Repository\Values\ValueObject" variable="$target">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ValueObject</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$module</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="52">
          <name>$function</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="52">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>ValueObject</type>
        </argument>
        <argument line="52">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type>ValueObject</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="62" package="Default">
        <name>getContentService</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Get Content Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Content objects and it's aggregate members.</p>]]></long-description>
          <tag line="54" name="return" description="" type="\eZ\Publish\API\Repository\ContentService">
            <type by_reference="false">\eZ\Publish\API\Repository\ContentService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="71" package="Default">
        <name>getContentLanguageService</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Get Content Language Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Content language objects</p>]]></long-description>
          <tag line="64" name="return" description="" type="\eZ\Publish\API\Repository\LanguageService">
            <type by_reference="false">\eZ\Publish\API\Repository\LanguageService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="81" package="Default">
        <name>getContentTypeService</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Get Content Type Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Content Type objects and it's aggregate members.
( Group, Field &amp; FieldCategory )</p>]]></long-description>
          <tag line="73" name="return" description="" type="\eZ\Publish\API\Repository\ContentTypeService">
            <type by_reference="false">\eZ\Publish\API\Repository\ContentTypeService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="90" package="Default">
        <name>getLocationService</name>
        <type>function</type>
        <docblock line="83">
          <description><![CDATA[Get Content Location Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Location objects and subtrees</p>]]></long-description>
          <tag line="83" name="return" description="" type="\eZ\Publish\API\Repository\LocationService">
            <type by_reference="false">\eZ\Publish\API\Repository\LocationService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="100" package="Default">
        <name>getTrashService</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Get Content Trash service]]></description>
          <long-description><![CDATA[<p>Trash service allows to perform operations related to location trash
(trash/untrash, load/list from trash...)</p>]]></long-description>
          <tag line="92" name="return" description="" type="\eZ\Publish\API\Repository\TrashService">
            <type by_reference="false">\eZ\Publish\API\Repository\TrashService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="109" package="Default">
        <name>getSectionService</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Get Content Section Service]]></description>
          <long-description><![CDATA[<p>Get Section service that lets you manipulate section objects</p>]]></long-description>
          <tag line="102" name="return" description="" type="\eZ\Publish\API\Repository\SectionService">
            <type by_reference="false">\eZ\Publish\API\Repository\SectionService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="118" package="Default">
        <name>getUserService</name>
        <type>function</type>
        <docblock line="111">
          <description><![CDATA[Get User Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Users and UserGroup</p>]]></long-description>
          <tag line="111" name="return" description="" type="\eZ\Publish\API\Repository\UserService">
            <type by_reference="false">\eZ\Publish\API\Repository\UserService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="125" package="Default">
        <name>getRoleService</name>
        <type>function</type>
        <docblock line="120">
          <description><![CDATA[Get RoleService]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="120" name="return" description="" type="\eZ\Publish\API\Repository\RoleService">
            <type by_reference="false">\eZ\Publish\API\Repository\RoleService</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="133" package="Default">
        <name>beginTransaction</name>
        <type>function</type>
        <docblock line="127">
          <description><![CDATA[Begin transaction]]></description>
          <long-description><![CDATA[<p>Begins an transaction, make sure you'll call commit or rollback when done,
otherwise work will be lost.</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="142" package="Default">
        <name>commit</name>
        <type>function</type>
        <docblock line="135">
          <description><![CDATA[Commit transaction]]></description>
          <long-description><![CDATA[<p>Commit transaction, or throw exceptions if no transactions has been started.</p>]]></long-description>
          <tag line="135" name="throws" description="If no transaction has been started" type="\eZ\Publish\API\Repository\RuntimeException">
            <type by_reference="false">\eZ\Publish\API\Repository\RuntimeException</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="151" package="Default">
        <name>rollback</name>
        <type>function</type>
        <docblock line="144">
          <description><![CDATA[Rollback transaction]]></description>
          <long-description><![CDATA[<p>Rollback transaction, or throw exceptions if no transactions has been started.</p>]]></long-description>
          <tag line="144" name="throws" description="If no transaction has been started" type="\eZ\Publish\API\Repository\RuntimeException">
            <type by_reference="false">\eZ\Publish\API\Repository\RuntimeException</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/API/Repository/ContentTypeService.php" hash="0e6e151bb93337895dedea4ba615a88f" package="eZ\Publish\API\Repository">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository"/>
    </docblock>
    <parse_markers>
      <error line="26" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeGroupCreateStruct in createContentTypeGroup()</error>
      <error line="67" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeGroup in updateContentTypeGroup()</error>
      <error line="67" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeGroupUpdateStruct in updateContentTypeGroup()</error>
      <error line="78" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeGroup in deleteContentTypeGroup()</error>
      <error line="94" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeCreateStruct in createContentType()</error>
      <error line="153" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeGroup in loadContentTypes()</error>
      <error line="162" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in createContentTypeDraft()</error>
      <error line="177" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeDraft in updateContentTypeDraft()</error>
      <error line="177" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeUpdateStruct in updateContentTypeDraft()</error>
      <error line="190" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in deleteContentType()</error>
      <error line="203" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in copyContentType()</error>
      <error line="203" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in copyContentType()</error>
      <error line="218" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in assignContentTypeGroup()</error>
      <error line="218" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeGroup in assignContentTypeGroup()</error>
      <error line="229" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in unassignContentTypeGroup()</error>
      <error line="229" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeGroup in unassignContentTypeGroup()</error>
      <error line="241" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeDraft in addFieldDefinition()</error>
      <error line="241" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinitionCreateStruct in addFieldDefinition()</error>
      <error line="254" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeDraft in removeFieldDefinition()</error>
      <error line="254" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in removeFieldDefinition()</error>
      <error line="265" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeDraft in updateFieldDefinition()</error>
      <error line="265" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in updateFieldDefinition()</error>
      <error line="265" code="50014">Name of argument $fieldDefinitionUpdateStruct does not match with the DocBlock's name $fieldDefinitionStruct in updateFieldDefinition()</error>
      <error line="265" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinitionUpdateStruct in updateFieldDefinition()</error>
      <notice line="265" code="50013">Parameter $fieldDefinitionStruct could not be found in updateFieldDefinition()</notice>
      <error line="278" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeDraft in publishContentTypeDraft()</error>
      <error line="322" code="50014">Name of argument $identifier does not match with the DocBlock's name $fieldTypeIdentifier in newFieldDefinitionCreateStruct()</error>
      <error line="322" code="50014">Name of argument $fieldTypeIdentifier does not match with the DocBlock's name $identifier in newFieldDefinitionCreateStruct()</error>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/ContentTypeService.php</critical>
    </parse_markers>
    <namespace-alias name="FieldDefinitionUpdateStruct">eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionUpdateStruct</namespace-alias>
    <namespace-alias name="FieldDefinition">eZ\Publish\API\Repository\Values\ContentType\FieldDefinition</namespace-alias>
    <namespace-alias name="FieldDefinitionCreateStruct">eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionCreateStruct</namespace-alias>
    <namespace-alias name="ContentType">eZ\Publish\API\Repository\Values\ContentType\ContentType</namespace-alias>
    <namespace-alias name="ContentTypeDraft">eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft</namespace-alias>
    <namespace-alias name="ContentTypeGroup">eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup</namespace-alias>
    <namespace-alias name="User">eZ\Publish\API\Repository\Values\User\User</namespace-alias>
    <namespace-alias name="ContentTypeUpdateStruct">ezp\Values\ContentType\ContentTypeUpdateStruct</namespace-alias>
    <namespace-alias name="ContentTypeCreateStruct">eZ\Publish\API\Repository\Values\Content\ContentType\ContentTypeCreateStruct</namespace-alias>
    <namespace-alias name="ContentTypeGroupUpdateStruct">eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupUpdateStruct</namespace-alias>
    <namespace-alias name="ContentTypeGroupCreateStruct">eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupCreateStruct</namespace-alias>
    <interface namespace="eZ\Publish\API\Repository" line="24" package="eZ\Publish\API\Repository">
      <name>ContentTypeService</name>
      <full_name>\eZ\Publish\API\Repository\ContentTypeService</full_name>
      <extends/>
      <docblock line="19">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="19" name="example" description="Examples/contenttype.php"/>
        <tag line="19" name="package" description="eZ\Publish\API\Repository"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="36" package="Default">
        <name>createContentTypeGroup</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Create a Content Type Group object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="throws" description="if the user is not allowed to create a content type group" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="26" name="throws" description="If a group with the same identifier already exists" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="26" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupCreateStruct" variable="$contentTypeGroupCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupCreateStruct</type>
          </tag>
          <tag line="26" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$contentTypeGroupCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>ContentTypeGroupCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="47" package="Default">
        <name>loadContentTypeGroup</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Get a Content Type Group object by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="throws" description="If group can not be found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="38" name="param" description="" type="int" variable="$contentTypeGroupId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="38" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$contentTypeGroupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="58" package="Default">
        <name>loadContentTypeGroupByIdentifier</name>
        <type>function</type>
        <docblock line="49">
          <description><![CDATA[Get a Content Type Group object by identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="throws" description="If group can not be found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="49" name="param" description="" type="string" variable="$contentTypeGroupIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="49" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$contentTypeGroupIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="65" package="Default">
        <name>loadContentTypeGroups</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Get all Content Type Groups]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="return" description="an array of {@link ContentTypeGroup}" type="\eZ\Publish\API\Repository\aray">
            <type by_reference="false">\eZ\Publish\API\Repository\aray</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="76" package="Default">
        <name>updateContentTypeGroup</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Update a Content Type Group object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="throws" description="if the user is not allowed to create a content type group" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="67" name="throws" description="If the given identifier (if set) already exists" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="67" name="param" description="the content type group to be updated" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup" variable="$contentTypeGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup</type>
          </tag>
          <tag line="67" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupUpdateStruct" variable="$contentTypeGroupUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupUpdateStruct</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$contentTypeGroup</name>
          <default><![CDATA[]]></default>
          <type>ContentTypeGroup</type>
        </argument>
        <argument line="76">
          <name>$contentTypeGroupUpdateStruct</name>
          <default><![CDATA[]]></default>
          <type>ContentTypeGroupUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="92" package="Default">
        <name>deleteContentTypeGroup</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Delete a Content Type Group.]]></description>
          <long-description><![CDATA[<p>If the paramter $deleteObjects is set to true
this method deletes also all content types in this group which
are not assigned to other groups including the content object instances.</p>]]></long-description>
          <tag line="78" name="throws" description="if the user is not allowed to delete a content type group" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="78" name="throws" description="If the parameter $deleteObjects is set to false and a to be deleted content type has instances" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="78" name="param" description="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup" type="" variable="$contentTypeGroup"/>
          <tag line="78" name="param" description="indicates if content object should be deleted if exist" type="boolean" variable="$deleteObjects">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$contentTypeGroup</name>
          <default><![CDATA[]]></default>
          <type>ContentTypeGroup</type>
        </argument>
        <argument line="92">
          <name>$deleteObjects</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="107" package="Default">
        <name>createContentType</name>
        <type>function</type>
        <docblock line="94">
          <description><![CDATA[Create a Content Type object.]]></description>
          <long-description><![CDATA[<p>The content type is created in the state STATUS_DRAFT.</p>]]></long-description>
          <tag line="94" name="throws" description="If the identifier or remoteId in the content type create struct already exists or there is a dublicate field identifier" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="94" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeCreateStruct" variable="$contentTypeCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeCreateStruct</type>
          </tag>
          <tag line="94" name="param" description="Required array of {@link ContentTypeGroup} to link type with (must contain one)" type="array" variable="$contentTypeGroups">
            <type by_reference="false">array</type>
          </tag>
          <tag line="94" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$contentTypeCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>ContentTypeCreateStruct</type>
        </argument>
        <argument line="107">
          <name>$contentTypeGroups</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="118" package="Default">
        <name>loadContentType</name>
        <type>function</type>
        <docblock line="109">
          <description><![CDATA[Get a Content Type object by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="109" name="throws" description="If a content type with the given id and status DEFINED can not be found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="109" name="param" description="" type="int" variable="$contentTypeId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="109" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentType">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
          </tag>
        </docblock>
        <argument line="118">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="129" package="Default">
        <name>loadContentTypeByIdentifier</name>
        <type>function</type>
        <docblock line="120">
          <description><![CDATA[Get a Content Type object by identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="120" name="throws" description="If content type with the given identifier and status DEFINED can not be found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="120" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="120" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentType">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="140" package="Default">
        <name>loadContentTypeByRemoteId</name>
        <type>function</type>
        <docblock line="131">
          <description><![CDATA[Get a Content Type object by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="131" name="throws" description="If content type with the given remote id and status DEFINED can not be found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="131" name="param" description="" type="string" variable="$remoteId">
            <type by_reference="false">string</type>
          </tag>
          <tag line="131" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentType">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$remoteId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="151" package="Default">
        <name>loadContentTypeDraft</name>
        <type>function</type>
        <docblock line="142">
          <description><![CDATA[Get a Content Type object draft by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="142" name="throws" description="If the content type draft owned by the current user can not be found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="142" name="param" description="" type="int" variable="$contentTypeId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="142" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft</type>
          </tag>
        </docblock>
        <argument line="151">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="160" package="Default">
        <name>loadContentTypes</name>
        <type>function</type>
        <docblock line="153">
          <description><![CDATA[Get Content Type objects which belong to the given content type group]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="153" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup" variable="$contentTypeGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup</type>
          </tag>
          <tag line="153" name="return" description="an array of {@link ContentType} which have status DEFINED" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="160">
          <name>$contentTypeGroup</name>
          <default><![CDATA[]]></default>
          <type>ContentTypeGroup</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="175" package="Default">
        <name>createContentTypeDraft</name>
        <type>function</type>
        <docblock line="162">
          <description><![CDATA[Creates a draft from an existing content type.]]></description>
          <long-description><![CDATA[<p>This is a complete copy of the content
type wiich has the state STATUS_DRAFT.</p>]]></long-description>
          <tag line="162" name="throws" description="if the user is not allowed to edit a content type" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="162" name="throws" description="If there is already a draft assigned to another user" type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="162" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentType" variable="$contentType">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
          </tag>
          <tag line="162" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft</type>
          </tag>
        </docblock>
        <argument line="175">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>ContentType</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="188" package="Default">
        <name>updateContentTypeDraft</name>
        <type>function</type>
        <docblock line="177">
          <description><![CDATA[Update a Content Type object]]></description>
          <long-description><![CDATA[<p>Does not update fields (fieldDefinitions), use {@link updateFieldDefinition()} to update them.</p>]]></long-description>
          <tag line="177" name="throws" description="if the user is not allowed to update a content type" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="177" name="throws" description="If the given identifier or remoteId already exists or there is no draft assigned to the authenticated user" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="177" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft" variable="$contentTypeDraft">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft</type>
          </tag>
          <tag line="177" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeUpdateStruct" variable="$contentTypeUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeUpdateStruct</type>
          </tag>
        </docblock>
        <argument line="188">
          <name>$contentTypeDraft</name>
          <default><![CDATA[]]></default>
          <type>ContentTypeDraft</type>
        </argument>
        <argument line="188">
          <name>$contentTypeUpdateStruct</name>
          <default><![CDATA[]]></default>
          <type>ContentTypeUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="201" package="Default">
        <name>deleteContentType</name>
        <type>function</type>
        <docblock line="190">
          <description><![CDATA[Delete a Content Type object.]]></description>
          <long-description><![CDATA[<p>If $deleteObjects is set to true all object instances of this content type are deleted.</p>]]></long-description>
          <tag line="190" name="throws" description="$deleteObjects is set to false and there exist content objects of this type" type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="190" name="throws" description="if the user is not allowed to delete a content type" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="190" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentType" variable="$contentType">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
          </tag>
          <tag line="190" name="param" description="indicates if content object should be deleted if exist" type="boolean" variable="$deleteObjects">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>ContentType</type>
        </argument>
        <argument line="201">
          <name>$deleteObjects</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="216" package="Default">
        <name>copyContentType</name>
        <type>function</type>
        <docblock line="203">
          <description><![CDATA[Copy Type incl fields and groupIds to a new Type object]]></description>
          <long-description><![CDATA[<p>New Type will have $userId as creator / modifier, created / modified should be updated with current time,
updated remoteId and identifier should be appended with '_' + unique string.</p>]]></long-description>
          <tag line="203" name="throws" description="if the user is not allowed to copy a content type" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="203" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentType" variable="$contentType">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
          </tag>
          <tag line="203" name="param" description="if null the current user is used" type="\eZ\Publish\API\Repository\Values\User\User" variable="$user">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\User\User</type>
          </tag>
          <tag line="203" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentType">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
          </tag>
        </docblock>
        <argument line="216">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>ContentType</type>
        </argument>
        <argument line="216">
          <name>$user</name>
          <default><![CDATA[null]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="227" package="Default">
        <name>assignContentTypeGroup</name>
        <type>function</type>
        <docblock line="218">
          <description><![CDATA[assign a content type to a content type group.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="218" name="throws" description="if the user is not allowed to unlink a content type" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="218" name="throws" description="If the content type is already assigned the given group" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="218" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentType" variable="$contentType">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
          </tag>
          <tag line="218" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup" variable="$contentTypeGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup</type>
          </tag>
        </docblock>
        <argument line="227">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>ContentType</type>
        </argument>
        <argument line="227">
          <name>$contentTypeGroup</name>
          <default><![CDATA[]]></default>
          <type>ContentTypeGroup</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="239" package="Default">
        <name>unassignContentTypeGroup</name>
        <type>function</type>
        <docblock line="229">
          <description><![CDATA[Unassign a content type from a group.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="229" name="throws" description="if the user is not allowed to link a content type" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="229" name="throws" description="If the content type is not assigned this the given group." type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="229" name="throws" description="If $contentTypeGroup is the last group assigned to the content type" type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="229" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentType" variable="$contentType">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentType</type>
          </tag>
          <tag line="229" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup" variable="$contentTypeGroup">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroup</type>
          </tag>
        </docblock>
        <argument line="239">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>ContentType</type>
        </argument>
        <argument line="239">
          <name>$contentTypeGroup</name>
          <default><![CDATA[]]></default>
          <type>ContentTypeGroup</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="252" package="Default">
        <name>addFieldDefinition</name>
        <type>function</type>
        <docblock line="241">
          <description><![CDATA[Adds a new field definition to an existing content type.]]></description>
          <long-description><![CDATA[<p>The content type must be in state DRAFT.</p>]]></long-description>
          <tag line="241" name="throws" description="if the identifier in already exists in the content type" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="241" name="throws" description="if the user is not allowed to edit a content type" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="241" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft" variable="$contentTypeDraft">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft</type>
          </tag>
          <tag line="241" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionCreateStruct" variable="$fieldDefinitionCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionCreateStruct</type>
          </tag>
        </docblock>
        <argument line="252">
          <name>$contentTypeDraft</name>
          <default><![CDATA[]]></default>
          <type>ContentTypeDraft</type>
        </argument>
        <argument line="252">
          <name>$fieldDefinitionCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinitionCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="263" package="Default">
        <name>removeFieldDefinition</name>
        <type>function</type>
        <docblock line="254">
          <description><![CDATA[Remove a field definition from an existing Type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="254" name="throws" description="If the given field definition does not belong to the given type" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="254" name="throws" description="if the user is not allowed to edit a content type" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="254" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft" variable="$contentTypeDraft">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft</type>
          </tag>
          <tag line="254" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="263">
          <name>$contentTypeDraft</name>
          <default><![CDATA[]]></default>
          <type>ContentTypeDraft</type>
        </argument>
        <argument line="263">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="276" package="Default">
        <name>updateFieldDefinition</name>
        <type>function</type>
        <docblock line="265">
          <description><![CDATA[Update a field definition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="265" name="throws" description="If the field id in the update struct is not found or does not belong to the content type" type="\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\InvalidArgumentException</type>
          </tag>
          <tag line="265" name="throws" description="if the user is not allowed to edit a content type" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="265" name="throws" description="If the given identifier is used in an existing field of the given content type" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="265" name="param" description="the content type draft" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft" variable="$contentTypeDraft">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft</type>
          </tag>
          <tag line="265" name="param" description="the field definition which should be updated" type="\eZ\Publish\API\Repository\Values\ContentType\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\FieldDefinition</type>
          </tag>
          <tag line="265" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionUpdateStruct" variable="$fieldDefinitionStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionUpdateStruct</type>
          </tag>
        </docblock>
        <argument line="276">
          <name>$contentTypeDraft</name>
          <default><![CDATA[]]></default>
          <type>ContentTypeDraft</type>
        </argument>
        <argument line="276">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="276">
          <name>$fieldDefinitionUpdateStruct</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinitionUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="288" package="Default">
        <name>publishContentTypeDraft</name>
        <type>function</type>
        <docblock line="278">
          <description><![CDATA[Publish the content type and update content objects.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="278" name="throws" description="If the content type has no draft" type="\eZ\Publish\API\Repository\Exceptions\BadStateException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\BadStateException</type>
          </tag>
          <tag line="278" name="throws" description="if the user is not allowed to publish a content type This method updates content objects, depending on the changed field definitions." type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="278" name="param" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft" variable="$contentTypeDraft">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeDraft</type>
          </tag>
        </docblock>
        <argument line="288">
          <name>$contentTypeDraft</name>
          <default><![CDATA[]]></default>
          <type>ContentType</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="297" package="Default">
        <name>newContentTypeGroupCreateStruct</name>
        <type>function</type>
        <docblock line="290">
          <description><![CDATA[instanciates a new content type group create class]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="290" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="290" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupCreateStruct</type>
          </tag>
        </docblock>
        <argument line="297">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="306" package="Default">
        <name>newContentTypeCreateStruct</name>
        <type>function</type>
        <docblock line="299">
          <description><![CDATA[instanciates a new content type create class]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="299" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="299" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeCreateStruct</type>
          </tag>
        </docblock>
        <argument line="306">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="313" package="Default">
        <name>newContentTypeUpdateStruct</name>
        <type>function</type>
        <docblock line="308">
          <description><![CDATA[instanciates a new content type update struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="308" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeUpdateStruct</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="320" package="Default">
        <name>newContentTypeGroupUpdateStruct</name>
        <type>function</type>
        <docblock line="315">
          <description><![CDATA[instanciates a new content type update struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="315" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\ContentTypeGroupUpdateStruct</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="330" package="Default">
        <name>newFieldDefinitionCreateStruct</name>
        <type>function</type>
        <docblock line="322">
          <description><![CDATA[instanciates a field definition create struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="322" name="param" description="the required field type identifier" type="string" variable="$fieldTypeIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="322" name="param" description="the required identifier for the field definition" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="322" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionCreateStruct</type>
          </tag>
        </docblock>
        <argument line="330">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="330">
          <name>$fieldTypeIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="337" package="Default">
        <name>newFieldDefinitionUpdateStruct</name>
        <type>function</type>
        <docblock line="332">
          <description><![CDATA[instanciates a field definition update class]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="332" name="return" description="" type="\eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionUpdateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\ContentType\FieldDefinitionUpdateStruct</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/API/Repository/LanguageService.php" hash="08fde05edcd42bf96c70b82d6fc1df43" package="eZ\Publish\API\Repository">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="eZ\Publish\API\Repository"/>
    </docblock>
    <parse_markers>
      <error line="17" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $languageCreateStruct in createLanguage()</error>
      <error line="29" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $language in updateLanguageName()</error>
      <critical line="2" code="50008">No short description for file eZ/Publish/API/Repository/LanguageService.php</critical>
    </parse_markers>
    <namespace-alias name="LanguageCreateStruct">eZ\Publish\API\Repository\Values\Content\LanguageCreateStruct</namespace-alias>
    <namespace-alias name="Language">eZ\Publish\API\Repository\Values\Content\Language</namespace-alias>
    <interface namespace="eZ\Publish\API\Repository" line="15" package="eZ\Publish\API\Repository">
      <name>LanguageService</name>
      <full_name>\eZ\Publish\API\Repository\LanguageService</full_name>
      <extends/>
      <docblock line="10">
        <description><![CDATA[Language service, used for language operations]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="10" name="package" description="eZ\Publish\API\Repository"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="27" package="Default">
        <name>createLanguage</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Creates the a new Language in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="throws" description="If user does not have access to content translations" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="17" name="throws" description="if the languageCode already exists" type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="17" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\LanguageCreateStruct" variable="$languageCreateStruct">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\LanguageCreateStruct</type>
          </tag>
          <tag line="17" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Language">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Language</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$languageCreateStruct</name>
          <default><![CDATA[]]></default>
          <type>LanguageCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="39" package="Default">
        <name>updateLanguageName</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Changes the name of the language in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="throws" description="If user does not have access to content translations" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="29" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Language" variable="$language">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Language</type>
          </tag>
          <tag line="29" name="param" description="" type="string" variable="$newName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="29" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Language">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Language</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
        <argument line="39">
          <name>$newName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="48" package="Default">
        <name>enableLanguage</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[enables a language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="throws" description="If user does not have access to content translations" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="41" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Language" variable="$language">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Language</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="57" package="Default">
        <name>disableLanguage</name>
        <type>function</type>
        <docblock line="50">
          <description><![CDATA[disables a language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="throws" description="If user does not have access to content translations" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="50" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Language" variable="$language">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Language</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="68" package="Default">
        <name>loadLanguage</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Loads a Language from its language code ($languageCode)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="throws" description="if language could not be found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="59" name="param" description="" type="string" variable="$languageCode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="59" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Language">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Language</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$languageCode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="75" package="Default">
        <name>loadLanguages</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Loads all Languages]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="return" description="an aray of {@link \eZ\Publish\API\Repository\Values\Content\Language}" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="86" package="Default">
        <name>loadLanguageById</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Loads a Language by its id ($languageId)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="throws" description="if language could not be found" type="\eZ\Publish\API\Repository\Exceptions\NotFoundException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\NotFoundException</type>
          </tag>
          <tag line="77" name="param" description="" type="int" variable="$languageId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="77" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\Language">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Language</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$languageId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="98" package="Default">
        <name>deleteLanguage</name>
        <type>function</type>
        <docblock line="88">
          <description><![CDATA[Deletes  a language from content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="throws" description="if language can not be deleted because it is still assigned to some content / type / (...)." type="\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\IllegalArgumentException</type>
          </tag>
          <tag line="88" name="throws" description="If user does not have access to content translations" type="\eZ\Publish\API\Repository\Exceptions\UnauthorizedException">
            <type by_reference="false">\eZ\Publish\API\Repository\Exceptions\UnauthorizedException</type>
          </tag>
          <tag line="88" name="param" description="" type="\eZ\Publish\API\Repository\Values\Content\Language" variable="$language">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\Language</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\API\Repository" line="105" package="Default">
        <name>getDefaultLanguageCode</name>
        <type>function</type>
        <docblock line="100">
          <description><![CDATA[returns a configured default language code]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="return" description="" type="\eZ\Publish\API\Repository\Values\Content\LanguageCode">
            <type by_reference="false">\eZ\Publish\API\Repository\Values\Content\LanguageCode</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/API/Repository/Examples/translation_5x.php" hash="32333eda0d1f3e0cbeaeb66894f911ab">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Examples/translation_5x.php</error>
    </parse_markers>
  </file>
  <file path="eZ/Publish/API/Repository/Examples/content_change_location.php" hash="2eea51172ba4457ad38161b96ff94020" package="Examples">
    <docblock line="2">
      <description><![CDATA[Example: moving an existing content to a new location]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="Examples"/>
    </docblock>
  </file>
  <file path="eZ/Publish/API/Repository/Examples/user.php" hash="3dbfdd865f4229bc864b5a752e996d5d">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Examples/user.php</error>
    </parse_markers>
  </file>
  <file path="eZ/Publish/API/Repository/Examples/content.php" hash="ceb375ec4a3d6ad5feac858e06cfb269">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Examples/content.php</error>
    </parse_markers>
    <namespace-alias name="VersionInfo">eZ\Publish\API\Repository\Values\Content\VersionInfo</namespace-alias>
    <namespace-alias name="Repository">eZ\Publish\API\Repository\Repository</namespace-alias>
  </file>
  <file path="eZ/Publish/API/Repository/Examples/location.php" hash="648659e725ecf2cf1c0b801ce570e9bd">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Examples/location.php</error>
    </parse_markers>
    <namespace-alias name="Location">eZ\Publish\API\Repository\Values\Content\Location</namespace-alias>
  </file>
  <file path="eZ/Publish/API/Repository/Examples/contenttype.php" hash="881bb2a5c738d71e8d81ee2f687141ff">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Examples/contenttype.php</error>
    </parse_markers>
  </file>
  <file path="eZ/Publish/API/Repository/Examples/content_create_multilang.php" hash="52eff9f68eb3589d00be112fce3f7265">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Examples/content_create_multilang.php</error>
    </parse_markers>
    <namespace-alias name="Repository">eZ\Publish\API\Repository\Repository</namespace-alias>
  </file>
  <file path="eZ/Publish/API/Repository/Examples/content_exceptions.php" hash="4ad2bb3b4bdc638a3aaa3022d935b9bc">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/API/Repository/Examples/content_exceptions.php</error>
    </parse_markers>
    <namespace-alias name="Repository">eZ\Publish\API\Repository\Repository</namespace-alias>
  </file>
  <file path="eZ/Publish/SPI/FieldType/FieldStorage.php" hash="d27b9d95b8b7f11bc626d05cc0cc3784" package="FieldTypeProviderInterface">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="FieldTypeProviderInterface"/>
    </docblock>
    <parse_markers>
      <error line="28" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in storeFieldData()</error>
      <error line="71" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in getFieldData()</error>
      <error line="83" code="50012">No short description for method deleteFieldData()</error>
      <error line="97" code="50012">No short description for method copyFieldData()</error>
      <error line="97" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in copyFieldData()</error>
      <error line="103" code="50012">No short description for method getIndexData()</error>
      <error line="103" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in getIndexData()</error>
      <critical line="2" code="50008">No short description for file eZ/Publish/SPI/FieldType/FieldStorage.php</critical>
    </parse_markers>
    <namespace-alias name="Field">ezp\Persistence\Content\Field</namespace-alias>
    <interface namespace="eZ\Publish\SPI\FieldType" line="26" package="FieldTypeProviderInterface">
      <name>FieldStorage</name>
      <full_name>\eZ\Publish\SPI\FieldType\FieldStorage</full_name>
      <extends/>
      <docblock line="8">
        <description><![CDATA[Interface for setting field type data.]]></description>
        <long-description><![CDATA[<p>Methods in this interface are called by storage engine.</p>

<p>$context array passed to most methods provides some context for the field handler about the
currently used storage engine.
The array should at least define 2 keys :
  - identifier (connection identifier)
  - connection (the connection handler)
For example, using Legacy storage engine, $context will be:
  - identifier = 'LegacyStorage'
  - connection = {@link \ezp\Persistence\Storage\Legacy\EzcDbHandler} object handler (for DB connection),
                 to be used accordingly to
                 {@link http://incubator.apache.org/zetacomponents/documentation/trunk/Database/tutorial.html ezcDatabase} usage</p>]]></long-description>
        <tag line="8" name="package" description="FieldTypeProviderInterface"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="69" package="Default">
        <name>storeFieldData</name>
        <type>function</type>
        <docblock line="28">
          <description><![CDATA[Allows custom field types to store data in an external source (e.g. another DB table).]]></description>
          <long-description><![CDATA[<p>Stores value for $field in an external data source.
The whole {@link ezp\Persistence\Content\Field} object is passed and its value
is accessible through the {@link ezp\Persistence\Content\FieldValue} 'value' property.
This value holds the data filled by the user as a {@link ezp\Content\FieldType\Value} based object,
according to the field type (e.g. for TextLine, it will be a {@link ezp\Content\FieldType\TextLine\Value} object).</p>

<p>$field->id = unique ID from the attribute tables (needs to be generated by
database back end on create, before the external data source may be
called from storing).</p>

<p>The context array provides some context for the field handler about the
currently used storage engine.
The array should at least define 2 keys :
  - identifier (connection identifier)
  - connection (the connection handler)
For example, using Legacy storage engine, $context will be:
  - identifier = 'LegacyStorage'
  - connection = {@link \ezp\Persistence\Storage\Legacy\EzcDbHandler} object handler (for DB connection),
                 to be used accordingly to
The context array provides some context for the field handler about the
currently used storage engine.
The array should at least define 2 keys :
  - identifier (connection identifier)
  - connection (the connection handler)
For example, using Legacy storage engine, $context will be:
  - identifier = 'LegacyStorage'
  - connection = {@link \ezp\Persistence\Storage\Legacy\EzcDbHandler} object handler (for DB connection),
                 to be used accordingly to
                 {@link http://incubator.apache.org/zetacomponents/documentation/trunk/Database/tutorial.html ezcDatabase} usage</p>

<p>This method might return true if $field needs to be updated after storage done here (to store a PK for instance).
In any other case, this method must not return anything (null).</p>]]></long-description>
          <tag line="28" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="28" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="28" name="return" description="" type="null|true">
            <type by_reference="false">null</type>
            <type by_reference="false">true</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="69">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="81" package="Default">
        <name>getFieldData</name>
        <type>function</type>
        <docblock line="71">
          <description><![CDATA[Populates $field value property based on the external data.]]></description>
          <long-description><![CDATA[<p>$field->value is a {@link ezp\Persistence\Content\FieldValue} object.
This value holds the data as a {@link ezp\Content\FieldType\Value} based object,
according to the field type (e.g. for TextLine, it will be a {@link ezp\Content\FieldType\TextLine\Value} object).</p>]]></long-description>
          <tag line="71" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="71" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="71" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="81">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="88" package="Default">
        <name>deleteFieldData</name>
        <type>function</type>
        <docblock line="83">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="param" description="Array of field Ids" type="array" variable="$fieldId">
            <type by_reference="false">array</type>
          </tag>
          <tag line="83" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="83" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$fieldId</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="88">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="95" package="Default">
        <name>hasFieldData</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Checks if field type has external data to deal with]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="101" package="Default">
        <name>copyFieldData</name>
        <type>function</type>
        <docblock line="97">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="97" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="101">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="107" package="Default">
        <name>getIndexData</name>
        <type>function</type>
        <docblock line="103">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="103" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="107">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/SPI/FieldType/FieldType.php" hash="f2641863d9f2ee8ea50923138c88e536" package="FieldTypeProviderInterface">
    <docblock line="2">
      <description><![CDATA[]]></description>
      <long-description><![CDATA[]]></long-description>
      <tag line="2" name="package" description="FieldTypeProviderInterface"/>
      <tag line="2" name="author" description="christianbacher"/>
    </docblock>
    <parse_markers>
      <error line="17" code="50012">No short description for method getFieldTypeIdentifier()</error>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in handleEvent()</error>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in handleEvent()</error>
      <error line="54" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in validate()</error>
      <error line="54" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in validate()</error>
      <critical line="2" code="50008">No short description for file eZ/Publish/SPI/FieldType/FieldType.php</critical>
    </parse_markers>
    <namespace-alias name="Repository">eZ\Publish\API\Repository\Repository</namespace-alias>
    <namespace-alias name="Value">eZ\Publish\SPI\FieldType\Value</namespace-alias>
    <interface namespace="eZ\Publish\SPI\FieldType" line="15" package="FieldTypeProviderInterface">
      <name>FieldType</name>
      <full_name>\eZ\Publish\SPI\FieldType\FieldType</full_name>
      <extends/>
      <docblock line="10">
        <description><![CDATA[The field type interface which all field types have to implement.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="10" name="package" description="FieldTypeProviderInterface"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="21" package="Default">
        <name>getFieldTypeIdentifier</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="return" description="field type identifier for this field type" type="\eZ\Publish\SPI\FieldType\the">
            <type by_reference="false">\eZ\Publish\SPI\FieldType\the</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="31" package="Default">
        <name>handleEvent</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[this method is called on occuring events. Implementations can perform corresponding actions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="- prePublish, postPublish, preCreate, postCreate" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="" type="\eZ\Publish\API\Repository\Repository" variable="$repository">
            <type by_reference="false">\eZ\Publish\API\Repository\Repository</type>
          </tag>
          <tag line="23" name="param" description="- the field definition of the field" type="\eZ\Publish\SPI\FieldType\$fieldDef" variable="$fieldDef">
            <type by_reference="false">\eZ\Publish\SPI\FieldType\$fieldDef</type>
          </tag>
          <tag line="23" name="param" description="- the field for which an action is performed" type="\eZ\Publish\SPI\FieldType\$field" variable="$field">
            <type by_reference="false">\eZ\Publish\SPI\FieldType\$field</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$event</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>Repository</type>
        </argument>
        <argument line="31">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="31">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="38" package="Default">
        <name>allowedSettings</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[returns a map of allowed setting including a default value used when not given in the field definition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="52" package="Default">
        <name>allowedValidators</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[The method returns the validators which are supported for this field type.]]></description>
          <long-description><![CDATA[<p>Full Qualified Class Name should be registered here.
Example:</p>

<pre><code>array(
    "ezp\\Content\\FieldType\\BinaryFile\\FileSizeValidator"
);
</code></pre>]]></long-description>
          <tag line="40" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="60" package="Default">
        <name>validate</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[validates a field based on the validators in the field definition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="" type="" variable="$fieldDef"/>
          <tag line="54" name="param" description="" type="" variable="$field"/>
        </docblock>
        <argument line="60">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="60">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="70" package="Default">
        <name>acceptValue</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Checks the type and structure of the value.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="param" description="" type="" variable="$value"/>
          <tag line="62" name="return" description="if the field accepts the given value" type="\eZ\Publish\SPI\FieldType\Value">
            <type by_reference="false">\eZ\Publish\SPI\FieldType\Value</type>
          </tag>
          <tag line="62" name="throws" description="if the parameter is not of the supported value sub type" type="\eZ\Publish\SPI\FieldType\InvalidArgumentType">
            <type by_reference="false">\eZ\Publish\SPI\FieldType\InvalidArgumentType</type>
          </tag>
          <tag line="62" name="throws" description="if the value does not match the expected structure" type="\eZ\Publish\SPI\FieldType\InvalidArgumentValue">
            <type by_reference="false">\eZ\Publish\SPI\FieldType\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="79" package="Default">
        <name>fromHash</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Converts an hash to the Value defined by the field type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="param" description="" type="array" variable="$hash">
            <type by_reference="false">array</type>
          </tag>
          <tag line="72" name="return" description="" type="\eZ\Publish\SPI\FieldType\Value">
            <type by_reference="false">\eZ\Publish\SPI\FieldType\Value</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$hash</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="88" package="Default">
        <name>toHash</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[Converts a Value to a hash]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="param" description="" type="\eZ\Publish\SPI\FieldType\Value" variable="$value">
            <type by_reference="false">\eZ\Publish\SPI\FieldType\Value</type>
          </tag>
          <tag line="81" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>Value</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="97" package="Default">
        <name>toPersistenceValue</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[converts a Value to a persistence value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="" type="\eZ\Publish\SPI\FieldType\Value" variable="$value">
            <type by_reference="false">\eZ\Publish\SPI\FieldType\Value</type>
          </tag>
          <tag line="90" name="return" description="" type="\eZ\Publish\SPI\FieldType\FieldValue">
            <type by_reference="false">\eZ\Publish\SPI\FieldType\FieldValue</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>Value</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="eZ\Publish\SPI\FieldType" line="106" package="Default">
        <name>fromPersistenceValue</name>
        <type>function</type>
        <docblock line="99">
          <description><![CDATA[converts a persistence field value to a Value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="99" name="param" description="" type="\eZ\Publish\SPI\FieldType\FieldValue" variable="$fieldValue">
            <type by_reference="false">\eZ\Publish\SPI\FieldType\FieldValue</type>
          </tag>
          <tag line="99" name="return" description="" type="\eZ\Publish\SPI\FieldType\Value">
            <type by_reference="false">\eZ\Publish\SPI\FieldType\Value</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="eZ/Publish/SPI/FieldType/FieldValue.php" hash="cb86a70c3798dbb0d76cf729faa49b1f">
    <parse_markers>
      <critical line="3" code="50005">No short description for class FieldValue</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/SPI/FieldType/FieldValue.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="eZ\Publish\SPI\FieldType" line="5" package="Default">
      <name>FieldValue</name>
      <full_name>\eZ\Publish\SPI\FieldType\FieldValue</full_name>
      <extends>\eZ\Publish\SPI\FieldType\ValueObject</extends>
      <docblock line="3">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="14" package="Default">
        <name>$data</name>
        <default><![CDATA[]]></default>
        <docblock line="7">
          <description><![CDATA[data which is stored in the field of the content version]]></description>
          <long-description><![CDATA[<p>Its up to the storage engine how to encode the hash to serialized form (JSon, Xml etc.)</p>]]></long-description>
          <tag line="7" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$externalData</name>
        <default><![CDATA[]]></default>
        <docblock line="16">
          <description><![CDATA[data which is stored external by the field type.]]></description>
          <long-description><![CDATA[<p>Here its up to the field type
to define the format of this value as the field type is responsible for storing
or retieving data externally if the method storeFieldData or getFieldData is called</p>]]></long-description>
          <tag line="16" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="33" package="Default">
        <name>$sortKey</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[Mixed sort key.]]></description>
          <long-description><![CDATA[<p>This value is used by the storage engine to sort objects if requested by a sort clause</p>]]></long-description>
          <tag line="26" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="eZ/Publish/SPI/FieldType/Value.php" hash="eb7da0a83210247f5f6d3ce51be647b4">
    <parse_markers>
      <error line="4" code="50000">No DocBlock was found for Value</error>
      <error line="1" code="50007">No page-level DocBlock was found in file eZ/Publish/SPI/FieldType/Value.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="eZ\Publish\SPI\FieldType" line="4">
      <name>Value</name>
      <full_name>\eZ\Publish\SPI\FieldType\Value</full_name>
      <extends/>
    </class>
  </file>
  <file path="bootstrap.php" hash="7aae33beea8d314ef0df9ea03b3c2557">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file bootstrap.php</error>
    </parse_markers>
    <namespace-alias name="ClassLoader">eZ\Publish\Core\Base\ClassLoader</namespace-alias>
    <namespace-alias name="ConfigurationManager">eZ\Publish\Core\Base\ConfigurationManager</namespace-alias>
    <namespace-alias name="ServiceContainer">eZ\Publish\Core\Base\ServiceContainer</namespace-alias>
    <include line="18" type="Include">
      <name>/config.php</name>
    </include>
    <include line="23" type="Require">
      <name>/eZ/Publish/Core/Base/ClassLoader.php</name>
    </include>
    <include line="28" type="Require">
      <name>base</name>
    </include>
  </file>
  <file path="ezp/Base/ServiceContainer.php" hash="a77ed26fcf05b9d0539ff088b173eba1">
    <parse_markers>
      <error line="68" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $settings in __construct()</error>
      <error line="68" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dependencies in __construct()</error>
      <error line="101" code="50012">No short description for method getBinaryRepository()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/ServiceContainer.php</error>
    </parse_markers>
    <namespace-alias name="BadConfiguration">ezp\Base\Exception\BadConfiguration</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="MissingClass">ezp\Base\Exception\MissingClass</namespace-alias>
    <namespace-alias name="ReflectionClass">ReflectionClass</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base" line="52" package="Default">
      <name>ServiceContainer</name>
      <full_name>\ezp\Base\ServiceContainer</full_name>
      <extends/>
      <docblock line="16">
        <description><![CDATA[Service container class]]></description>
        <long-description><![CDATA[<p>A dependency injection container (DIC) that uses configuration for defining dependencies.</p>

<p>Usage:</p>

<pre><code>$sc = new ezp\Base\ServiceContainer( Configuration::getInstance('service')-&gt;getAll() );
$sc-&gt;getRepository-&gt;getContentService()-&gt;load( 42 );
</code></pre>

<p>Or overriding $dependencies (in unit tests):
( $dependencies keys should have same value as service.ini "arguments" values explained bellow )</p>

<pre><code>$sc = new ezp\Base\ServiceContainer(
    Configuration::getInstance('service')-&gt;getAll(),
    array(
        '@persistence_handler' =&gt; new \ezp\Persistence\Storage\InMemory\Handler()
    )
);
$sc-&gt;getRepository-&gt;getContentService()-&gt;load( 42 );
</code></pre>

<p>Settings are defined in service.ini like the following example:</p>

<pre><code>[repository]
class=ezp\Base\Repository
arguments[persistence_handler]=@inmemory_persistence_handler

[inmemory_persistence_handler]
class=ezp\Persistence\Storage\InMemory\Handler

# @see \ezp\Base\settings\service.ini For more options and examples.
</code></pre>

<p>"arguments" values in service.ini can start with either @ in case of other services being dependency, $ if a
predefined global variable is to be used ( currently: $_SERVER, $_REQUEST, $_COOKIE, $_FILES and $serviceContainer )
or plain scalar if that is to be given directly as argument value.</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="59" package="Default">
        <name>$dependencies</name>
        <default><![CDATA[]]></default>
        <docblock line="54">
          <description><![CDATA[Holds service objects and variables]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="var" description="" type="\object[]">
            <type by_reference="false">\object[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="66" package="Default">
        <name>$settings</name>
        <default><![CDATA[]]></default>
        <docblock line="61">
          <description><![CDATA[Array of optional settings overrides]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="var" description="" type="\array[]">
            <type by_reference="false">\array[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="74" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Construct object with optional configuration overrides]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="param" description="" type="\array[]" variable="$settings">
            <type by_reference="false">\array[]</type>
          </tag>
          <tag line="68" name="param" description="Optional initial dependencies" type="\mixed[]|\object[]" variable="$dependencies">
            <type by_reference="false">\mixed[]</type>
            <type by_reference="false">\object[]</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$settings</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="74">
          <name>$dependencies</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="94" package="Default">
        <name>getRepository</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[Service function to get Repository object]]></description>
          <long-description><![CDATA[<p>Alias with type hints for $repo->get( 'repository' );</p>]]></long-description>
          <tag line="86" name="uses" description="\ezp\Base\get()" refers="\ezp\Base\get()"/>
          <tag line="86" name="return" description="" type="\ezp\Base\Repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="105" package="Default">
        <name>getBinaryRepository</name>
        <type>function</type>
        <docblock line="101">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="101" name="deprecated" description="Use IoService on Repository instead"/>
          <tag line="101" name="return" description="" type="\ezp\Base\BinaryRepository">
            <type by_reference="false">\ezp\Base\BinaryRepository</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="119" package="Default">
        <name>get</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Get service by name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="throws" description="" type="\ezp\Base\InvalidArgumentException">
            <type by_reference="false">\ezp\Base\InvalidArgumentException</type>
          </tag>
          <tag line="112" name="param" description="" type="string" variable="$serviceName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$serviceName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base" line="191" package="Default">
        <name>lookupArguments</name>
        <type>function</type>
        <docblock line="184">
          <description><![CDATA[Lookup arguments for variable, service or arrays for recursive lookup]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="184" name="param" description="" type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="184" name="param" description="&amp;$keys Optional, keys in array will be appended in the order they are found (but not recursively)" type="array" variable="$keys">
            <type by_reference="false">array</type>
          </tag>
          <tag line="184" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="191">
          <name>$arguments</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="191">
          <name>$keys</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Configuration.php" hash="a18e617159d30f54bbd937daae26bb31">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Configuration.php</error>
    </parse_markers>
    <namespace-alias name="BadConfiguration">ezp\Base\Exception\BadConfiguration</namespace-alias>
    <namespace-alias name="ezcPhpGenerator">ezcPhpGenerator</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base" line="67" package="Default">
      <name>Configuration</name>
      <full_name>\ezp\Base\Configuration</full_name>
      <extends>\ezp\Base\Override</extends>
      <docblock line="16">
        <description><![CDATA[Configuration class with focus on performance]]></description>
        <long-description><![CDATA[<p>A configuration class with override setting support that uses parsers to deal with
files so you can support ini/yaml/xml/json given it is defined when setting up the class.</p>

<p>Class is quite static and uses multi-singletons for instances pr module.</p>

<p>By default values are cached to a raw php files and files are not read again unless
development mode is on and some file has been removed or modified since cache was created.</p>

<p>Setup:</p>

<pre><code>// Setup global configuration that needs to be defined before loading setting files
Configuration::setGlobalConfigurationData( array(
    'base' =&gt; array(
        'autoload' =&gt; array(
            // Optional bool value for global development mode setting
            // Default: false, checks modified time and if files exist on every request if true
            'development-mode' =&gt; true,
        ),
        'configuration' =&gt; array(
            // Optional bool value to specify if cache files should be used
            // Default: true, parses files on every request if false
            'use-cache' =&gt; false,
            // Required list of parser classes where key is file suffix
            'parsers' =&gt; array(
                '.ini' =&gt; 'ezp\\Base\\Configuration\\Parser\\Ini',
                '.ini.append.php' =&gt; 'ezp\\Base\\Configuration\\Parser\\Ini',
            ),
        ),
    )
) );
// Specify additional locations that might contain settings (hence you don't have to check if folder exist)
Configuration::setGlobalDirs( array( 'ezp/Base/settings/' ), 'modules' );
</code></pre>

<p>Usage:</p>

<pre><code>// Default value on $module is 'base', so this will parse base.ini[.append.php] files given setup above
$bool = Configuration::getInstance()-&gt;get( 'autoload', 'development-mode' );
</code></pre>

<p>Usage2:</p>

<pre><code>$array = Configuration::getInstance( 'content' )-&gt;get( 'fields', 'Type' );
</code></pre>]]></long-description>
        <tag line="16" name="uses" description="\ezcPhpGenerator" refers="\ezcPhpGenerator"/>
      </docblock>
      <constant namespace="ezp\Base" line="74" package="Default">
        <name>CONFIG_CACHE_DIR</name>
        <value><![CDATA['var/cache/ini/']]></value>
        <docblock line="69">
          <description><![CDATA[Constant path to directory for configuration cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ezp\Base" line="81" package="Default">
        <name>TEMP_INI_UNSET_VAR</name>
        <value><![CDATA['__UNSET__']]></value>
        <docblock line="76">
          <description><![CDATA[Constant string used as a temporary unset variable during ini parsing]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ezp\Base" line="88" package="Default">
        <name>CONFIG_CACHE_REV</name>
        <value><![CDATA[3]]></value>
        <docblock line="83">
          <description><![CDATA[Constant integer to check against configuration cache format revision]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="public" line="95" package="Default">
        <name>$filePermission</name>
        <default><![CDATA[0644]]></default>
        <docblock line="90">
          <description><![CDATA[File permissions for ini cache files]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="102" package="Default">
        <name>$dirPermission</name>
        <default><![CDATA[0755]]></default>
        <docblock line="97">
          <description><![CDATA[Directory permissions for ini cache files]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="109" package="Default">
        <name>$globalPaths</name>
        <default><![CDATA[array(
        'base' => array( 'settings/' ),
        'modules' => array(),
        'siteaccess' => array(),
        'global' => array( 'settings/override/' ),
    )]]></default>
        <docblock line="104">
          <description><![CDATA[The global configuration path array, scoped in the order they should be parsed]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="121" package="Default">
        <name>$globalConfigurationData</name>
        <default><![CDATA[array()]]></default>
        <docblock line="116">
          <description><![CDATA[The global configuration data (overrides all other configuration)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="116" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="128" package="Default">
        <name>$instance</name>
        <default><![CDATA[array()]]></default>
        <docblock line="123">
          <description><![CDATA[List of instances pr settings type (array key).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="123" name="var" description="" type="\ezp\Base\Configuration[]">
            <type by_reference="false">\ezp\Base\Configuration[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="135" package="Default">
        <name>$moduleName</name>
        <default><![CDATA[null]]></default>
        <docblock line="130">
          <description><![CDATA[The instance module name, set by {@link self::__construct()}]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="130" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="142" package="Default">
        <name>$raw</name>
        <default><![CDATA[null]]></default>
        <docblock line="137">
          <description><![CDATA[The in memory representation of the current raw configuration data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="var" description="" type="null|array">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="152" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="144">
          <description><![CDATA[Constructor, please use {@link self::getInstance()} unless you have special needs as this does not reuse existing instance
and does not automatically load configuration data from source / cache.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="144" name="param" description="The name of the module (and in case of ini files, same as ini filename w/o suffix)" type="string" variable="$moduleName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="144" name="param" description="Tells construct to assign global paths by reference or not, if true then changes to global paths will affect paths on this object directly (default: false, in most cases you should use getInstance if you want this to be enabled)" type="bool" variable="$referenceGlobalPaths">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="152">
          <name>$moduleName</name>
          <default><![CDATA['base']]></default>
          <type/>
        </argument>
        <argument line="152">
          <name>$referenceGlobalPaths</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Base" line="165" package="Default">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="158">
          <description><![CDATA[Get configuration instance and load it automatically]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="158" name="uses" description="\ezp\Base\load()" refers="\ezp\Base\load()"/>
          <tag line="158" name="param" description="The name of the module (w/o .ini suffix as we would want to support other formats in the future)" type="string" variable="$moduleName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="158" name="return" description="" type="\ezp\Base\Configuration">
            <type by_reference="false">\ezp\Base\Configuration</type>
          </tag>
        </docblock>
        <argument line="165">
          <name>$moduleName</name>
          <default><![CDATA['base']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ezp\Base" line="180" package="Default">
        <name>developmentMode</name>
        <type>function</type>
        <docblock line="175">
          <description><![CDATA[Tells if (global) development is turned on, using [autoload]\development-mode if set]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="175" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Base" line="192" package="Default">
        <name>reset</name>
        <type>function</type>
        <docblock line="187">
          <description><![CDATA[Reset instance list, in most cases it should be enough to call reloadAll]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="187" name="param" description="Reset a specific instance if string" type="string|null" variable="$moduleName">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="192">
          <name>$moduleName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="206" package="Default">
        <name>reload</name>
        <type>function</type>
        <docblock line="203">
          <description><![CDATA[Reload cache data conditionally if path hash has changed on current instance]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Base" line="215" package="Default">
        <name>reloadAll</name>
        <type>function</type>
        <docblock line="212">
          <description><![CDATA[Reload cache data conditionally if path hash has changed on all global instances]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Base" line="228" package="Default">
        <name>getGlobalConfigurationData</name>
        <type>function</type>
        <docblock line="223">
          <description><![CDATA[Get global configuration data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="223" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Base" line="238" package="Default">
        <name>setGlobalConfigurationData</name>
        <type>function</type>
        <docblock line="233">
          <description><![CDATA[Set global configuration data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="233" name="param" description="" type="array" variable="$configurationData">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="238">
          <name>$configurationData</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="249" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="243">
          <description><![CDATA[Load the configuration from cache or from source (if $useCache is false or there is no cache)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="243" name="param" description="Lets you specify if there is a cache file, will check if null and $useCache is true" type="bool|null" variable="$hasCache">
            <type by_reference="false">bool</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="243" name="param" description="Will skip using cached config files (slow), when null depends on [ini]\use-cache setting" type="bool" variable="$useCache">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="249">
          <name>$hasCache</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="249">
          <name>$useCache</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ezp\Base" line="309" package="Default">
        <name>createCacheName</name>
        <type>function</type>
        <docblock line="302">
          <description><![CDATA[Create cache name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="302" name="param" description="" type="string" variable="$moduleName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="302" name="param" description="" type="string" variable="$configurationPathsHash">
            <type by_reference="false">string</type>
          </tag>
          <tag line="302" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="309">
          <name>$moduleName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="309">
          <name>$configurationPathsHash</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ezp\Base" line="320" package="Default">
        <name>hasCache</name>
        <type>function</type>
        <docblock line="314">
          <description><![CDATA[Check if cache file exists.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="314" name="param" description="As generated by {@link self::createCacheName()}" type="string" variable="$cacheName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="314" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="320">
          <name>$cacheName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ezp\Base" line="331" package="Default">
        <name>readCache</name>
        <type>function</type>
        <docblock line="325">
          <description><![CDATA[Load cache file, use {@link self::hasCache()} to make sure it exists first!]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="325" name="param" description="As generated by {@link self::createCacheName()}" type="string" variable="$cacheName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="325" name="return" description="" type="array|null">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="331">
          <name>$cacheName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ezp\Base" line="375" package="Default">
        <name>generateRawData</name>
        <type>function</type>
        <docblock line="367">
          <description><![CDATA[Generate raw data for use in cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="367" name="param" description="" type="string" variable="$configurationPathsHash">
            <type by_reference="false">string</type>
          </tag>
          <tag line="367" name="param" description="" type="array" variable="$configurationData">
            <type by_reference="false">array</type>
          </tag>
          <tag line="367" name="param" description="Optional, stored in cache to be able to check modified time in future devMode" type="array" variable="$sourceFiles">
            <type by_reference="false">array</type>
          </tag>
          <tag line="367" name="param" description="Optional, stored in cache to be able to debug it more easily" type="array" variable="$sourcePaths">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="375">
          <name>$configurationPathsHash</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="375">
          <name>$configurationData</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="375">
          <name>$sourceFiles</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
        <argument line="375">
          <name>$sourcePaths</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ezp\Base" line="397" package="Default">
        <name>parse</name>
        <type>function</type>
        <docblock line="387">
          <description><![CDATA[Parse configuration files]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="387" name="param" description="" type="string" variable="$moduleName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="387" name="param" description="" type="array" variable="$configurationPaths">
            <type by_reference="false">array</type>
          </tag>
          <tag line="387" name="param" description="ByRef value or source files that has been/is going to be parsed files you pass in will not be checked if they exists." type="array" variable="$sourceFiles">
            <type by_reference="false">array</type>
          </tag>
          <tag line="387" name="return" description="Data structure for parsed ini files" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="387" name="throws" description="If no parser have been defined" type="\ezp\Base\Exception\BadConfiguration">
            <type by_reference="false">\ezp\Base\Exception\BadConfiguration</type>
          </tag>
        </docblock>
        <argument line="397">
          <name>$moduleName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="397">
          <name>$configurationPaths</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="397">
          <name>$sourceFiles</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ezp\Base" line="472" package="Default">
        <name>storeCache</name>
        <type>function</type>
        <docblock line="465">
          <description><![CDATA[Store cache file, overwrites any existing file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="465" name="param" description="" type="string" variable="$moduleName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="465" name="param" description="As generated by {@link self::createCacheName()}" type="string" variable="$cacheName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="465" name="param" description="As generated by {@link self::generateRawData()}" type="array" variable="$rawData">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="472">
          <name>$moduleName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="472">
          <name>$cacheName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="472">
          <name>$rawData</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="514" package="Default">
        <name>get</name>
        <type>function</type>
        <docblock line="505">
          <description><![CDATA[Gets a configuration value, or $fallBackValue if undefined
Triggers warning if key is not set and $fallBackValue is null]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="505" name="param" description="The configuration section to get value for" type="string" variable="$section">
            <type by_reference="false">string</type>
          </tag>
          <tag line="505" name="param" description="The configuration key to get value for" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="505" name="param" description="value to return if setting is undefined." type="mixed" variable="$fallBackValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="505" name="return" description="(null if key is undefined and no $fallBackValue is provided)" type="mixed|null">
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="514">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="514">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="514">
          <name>$fallBackValue</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="535" package="Default">
        <name>getSection</name>
        <type>function</type>
        <docblock line="527">
          <description><![CDATA[Gets a configuration values for a section or $fallBackValue if undefined
Triggers warning if section is not set and $fallBackValue is null]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="527" name="param" description="The configuration section to get value for" type="string" variable="$section">
            <type by_reference="false">string</type>
          </tag>
          <tag line="527" name="param" description="value to return if section is undefined." type="mixed" variable="$fallBackValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="527" name="return" description="(null if key is undefined and no $fallBackValue is provided)" type="array|null">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="535">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="535">
          <name>$fallBackValue</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="553" package="Default">
        <name>getAll</name>
        <type>function</type>
        <docblock line="548">
          <description><![CDATA[Gets all section and configuration value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="548" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="566" package="Default">
        <name>set</name>
        <type>function</type>
        <docblock line="558">
          <description><![CDATA[Gets a configuration value, or null if not set.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="558" name="param" description="The configuration section to get value for" type="string" variable="$section">
            <type by_reference="false">string</type>
          </tag>
          <tag line="558" name="param" description="The configuration key to get value for" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="558" name="param" description="value to return if setting is not defined." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="558" name="return" description="Return true if section existed and was overwritten" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="566">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="566">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="566">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="585" package="Default">
        <name>has</name>
        <type>function</type>
        <docblock line="578">
          <description><![CDATA[Checks if a configuration section and optionally key is set.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="578" name="param" description="" type="string" variable="$section">
            <type by_reference="false">string</type>
          </tag>
          <tag line="578" name="param" description="Optional, only checks if section exists if null" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="578" name="return" description="Return true if setting exist" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="585">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="585">
          <name>$key</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="601" package="Default">
        <name>hasValue</name>
        <type>function</type>
        <docblock line="593">
          <description><![CDATA[Checks if a configuration section & key is set and has a value.]]></description>
          <long-description><![CDATA[<p>(ie. a check using !empty())</p>]]></long-description>
          <tag line="593" name="param" description="" type="string" variable="$section">
            <type by_reference="false">string</type>
          </tag>
          <tag line="593" name="param" description="" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="593" name="return" description="Return true if setting exist and has value" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="601">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="601">
          <name>$key</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Observer.php" hash="26166bb0fd410927fac6f475fe1c6e2a">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Observer.php</error>
    </parse_markers>
    <interface namespace="ezp\Base" line="17" package="Default">
      <name>Observer// extends \SplObserver</name>
      <full_name>\Observer// extends \SplObserver</full_name>
      <extends/>
      <docblock line="13">
        <description><![CDATA[Interface for Observers]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="27" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Called when subject has been updated]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="param" description="" type="\ezp\Base\Observable" variable="$subject">
            <type by_reference="false">\ezp\Base\Observable</type>
          </tag>
          <tag line="19" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="19" name="param" description="" type="array|null" variable="$arguments">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="19" name="return" description="" type="\ezp\Base\Observer">
            <type by_reference="false">\ezp\Base\Observer</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$subject</name>
          <default><![CDATA[]]></default>
          <type>Observable</type>
        </argument>
        <argument line="27">
          <name>$event</name>
          <default><![CDATA['update']]></default>
          <type/>
        </argument>
        <argument line="27">
          <name>$arguments</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Base/Collection.php" hash="2dc04b054768a25a72b071c14eda2535">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Collection.php</error>
    </parse_markers>
    <namespace-alias name="Countable">Countable</namespace-alias>
    <namespace-alias name="ArrayAccess">ArrayAccess</namespace-alias>
    <namespace-alias name="Serializable">Serializable</namespace-alias>
    <interface namespace="ezp\Base" line="21" package="Default">
      <name>Collection</name>
      <full_name>\ezp\Base\Collection</full_name>
      <extends>\Countable</extends>
      <docblock line="15">
        <description><![CDATA[Collection interface]]></description>
        <long-description><![CDATA[<p>Note: Does not extend IteratorAggregate / Iterator to let implementers extend ArrayObject or splFixedArray</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="31" package="Default">
        <name>indexOf</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Returns the first index at which a given element can be found in the array, or false if it is not present.]]></description>
          <long-description><![CDATA[<p>Uses strict comparison.</p>]]></long-description>
          <tag line="23" name="param" description="" type="mixed" variable="$item">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="23" name="return" description="False if nothing was found" type="int|string|false">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$item</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="38" package="Default">
        <name>getArrayCopy</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Return a copy of the internal array]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="46" package="Default">
        <name>exchangeArray</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Exchange internal array with a new one, original (old) array is returned]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="param" description="" type="array" variable="$input">
            <type by_reference="false">array</type>
          </tag>
          <tag line="40" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Base/Exception.php" hash="59df3d8e2454038a7a40c50690a4085b">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception.php</error>
    </parse_markers>
    <interface namespace="ezp\Base" line="20" package="Default">
      <name>Exception</name>
      <full_name>\ezp\Base\Exception</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Provides the Exception interface for eZ Publish]]></description>
        <long-description><![CDATA[<p>Makes it possible to catch eZ Publish exceptions.</p>]]></long-description>
        <tag line="12" name="use" description=": class MyException extends SomeSplException implements ezp\Base\Exception"/>
      </docblock>
    </interface>
  </file>
  <file path="ezp/Base/BinaryRepository.php" hash="a048c0c6174ccda7be025d69a9676c72">
    <parse_markers>
      <error line="192" code="50014">Name of argument $path does not match with the DocBlock's name $binaryFile in exists()</error>
      <notice line="192" code="50013">Parameter $binaryFile could not be found in exists()</notice>
      <error line="256" code="50015">Argument $identifier is missing from the Docblock of initBackend()</error>
      <error line="256" code="50015">Argument $backendsConfigurationOverride is missing from the Docblock of initBackend()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/BinaryRepository.php</error>
    </parse_markers>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="BadConfiguration">ezp\Base\Exception\BadConfiguration</namespace-alias>
    <namespace-alias name="BinaryFile">ezp\Io\BinaryFile</namespace-alias>
    <namespace-alias name="BinaryFileUpdateStruct">ezp\Io\BinaryFileUpdateStruct</namespace-alias>
    <namespace-alias name="BinaryFileCreateStruct">ezp\Io\BinaryFileCreateStruct</namespace-alias>
    <namespace-alias name="ContentType">ezp\Io\ContentType</namespace-alias>
    <namespace-alias name="DateTime">DateTime</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base" line="23" package="Default">
      <name>BinaryRepository</name>
      <full_name>\ezp\Base\BinaryRepository</full_name>
      <extends/>
      <docblock line="19">
        <description><![CDATA[Repository class]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="30" package="Default">
        <name>$backends</name>
        <default><![CDATA[array()]]></default>
        <docblock line="25">
          <description><![CDATA[BinaryStorage backends instances
Uninstanciated ones have false as a value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="\ezp\Io\Handler[]">
            <type by_reference="false">\ezp\Io\Handler[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="36" package="Default">
        <name>$defaultBackend</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[Default BinaryStorage backend identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="42" package="Default">
        <name>$defaultBackendOverride</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Default backend override value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="48" package="Default">
        <name>$backendsOverride</name>
        <default><![CDATA[]]></default>
        <docblock line="44">
          <description><![CDATA[Backends list override value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="54" package="Default">
        <name>$backendsConfigurationOverride</name>
        <default><![CDATA[]]></default>
        <docblock line="50">
          <description><![CDATA[Bbackends configuration override value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="62" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Constructs the binary repository, either with the default or with override parameters]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="param" description="Override identifier for the default backend" type="string" variable="$defaultBackendOverride">
            <type by_reference="false">string</type>
          </tag>
          <tag line="56" name="param" description="Override of the backends list" type="array" variable="$backendsOverride">
            <type by_reference="false">array</type>
          </tag>
          <tag line="56" name="param" description="" type="array" variable="$backendsConfigurationOverride">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$defaultBackendOverride</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="62">
          <name>$backendsOverride</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="62">
          <name>$backendsConfigurationOverride</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Base" line="113" package="Default">
        <name>setOverrideOptions</name>
        <type>function</type>
        <docblock line="107">
          <description><![CDATA[Sets global override options for the BinaryRepository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="107" name="param" description="Override identifier for the default backend" type="string" variable="$defaultBackendOverride">
            <type by_reference="false">string</type>
          </tag>
          <tag line="107" name="param" description="Override of the backends list" type="array" variable="$backendsOverride">
            <type by_reference="false">array</type>
          </tag>
          <tag line="107" name="param" description="Override of the backends configuration" type="array" variable="$backendsConfigurationOverride">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$defaultBackendOverride</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="113">
          <name>$backendsOverride</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="113">
          <name>$backendsConfigurationOverride</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="127" package="Default">
        <name>createFromUploadedFile</name>
        <type>function</type>
        <docblock line="120">
          <description><![CDATA[Creates a BinaryFile object from the uploaded file $uploadedFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="120" name="param" description="The _POST hash of an uploaded file" type="array" variable="$uploadedFile">
            <type by_reference="false">array</type>
          </tag>
          <tag line="120" name="param" description="The path the file must be stored as" type="string" variable="$repositoryPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="120" name="return" description="" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="120" name="throws" description="When given an invalid uploaded file" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$uploadedFile</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="127">
          <name>$repositoryPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="150" package="Default">
        <name>createFromLocalFile</name>
        <type>function</type>
        <docblock line="143">
          <description><![CDATA[Creates a BinaryFile object from $localFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="143" name="param" description="" type="string" variable="$localFile">
            <type by_reference="false">string</type>
          </tag>
          <tag line="143" name="param" description="The path the file must be stored as. If false, $localFile will be used." type="string" variable="$repositoryPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="143" name="return" description="" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="143" name="throws" description="When given a non existing / unreadable file" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="150">
          <name>$localFile</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="150">
          <name>$repositoryPath</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="175" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="170">
          <description><![CDATA[Stores $binaryFile to the repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="170" name="param" description="" type="\ezp\Io\BinaryFileCreateStruct" variable="$binaryFile">
            <type by_reference="false">\ezp\Io\BinaryFileCreateStruct</type>
          </tag>
          <tag line="170" name="return" description="The created BinaryFile object" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
        </docblock>
        <argument line="175">
          <name>$binaryFile</name>
          <default><![CDATA[]]></default>
          <type>BinaryFileCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="187" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="180">
          <description><![CDATA[Updates the file identified by $path with data from $updateFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="180" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="180" name="param" description="" type="\ezp\Io\BinaryFileUpdateStruct" variable="$updateFile">
            <type by_reference="false">\ezp\Io\BinaryFileUpdateStruct</type>
          </tag>
          <tag line="180" name="return" description="The update BinaryFile" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="187">
          <name>$updateFile</name>
          <default><![CDATA[]]></default>
          <type>BinaryFileUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="198" package="Default">
        <name>exists</name>
        <type>function</type>
        <docblock line="192">
          <description><![CDATA[Checks if a BinaryFile with $path exists in the repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="192" name="param" description="" type="mixed" variable="$binaryFile">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="192" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="198">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="209" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="203">
          <description><![CDATA[Deletes the BinaryFile with $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="203" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="203" name="throws" description="if no such file exists" type="\ezp\Base\Exception">
            <type by_reference="false">\ezp\Base\Exception</type>
          </tag>
        </docblock>
        <argument line="209">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="220" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="214">
          <description><![CDATA[Loads the binary file with $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="214" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="214" name="return" description="" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
        </docblock>
        <argument line="220">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="230" package="Default">
        <name>getFileResource</name>
        <type>function</type>
        <docblock line="225">
          <description><![CDATA[Returns a read (mode: rb) file resource to the binary file identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="225" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="225" name="return" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
        <argument line="230">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="240" package="Default">
        <name>getFileContents</name>
        <type>function</type>
        <docblock line="235">
          <description><![CDATA[Returns the contents of the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="235" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="235" name="return" description="Binary content" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="240">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Base" line="250" package="Default">
        <name>getBackend</name>
        <type>function</type>
        <docblock line="245">
          <description><![CDATA[Returns the appropriate backend for $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="245" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="245" name="return" description="" type="\ezp\Io\Handler">
            <type by_reference="false">\ezp\Io\Handler</type>
          </tag>
        </docblock>
        <argument line="250">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Base" line="262" package="Default">
        <name>initBackend</name>
        <type>function</type>
        <docblock line="256">
          <description><![CDATA[Initializes the backend identified  by $identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="256" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="256" name="throws" description="on non existing backend identifier" type="\ezp\Base\Exception\BadConfiguration">
            <type by_reference="false">\ezp\Base\Exception\BadConfiguration</type>
          </tag>
          <tag line="256" name="throws" description="on non existing backend class" type="\ezp\Base\Exception\BadConfiguration">
            <type by_reference="false">\ezp\Base\Exception\BadConfiguration</type>
          </tag>
        </docblock>
        <argument line="262">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="262">
          <name>$backendsConfigurationOverride</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Image/Data.php" hash="9405c23a7d30bb46a09c6b31395c3522">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Image/Data.php</error>
    </parse_markers>
    <namespace-alias name="ezcImageAnalyzerData">ezcImageAnalyzerData</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Image" line="17" package="Default">
      <name>Data</name>
      <full_name>\ezp\Base\Image\Data</full_name>
      <extends>\ezcImageAnalyzerData</extends>
      <docblock line="14">
        <description><![CDATA[Description of ImageData]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$advancedData</name>
        <default><![CDATA[array()]]></default>
        <docblock line="19">
          <description><![CDATA[Various advanced data, depending on image type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Base/Translatable.php" hash="5f239c79e8e20c746dc72389c3fd3d7d">
    <parse_markers>
      <error line="19" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $language in setLanguage()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Translatable.php</error>
    </parse_markers>
    <namespace-alias name="Language">ezp\Content\Language</namespace-alias>
    <interface namespace="ezp\Base" line="17" package="Default">
      <name>Translatable</name>
      <full_name>\ezp\Base\Translatable</full_name>
      <extends/>
      <docblock line="13">
        <description><![CDATA[Interface for Translatable]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="24" package="Default">
        <name>setLanguage</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Set the current language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="param" description="" type="\ezp\Content\Language" variable="$language">
            <type by_reference="false">\ezp\Content\Language</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="31" package="Default">
        <name>getLanguage</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Get the current language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="return" description="" type="\ezp\Content\Language">
            <type by_reference="false">\ezp\Content\Language</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/Base/Configuration/Parser.php" hash="4db17b413255b5ed8698331d3ee78191">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Configuration/Parser.php</error>
    </parse_markers>
    <interface namespace="ezp\Base\Configuration" line="16" package="Default">
      <name>Parser</name>
      <full_name>\ezp\Base\Configuration\Parser</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Configuration Interfaces for configuration parser & writer]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Configuration" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Construct an instance for a specific file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="A valid file name, will be overwritten if it exists by {@link write()}" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="18" name="param" description="" type="array" variable="$globalConfiguration">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$file</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="24">
          <name>$globalConfiguration</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Configuration" line="60" package="Default">
        <name>parse</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Parse file and return raw configuration data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="string" variable="$fileContent">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="return" description="A plain array structure of configuration data where array clearing is marked with {@link Configuration::TEMP_INI_UNSET_VAR} and php variables are plain php values(numbers, floats, true and false). In addition strings are rtrimmed to avoid common user mistakes when dealing with configuration data (trailing whitespace). eg (ini example): [section] list[] list[]=item list[]=false var=true num=2 float=1.2 string=1,5 Result: array( 'section' =&gt; array( 'list' =&gt; array( '__UNSET__', 'item', false, ), 'var' =&gt; true, 'num' =&gt; 2, 'float' =&gt; 1.2, 'string' =&gt; '1,5', ) )" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$fileContent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Configuration" line="68" package="Default">
        <name>write</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Store raw configuration data to file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="see" description="\ezp\Base\Configuration\parse()" refers="\ezp\Base\Configuration\parse()"/>
          <tag line="62" name="param" description="" type="array" variable="$configurationData">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$configurationData</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Base/Configuration/Parser/Ini.php" hash="84701c7748f127351673a8b9a765b73f">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Configuration/Parser/Ini.php</error>
    </parse_markers>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="Parser">ezp\Base\Configuration\Parser</namespace-alias>
    <namespace-alias name="ezcConfiguration">ezcConfiguration</namespace-alias>
    <namespace-alias name="ezcConfigurationIniReader">ezcConfigurationIniReader</namespace-alias>
    <namespace-alias name="LogicException">LogicException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Configuration\Parser" line="22" package="Default">
      <name>Ini</name>
      <full_name>\ezp\Base\Configuration\Parser\Ini</full_name>
      <extends/>
      <extends>\ezp\Base\Configuration\Parser</extends>
      <docblock line="19">
        <description><![CDATA[Configuration Ini Parser / writer]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="ezp\Base\Configuration\Parser" line="30" package="Default">
        <name>TEMP_INI_TRUE_VAR</name>
        <value><![CDATA['__TRUE__']]></value>
        <docblock line="24">
          <description><![CDATA[Constant string used as a temporary true variable during ini parsing to avoid
parse_ini_file from casting it to 1]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ezp\Base\Configuration\Parser" line="38" package="Default">
        <name>TEMP_INI_FALSE_VAR</name>
        <value><![CDATA['__FALSE__']]></value>
        <docblock line="32">
          <description><![CDATA[Constant string used as a temporary false variable during ini parsing to avoid
parse_ini_file from casting it to 0]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ezp\Base\Configuration\Parser" line="46" package="Default">
        <name>TEMP_INI_KEY_VAR</name>
        <value><![CDATA['__KEY__']]></value>
        <docblock line="40">
          <description><![CDATA[Constant string used as a temporary array key separator when merging several dimensions
for php_ini_string support, {@see parsePhpPostArrayFilter()} & {@see parserPhpDimensionArraySupport()}]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="53" package="Default">
        <name>$file</name>
        <default><![CDATA[]]></default>
        <docblock line="48">
          <description><![CDATA[File name as needed by writer]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" package="Default">
        <name>$strictMode</name>
        <default><![CDATA[false]]></default>
        <docblock line="55">
          <description><![CDATA[Defines if strict mode should be used (parse_ini_string), otherwise use ezcConfigurationIniReader]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Configuration\Parser" line="68" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Construct an instance for a specific file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="param" description="A valid file name, file must exist!" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="param" description="" type="array" variable="$globalConfiguration">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$file</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="68">
          <name>$globalConfiguration</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Configuration\Parser" line="81" package="Default">
        <name>parse</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Parse file and return raw configuration data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="" type="string" variable="$fileContent">
            <type by_reference="false">string</type>
          </tag>
          <tag line="75" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$fileContent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base\Configuration\Parser" line="228" package="Default">
        <name>parserPhpDimensionArraySupport</name>
        <type>function</type>
        <docblock line="220">
          <description><![CDATA[Pre processing needed for php ini parsers to support three dimensional arrays]]></description>
          <long-description><![CDATA[<p>Injects constants which is later cleaned up in {@link parsePhpPostArrayFilter()}.</p>]]></long-description>
          <tag line="220" name="param" description="" type="string" variable="$fileContent">
            <type by_reference="false">string</type>
          </tag>
          <tag line="220" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="228">
          <name>$fileContent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ezp\Base\Configuration\Parser" line="278" package="Default">
        <name>parsePhpPostFilter</name>
        <type>function</type>
        <docblock line="271">
          <description><![CDATA[Transform temporary values the php equivalent to make sure parsed ini settings
are the same as with ezcConfigurationIniReader.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="271" name="param" description="" type="mixed" variable="$iniValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="271" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="278">
          <name>$iniValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ezp\Base\Configuration\Parser" line="309" package="Default">
        <name>parsePhpPostArrayFilter</name>
        <type>function</type>
        <docblock line="300">
          <description><![CDATA[Transform temporary array values the php equivalent to make sure parsed ini settings
are the same as with ezcConfigurationIniReader.]]></description>
          <long-description><![CDATA[<p>Deals specifically with post parse fixes for three dimensional arrays.</p>]]></long-description>
          <tag line="300" name="param" description="" type="array" variable="$array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="300" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="309">
          <name>$array</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base\Configuration\Parser" line="376" package="Default">
        <name>parserClearArraySupport</name>
        <type>function</type>
        <docblock line="368">
          <description><![CDATA[Common pre processing needed for both ezc and php parsers]]></description>
          <long-description><![CDATA[<p>Marks array clearing, so post parser code in {@link Configuration::parse()} can detect it</p>]]></long-description>
          <tag line="368" name="param" description="" type="string" variable="$fileContent">
            <type by_reference="false">string</type>
          </tag>
          <tag line="368" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="376">
          <name>$fileContent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Configuration\Parser" line="395" package="Default">
        <name>write</name>
        <type>function</type>
        <docblock line="388">
          <description><![CDATA[Store raw configuration data to file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="388" name="see" description="\ezp\Base\Configuration\Parser::parse()" refers="\ezp\Base\Configuration\Parser::parse()"/>
          <tag line="388" name="todo" description="Test.."/>
          <tag line="388" name="param" description="" type="array" variable="$configurationData">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="395">
          <name>$configurationData</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/ModelDefinition.php" hash="15a3d2505f753e0e3bda03d385571a46">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/ModelDefinition.php</error>
    </parse_markers>
    <interface namespace="ezp\Base" line="16" package="Default">
      <name>ModelDefinition</name>
      <full_name>\ezp\Base\ModelDefinition</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Interface for model definition]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Base" line="58" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Returns definition of the model object, eg: permissions(, properties)...]]></description>
          <long-description><![CDATA[<p>Return value example:
array(
    'module' => 'content',
    'functions' => array(
        'read' => array(
            'Class' => array(
                'options' => function( Repository $repository )
                {
                    return $repository->getContentTypeService()->loadAll( $idNamePair = true );
                },
                'compare' => function( Model $content, array $limitationsValues[, Repository $repository[, Model $assignment = null]] )
                {
                    return in_array( $content->typeId, $limitationsValues );
                },
                'query' => function( array $limitationsValues[, Repository $repository] )
                {
                    if ( !isset( $limitationsValues[1] ) )
                        return new Criterion\ContentTypeId( $limitationsValues[0] );</p>

<pre><code>                return new Criterion\ContentTypeId( $limitationsValues );
            },
        )
    )
)
</code></pre>

<p>);</p>

<p>Where 'read' is function and 'Class' is limitation identifier.</p>

<p>Bellow that are three possible keys: 'options', a callback returning a list of options,
where key is scalar value identifying limitation and value is human readable name.
The second key is 'compare', a callback comparing instance of an object against limitation values.
The third possible key is 'query', a callback that modifies criterion object to include filtering rules
for the limitation.</p>]]></long-description>
          <tag line="18" name="access" description="private"/>
          <tag line="18" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/Base/ModelState.php" hash="447180819bf915fe0e742bc88da80565">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/ModelState.php</error>
    </parse_markers>
    <interface namespace="ezp\Base" line="16" package="Default">
      <name>ModelState</name>
      <full_name>\ezp\Base\ModelState</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Interface for domain objects]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="28" package="Default">
        <name>setState</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Sets internal variables on object from array]]></description>
          <long-description><![CDATA[<p>Key is property name and value is property value.</p>]]></long-description>
          <tag line="18" name="internal" description=""/>
          <tag line="18" name="param" description="" type="array" variable="$state">
            <type by_reference="false">array</type>
          </tag>
          <tag line="18" name="return" description="" type="\ezp\Base\ModelState">
            <type by_reference="false">\ezp\Base\ModelState</type>
          </tag>
          <tag line="18" name="throws" description="If one of the properties in $state is not found" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$state</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="40" package="Default">
        <name>getState</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Gets internal variables on object as array]]></description>
          <long-description><![CDATA[<p>Key is property name and value is property value.</p>]]></long-description>
          <tag line="30" name="internal" description=""/>
          <tag line="30" name="param" description="Optional, lets you specify to only return one property by name" type="string|null" variable="$property">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="30" name="return" description="Array if $property is null, else value of property" type="array|mixed">
            <type by_reference="false">array</type>
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="30" name="throws" description="If $property is not found (when not null)" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$property</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Base/Collection/Type.php" hash="b281ca83cec05db8fa909ff6fa6660a4">
    <parse_markers>
      <critical line="21" code="50019">No short description for property $type</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Collection/Type.php</error>
    </parse_markers>
    <namespace-alias name="Collection">ezp\Base\Collection</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="ArrayObject">ArrayObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Collection" line="19" package="Default">
      <name>Type</name>
      <full_name>\ezp\Base\Collection\Type</full_name>
      <extends>\ArrayObject</extends>
      <extends>\ezp\Base\Collection</extends>
      <docblock line="15">
        <description><![CDATA[Type Collection class, collection only accepts new elements of a certain type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="24" package="Default">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="The class name (including namespace) to accept as input" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="35" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Construct object and assign internal array values]]></description>
          <long-description><![CDATA[<p>A type strict collection that throws exception if type is wrong when appended to.</p>]]></long-description>
          <tag line="26" name="throws" description="If elements contains item of wrong type" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="26" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="param" description="" type="array" variable="$elements">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="35">
          <name>$elements</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="54" package="Default">
        <name>indexOf</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Returns the first index at which a given element can be found in the array, or false if it is not present.]]></description>
          <long-description><![CDATA[<p>Uses strict comparison.</p>]]></long-description>
          <tag line="46" name="param" description="" type="mixed" variable="$item">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="46" name="return" description="False if nothing was found" type="int|string|false">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$item</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="82" package="Default">
        <name>offsetSet</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[Overrides offsetSet to check type and allow if correct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="internal" description=""/>
          <tag line="74" name="throws" description="On wrong type" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="74" name="param" description="" type="string|int" variable="$offset">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="74" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="82">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="102" package="Default">
        <name>exchangeArray</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Overloads exchangeArray() to do type checks on input.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="throws" description="" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="95" name="param" description="" type="array" variable="$input">
            <type by_reference="false">array</type>
          </tag>
          <tag line="95" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Collection/LazyType.php" hash="75c1ecab712df2863dea2671de566618">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Collection/LazyType.php</error>
    </parse_markers>
    <namespace-alias name="Collection">ezp\Base\Collection</namespace-alias>
    <namespace-alias name="Lazy">ezp\Base\Collection\Lazy</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="Service">ezp\Base\Service</namespace-alias>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="ArrayObject">ArrayObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Collection" line="25" package="Default">
      <name>LazyType</name>
      <full_name>\ezp\Base\Collection\LazyType</full_name>
      <extends>\ezp\Base\Collection\Type</extends>
      <extends>\ezp\Base\Collection\Lazy</extends>
      <docblock line="19">
        <description><![CDATA[Lazy Collection class, lazy collection only accepts new elements of a certain type]]></description>
        <long-description><![CDATA[<p>Takes a primary id as input, items connected to this id will be loaded when collection is first accessed.</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="32" package="Default">
        <name>$service</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[Service used to load the object the proxy represents.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="\ezp\Base\Service">
            <type by_reference="false">\ezp\Base\Service</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" package="Default">
        <name>$primary</name>
        <default><![CDATA[]]></default>
        <docblock line="34">
          <description><![CDATA[The variable used for collection lookup]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$method</name>
        <default><![CDATA[]]></default>
        <docblock line="41">
          <description><![CDATA[Method to use on the service to load the object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="60" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[Construct object and assign internal array values]]></description>
          <long-description><![CDATA[<p>A type strict collection that throws exception if type is wrong when appended to.</p>]]></long-description>
          <tag line="48" name="throws" description="If elements contains item of wrong type" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="48" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="48" name="param" description="" type="\ezp\Base\Service" variable="$service">
            <type by_reference="false">\ezp\Base\Service</type>
          </tag>
          <tag line="48" name="param" description="Primary key to do lookup on" type="mixed" variable="$primary">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="48" name="param" description="Optional, defines which function on handler to call, 'load' by default." type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="48" name="param" description="Optional array of initial elements that will be available w/o any loading" type="array" variable="$initialArray">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="60">
          <name>$service</name>
          <default><![CDATA[]]></default>
          <type>Service</type>
        </argument>
        <argument line="60">
          <name>$primary</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="60">
          <name>$method</name>
          <default><![CDATA['load']]></default>
          <type/>
        </argument>
        <argument line="60">
          <name>$initialArray</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="76" package="Default">
        <name>isLoaded</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Hint to know if collection has been loaded (including partly loaded)]]></description>
          <long-description><![CDATA[<p>Useful for lazy collection to signal that a collection has not been loaded thus
skipping updating a collection as it will be correct the moment it is loaded anyway.</p>]]></long-description>
          <tag line="68" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base\Collection" line="86" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[Load the objects this proxy object represent]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="return" description="" type="\ezp\Base\Model">
            <type by_reference="false">\ezp\Base\Model</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="101" package="Default">
        <name>getIterator</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Overrides getIterator to lazy load items]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="internal" description=""/>
          <tag line="95" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="114" package="Default">
        <name>offsetGet</name>
        <type>function</type>
        <docblock line="107">
          <description><![CDATA[Overrides offsetGet to lazy load items]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="107" name="internal" description=""/>
          <tag line="107" name="param" description="" type="string|int" variable="$index">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="107" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="114">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="131" package="Default">
        <name>offsetExists</name>
        <type>function</type>
        <docblock line="124">
          <description><![CDATA[Overrides offsetExists to lazy load items]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="internal" description=""/>
          <tag line="124" name="param" description="" type="string|int" variable="$index">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="124" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="147" package="Default">
        <name>offsetUnset</name>
        <type>function</type>
        <docblock line="141">
          <description><![CDATA[Overrides offsetUnset to lazy load items]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="141" name="internal" description=""/>
          <tag line="141" name="param" description="" type="string|int" variable="$index">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="161" package="Default">
        <name>offsetSet</name>
        <type>function</type>
        <docblock line="153">
          <description><![CDATA[Overrides offsetSet to lazy load items]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="153" name="internal" description=""/>
          <tag line="153" name="throws" description="On wrong type" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="153" name="param" description="" type="string|int" variable="$offset">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="153" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="161">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="161">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="172" package="Default">
        <name>getArrayCopy</name>
        <type>function</type>
        <docblock line="167">
          <description><![CDATA[Return a copy of the internal array]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="167" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="184" package="Default">
        <name>count</name>
        <type>function</type>
        <docblock line="178">
          <description><![CDATA[Overrides count to lazy load items]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="178" name="internal" description=""/>
          <tag line="178" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Collection/ReadOnly.php" hash="61c2efde574b91a5ed1b60221c655038">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Collection/ReadOnly.php</error>
    </parse_markers>
    <namespace-alias name="Collection">ezp\Base\Collection</namespace-alias>
    <namespace-alias name="ReadOnlyException">ezp\Base\Exception\ReadOnly</namespace-alias>
    <namespace-alias name="ArrayObject">ArrayObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Collection" line="19" package="Default">
      <name>ReadOnly</name>
      <full_name>\ezp\Base\Collection\ReadOnly</full_name>
      <extends>\ArrayObject</extends>
      <extends>\ezp\Base\Collection</extends>
      <docblock line="15">
        <description><![CDATA[Read Only Collection class]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="29" package="Default">
        <name>indexOf</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Returns the first index at which a given element can be found in the array, or false if it is not present.]]></description>
          <long-description><![CDATA[<p>Uses strict comparison.</p>]]></long-description>
          <tag line="21" name="param" description="" type="mixed" variable="$item">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="21" name="return" description="False if nothing was found" type="int|string|false">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$item</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="54" package="Default">
        <name>offsetSet</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Overloads offsetSet() to do exception about being read only.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="internal" description=""/>
          <tag line="46" name="throws" description="" type="\ezp\Base\Exception\ReadOnly">
            <type by_reference="false">\ezp\Base\Exception\ReadOnly</type>
          </tag>
          <tag line="46" name="param" description="" type="string|int" variable="$offset">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="46" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="54">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="66" package="Default">
        <name>offsetUnset</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Overloads offsetUnset() to do exception about being read only.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="internal" description=""/>
          <tag line="59" name="throws" description="" type="\ezp\Base\Exception\ReadOnly">
            <type by_reference="false">\ezp\Base\Exception\ReadOnly</type>
          </tag>
          <tag line="59" name="param" description="" type="string|int" variable="$offset">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="78" package="Default">
        <name>exchangeArray</name>
        <type>function</type>
        <docblock line="71">
          <description><![CDATA[Overloads exchangeArray() to do exception about being read only.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="throws" description="" type="\ezp\Base\Exception\ReadOnly">
            <type by_reference="false">\ezp\Base\Exception\ReadOnly</type>
          </tag>
          <tag line="71" name="param" description="" type="array" variable="$input">
            <type by_reference="false">array</type>
          </tag>
          <tag line="71" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$input</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Collection/Lazy.php" hash="7615ba865fd6da80110412227ce165ac">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Collection/Lazy.php</error>
    </parse_markers>
    <namespace-alias name="Collection">ezp\Base\Collection</namespace-alias>
    <interface namespace="ezp\Base\Collection" line="19" package="Default">
      <name>Lazy</name>
      <full_name>\ezp\Base\Collection\Lazy</full_name>
      <extends>\ezp\Base\Collection</extends>
      <docblock line="13">
        <description><![CDATA[Lazy Collection interface]]></description>
        <long-description><![CDATA[<p>Note: Does not extend IteratorAggregate / Iterator to let implementers extend ArrayObject or splFixedArray</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Collection" line="29" package="Default">
        <name>isLoaded</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Hint to know if collection has been loaded (including partly loaded)]]></description>
          <long-description><![CDATA[<p>Useful for lazy collection to signal that a collection has not been loaded thus
skipping updating a collection as it will be correct the moment it is loaded anyway.</p>]]></long-description>
          <tag line="21" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/Base/Autoloader.php" hash="da917aeb29a755ac9f9af928805641dc">
    <parse_markers>
      <critical line="25" code="50019">No short description for property $classes</critical>
      <critical line="30" code="50019">No short description for property $settings</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Autoloader.php</error>
    </parse_markers>
    <namespace-alias name="ezcPhpGenerator">ezcPhpGenerator</namespace-alias>
    <namespace-alias name="eZAutoloadGenerator">eZAutoloadGenerator</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base" line="23" package="Default">
      <name>Autoloader</name>
      <full_name>\ezp\Base\Autoloader</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Provides the native autoload functionality for eZ Publish]]></description>
        <long-description><![CDATA[<p>Use:
require 'ezp/Base/Autoloader.php'
spl_autoload_register( array( new ezp\Base\Autoloader(), 'load' ) );</p>]]></long-description>
        <tag line="14" name="uses" description="\ezcPhpGenerator" refers="\ezcPhpGenerator"/>
      </docblock>
      <constant namespace="ezp\Base" line="38" package="Default">
        <name>CACHE_FILE</name>
        <value><![CDATA['var/cache/autoload.php']]></value>
        <docblock line="35">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$classes</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="array|null">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="33" package="Default">
        <name>$settings</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="46" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Construct a autoload instance]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="param" description="Misc autoload settings" type="array" variable="$settings">
            <type by_reference="false">array</type>
          </tag>
          <tag line="40" name="param" description="Optional classes to autoload by hash lookup, for testing" type="array|null" variable="$ezpClasses">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$settings</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="46">
          <name>$ezpClasses</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="66" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Autoload eZ Publish, extension classes and lazy load ezcBase autoloader if needed]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="param" description="" type="" variable="$className"/>
          <tag line="60" name="return" description="" type="bool|mixed">
            <type by_reference="false">bool</type>
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$className</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="129" package="Default">
        <name>generateClassesList</name>
        <type>function</type>
        <docblock line="124">
          <description><![CDATA[Merges all autoload files and return result]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base" line="195" package="Default">
        <name>expandEzcClassList</name>
        <type>function</type>
        <docblock line="189">
          <description><![CDATA[Expand an array of ezc class paths using $settings]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="189" name="param" description="" type="array" variable="$classes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="189" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$classes</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base" line="211" package="Default">
        <name>saveClassesListCache</name>
        <type>function</type>
        <docblock line="205">
          <description><![CDATA[Save autoload cache file for override classes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="205" name="param" description="" type="array" variable="$classes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="205" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="211">
          <name>$classes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base" line="237" package="Default">
        <name>registerEzc</name>
        <type>function</type>
        <docblock line="234">
          <description><![CDATA[Register ezcBase autoloader based on optional constants defined in config.php]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Base" line="257" package="Default">
        <name>deleteClassesCache</name>
        <type>function</type>
        <docblock line="252">
          <description><![CDATA[Delete autoload cache file for override classes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="252" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="275" package="Default">
        <name>reset</name>
        <type>function</type>
        <docblock line="266">
          <description><![CDATA[Resets the local, in-memory autoload cache.]]></description>
          <long-description><![CDATA[<p>If the autoload arrays are extended during a requests lifetime, this
method must be called, to make them available.</p>]]></long-description>
          <tag line="266" name="param" description="Also clear on disk autoload file cache." type="bool" variable="$clearFileCache">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="266" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="275">
          <name>$clearFileCache</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="287" package="Default">
        <name>updateExtensionAutoloadArray</name>
        <type>function</type>
        <docblock line="284">
          <description><![CDATA[Shortcut to regenerate autoload files, also takes care of refreshing autoload cache]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/NotFoundWithType.php" hash="c62be932cb4a697fec58b476b95e1ed5">
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/NotFoundWithType.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="21" package="Default">
      <name>NotFoundWithType</name>
      <full_name>\ezp\Base\Exception\NotFoundWithType</full_name>
      <extends>\ezp\Base\Exception\NotFound</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[NotFoundWithType Exception implementation]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="use" description=": throw new NotFoundWithType( 'User Group', $id );"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="30" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Generates: Could not find 'Content of type {$type}' with identifier '{$identifier}']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="" type="mixed" variable="$identifier">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="23" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/PropertyNull.php" hash="203553a9de151cbacb9c6f1244339faf">
    <parse_markers>
      <error line="24" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/PropertyNull.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="22" package="Default">
      <name>PropertyNull</name>
      <full_name>\ezp\Base\Exception\PropertyNull</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[PropertyNull Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new PropertyNull( 'nodeId', <strong>CLASS</strong> );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: Property '{$propertyName}' did not have a value[ on class '{$className}']]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Optionally to specify class in abstract/parent classes" type="string|null" variable="$className">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$className</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/Unauthorized.php" hash="f6f1ec3737c23a014ad88243eb9fe1fb">
    <parse_markers>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/Unauthorized.php</error>
    </parse_markers>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="31" package="Default">
      <name>Unauthorized</name>
      <full_name>\ezp\Base\Exception\Unauthorized</full_name>
      <extends>\ezp\Base\Exception\Http</extends>
      <docblock line="13">
        <description><![CDATA[Unauthorized Exception implementation]]></description>
        <long-description><![CDATA[<p>10.4.2 401 Unauthorized</p>

<p>The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47)
containing a challenge applicable to the requested resource. The client MAY repeat the request with a suitable
Authorization header field (section 14.8). If the request already included Authorization credentials, then the 401
response indicates that authorization has been refused for those credentials. If the 401 response contains the same
challenge as the prior response, and the user agent has already attempted authentication at least once, then the user
SHOULD be presented the entity that was given in the response, since that entity might include relevant diagnostic
information. HTTP access authentication is explained in "HTTP Authentication: Basic and Digest Access
Authentication".</p>

<p>Use:
  throw new Unauthorized( 'Content' );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="39" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Generates: Login required to get access to '{$what}']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$what</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="39">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/FieldValidation.php" hash="6fdee6a7aa923884b63e70c0222417e8">
    <parse_markers>
      <error line="21" code="50018">No DocBlock was found for property $validationErrors</error>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/FieldValidation.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PhpException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="19" package="Default">
      <name>FieldValidation</name>
      <full_name>\ezp\Base\Exception\FieldValidation</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Exception thrown when the input value to a field type is not understood by
the field type implementation.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="21">
        <name>$validationErrors</name>
        <default><![CDATA[array()]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="30" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Constructs a FieldValidation exception]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="What did not validate ?" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="The validation error(s) that occurred" type="string|array" variable="$validationErrors">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="23" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$what</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$validationErrors</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PhpException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/NotFound.php" hash="9795da259b2fc60eebaf990e4c4781fd">
    <parse_markers>
      <error line="42" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/NotFound.php</error>
    </parse_markers>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="28" package="Default">
      <name>NotFound</name>
      <full_name>\ezp\Base\Exception\NotFound</full_name>
      <extends>\ezp\Base\Exception\Http</extends>
      <docblock line="13">
        <description><![CDATA[Not Found Exception implementation]]></description>
        <long-description><![CDATA[<p>10.4.5 404 Not Found</p>

<p>The server has not found anything matching the Request-URI. No indication is given of whether the condition is
temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally
configurable mechanism, that an old resource is permanently unavailable and has no forwarding address.
This status code is commonly used when the server does not wish to reveal exactly why the request has been refused,
or when no other response is applicable.</p>

<p>Use:
  throw new NotFound( 'Content', 42 );</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$what</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[What was not found]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="40" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="36">
          <description><![CDATA[Identifier of what was not found]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="49" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Generates: Could not find '{$what}' with identifier '{$identifier}']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="param" description="" type="mixed" variable="$identifier">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="42" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$what</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="49">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="49">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/Forbidden.php" hash="6898a58f113fccaf04b135182d3be3f4">
    <parse_markers>
      <error line="29" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/Forbidden.php</error>
    </parse_markers>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="27" package="Default">
      <name>Forbidden</name>
      <full_name>\ezp\Base\Exception\Forbidden</full_name>
      <extends>\ezp\Base\Exception\Http</extends>
      <docblock line="13">
        <description><![CDATA[Forbidden Exception implementation]]></description>
        <long-description><![CDATA[<p>10.4.4 403 Forbidden</p>

<p>The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD
NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been
fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this
information available to the client, the status code 404 (Not Found) can be used instead.</p>

<p>Use:
  throw new Forbidden( 'Content', 'create' );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="36" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Generates: User does not have access to $action '{$type}']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="29" name="param" description="" type="string" variable="$action">
            <type by_reference="false">string</type>
          </tag>
          <tag line="29" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="36">
          <name>$action</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="36">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/PropertyType.php" hash="b569ee07b208c803cc7842e7470763be">
    <parse_markers>
      <error line="24" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/PropertyType.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="22" package="Default">
      <name>PropertyType</name>
      <full_name>\ezp\Base\Exception\PropertyType</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Property Type Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new PropertyType( 'nodeId', 'int', <strong>CLASS</strong> );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="32" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: Property '{$propertyName}' can only be of type '{$type}']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Optionally to specify class in abstract/parent classes" type="string|null" variable="$className">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$className</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/Expired.php" hash="844f554fc72a040ae4c2b8d5a98c6adf">
    <parse_markers>
      <error line="24" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/Expired.php</error>
    </parse_markers>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="22" package="Default">
      <name>Expired</name>
      <full_name>\ezp\Base\Exception\Expired</full_name>
      <extends>\ezp\Base\Exception\Http</extends>
      <docblock line="13">
        <description><![CDATA[Expired Exception implementation]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="13" name="todo" description="Use something else then http BAD_REQUEST.&#10;Use:&#10;throw new Expired( 'Oauth Token' );"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="30" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: '{$expired}' has expired]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$expired">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$expired</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/BadConfiguration.php" hash="719c3eab79a9f00b6a49cd71f8acf189">
    <parse_markers>
      <error line="24" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/BadConfiguration.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="LogicException">LogicException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="22" package="Default">
      <name>BadConfiguration</name>
      <full_name>\ezp\Base\Exception\BadConfiguration</full_name>
      <extends>\LogicException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[BadConfiguration Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new BadConfiguration( "base&#92;[configuration]&#92;parsers", "could not parse configuration files" );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: '$setting' setting is invalid[, $consequence]]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$setting">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Optional string to explain consequence of configuration mistake" type="string|null" variable="$consequence">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$setting</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$consequence</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/MissingClass.php" hash="c5421e000312699abead85caa5abe7f6">
    <parse_markers>
      <error line="24" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/MissingClass.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="LogicException">LogicException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="22" package="Default">
      <name>MissingClass</name>
      <full_name>\ezp\Base\Exception\MissingClass</full_name>
      <extends>\LogicException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[MissingClass Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new MissingClass( $className, 'field type' );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: Could not find[ {$classType}] class '{$className}']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Optional string to specify what kind of class this is" type="string|null" variable="$classType">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$className</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$classType</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/BadFieldTypeInput.php" hash="91abe2db4fe70406ac26e513c6e0e868">
    <parse_markers>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/BadFieldTypeInput.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PhpException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="19" package="Default">
      <name>BadFieldTypeInput</name>
      <full_name>\ezp\Base\Exception\BadFieldTypeInput</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Exception thrown when the input value to a field type is not understood by
the field type implementation.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="28" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Constructs a BadFieldTypeInput exception]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="The value that had wrong type" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="21" name="param" description="Optional class name for field type" type="string|null" variable="$fieldClass">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="21" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="28">
          <name>$fieldClass</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="28">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PhpException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/InvalidCallback.php" hash="e74ab4fc657b31eb1b02be963046120a">
    <parse_markers>
      <error line="24" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/InvalidCallback.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="BadFunctionCallException">BadFunctionCallException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="22" package="Default">
      <name>InvalidCallback</name>
      <full_name>\ezp\Base\Exception\InvalidCallback</full_name>
      <extends>\BadFunctionCallException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Invalid Callback Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new InvalidCallback( array( 'Class', 'nonExistingFunction' ) );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="30" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: "Invalid callback: $callback"]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string|array" variable="$callback">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$callback</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/BadContentType.php" hash="52f6e75c15c07c53372b25dffba463f9">
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/BadContentType.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="21" package="Default">
      <name>BadContentType</name>
      <full_name>\ezp\Base\Exception\BadContentType</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Invalid Argument BadContentType Exception implementation]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="use" description=": throw new BadContentType( 'User Group', 'Article' );"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="30" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Generates: Expected Content Type '{$excepted}' but got '{$got}' instead]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="string" variable="$excepted">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="" type="string" variable="$got">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$excepted</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$got</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/InvalidArgumentType.php" hash="4660bd806bdb524393449eaba677cf11">
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/InvalidArgumentType.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="21" package="Default">
      <name>InvalidArgumentType</name>
      <full_name>\ezp\Base\Exception\InvalidArgumentType</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Invalid Argument Type Exception implementation]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="use" description=": throw new InvalidArgument( 'nodes', 'array' );"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Generates: Argument '{$argumentName}' can only be of type '{$accepts}']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="string" variable="$argumentName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="Type that are accepted" type="string" variable="$accepts">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="Optionally to specify what value you got" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="23" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$argumentName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$accepts</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/ReadOnly.php" hash="0fe0af2525d3e79a8a69dfd8c057cb6a">
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/ReadOnly.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="21" package="Default">
      <name>ReadOnly</name>
      <full_name>\ezp\Base\Exception\ReadOnly</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[ReadOnly Exception implementation]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="use" description=": throw new ReadOnly( 'Collection' );"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="30" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Generates: {$type} is readonly[: '{$className}']]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="Optionally to specify class in abstract/parent classes" type="string|null" variable="$className">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="23" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$className</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/Http.php" hash="28f68e3dabc0272ab2d3e89252af967e">
    <parse_markers>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/Http.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="RuntimeException">RuntimeException</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Base\Exception" line="21" package="Default">
      <name>Http</name>
      <full_name>\ezp\Base\Exception\Http</full_name>
      <extends>\RuntimeException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Abstract Http Exception implementation]]></description>
        <long-description><![CDATA[<p>Exceptions that map to any of the http errors should extend this class.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Base\Exception" line="23">
        <name>BAD_REQUEST</name>
        <value><![CDATA[400]]></value>
      </constant>
      <constant namespace="ezp\Base\Exception" line="24">
        <name>UNAUTHORIZED</name>
        <value><![CDATA[401]]></value>
      </constant>
      <constant namespace="ezp\Base\Exception" line="25">
        <name>PAYMENT_REQUIRED</name>
        <value><![CDATA[402]]></value>
      </constant>
      <constant namespace="ezp\Base\Exception" line="26">
        <name>FORBIDDEN</name>
        <value><![CDATA[403]]></value>
      </constant>
      <constant namespace="ezp\Base\Exception" line="27">
        <name>NOT_FOUND</name>
        <value><![CDATA[404]]></value>
      </constant>
      <constant namespace="ezp\Base\Exception" line="28">
        <name>METHOD_NOT_ALLOWED</name>
        <value><![CDATA[405]]></value>
      </constant>
      <constant namespace="ezp\Base\Exception" line="29">
        <name>NOT_ACCEPTABLE</name>
        <value><![CDATA[406]]></value>
      </constant>
      <constant namespace="ezp\Base\Exception" line="30">
        <name>CONFLICT</name>
        <value><![CDATA[409]]></value>
      </constant>
      <constant namespace="ezp\Base\Exception" line="31">
        <name>GONE</name>
        <value><![CDATA[410]]></value>
      </constant>
      <constant namespace="ezp\Base\Exception" line="33">
        <name>UNSUPPORTED_MEDIA_TYPE</name>
        <value><![CDATA[415]]></value>
      </constant>
      <constant namespace="ezp\Base\Exception" line="35">
        <name>INTERNAL_ERROR</name>
        <value><![CDATA[500]]></value>
      </constant>
      <constant namespace="ezp\Base\Exception" line="36">
        <name>NOT_IMPLEMENTED</name>
        <value><![CDATA[501]]></value>
      </constant>
      <constant namespace="ezp\Base\Exception" line="37">
        <name>SERVICE_UNAVAILABLE</name>
        <value><![CDATA[503]]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="46" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Constructs a Http Exception]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="" type="string" variable="$message">
            <type by_reference="false">string</type>
          </tag>
          <tag line="39" name="param" description="Must be one of the available constants on this class" type="int" variable="$code">
            <type by_reference="false">int</type>
          </tag>
          <tag line="39" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$message</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$code</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/PropertyPermission.php" hash="74378b58ac6b0b4461369489a31cf59a">
    <parse_markers>
      <error line="34" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/PropertyPermission.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="22" package="Default">
      <name>PropertyPermission</name>
      <full_name>\ezp\Base\Exception\PropertyPermission</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Property Permission Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new PropertyPermission( 'nodeId', PropertyPermission::READ, <strong>CLASS</strong> );</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Base\Exception" line="27" package="Default">
        <name>READ</name>
        <value><![CDATA['readable']]></value>
        <docblock line="24">
          <description><![CDATA[Used when the property is not readable]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="ezp\Base\Exception" line="32" package="Default">
        <name>WRITE</name>
        <value><![CDATA['writable']]></value>
        <docblock line="29">
          <description><![CDATA[Used when the property is not writable]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="42" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Generates: Property '{$propertyName}' is not {$mode}]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="" type="string" variable="$mode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="Optionally to specify class in abstract/parent classes" type="string|null" variable="$className">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="34" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$mode</name>
          <default><![CDATA[self::READ]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$className</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/BadRequest.php" hash="1b16900fc1711066f13619d2530475db">
    <parse_markers>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/BadRequest.php</error>
    </parse_markers>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="25" package="Default">
      <name>BadRequest</name>
      <full_name>\ezp\Base\Exception\BadRequest</full_name>
      <extends>\ezp\Base\Exception\Http</extends>
      <docblock line="13">
        <description><![CDATA[Bad Request Exception implementation]]></description>
        <long-description><![CDATA[<p>10.4.1 400 Bad Request</p>

<p>The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request
without modifications.</p>

<p>Use:
  throw new BadRequest( 'Oauth Token', 'http header' );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="34" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Generates: Bad request, missing {$missing} in {$from}]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="string" variable="$missing">
            <type by_reference="false">string</type>
          </tag>
          <tag line="27" name="param" description="" type="string" variable="$from">
            <type by_reference="false">string</type>
          </tag>
          <tag line="27" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$missing</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="34">
          <name>$from</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="34">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/Logic.php" hash="3af0bafe8af22503f6003d3a6d5d584e">
    <parse_markers>
      <error line="24" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/Logic.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="LogicException">LogicException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="22" package="Default">
      <name>Logic</name>
      <full_name>\ezp\Base\Exception\Logic</full_name>
      <extends>\LogicException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Logic Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new Logic( "readWriteProperties", "property {$property} could not be found." );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: '$what' has a logic error[, $consequence]]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$what">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Optional string to explain consequence of configuration mistake" type="string|null" variable="$consequence">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$what</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$consequence</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/InvalidArgumentValue.php" hash="440b47ff4babe1bde1393e0b7ef569d2">
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/InvalidArgumentValue.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="21" package="Default">
      <name>InvalidArgumentValue</name>
      <full_name>\ezp\Base\Exception\InvalidArgumentValue</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Invalid Argument Type Exception implementation]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="use" description=": throw new InvalidArgument( 'nodes', 'array' );"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Generates: Argument '{$argumentName}' got invalid value '{$value}']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="string" variable="$argumentName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="23" name="param" description="Optionally to specify class in abstract/parent classes" type="string|null" variable="$className">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="23" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$argumentName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$className</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/PropertyNotFound.php" hash="c55c0ece899b0427e309878df6adf774">
    <parse_markers>
      <error line="24" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/PropertyNotFound.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="22" package="Default">
      <name>PropertyNotFound</name>
      <full_name>\ezp\Base\Exception\PropertyNotFound</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Property Not Found Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new PropertyNotFound( 'nodeId', <strong>CLASS</strong> );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: Property '{$propertyName}' not found]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$propertyName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Optionally to specify class in abstract/parent classes" type="string|null" variable="$className">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$propertyName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$className</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/MethodNotFound.php" hash="82eb437bcd941c7f8da5c6083f772449">
    <parse_markers>
      <error line="24" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/MethodNotFound.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="BadMethodCallException">BadMethodCallException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="22" package="Default">
      <name>MethodNotFound</name>
      <full_name>\ezp\Base\Exception\MethodNotFound</full_name>
      <extends>\BadMethodCallException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Method Not Found Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new MethodNotFound( 'getRelations', <strong>CLASS</strong> );</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Generates: Method '{$method}' not found]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="Optionally to specify class in abstract/parent classes" type="string|null" variable="$className">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="24" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$method</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$className</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Exception/NotEmpty.php" hash="f707077f60c45bb167c5dd3dd2b25aeb">
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Exception/NotEmpty.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Exception" line="21" package="Default">
      <name>NotEmpty</name>
      <full_name>\ezp\Base\Exception\NotEmpty</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Invalid Argument NotEmpty implementation]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="use" description=": throw new NotEmpty( 'Group', $id );"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Exception" line="30" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Generates: Invalid argument, {$container} with identifier '{$identifier}' is not empty]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="string" variable="$container">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="" type="mixed" variable="$identifier">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="23" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$container</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Legacy/Carpet.php" hash="79ecdfc4e2a396301d11ed6f7613ef3d">
    <parse_markers>
      <notice line="95" code="50013">Parameter  could not be found in __set()</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Legacy/Carpet.php</error>
    </parse_markers>
    <namespace-alias name="MethodNotFound">ezp\Base\Exception\MethodNotFound</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <namespace-alias name="ReflectionClass">ReflectionClass</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base\Legacy" line="21" package="Default">
      <name>Carpet</name>
      <full_name>\ezp\Base\Legacy\Carpet</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[Utility class to "hide the dust under the carpet".]]></description>
        <long-description><![CDATA[<p>Use this class to abstract a class/object coming from legacy codebase (aka "old" eZ Publish)</p>]]></long-description>
        <tag line="15" name="internal" description=""/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="28" package="Default">
        <name>$className</name>
        <default><![CDATA[]]></default>
        <docblock line="23">
          <description><![CDATA[Class name for the abstracted legacy object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="34" package="Default">
        <name>$object</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Abstracted object coming from Legacy codebase]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Legacy" line="41" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="Class name in the Legacy codebase to &quot;sweep under the carpet&quot;" type="string" variable="$classToSweep">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$classToSweep</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Legacy" line="61" package="Default">
        <name>lift</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA["Lifts the carpet and sweeps the dust under it"
In other more pragmatic words, Instantiates the object to be abstracted.]]></description>
          <long-description><![CDATA[<p>Note: This method makes use of Reflection if $constructorArgs contains more than 1 element.
Therefore, to avoid too much performance cost, please consider extending this class
and reimplement this method in order to pass the exact number of arguments
to the abstracted class's constructor</p>]]></long-description>
          <tag line="46" name="param" description="Arguments to pass to the constructor. Set to null (default) if no argument is required" type="array|null" variable="$constructorArgs">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="46" name="return" description="" type="\ezp\Base\Legacy\Carpet">
            <type by_reference="false">\ezp\Base\Legacy\Carpet</type>
          </tag>
          <tag line="46" name="todo" description="Fix inclusion of class files !"/>
        </docblock>
        <argument line="61">
          <name>$constructorArgs</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Legacy" line="87" package="Default">
        <name>__get</name>
        <type>function</type>
        <docblock line="80">
          <description><![CDATA[Access to abstracted object's property, identified by $name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="param" description="Property name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="80" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="80" name="throws" description="" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Legacy" line="102" package="Default">
        <name>__set</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Sets $value to abstracted object's property, identified by $name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="param" description="Property name" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="95" name="param" description="Value to set" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="95" name="param" description="\ezp\Base\Exception\PropertyNotFound" type="" variable=""/>
        </docblock>
        <argument line="102">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="102">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Legacy" line="118" package="Default">
        <name>__call</name>
        <type>function</type>
        <docblock line="110">
          <description><![CDATA[Calls $method with $arguments on abstracted object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="param" description="Method name" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="110" name="param" description="" type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="110" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="110" name="throws" description="" type="\ezp\Base\Exception\MethodNotFound">
            <type by_reference="false">\ezp\Base\Exception\MethodNotFound</type>
          </tag>
        </docblock>
        <argument line="118">
          <name>$method</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="118">
          <name>$arguments</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Base\Legacy" line="134" package="Default">
        <name>__callStatic</name>
        <type>function</type>
        <docblock line="126">
          <description><![CDATA[Calls static $method with $arguments on abstracted object class]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="126" name="param" description="Method name" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="126" name="param" description="" type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="126" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="126" name="throws" description="" type="\ezp\Base\Exception\MethodNotFound">
            <type by_reference="false">\ezp\Base\Exception\MethodNotFound</type>
          </tag>
        </docblock>
        <argument line="134">
          <name>$method</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="134">
          <name>$arguments</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Proxy.php" hash="d399fe3878ebbe2e09f5886b84443080">
    <parse_markers>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $service in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Proxy.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="ezp\Base" line="16" package="Default">
      <name>Proxy</name>
      <full_name>\ezp\Base\Proxy</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Proxy class for model objects]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="23" package="Default">
        <name>$service</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[Service used to load the object the proxy represents.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="" type="\ezp\Base\Service">
            <type by_reference="false">\ezp\Base\Service</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[Id of the object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$proxiedObject</name>
        <default><![CDATA[null]]></default>
        <docblock line="32">
          <description><![CDATA[Concrete proxied object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="\ezp\Base\Model|object">
            <type by_reference="false">\ezp\Base\Model</type>
            <type by_reference="false">object</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="45" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Setup proxy object with enough info to be able to perform a load operation on the object it proxies.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="Primary id" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="39" name="param" description="" type="\ezp\Base\Service" variable="$service">
            <type by_reference="false">\ezp\Base\Service</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$service</name>
          <default><![CDATA[]]></default>
          <type>Service</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base" line="54" package="Default">
        <name>lazyLoad</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Loads the proxied object in the case it has not happened yet.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="68" package="Default">
        <name>__get</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Provides read access to a $property]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="83" package="Default">
        <name>__set</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Provides write access to a $property]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="83">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="95" package="Default">
        <name>__isset</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Checks if a public virtual property is set]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="param" description="Property name" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="89" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Proxy/Model.php" hash="e39334a5ffc1fb2b4be951724ca3fd0b">
    <parse_markers>
      <error line="66" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $observer in attach()</error>
      <error line="91" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $observer in detach()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Proxy/Model.php</error>
    </parse_markers>
    <namespace-alias name="ModelState">ezp\Base\ModelState</namespace-alias>
    <namespace-alias name="ObservableInterface">ezp\Base\Observable</namespace-alias>
    <namespace-alias name="Observer">ezp\Base\Observer</namespace-alias>
    <namespace-alias name="Proxy">ezp\Base\Proxy</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Base\Proxy" line="26" package="Default">
      <name>Model</name>
      <full_name>\ezp\Base\Proxy\Model</full_name>
      <extends>\ezp\Base\Proxy</extends>
      <extends>\ezp\Base\Observable</extends>
      <extends>\ezp\Base\ModelState</extends>
      <docblock line="16">
        <description><![CDATA[Model Proxy class.]]></description>
        <long-description><![CDATA[<p>Because of lack of traits in PHP &lt; 5.4 we introduce an intermediate class
for Proxy objects that need to implement Observable and ModelState.
This might change in the future, so never check if a class implemented this abstract, only it's interfaces!</p>]]></long-description>
        <tag line="16" name="internal" description=""/>
        <tag line="16" name="see" description="\ezp\Base\Model" refers="\ezp\Base\Model"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="33" package="Default">
        <name>$observers</name>
        <default><![CDATA[array()]]></default>
        <docblock line="28">
          <description><![CDATA[List of event listeners]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="\ezp\Base\Observer[]">
            <type by_reference="false">\ezp\Base\Observer[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base\Proxy" line="38" package="Default">
        <name>lazyLoad</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Loads the proxied object and moves observers over to it]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base\Proxy" line="53" package="Default">
        <name>moveObservers</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Move observers from proxy to proxiedObject, must be done after load and
proxiedObject must be a observable]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Proxy" line="73" package="Default">
        <name>attach</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[Attaches $observer for $event to the Model]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="param" description="" type="\ezp\Base\Observer" variable="$observer">
            <type by_reference="false">\ezp\Base\Observer</type>
          </tag>
          <tag line="66" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="66" name="return" description="" type="\ezp\Base\Model">
            <type by_reference="false">\ezp\Base\Model</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$observer</name>
          <default><![CDATA[]]></default>
          <type>Observer</type>
        </argument>
        <argument line="73">
          <name>$event</name>
          <default><![CDATA["update"]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Proxy" line="98" package="Default">
        <name>detach</name>
        <type>function</type>
        <docblock line="91">
          <description><![CDATA[Detaches $observer for $event from the Model]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="param" description="" type="\ezp\Base\Observer" variable="$observer">
            <type by_reference="false">\ezp\Base\Observer</type>
          </tag>
          <tag line="91" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="91" name="return" description="" type="\ezp\Base\Model">
            <type by_reference="false">\ezp\Base\Model</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$observer</name>
          <default><![CDATA[]]></default>
          <type>Observer</type>
        </argument>
        <argument line="98">
          <name>$event</name>
          <default><![CDATA["update"]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Proxy" line="123" package="Default">
        <name>notify</name>
        <type>function</type>
        <docblock line="116">
          <description><![CDATA[Notifies registered observers about $event]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="116" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="116" name="param" description="" type="array|null" variable="$arguments">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="116" name="return" description="" type="\ezp\Base\Model">
            <type by_reference="false">\ezp\Base\Model</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$event</name>
          <default><![CDATA["update"]]></default>
          <type/>
        </argument>
        <argument line="123">
          <name>$arguments</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Proxy" line="139" package="Default">
        <name>setState</name>
        <type>function</type>
        <docblock line="129">
          <description><![CDATA[Sets internal variables on object from array]]></description>
          <long-description><![CDATA[<p>Key is property name and value is property value.</p>]]></long-description>
          <tag line="129" name="access" description="private"/>
          <tag line="129" name="param" description="" type="array" variable="$state">
            <type by_reference="false">array</type>
          </tag>
          <tag line="129" name="return" description="" type="\ezp\Base\Model">
            <type by_reference="false">\ezp\Base\Model</type>
          </tag>
          <tag line="129" name="throws" description="If one of the properties in $state is not found" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$state</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base\Proxy" line="155" package="Default">
        <name>getState</name>
        <type>function</type>
        <docblock line="145">
          <description><![CDATA[Gets internal variables on object as array]]></description>
          <long-description><![CDATA[<p>Key is property name and value is property value.</p>]]></long-description>
          <tag line="145" name="access" description="private"/>
          <tag line="145" name="param" description="Optional, lets you specify to only return one property by name" type="string|null" variable="$property">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="145" name="return" description="Array if $property is null, else value of property" type="array|mixed">
            <type by_reference="false">array</type>
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="145" name="throws" description="If $property is not found (when not null)" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="155">
          <name>$property</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Observable.php" hash="19d2ad1b554825b9ac4817c6679ddaff">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Observable.php</error>
    </parse_markers>
    <interface namespace="ezp\Base" line="16" package="Default">
      <name>Observable// extends \SplSubject</name>
      <full_name>\Observable// extends \SplSubject</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Interface for observables (subjects)]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="25" package="Default">
        <name>attach</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Attach a event listener to this subject]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="" type="\ezp\Base\Observer" variable="$observer">
            <type by_reference="false">\ezp\Base\Observer</type>
          </tag>
          <tag line="18" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="18" name="return" description="" type="\ezp\Base\Observable">
            <type by_reference="false">\ezp\Base\Observable</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$observer</name>
          <default><![CDATA[]]></default>
          <type>Observer</type>
        </argument>
        <argument line="25">
          <name>$event</name>
          <default><![CDATA['update']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="34" package="Default">
        <name>detach</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Detach a event listener to this subject]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="\ezp\Base\Observer" variable="$observer">
            <type by_reference="false">\ezp\Base\Observer</type>
          </tag>
          <tag line="27" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="27" name="return" description="" type="\ezp\Base\Observable">
            <type by_reference="false">\ezp\Base\Observable</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$observer</name>
          <default><![CDATA[]]></default>
          <type>Observer</type>
        </argument>
        <argument line="34">
          <name>$event</name>
          <default><![CDATA['update']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="43" package="Default">
        <name>notify</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Notify listeners about certain events, by default a 'update' event]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="param" description="" type="array|null" variable="$arguments">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="36" name="return" description="" type="\ezp\Base\Observable">
            <type by_reference="false">\ezp\Base\Observable</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$event</name>
          <default><![CDATA['update']]></default>
          <type/>
        </argument>
        <argument line="43">
          <name>$arguments</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Base/Repository.php" hash="b08c041209aa8e774896535e786160cb">
    <parse_markers>
      <error line="58" code="50014">Name of argument $persistenceHandler does not match with the DocBlock's name $handler in __construct()</error>
      <error line="58" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $persistenceHandler in __construct()</error>
      <error line="58" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $ioHandler in __construct()</error>
      <error line="58" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in __construct()</error>
      <notice line="58" code="50013">Parameter $handler could not be found in __construct()</notice>
      <error line="92" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in setUser()</error>
      <error line="110" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $model in canUser()</error>
      <error line="110" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $assignment in canUser()</error>
      <notice line="261" code="50017">The type for the @return tag in getTrashService() is "type"; isn't this an IDE default?</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Repository.php</error>
    </parse_markers>
    <namespace-alias name="PersistenceHandler">ezp\Persistence\Handler</namespace-alias>
    <namespace-alias name="RuntimeException">RuntimeException</namespace-alias>
    <namespace-alias name="DomainException">DomainException</namespace-alias>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="BadConfiguration">ezp\Base\Exception\BadConfiguration</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="ModelDefinition">ezp\Base\ModelDefinition</namespace-alias>
    <namespace-alias name="ModelState">ezp\Base\ModelState</namespace-alias>
    <namespace-alias name="IoHandler">ezp\Io\Handler</namespace-alias>
    <namespace-alias name="User">ezp\User</namespace-alias>
    <namespace-alias name="ProxyUser">ezp\User\Proxy</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Base" line="28" package="Default">
      <name>Repository</name>
      <full_name>\ezp\Base\Repository</full_name>
      <extends/>
      <docblock line="24">
        <description><![CDATA[Repository class]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$persistenceHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Repository Handler object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="\ezp\Persistence\Handler">
            <type by_reference="false">\ezp\Persistence\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$ioHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[Io Handler object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="\ezp\Io\Handler">
            <type by_reference="false">\ezp\Io\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" package="Default">
        <name>$user</name>
        <default><![CDATA[]]></default>
        <docblock line="44">
          <description><![CDATA[Currently logged in user object for permission purposes]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="" type="\ezp\User">
            <type by_reference="false">\ezp\User</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" package="Default">
        <name>$services</name>
        <default><![CDATA[array()]]></default>
        <docblock line="51">
          <description><![CDATA[Instances of services]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="var" description="" type="\ezp\Base\Service[]">
            <type by_reference="false">\ezp\Base\Service[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="67" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[<p>Construct repository object with provided storage engine</p>]]></long-description>
          <tag line="58" name="param" description="" type="\ezp\Persistence\Handler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Handler</type>
          </tag>
          <tag line="58" name="param" description="" type="\ezp\Io\Handler" variable="$ioHandler">
            <type by_reference="false">\ezp\Io\Handler</type>
          </tag>
          <tag line="58" name="param" description="" type="\ezp\User|null" variable="$user">
            <type by_reference="false">\ezp\User</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$persistenceHandler</name>
          <default><![CDATA[]]></default>
          <type>PersistenceHandler</type>
        </argument>
        <argument line="67">
          <name>$ioHandler</name>
          <default><![CDATA[]]></default>
          <type>IoHandler</type>
        </argument>
        <argument line="67">
          <name>$user</name>
          <default><![CDATA[null]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="87" package="Default">
        <name>getUser</name>
        <type>function</type>
        <docblock line="82">
          <description><![CDATA[Get current user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="return" description="" type="\ezp\User">
            <type by_reference="false">\ezp\User</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="100" package="Default">
        <name>setUser</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Set current user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="" type="\ezp\User" variable="$user">
            <type by_reference="false">\ezp\User</type>
          </tag>
          <tag line="92" name="throws" description="If provided user does not have a valid id value" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="92" name="todo" description="throw something if $user is not persisted to backend (not stored)"/>
          <tag line="92" name="return" description="Old user" type="\ezp\User">
            <type by_reference="false">\ezp\User</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="122" package="Default">
        <name>canUser</name>
        <type>function</type>
        <docblock line="110">
          <description><![CDATA[Check if current user has access to a certain function on a model]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="param" description="Eg: read, move, create" type="string" variable="$function">
            <type by_reference="false">string</type>
          </tag>
          <tag line="110" name="param" description="An model instance" type="\ezp\Base\ModelDefinition" variable="$model">
            <type by_reference="false">\ezp\Base\ModelDefinition</type>
          </tag>
          <tag line="110" name="param" description="An additional model instance in cases like 'assign' and so on" type="\ezp\Base\ModelState" variable="$assignment">
            <type by_reference="false">\ezp\Base\ModelState</type>
          </tag>
          <tag line="110" name="param" description="Optional array by reference that will contain limitations that denied access for debug use" type="array" variable="$deniedBy">
            <type by_reference="false">array</type>
          </tag>
          <tag line="110" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="110" name="throws" description="On invalid $function value" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="110" name="throws" description="On missing __module__ in $model::defintion()" type="\ezp\Base\Exception\BadConfiguration">
            <type by_reference="false">\ezp\Base\Exception\BadConfiguration</type>
          </tag>
          <tag line="110" name="throws" description="On limitation used in policies but not in $model::defintion()" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
        </docblock>
        <argument line="122">
          <name>$function</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="122">
          <name>$model</name>
          <default><![CDATA[]]></default>
          <type>ModelDefinition</type>
        </argument>
        <argument line="122">
          <name>$assignment</name>
          <default><![CDATA[null]]></default>
          <type>ModelState</type>
        </argument>
        <argument line="122">
          <name>$deniedBy</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base" line="194" package="Default">
        <name>service</name>
        <type>function</type>
        <docblock line="187">
          <description><![CDATA[Handles class loading for service objects]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="187" name="param" description="" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="187" name="return" description="" type="\ezp\Base\Service">
            <type by_reference="false">\ezp\Base\Service</type>
          </tag>
          <tag line="187" name="throws" description="" type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
        </docblock>
        <argument line="194">
          <name>$className</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="219" package="Default">
        <name>getContentService</name>
        <type>function</type>
        <docblock line="211">
          <description><![CDATA[Get Content Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Content objects and it's aggregate members.
( ContentLocation, ContentVersion, ContentField )</p>]]></long-description>
          <tag line="211" name="return" description="" type="\ezp\Content\Service">
            <type by_reference="false">\ezp\Content\Service</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="231" package="Default">
        <name>getContentLanguageService</name>
        <type>function</type>
        <docblock line="224">
          <description><![CDATA[Get Content Language Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Content language objects</p>]]></long-description>
          <tag line="224" name="return" description="" type="\ezp\Content\Language\Service">
            <type by_reference="false">\ezp\Content\Language\Service</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="244" package="Default">
        <name>getContentTypeService</name>
        <type>function</type>
        <docblock line="236">
          <description><![CDATA[Get Content Type Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Content Type objects and it's aggregate members.
( Group, Field &amp; FieldCategory )</p>]]></long-description>
          <tag line="236" name="return" description="" type="\ezp\Content\Type\Service">
            <type by_reference="false">\ezp\Content\Type\Service</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="256" package="Default">
        <name>getLocationService</name>
        <type>function</type>
        <docblock line="249">
          <description><![CDATA[Get Content Location Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on Location objects and subtrees</p>]]></long-description>
          <tag line="249" name="return" description="" type="\ezp\Content\Location\Service">
            <type by_reference="false">\ezp\Content\Location\Service</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="269" package="Default">
        <name>getTrashService</name>
        <type>function</type>
        <docblock line="261">
          <description><![CDATA[Get Content Trash service]]></description>
          <long-description><![CDATA[<p>Trash service allows to perform operations related to location trash
(trash/untrash, load/list from trash...)</p>]]></long-description>
          <tag line="261" name="return" description="\ezp\Content\Location\Trash\Service" type="\ezp\Base\type">
            <type by_reference="false">\ezp\Base\type</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="281" package="Default">
        <name>getSectionService</name>
        <type>function</type>
        <docblock line="274">
          <description><![CDATA[Get Content Section Service]]></description>
          <long-description><![CDATA[<p>Get Section service that lets you manipulate section objects</p>]]></long-description>
          <tag line="274" name="return" description="" type="\ezp\Content\Section\Service">
            <type by_reference="false">\ezp\Content\Section\Service</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="293" package="Default">
        <name>getIoService</name>
        <type>function</type>
        <docblock line="286">
          <description><![CDATA[Get Io Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on binary files</p>]]></long-description>
          <tag line="286" name="return" description="" type="\ezp\Io\Service">
            <type by_reference="false">\ezp\Io\Service</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="306" package="Default">
        <name>getUserService</name>
        <type>function</type>
        <docblock line="298">
          <description><![CDATA[Get User Service]]></description>
          <long-description><![CDATA[<p>Get service object to perform operations on User objects and it's aggregate members.
( UserGroups, UserRole, UserRolePolicy &amp; UserRolePolicyLimitation )</p>]]></long-description>
          <tag line="298" name="return" description="" type="\ezp\User\Service">
            <type by_reference="false">\ezp\User\Service</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="320" package="Default">
        <name>getInternalFieldTypeService</name>
        <type>function</type>
        <docblock line="311">
          <description><![CDATA[Get internal field type service.]]></description>
          <long-description><![CDATA[<p>Internal api for use by certain Field types</p>]]></long-description>
          <tag line="311" name="internal" description=""/>
          <tag line="311" name="access" description="private"/>
          <tag line="311" name="return" description="" type="\ezp\Content\FieldType\Service">
            <type by_reference="false">\ezp\Content\FieldType\Service</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="331" package="Default">
        <name>beginTransaction</name>
        <type>function</type>
        <docblock line="325">
          <description><![CDATA[Begin transaction]]></description>
          <long-description><![CDATA[<p>Begins an transaction, make sure you'll call commit or rollback when done,
otherwise work will be lost.</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="343" package="Default">
        <name>commit</name>
        <type>function</type>
        <docblock line="336">
          <description><![CDATA[Commit transaction]]></description>
          <long-description><![CDATA[<p>Commit transaction, or throw exceptions if no transactions has been started.</p>]]></long-description>
          <tag line="336" name="throws" description="If no transaction has been started" type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="355" package="Default">
        <name>rollback</name>
        <type>function</type>
        <docblock line="348">
          <description><![CDATA[Rollback transaction]]></description>
          <long-description><![CDATA[<p>Rollback transaction, or throw exceptions if no transactions has been started.</p>]]></long-description>
          <tag line="348" name="throws" description="If no transaction has been started" type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Model.php" hash="09dcb84e8d45bdf6470ee7230a1bf461">
    <parse_markers>
      <error line="103" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $observer in attach()</error>
      <error line="123" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $observer in detach()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Model.php</error>
    </parse_markers>
    <namespace-alias name="Observable">ezp\Base\Observable</namespace-alias>
    <namespace-alias name="Observer">ezp\Base\Observer</namespace-alias>
    <namespace-alias name="ModelState">ezp\Base\ModelState</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <namespace-alias name="PropertyPermission">ezp\Base\Exception\PropertyPermission</namespace-alias>
    <namespace-alias name="Traversable">Traversable</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Base" line="50" package="Default">
      <name>Model</name>
      <full_name>\ezp\Base\Model</full_name>
      <extends/>
      <extends>\ezp\Base\Observable</extends>
      <extends>\ezp\Base\ModelState</extends>
      <docblock line="20">
        <description><![CDATA[Abstract model class for Domain objects]]></description>
        <long-description><![CDATA[<p>NOTE: Class is ATM meant for Domain Objects that uses a ValueObject as property backend, in other
words a "Persistent" Object. So instead of using this class in other cases, a base class should be
created that contains the functionality such objects needs, and Model should extend it.</p>

<ul>
<li><p>Simple class:</p>

<p>class Section extends Model
{
    protected $readWriteProperties = array(
        'id' => false,
        'identifier' => true,
        'name' => true,
    );</p>

<pre><code>public function __construct()
{
    $this-&gt;properties = new SectionValue();
}
</code></pre>

<p>}</p></li>
<li><p>Use when setting up object based on existing value object:</p>

<p>$section = new Section();
$section->setState( array( 'properties' => $valueObject ) );</p></li>
</ul>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="57" package="Default">
        <name>$properties</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[Value object that serves as the property store]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="\ezp\Persistence\ValueObject">
            <type by_reference="false">\ezp\Persistence\ValueObject</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="67" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[]]></default>
        <docblock line="59">
          <description><![CDATA[Array indicates which properties are readable & writable through
the magic getter and setter.]]></description>
          <long-description><![CDATA[<p>Key is property name, value is bool indicating if property is writable.</p>]]></long-description>
          <tag line="59" name="todo" description="should mention that no type checking is done internal props.?"/>
          <tag line="59" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="84" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array()]]></default>
        <docblock line="69">
          <description><![CDATA[Array container for virtual properties, handled dynamically by methods
Key is property name, value is a bool, true if member of aggregate, false if not.]]></description>
          <long-description><![CDATA[<p>Corresponding get method name must follow pattern get<propertyName>().
The method will be called without any parameter
e.g. : for a dynamic property named "myProperty", method should be "getMyProperty()".</p>

<p>If the dynamic property is writable, a set method should be defined.
Corresponding set method name must follow pattern set<propertyName>( $value ).
The method will be called with only one $value parameter.
e.g. : for a dynamic property named "myProperty", method should be "setMyProperty( $value )"</p>]]></long-description>
          <tag line="69" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="91" package="Default">
        <name>$observers</name>
        <default><![CDATA[array()]]></default>
        <docblock line="86">
          <description><![CDATA[List of event listeners]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="var" description="" type="\ezp\Base\Observer[]">
            <type by_reference="false">\ezp\Base\Observer[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="98" package="Default">
        <name>properties</name>
        <type>function</type>
        <docblock line="93">
          <description><![CDATA[Return list of properties, where key is properties and value depends on type and is internal so should be ignored for now.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="110" package="Default">
        <name>attach</name>
        <type>function</type>
        <docblock line="103">
          <description><![CDATA[Attaches $observer for $event to the Model]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="param" description="" type="\ezp\Base\Observer" variable="$observer">
            <type by_reference="false">\ezp\Base\Observer</type>
          </tag>
          <tag line="103" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="103" name="return" description="" type="\ezp\Base\Model">
            <type by_reference="false">\ezp\Base\Model</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$observer</name>
          <default><![CDATA[]]></default>
          <type>Observer</type>
        </argument>
        <argument line="110">
          <name>$event</name>
          <default><![CDATA['update']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="130" package="Default">
        <name>detach</name>
        <type>function</type>
        <docblock line="123">
          <description><![CDATA[Detaches $observer for $event from the Model]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="123" name="param" description="" type="\ezp\Base\Observer" variable="$observer">
            <type by_reference="false">\ezp\Base\Observer</type>
          </tag>
          <tag line="123" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="123" name="return" description="" type="\ezp\Base\Model">
            <type by_reference="false">\ezp\Base\Model</type>
          </tag>
        </docblock>
        <argument line="130">
          <name>$observer</name>
          <default><![CDATA[]]></default>
          <type>Observer</type>
        </argument>
        <argument line="130">
          <name>$event</name>
          <default><![CDATA['update']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="150" package="Default">
        <name>notify</name>
        <type>function</type>
        <docblock line="143">
          <description><![CDATA[Notifies registered observers about $event]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="143" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="143" name="param" description="" type="array|null" variable="$arguments">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="143" name="return" description="" type="\ezp\Base\Model">
            <type by_reference="false">\ezp\Base\Model</type>
          </tag>
        </docblock>
        <argument line="150">
          <name>$event</name>
          <default><![CDATA['update']]></default>
          <type/>
        </argument>
        <argument line="150">
          <name>$arguments</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="169" package="Default">
        <name>__get</name>
        <type>function</type>
        <docblock line="162">
          <description><![CDATA[Magic getter]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="162" name="param" description="Property name" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="162" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="162" name="throws" description="If $property cannot be found" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="201" package="Default">
        <name>__set</name>
        <type>function</type>
        <docblock line="191">
          <description><![CDATA[Magic setter]]></description>
          <long-description><![CDATA[<p>Avoids to modify read-only properties</p>]]></long-description>
          <tag line="191" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="191" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="191" name="throws" description="If $property cannot be found" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="191" name="throws" description="When trying to set a value to a read-only property" type="\ezp\Base\Exception\PropertyPermission">
            <type by_reference="false">\ezp\Base\Exception\PropertyPermission</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="201">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="222" package="Default">
        <name>__isset</name>
        <type>function</type>
        <docblock line="216">
          <description><![CDATA[Checks if a public virtual property is set]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="216" name="param" description="Property name" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="216" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="222">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="238" package="Default">
        <name>setState</name>
        <type>function</type>
        <docblock line="228">
          <description><![CDATA[Sets internal variables on object from array]]></description>
          <long-description><![CDATA[<p>Key is property name and value is property value.</p>]]></long-description>
          <tag line="228" name="internal" description=""/>
          <tag line="228" name="param" description="" type="array" variable="$state">
            <type by_reference="false">array</type>
          </tag>
          <tag line="228" name="return" description="" type="\ezp\Base\Model">
            <type by_reference="false">\ezp\Base\Model</type>
          </tag>
          <tag line="228" name="throws" description="If one of the properties in $state is not found" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="238">
          <name>$state</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="260" package="Default">
        <name>getState</name>
        <type>function</type>
        <docblock line="250">
          <description><![CDATA[Gets internal variables on object as array]]></description>
          <long-description><![CDATA[<p>Key is property name and value is property value.</p>]]></long-description>
          <tag line="250" name="internal" description=""/>
          <tag line="250" name="param" description="Optional, lets you specify to only return one property by name" type="string|null" variable="$property">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="250" name="return" description="Array if $property is null, else value of property" type="array|mixed">
            <type by_reference="false">array</type>
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="250" name="throws" description="If $property is not found (when not null)" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="260">
          <name>$property</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="286" package="Default">
        <name>fromHash</name>
        <type>function</type>
        <docblock line="280">
          <description><![CDATA[Set properties with hash]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="280" name="param" description="Where key is property name and value if set is value to set on property" type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="280" name="return" description="Return $this" type="\ezp\Base\Model">
            <type by_reference="false">\ezp\Base\Model</type>
          </tag>
        </docblock>
        <argument line="286">
          <name>$properties</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="326" package="Default">
        <name>toHash</name>
        <type>function</type>
        <docblock line="320">
          <description><![CDATA[Get properties as hash]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="320" name="param" description="Include properties that are readOnly as well." type="bool" variable="$includeReadOnly">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="320" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="326">
          <name>$includeReadOnly</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="367" package="Default">
        <name>__clone</name>
        <type>function</type>
        <docblock line="362">
          <description><![CDATA[Clone object]]></description>
          <long-description><![CDATA[<p>Objects extending Model should override this to add additional clone logic</p>]]></long-description>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Service.php" hash="6f48d20bda5b105005a46167f76ed3ae">
    <parse_markers>
      <critical line="23" code="50019">No short description for property $repository</critical>
      <critical line="28" code="50019">No short description for property $handler</critical>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $repository in __construct()</error>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $handler in __construct()</error>
      <error line="45" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in fillStruct()</error>
      <error line="45" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $do in fillStruct()</error>
      <error line="86" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in setPropertyByConvention()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Service.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="Repository">ezp\Base\Repository</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <namespace-alias name="Handler">ezp\Persistence\Handler</namespace-alias>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Base" line="21" package="Default">
      <name>Service</name>
      <full_name>\ezp\Base\Service</full_name>
      <extends/>
      <docblock line="17">
        <description><![CDATA[Abstract Repository Services]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" package="Default">
        <name>$repository</name>
        <default><![CDATA[]]></default>
        <docblock line="23">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="\ezp\Base\Repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="31" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="28">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="\ezp\Persistence\Handler">
            <type by_reference="false">\ezp\Persistence\Handler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="39" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Setups service with reference to repository object that created it & corresponding handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="" type="\ezp\Base\Repository" variable="$repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Handler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Handler</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>Repository</type>
        </argument>
        <argument line="39">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>Handler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base" line="55" package="Default">
        <name>fillStruct</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[General method to fill in property values in struct from model->property values]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="" type="\ezp\Persistence\ValueObject" variable="$struct">
            <type by_reference="false">\ezp\Persistence\ValueObject</type>
          </tag>
          <tag line="45" name="param" description="" type="\ezp\Base\Model" variable="$do">
            <type by_reference="false">\ezp\Base\Model</type>
          </tag>
          <tag line="45" name="param" description="List of properties that is optional" type="array" variable="$optionalProperties">
            <type by_reference="false">array</type>
          </tag>
          <tag line="45" name="throws" description="If property is missing, has a value of null and {@link setPropertyByConvention()} returns false." type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="45" name="uses" description="\ezp\Base\setPropertyByConvention()" refers="\ezp\Base\setPropertyByConvention()"/>
        </docblock>
        <argument line="55">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>ValueObject</type>
        </argument>
        <argument line="55">
          <name>$do</name>
          <default><![CDATA[]]></default>
          <type>Model</type>
        </argument>
        <argument line="55">
          <name>$optionalProperties</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base" line="100" package="Default">
        <name>setPropertyByConvention</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[General method to fill in property value by convention]]></description>
          <long-description><![CDATA[<p>Properties filled by convention:
    - remoteId
    - created
    - modified
    - creatorId
    - modifierId</p>]]></long-description>
          <tag line="86" name="param" description="" type="\ezp\Persistence\ValueObject" variable="$struct">
            <type by_reference="false">\ezp\Persistence\ValueObject</type>
          </tag>
          <tag line="86" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="86" name="return" description="False if no property was set by convention" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>ValueObject</type>
        </argument>
        <argument line="100">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Base/Override.php" hash="27c3188554ff4d144f89212432406ecc">
    <parse_markers>
      <error line="18" code="50000">No DocBlock was found for Override</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Base/Override.php</error>
    </parse_markers>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Base" line="18">
      <name>Override</name>
      <full_name>\ezp\Base\Override</full_name>
      <extends/>
      <property final="false" static="true" visibility="protected" line="25" package="Default">
        <name>$globalPaths</name>
        <default><![CDATA[array(
        //'base' => array( 'settings/' ),
        //'modules' => array(),
        //'siteaccess' => array(),
        //'global' => array( 'settings/override/' ),
    )]]></default>
        <docblock line="20">
          <description><![CDATA[The global path array, scoped in the order they should be parsed]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="38" package="Default">
        <name>$globalPathsHash</name>
        <default><![CDATA['']]></default>
        <docblock line="32">
          <description><![CDATA[The global path array md5 hash, for use in cache names.]]></description>
          <long-description><![CDATA[<p>Empty if it needs to be regenerated</p>]]></long-description>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="46" package="Default">
        <name>$paths</name>
        <default><![CDATA[array()]]></default>
        <docblock line="40">
          <description><![CDATA[The instance path array, scoped in the order they should be parsed
Set by {@link Override::initPaths()}]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="54" package="Default">
        <name>$pathsHash</name>
        <default><![CDATA['']]></default>
        <docblock line="48">
          <description><![CDATA[The instance configuration path array md5 hash, for use in cache names.]]></description>
          <long-description><![CDATA[<p>Empty if it needs to be regenerated</p>]]></long-description>
          <tag line="48" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base" line="62" package="Default">
        <name>initPaths</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Init paths by ref or copy]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="param" description="Tells function to assign global paths by reference or not, if true then changes to global paths will affect paths on this object directly" type="bool" variable="$byRef">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$byRef</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Base" line="83" package="Default">
        <name>getGlobalDirs</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Get raw global override path list data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="throws" description="If scope has wrong value" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="76" name="param" description="See {@link $globalPaths} for scope values (first level keys)" type="string" variable="$scope">
            <type by_reference="false">string</type>
          </tag>
          <tag line="76" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$scope</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Base" line="102" package="Default">
        <name>setGlobalDirs</name>
        <type>function</type>
        <docblock line="93">
          <description><![CDATA[Set raw global override path list data.]]></description>
          <long-description><![CDATA[<p>Warning: Does not invalidate path hash on instances!</p>]]></long-description>
          <tag line="93" name="throws" description="If scope has wrong value" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="93" name="param" description="" type="array" variable="$paths">
            <type by_reference="false">array</type>
          </tag>
          <tag line="93" name="param" description="See {@link $globalPaths} for scope values (first level keys)" type="string" variable="$scope">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$paths</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="102">
          <name>$scope</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="124" package="Default">
        <name>getDirs</name>
        <type>function</type>
        <docblock line="117">
          <description><![CDATA[Get raw instance override path list data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="117" name="throws" description="If scope has wrong value" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="117" name="param" description="See {@link $globalPaths} for scope values (first level keys)" type="string" variable="$scope">
            <type by_reference="false">string</type>
          </tag>
          <tag line="117" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$scope</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Base" line="142" package="Default">
        <name>setDirs</name>
        <type>function</type>
        <docblock line="134">
          <description><![CDATA[Set raw instance override path list data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="134" name="throws" description="If scope has wrong value" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="134" name="param" description="" type="array" variable="$paths">
            <type by_reference="false">array</type>
          </tag>
          <tag line="134" name="param" description="See {@link $globalPaths} for scope values (first level keys)" type="string" variable="$scope">
            <type by_reference="false">string</type>
          </tag>
          <tag line="134" name="return" description="Return true if cache hash was cleared, indicating reload is needed" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$paths</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="142">
          <name>$scope</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Base" line="175" package="Default">
        <name>pathsHash</name>
        <type>function</type>
        <docblock line="170">
          <description><![CDATA[Get cache hash based on override dirs]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="170" name="return" description="md5 hash" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content.php" hash="150371c706290fedd9cece469365bc91">
    <parse_markers>
      <error line="117" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $section in setSection()</error>
      <error line="131" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $owner in setOwner()</error>
      <error line="145" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $parentLocation in addParent()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content.php</error>
    </parse_markers>
    <namespace-alias name="Section">ezp\Content\Section</namespace-alias>
    <namespace-alias name="Location">ezp\Content\Location</namespace-alias>
    <namespace-alias name="ModelDefinition">ezp\Base\ModelDefinition</namespace-alias>
    <namespace-alias name="User">ezp\User</namespace-alias>
    <interface namespace="ezp" line="71" package="Default">
      <name>Content</name>
      <full_name>\ezp\Content</full_name>
      <extends>\ezp\Base\ModelDefinition</extends>
      <docblock line="16">
        <description><![CDATA[This interface represents a Content item]]></description>
        <long-description><![CDATA[<p>It is used for both input and output manipulation.</p>]]></long-description>
        <tag line="16" name="property-read" description="The Content's ID, automatically assigned by the persistence layer" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="The Content's current version" type="int" variable="$currentVersionNo">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="The Content's status, as one of the ezp\Content::STATUS_* constants" type="int" variable="$status">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="Id of the user object that owns the content" type="mixed" variable="$ownerId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="The Content's always available flag" type="bool" variable="$alwaysAvailable">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="16" name="property-read" description="The Content's remote identifier (custom identifier for the object)" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property-read" description="Read property for section id, use with object $section to change" type="mixed" variable="$sectionId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="Read property for type id" type="mixed" variable="$typeId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="The Content's type" type="\ezp\Content\Type" variable="$contentType">
          <type by_reference="false">\ezp\Content\Type</type>
        </tag>
        <tag line="16" name="property-read" description="Iterable collection of versions for content. Array-accessible :; &lt;code&gt; $myFirstVersion = $content-&gt;versions[1]; $myThirdVersion = $content-&gt;versions[3]; &lt;/code&gt;" type="\ezp\Content\Version[]" variable="$versions">
          <type by_reference="false">\ezp\Content\Version[]</type>
        </tag>
        <tag line="16" name="property-read" description="Current version of content" type="\ezp\Content\Version" variable="$currentVersion">
          <type by_reference="false">\ezp\Content\Version</type>
        </tag>
        <tag line="16" name="property-read" description="" type="\ezp\Content\Location" variable="$mainLocation">
          <type by_reference="false">\ezp\Content\Location</type>
        </tag>
        <tag line="16" name="property-read" description="Locations for content. Iterable, countable and Array-accessible (with numeric indexes) First location referenced in the collection represents the main location for content &lt;code&gt; $mainLocation = $content-&gt;locations[0]; $anotherLocation = $content-&gt;locations[2]; $locationById = $content-&gt;locations-&gt;byId( 60 ); &lt;/code&gt;" type="\ezp\Content\Location[]" variable="$locations">
          <type by_reference="false">\ezp\Content\Location[]</type>
        </tag>
        <tag line="16" name="property-read" description="The date the object was created" type="\ezp\DateTime" variable="$creationDate">
          <type by_reference="false">\ezp\DateTime</type>
        </tag>
        <tag line="16" name="property-read" description="The Section the content belongs to" type="\ezp\Content\Section" variable="$section">
          <type by_reference="false">\ezp\Content\Section</type>
        </tag>
        <tag line="16" name="property-read" description="Collection of \ezp\Content\Relation objects, related to the current one" type="\ezp\Content\Relation[]" variable="$relations">
          <type by_reference="false">\ezp\Content\Relation[]</type>
        </tag>
        <tag line="16" name="property-read" description="Collection of \ezp\Content\Relation objects, reverse-related to the current one" type="\ezp\Content\Relation[]" variable="$reverseRelations">
          <type by_reference="false">\ezp\Content\Relation[]</type>
        </tag>
        <tag line="16" name="property-read" description="Collection of content's translations, indexed by locale (ie. eng-GB) &lt;code&gt; $myEnglishTranslation = $content-&gt;translations[&quot;eng-GB&quot;]; $myEnglishTitle = $content-&gt;translations[&quot;eng-GB&quot;]-&gt;fields-&gt;title; // Where &quot;title&quot; is the field identifier &lt;/code&gt;" type="\ezp\Content\Translation[]" variable="$translations">
          <type by_reference="false">\ezp\Content\Translation[]</type>
        </tag>
        <tag line="16" name="property-read" description="Collection of content's fields in default (current) language. Shorthand property to directly access to the content's fields in current language &lt;code&gt; $myTitle = $content-&gt;fields-&gt;title; // Where &quot;title&quot; is the field identifier &lt;/code&gt;" type="\ezp\Content\Field[]" variable="$fields">
          <type by_reference="false">\ezp\Content\Field[]</type>
        </tag>
        <tag line="16" name="property-read" description="Owner identifier" type="int" variable="$ownerId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property" description="Owner user object" type="\ezp\User" variable="$owner">
          <type by_reference="false">\ezp\User</type>
        </tag>
        <tag line="16" name="property-read" description="The id of the language the Content was initially created in. Set using {@see setInitialLanguage()}" type="mixed" variable="$initialLanguageId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="The language the Content was initially created in" type="\ezp\Content\Language" variable="$initialLanguage">
          <type by_reference="false">\ezp\Content\Language</type>
        </tag>
      </docblock>
      <constant namespace="ezp" line="77" package="Default">
        <name>STATUS_DRAFT</name>
        <value><![CDATA[0]]></value>
        <docblock line="73">
          <description><![CDATA[Publication status constants]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ezp" line="78">
        <name>STATUS_PUBLISHED</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="ezp" line="79">
        <name>STATUS_ARCHIVED</name>
        <value><![CDATA[2]]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="86" package="Default">
        <name>getMainLocation</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[Return Main location object on this Content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="return" description="" type="\ezp\Content\Location|null">
            <type by_reference="false">\ezp\Content\Location</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="93" package="Default">
        <name>getVersions</name>
        <type>function</type>
        <docblock line="88">
          <description><![CDATA[Return a collection containing all available versions of the Content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="return" description="" type="\ezp\Content\Version[]">
            <type by_reference="false">\ezp\Content\Version[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="100" package="Default">
        <name>getCurrentVersion</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Find current version amongst version objects]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="return" description="" type="\ezp\Content\Version|null">
            <type by_reference="false">\ezp\Content\Version</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="107" package="Default">
        <name>getContentType</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Return Type object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="return" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="115" package="Default">
        <name>getFields</name>
        <type>function</type>
        <docblock line="109">
          <description><![CDATA[Get fields of current version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="109" name="todo" description="Do we really want/need this shortcut?"/>
          <tag line="109" name="return" description="" type="\ezp\Content\Field[]">
            <type by_reference="false">\ezp\Content\Field[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="122" package="Default">
        <name>setSection</name>
        <type>function</type>
        <docblock line="117">
          <description><![CDATA[Sets the Section the Content belongs to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="117" name="param" description="" type="\ezp\Content\Section" variable="$section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
        </docblock>
        <argument line="122">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="129" package="Default">
        <name>getSection</name>
        <type>function</type>
        <docblock line="124">
          <description><![CDATA[Returns the Section the Content belongs to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="return" description="" type="\ezp\Content\Section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="136" package="Default">
        <name>setOwner</name>
        <type>function</type>
        <docblock line="131">
          <description><![CDATA[Sets the Owner the Content belongs to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="131" name="param" description="" type="\ezp\User" variable="$owner">
            <type by_reference="false">\ezp\User</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$owner</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="143" package="Default">
        <name>getOwner</name>
        <type>function</type>
        <docblock line="138">
          <description><![CDATA[Returns the User the Content is owned by]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="138" name="return" description="" type="\ezp\User">
            <type by_reference="false">\ezp\User</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="151" package="Default">
        <name>addParent</name>
        <type>function</type>
        <docblock line="145">
          <description><![CDATA[Adds a new location to content under an existing one.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="145" name="param" description="" type="\ezp\Content\Location" variable="$parentLocation">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="145" name="return" description="" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
        </docblock>
        <argument line="151">
          <name>$parentLocation</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="158" package="Default">
        <name>getLocations</name>
        <type>function</type>
        <docblock line="153">
          <description><![CDATA[Gets locations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="153" name="return" description="" type="\ezp\Content\Location[]">
            <type by_reference="false">\ezp\Content\Location[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="165" package="Default">
        <name>getRelations</name>
        <type>function</type>
        <docblock line="160">
          <description><![CDATA[Gets Content relations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="160" name="return" description="" type="\ezp\Content[]">
            <type by_reference="false">\ezp\Content[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="172" package="Default">
        <name>getReverseRelations</name>
        <type>function</type>
        <docblock line="167">
          <description><![CDATA[Gets Content reverse relations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="167" name="return" description="" type="\ezp\Content[]">
            <type by_reference="false">\ezp\Content[]</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/Content/Type.php" hash="fb998b3172f6d19b308db1f78570ef64">
    <parse_markers>
      <error line="39" code="50012">No short description for method getFields()</error>
      <error line="44" code="50012">No short description for method getGroups()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Type.php</error>
    </parse_markers>
    <namespace-alias name="ModelDefinition">ezp\Base\ModelDefinition</namespace-alias>
    <interface namespace="ezp\Content" line="37" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\Type</full_name>
      <extends>\ezp\Base\ModelDefinition</extends>
      <docblock line="13">
        <description><![CDATA[Content Type interface]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="13" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="13" name="property-read" description="" type="int" variable="$status">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property" description="" type="\string[]" variable="$name">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="13" name="property" description="" type="\string[]" variable="$description">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="13" name="property" description="" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="13" name="property" description="" type="mixed" variable="$created">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="13" name="property" description="" type="mixed" variable="$creatorId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="13" name="property" description="" type="mixed" variable="$modified">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="13" name="property" description="" type="mixed" variable="$modifierId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="13" name="property-read" description="" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="13" name="property" description="" type="string" variable="$urlAliasSchema">
          <type by_reference="false">string</type>
        </tag>
        <tag line="13" name="property" description="" type="string" variable="$nameSchema">
          <type by_reference="false">string</type>
        </tag>
        <tag line="13" name="property" description="" type="bool" variable="$isContainer">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="13" name="property" description="" type="int" variable="$initialLanguageId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property" description="" type="bool" variable="$defaultAlwaysAvailable">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="13" name="property" description="Valid values are found at {@link \ezp\Content\Location::SORT_FIELD_*}" type="int" variable="$sortField">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property" description="Valid values are {@link \ezp\Content\Location::SORT_ORDER_*}" type="int" variable="$sortOrder">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property-read" description="" type="\int[]" variable="$groupIds">
          <type by_reference="false">\int[]</type>
        </tag>
        <tag line="13" name="property" description="Appending items after it has been created has no effect, use TypeService-&gt;addFieldDefinition()" type="\Type\FieldDefinition[]" variable="$fields">
          <type by_reference="false">\Type\FieldDefinition[]</type>
        </tag>
        <tag line="13" name="property-read" description="Appended items after it has been created has no effect, use TypeService-&gt;link()" type="\Type\Group[]" variable="$groups">
          <type by_reference="false">\Type\Group[]</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="42" package="Default">
        <name>getFields</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="return" description="" type="\ezp\Content\Type\FieldDefinition[]">
            <type by_reference="false">\ezp\Content\Type\FieldDefinition[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="47" package="Default">
        <name>getGroups</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="return" description="" type="\ezp\Content\Type\Group[]">
            <type by_reference="false">\ezp\Content\Type\Group[]</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/Content/FieldType.php" hash="c09a250cadd45865940b966867b7a8ba">
    <parse_markers>
      <critical line="45" code="50019">No short description for property $fieldSettings</critical>
      <error line="160" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="172" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in setValue()</error>
      <error line="250" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldTypeConstraints in fillConstraintsFromValidator()</error>
      <error line="250" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $validator in fillConstraintsFromValidator()</error>
      <error line="272" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $subject in update()</error>
      <error line="327" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $subject in onFieldSetValue()</error>
      <error line="327" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in onFieldSetValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType.php</error>
    </parse_markers>
    <namespace-alias name="Version">ezp\Content\Version</namespace-alias>
    <namespace-alias name="Field">ezp\Content\Field</namespace-alias>
    <namespace-alias name="FieldSettings">ezp\Content\FieldType\FieldSettings</namespace-alias>
    <namespace-alias name="Value">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="Validator">ezp\Content\FieldType\Validator</namespace-alias>
    <namespace-alias name="PersistenceFieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldTypeConstraints">ezp\Persistence\Content\FieldTypeConstraints</namespace-alias>
    <namespace-alias name="Observer">ezp\Base\Observer</namespace-alias>
    <namespace-alias name="Observable">ezp\Base\Observable</namespace-alias>
    <namespace-alias name="Repository">ezp\Base\Repository</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Content" line="43" package="Default">
      <name>FieldType</name>
      <full_name>\ezp\Content\FieldType</full_name>
      <extends/>
      <extends>\ezp\Base\Observer</extends>
      <docblock line="24">
        <description><![CDATA[Base class for field types, the most basic storage unit of data inside eZ Publish.]]></description>
        <long-description><![CDATA[<p>All other field types extend FieldType providing the specific functionality
desired in each case.</p>

<p>The capabilities supported by each individual field type is decided by which
interfaces the field type implements support for. These individual
capabilities can also be checked via the supports*() methods.</p>

<p>A field type are the base building blocks of Content Types, and serve as
data containers for Content objects. Therefore, while field types can be used
independently, they are designed to be used as a part of a Content object.</p>

<p>Field types are primed and pre-configured with the Field Definitions found in
Content Types.</p>]]></long-description>
        <tag line="24" name="todo" description="Merge and optimize concepts for settings, validator data and field type properties."/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="51" package="Default">
        <name>$fieldSettings</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="Custom properties which are specific to the field type. Typically these properties are used to configure behaviour of field types and normally set in the FieldDefinition on ContentTypes" type="\ezp\Content\FieldType\FieldSettings">
            <type by_reference="false">\ezp\Content\FieldType\FieldSettings</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="61" package="Default">
        <name>$allowedSettings</name>
        <default><![CDATA[array()]]></default>
        <docblock line="53">
          <description><![CDATA[The setting keys which are available on this field type.]]></description>
          <long-description><![CDATA[<p>The key is the setting name, and the value is the default value for given
setting, set to null if no particular default should be set.</p>]]></long-description>
          <tag line="53" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="75" package="Default">
        <name>$allowedValidators</name>
        <default><![CDATA[array()]]></default>
        <docblock line="63">
          <description><![CDATA[Validators which are supported for this field type.]]></description>
          <long-description><![CDATA[<p>Full Qualified Class Name should be registered here.
Example:</p>

<pre><code>protected $allowedValidators = array(
    "ezp\\Content\\FieldType\\BinaryFile\\FileSizeValidator"
);
</code></pre>]]></long-description>
          <tag line="63" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="82" package="Default">
        <name>$value</name>
        <default><![CDATA[]]></default>
        <docblock line="77">
          <description><![CDATA[Value of field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="var" description="" type="\ezp\Content\FieldType\Value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="87" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[Constructs field type object, initializing internal data structures.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="101" package="Default">
        <name>setFieldSetting</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Sets $value for $settingName on field type.]]></description>
          <long-description><![CDATA[<p>Allowed options are in {@link \ezp\Content\FieldType::$allowedSettings}</p>]]></long-description>
          <tag line="92" name="see" description="\ezp\Content\FieldType::$fieldSettings" refers="\ezp\Content\FieldType::$fieldSettings"/>
          <tag line="92" name="param" description="" type="string" variable="$settingName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="92" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="92" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$settingName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="101">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="113" package="Default">
        <name>getFieldSetting</name>
        <type>function</type>
        <docblock line="106">
          <description><![CDATA[Gets field setting identified by $settingName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="see" description="\ezp\Content\FieldType::$fieldSettings" refers="\ezp\Content\FieldType::$fieldSettings"/>
          <tag line="106" name="param" description="" type="string" variable="$settingName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="106" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$settingName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="126" package="Default">
        <name>initializeSettings</name>
        <type>function</type>
        <docblock line="118">
          <description><![CDATA[Set all settings on field type.]]></description>
          <long-description><![CDATA[<p>Useful to initialize field type from a field definition.</p>]]></long-description>
          <tag line="118" name="param" description="" type="array" variable="$values">
            <type by_reference="false">array</type>
          </tag>
          <tag line="118" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$values</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="136" package="Default">
        <name>getFieldTypeSettings</name>
        <type>function</type>
        <docblock line="131">
          <description><![CDATA[Return a copy of the array of fieldSettings.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="131" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="145" package="Default">
        <name>allowedSettings</name>
        <type>function</type>
        <docblock line="141">
          <description><![CDATA[Keys of settings which are available on this fieldtype.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="141" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="155" package="Default">
        <name>allowedValidators</name>
        <type>function</type>
        <docblock line="150">
          <description><![CDATA[Return an array of allowed validators to operate on this field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="150" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ezp\Content" line="170" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="160">
          <description><![CDATA[Checks if $inputValue can be parsed.]]></description>
          <long-description><![CDATA[<p>If the $inputValue actually can be parsed, the value is returned.
Otherwise, an \ezp\Base\Exception\BadFieldTypeInput exception is thrown</p>]]></long-description>
          <tag line="160" name="abstract" description=""/>
          <tag line="160" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="160" name="param" description="" type="\ezp\Content\FieldType\Value" variable="$inputValue">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
          <tag line="160" name="return" description="" type="\ezp\Content\FieldType\Value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
        </docblock>
        <argument line="170">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>Value</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="178" package="Default">
        <name>setValue</name>
        <type>function</type>
        <docblock line="172">
          <description><![CDATA[Injects the value of a field in the field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="172" name="param" description="" type="\ezp\Content\FieldType\Value" variable="$inputValue">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
          <tag line="172" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="178">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>Value</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="191" package="Default">
        <name>getValue</name>
        <type>function</type>
        <docblock line="183">
          <description><![CDATA[Returns the value of associated field.]]></description>
          <long-description><![CDATA[<p>If no value has yet been set, the default value of that field type is
returned.</p>]]></long-description>
          <tag line="183" name="return" description="" type="\ezp\Content\FieldType\Value|null">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ezp\Content" line="202" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="196">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="196" name="return" description="" type="\ezp\Content\FieldType\Value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="210" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="204">
          <description><![CDATA[Method to populate the FieldValue struct for field types]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="204" name="internal" description=""/>
          <tag line="204" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="protected" namespace="ezp\Content" line="248" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="224">
          <description><![CDATA[Returns information for PersistenceFieldValue->$sortKey relevant to the field type.]]></description>
          <long-description><![CDATA[<p>Return value is an array where key is the sort type, value is field value to be used for sorting.
Sort type can be :
 - sort_key_string (sorting will be made with a string algorithm)
 - sort_key_int (sorting will be made with an integer algorithm)</p>

<pre><code>protected function getSortInfo()
{
    // Example for a text line type:
    return array( 'sort_key_string' => $this->getValue()->text );

    // Example for an int:
    // return array( 'sort_key_int' => 123 );

    // Non sortable:
    // return false;
}
</code></pre>]]></long-description>
          <tag line="224" name="abstract" description=""/>
          <tag line="224" name="return" description="Array with sortInfo, or false if the Type doesn't support sorting" type="array|bool">
            <type by_reference="false">array</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="261" package="Default">
        <name>fillConstraintsFromValidator</name>
        <type>function</type>
        <docblock line="250">
          <description><![CDATA[Used by the FieldDefinition to populate the $fieldTypeConstraints->validators field.]]></description>
          <long-description><![CDATA[<p>If validator is not allowed for a given field type, no data from that
validator is populated to $constraints.</p>]]></long-description>
          <tag line="250" name="internal" description=""/>
          <tag line="250" name="param" description="" type="\ezp\Persistence\Content\FieldTypeConstraints" variable="$fieldTypeConstraints">
            <type by_reference="false">\ezp\Persistence\Content\FieldTypeConstraints</type>
          </tag>
          <tag line="250" name="param" description="" type="\ezp\Content\FieldType\Validator" variable="$validator">
            <type by_reference="false">\ezp\Content\FieldType\Validator</type>
          </tag>
          <tag line="250" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="261">
          <name>$fieldTypeConstraints</name>
          <default><![CDATA[]]></default>
          <type>FieldTypeConstraints</type>
        </argument>
        <argument line="261">
          <name>$validator</name>
          <default><![CDATA[]]></default>
          <type>Validator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="282" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="272">
          <description><![CDATA[Called when subject has been updated
Supported events:
  - field/setValue Should be triggered when a field has been set a value. Will inject the value in the field type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="272" name="param" description="" type="\ezp\Base\Observable" variable="$subject">
            <type by_reference="false">\ezp\Base\Observable</type>
          </tag>
          <tag line="272" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="272" name="param" description="" type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="272" name="throws" description="" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="282">
          <name>$subject</name>
          <default><![CDATA[]]></default>
          <type>Observable</type>
        </argument>
        <argument line="282">
          <name>$event</name>
          <default><![CDATA['update']]></default>
          <type/>
        </argument>
        <argument line="282">
          <name>$arguments</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content" line="343" package="Default">
        <name>onFieldSetValue</name>
        <type>function</type>
        <docblock line="327">
          <description><![CDATA[This method is called when a "field/setValue" event is triggered by $subject.]]></description>
          <long-description><![CDATA[<p>Override this method if you need to manipulate $value when "field/setValue" event is triggered.
By default, it injects $value in the field type, without any manipulation.
When overriding this method, the parent must always be called:</p>

<pre><code>protected function onFieldSetValue( Observable $subject, Value $value )
{
    parent::onFieldSetValue( $subject, $value );
    // Do something with $value and $subject
}
</code></pre>]]></long-description>
          <tag line="327" name="param" description="" type="\ezp\Base\Observable" variable="$subject">
            <type by_reference="false">\ezp\Base\Observable</type>
          </tag>
          <tag line="327" name="param" description="" type="\ezp\Content\FieldType\Value" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
        </docblock>
        <argument line="343">
          <name>$subject</name>
          <default><![CDATA[]]></default>
          <type>Observable</type>
        </argument>
        <argument line="343">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>Value</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Version/StaticCollection.php" hash="0d42fb88aaf1a29688d6f770cbcf6fc3">
    <parse_markers>
      <error line="18" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $versions in __construct()</error>
      <notice line="18" code="50013">Parameter $contentId could not be found in __construct()</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Version/StaticCollection.php</error>
    </parse_markers>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Version" line="16" package="Default">
      <name>StaticCollection</name>
      <full_name>\ezp\Content\Version\StaticCollection</full_name>
      <extends>\ezp\Base\Collection\Type</extends>
      <docblock line="13">
        <description><![CDATA[Version StaticCollection class.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="Versions to be added to the collection" type="\ezp\Content\Version[]" variable="$versions">
            <type by_reference="false">\ezp\Content\Version[]</type>
          </tag>
          <tag line="18" name="param" description="Id of content this version collection belongs to." type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$versions</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Version/Proxy.php" hash="85719fbaf2312dcb44dff3decbe7f534">
    <parse_markers>
      <critical line="47" code="50019">No short description for property $versionNo</critical>
      <error line="52" code="50012">No short description for method __construct()</error>
      <error line="52" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $service in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Version/Proxy.php</error>
    </parse_markers>
    <namespace-alias name="ModelProxy">ezp\Base\Proxy\Model</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="Version">ezp\Content\Version</namespace-alias>
    <namespace-alias name="Service">ezp\Content\Service</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Version" line="45" package="Default">
      <name>Proxy</name>
      <full_name>\ezp\Content\Version\Proxy</full_name>
      <extends>\ezp\Base\Proxy\Model</extends>
      <extends>\ezp\Content\Version</extends>
      <docblock line="16">
        <description><![CDATA[This class represents a Proxy Content Version]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="16" name="property-read" description="" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="" type="int" variable="$versionNo">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="" type="mixed" variable="$contentId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="One of the STATUS_* constants" type="int" variable="$status">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="" type="\ezp\Content" variable="$content">
          <type by_reference="false">\ezp\Content</type>
        </tag>
        <tag line="16" name="property-read" description="Name in the different languages" type="\string[]" variable="$name">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="16" name="property-read" description="Content's Owner id" type="mixed" variable="$ownerId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="Content's always available flag" type="bool" variable="$alwaysAvailable">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="16" name="property-read" description="Content's Remote ID" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property-read" description="Content' Section ID" type="mixed" variable="$sectionId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="Content's Type ID" type="mixed" variable="$typeId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="Content' status, as one of the \ezp\Content::STATUS_* constants" type="int" variable="$contentStatus">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="Content's main location" type="\ezp\Content\Location" variable="$mainLocation">
          <type by_reference="false">\ezp\Content\Location</type>
        </tag>
        <tag line="16" name="property-read" description="Content's Section" type="\ezp\Content\Section" variable="$section">
          <type by_reference="false">\ezp\Content\Section</type>
        </tag>
        <tag line="16" name="property-read" description="Content's Owner" type="\ezp\User" variable="$owner">
          <type by_reference="false">\ezp\User</type>
        </tag>
        <tag line="16" name="property-read" description="Content's type" type="\ezp\Content\Type" variable="$contentType">
          <type by_reference="false">\ezp\Content\Type</type>
        </tag>
        <tag line="16" name="property-read" description="Content's locations" type="\ezp\Content\Location[]" variable="$locations">
          <type by_reference="false">\ezp\Content\Location[]</type>
        </tag>
        <tag line="16" name="property-read" description="Content's relations" type="\ezp\Content\Relation[]" variable="$relations">
          <type by_reference="false">\ezp\Content\Relation[]</type>
        </tag>
        <tag line="16" name="property-read" description="Content's reverse relations" type="\ezp\Content\Relation[]" variable="$reverseRelations">
          <type by_reference="false">\ezp\Content\Relation[]</type>
        </tag>
        <tag line="16" name="property-read" description="Content's initial language" type="\ezp\Content\Language" variable="$initialLanguage">
          <type by_reference="false">\ezp\Content\Language</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$initialLanguageId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="int" variable="$creatorId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property" description="" type="int" variable="$created">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property" description="" type="int" variable="$modified">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="An hash structure of fields" type="\ezp\Content\Field[]" variable="$fields">
          <type by_reference="false">\ezp\Content\Field[]</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$versionNo</name>
        <default><![CDATA[]]></default>
        <docblock line="47">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="57" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="52" name="param" description="" type="int" variable="$versionNo">
            <type by_reference="false">int</type>
          </tag>
          <tag line="52" name="param" description="" type="\ezp\Content\Service" variable="$service">
            <type by_reference="false">\ezp\Content\Service</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="57">
          <name>$versionNo</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="57">
          <name>$service</name>
          <default><![CDATA[]]></default>
          <type>Service</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\Version" line="68" package="Default">
        <name>lazyLoad</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Overload to get version by Content object as there is no api to load version object atm]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="83" package="Default">
        <name>__get</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Provides read access to a $property]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="99" package="Default">
        <name>getContent</name>
        <type>function</type>
        <docblock line="94">
          <description><![CDATA[Return Type object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="return" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="110" package="Default">
        <name>getFields</name>
        <type>function</type>
        <docblock line="105">
          <description><![CDATA[Get fields of current version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="return" description="" type="\ezp\Content\Field[]">
            <type by_reference="false">\ezp\Content\Field[]</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Version/Concrete.php" hash="74b06e4e24d7d14462958b13c68c7253">
    <parse_markers>
      <critical line="49" code="50019">No short description for property $readWriteProperties</critical>
      <critical line="64" code="50019">No short description for property $dynamicProperties</critical>
      <critical line="91" code="50019">No short description for property $fields</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Version/Concrete.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="Version">ezp\Content\Version</namespace-alias>
    <namespace-alias name="FieldCollection">ezp\Content\Field\StaticCollection</namespace-alias>
    <namespace-alias name="VersionValue">ezp\Persistence\Content\Version</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Version" line="46" package="Default">
      <name>Concrete</name>
      <full_name>\ezp\Content\Version\Concrete</full_name>
      <extends>\ezp\Base\Model</extends>
      <extends>\ezp\Content\Version</extends>
      <docblock line="17">
        <description><![CDATA[This class represents a Concrete Content Version]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="17" name="property-read" description="" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="17" name="property-read" description="" type="int" variable="$versionNo">
          <type by_reference="false">int</type>
        </tag>
        <tag line="17" name="property-read" description="" type="mixed" variable="$contentId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="17" name="property-read" description="One of the STATUS_* constants" type="int" variable="$status">
          <type by_reference="false">int</type>
        </tag>
        <tag line="17" name="property-read" description="" type="\ezp\Content" variable="$content">
          <type by_reference="false">\ezp\Content</type>
        </tag>
        <tag line="17" name="property-read" description="Name in the different languages" type="\string[]" variable="$name">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="17" name="property-read" description="Content's Owner id" type="mixed" variable="$ownerId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="17" name="property-read" description="Content's always available flag" type="bool" variable="$alwaysAvailable">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="17" name="property-read" description="Content's Remote ID" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="17" name="property-read" description="Content' Section ID" type="mixed" variable="$sectionId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="17" name="property-read" description="Content's Type ID" type="mixed" variable="$typeId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="17" name="property-read" description="Content' status, as one of the \ezp\Content::STATUS_* constants" type="int" variable="$contentStatus">
          <type by_reference="false">int</type>
        </tag>
        <tag line="17" name="property-read" description="Content's main location" type="\ezp\Content\Location" variable="$mainLocation">
          <type by_reference="false">\ezp\Content\Location</type>
        </tag>
        <tag line="17" name="property-read" description="Content's Section" type="\ezp\Content\Section" variable="$section">
          <type by_reference="false">\ezp\Content\Section</type>
        </tag>
        <tag line="17" name="property-read" description="Content's Owner" type="\ezp\User" variable="$owner">
          <type by_reference="false">\ezp\User</type>
        </tag>
        <tag line="17" name="property-read" description="Content's type" type="\ezp\Content\Type" variable="$contentType">
          <type by_reference="false">\ezp\Content\Type</type>
        </tag>
        <tag line="17" name="property-read" description="Content's locations" type="\ezp\Content\Location[]" variable="$locations">
          <type by_reference="false">\ezp\Content\Location[]</type>
        </tag>
        <tag line="17" name="property-read" description="Content's relations" type="\ezp\Content\Relation[]" variable="$relations">
          <type by_reference="false">\ezp\Content\Relation[]</type>
        </tag>
        <tag line="17" name="property-read" description="Content's reverse relations" type="\ezp\Content\Relation[]" variable="$reverseRelations">
          <type by_reference="false">\ezp\Content\Relation[]</type>
        </tag>
        <tag line="17" name="property-read" description="Content's initial language" type="\ezp\Content\Language" variable="$initialLanguage">
          <type by_reference="false">\ezp\Content\Language</type>
        </tag>
        <tag line="17" name="property" description="" type="mixed" variable="$initialLanguageId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="17" name="property" description="" type="int" variable="$creatorId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="17" name="property" description="" type="int" variable="$created">
          <type by_reference="false">int</type>
        </tag>
        <tag line="17" name="property" description="" type="int" variable="$modified">
          <type by_reference="false">int</type>
        </tag>
        <tag line="17" name="property-read" description="An hash structure of fields" type="\ezp\Content\Field[]" variable="$fields">
          <type by_reference="false">\ezp\Content\Field[]</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="52" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'name' => false,
        'versionNo' => false,
        'creatorId' => true,
        'created' => true,
        'modified' => true,
        'status' => false,
        'contentId' => false,
        'initialLanguageId' => false,
    )]]></default>
        <docblock line="49">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="var" description="Readable of properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="67" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array(
        'fields' => true,
        'content' => false,
        'ownerId' => false,
        'alwaysAvailable' => false,
        'remoteId' => false,
        'sectionId' => false,
        'typeId' => false,
        'contentStatus' => false,
        /*
        @todo: Implement as soon as there is some more info (like @property) in Content\Concrete
        'contentModified' => false,
        'contentPublished' => false,
        */
        'mainLocation' => false,
        'section' => false,
        'owner' => false,
        'contentType' => false,
        'locations' => false,
        'relations' => false,
        'reverseRelations' => false,
        'initialLanguage' => false,
    )]]></default>
        <docblock line="64">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="var" description="Dynamic properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="94" package="Default">
        <name>$fields</name>
        <default><![CDATA[]]></default>
        <docblock line="91">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="var" description="" type="\ezp\Content\Field[]">
            <type by_reference="false">\ezp\Content\Field[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="101" package="Default">
        <name>$content</name>
        <default><![CDATA[]]></default>
        <docblock line="96">
          <description><![CDATA[Content object this version is attached to.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="var" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="108" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="103">
          <description><![CDATA[Create content version based on content and content type fields objects]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="126" package="Default">
        <name>getFields</name>
        <type>function</type>
        <docblock line="121">
          <description><![CDATA[Get fields of current version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="121" name="return" description="" type="\ezp\Content\Field[]">
            <type by_reference="false">\ezp\Content\Field[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="136" package="Default">
        <name>getContent</name>
        <type>function</type>
        <docblock line="131">
          <description><![CDATA[Get content that this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="131" name="return" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="146" package="Default">
        <name>getOwnerId</name>
        <type>function</type>
        <docblock line="141">
          <description><![CDATA[Get content's Owner ID that this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="141" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="156" package="Default">
        <name>getAlwaysAvailable</name>
        <type>function</type>
        <docblock line="151">
          <description><![CDATA[Get content's "always available" flag that this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="151" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="166" package="Default">
        <name>getRemoteId</name>
        <type>function</type>
        <docblock line="161">
          <description><![CDATA[Get content's remote ID that this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="161" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="176" package="Default">
        <name>getSectionId</name>
        <type>function</type>
        <docblock line="171">
          <description><![CDATA[Get content's section ID that this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="171" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="186" package="Default">
        <name>getTypeId</name>
        <type>function</type>
        <docblock line="181">
          <description><![CDATA[Get content's section ID that this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="181" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="196" package="Default">
        <name>getContentStatus</name>
        <type>function</type>
        <docblock line="191">
          <description><![CDATA[Get content' status that this version is attached to, as one of the \ezp\Content::STATUS_* constants]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="191" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="206" package="Default">
        <name>getMainLocation</name>
        <type>function</type>
        <docblock line="201">
          <description><![CDATA[Get content's main location that this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="201" name="return" description="" type="\ezp\Content\Location|null">
            <type by_reference="false">\ezp\Content\Location</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="216" package="Default">
        <name>getSection</name>
        <type>function</type>
        <docblock line="211">
          <description><![CDATA[Get content' section that this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="211" name="return" description="" type="\ezp\Content\Section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="226" package="Default">
        <name>getOwner</name>
        <type>function</type>
        <docblock line="221">
          <description><![CDATA[Get content's owner that this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="221" name="return" description="" type="\ezp\User">
            <type by_reference="false">\ezp\User</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="236" package="Default">
        <name>getContentType</name>
        <type>function</type>
        <docblock line="231">
          <description><![CDATA[Get content's type this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="231" name="return" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="246" package="Default">
        <name>getLocations</name>
        <type>function</type>
        <docblock line="241">
          <description><![CDATA[Get content's locations this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="241" name="return" description="" type="\ezp\Content\Location[]">
            <type by_reference="false">\ezp\Content\Location[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="256" package="Default">
        <name>getRelations</name>
        <type>function</type>
        <docblock line="251">
          <description><![CDATA[Get content's locations this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="251" name="return" description="" type="\ezp\Content\Relation[]">
            <type by_reference="false">\ezp\Content\Relation[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="266" package="Default">
        <name>getReverseRelations</name>
        <type>function</type>
        <docblock line="261">
          <description><![CDATA[Get content's locations this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="261" name="return" description="" type="\ezp\Content\Relation[]">
            <type by_reference="false">\ezp\Content\Relation[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="276" package="Default">
        <name>getInitialLanguage</name>
        <type>function</type>
        <docblock line="271">
          <description><![CDATA[Get content's initial language ID this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="271" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Version/LazyCollection.php" hash="7257777c90ed26e2ab58b4c7e6a062d7">
    <parse_markers>
      <error line="20" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentService in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Version/LazyCollection.php</error>
    </parse_markers>
    <namespace-alias name="LazyType">ezp\Base\Collection\LazyType</namespace-alias>
    <namespace-alias name="ContentService">ezp\Content\Service</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Version" line="18" package="Default">
      <name>LazyCollection</name>
      <full_name>\ezp\Content\Version\LazyCollection</full_name>
      <extends>\ezp\Base\Collection\LazyType</extends>
      <docblock line="14">
        <description><![CDATA[Version Collection class. Versions are indexed by version number
This collection uses lazy loading mechanism.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Version" line="27" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="Content service to be used for fetching versions" type="\ezp\Content\Service" variable="$contentService">
            <type by_reference="false">\ezp\Content\Service</type>
          </tag>
          <tag line="20" name="param" description="Id of content this version collection belongs to." type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="20" name="param" description="Optional array of initial elements that will be available w/o any loading" type="array" variable="$initialArray">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$contentService</name>
          <default><![CDATA[]]></default>
          <type>ContentService</type>
        </argument>
        <argument line="27">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="27">
          <name>$initialArray</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Field/StaticCollection.php" hash="aa5e99432b5f76ce434cbd5c18f45c14">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Field/StaticCollection.php</error>
    </parse_markers>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="BadConfiguration">ezp\Base\Exception\BadConfiguration</namespace-alias>
    <namespace-alias name="MissingClass">ezp\Base\Exception\MissingClass</namespace-alias>
    <namespace-alias name="LogicException">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="ReadOnly">ezp\Base\Collection\ReadOnly</namespace-alias>
    <namespace-alias name="Field">ezp\Content\Field</namespace-alias>
    <namespace-alias name="Version">ezp\Content\Version</namespace-alias>
    <namespace-alias name="FieldTypeFactory">ezp\Content\FieldType\Factory</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="RuntimeException">RuntimeException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Field" line="30" package="Default">
      <name>StaticCollection</name>
      <full_name>\ezp\Content\Field\StaticCollection</full_name>
      <extends>\ezp\Base\Collection\Type</extends>
      <docblock line="24">
        <description><![CDATA[Field Collection class]]></description>
        <long-description><![CDATA[<p>Readonly class that takes (Content) Version as input.</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Field" line="37" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Constructor, sets up Collection based on contentType fields]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Content\Version" variable="$contentVersion">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$contentVersion</name>
          <default><![CDATA[]]></default>
          <type>Version</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Field" line="63" package="Default">
        <name>offsetSet</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Tries to assign $value as field value to a Field object identified by $identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="Field identifier" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="param" description="Field value object" type="\ezp\Content\FieldType\Value" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
          <tag line="54" name="throws" description="If any field identified by $identifier doesn't exist in the collection" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
          <tag line="54" name="throws" description="If $value is not a field value object" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="54" name="todo" description="Direct string assignation ? If we decide to implement this, magic should be done here"/>
        </docblock>
        <argument line="63">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Field/LazyCollection.php" hash="f934d59420a6422b7a77cbb3c9caf4fd">
    <parse_markers>
      <error line="25" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentService in __construct()</error>
      <error line="25" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $version in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Field/LazyCollection.php</error>
    </parse_markers>
    <namespace-alias name="LazyType">ezp\Base\Collection\LazyType</namespace-alias>
    <namespace-alias name="ContentService">ezp\Content\Service</namespace-alias>
    <namespace-alias name="Version">ezp\Content\Version</namespace-alias>
    <namespace-alias name="FieldTypeFactory">ezp\Content\FieldType\Factory</namespace-alias>
    <namespace-alias name="LogicException">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Field" line="23" package="Default">
      <name>LazyCollection</name>
      <full_name>\ezp\Content\Field\LazyCollection</full_name>
      <extends>\ezp\Base\Collection\LazyType</extends>
      <docblock line="19">
        <description><![CDATA[Field Collection class. Fields are indexed by field identifier
This collection uses lazy loading mechanism.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Field" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="25">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="param" description="Content service to be used for fetching versions" type="\ezp\Content\Service" variable="$contentService">
            <type by_reference="false">\ezp\Content\Service</type>
          </tag>
          <tag line="25" name="param" description="Version this fields collection belongs to." type="\ezp\Content/Version" variable="$version">
            <type by_reference="false">\ezp\Content/Version</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$contentService</name>
          <default><![CDATA[]]></default>
          <type>ContentService</type>
        </argument>
        <argument line="31">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type>Version</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Field" line="45" package="Default">
        <name>offsetSet</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Tries to assign $value as field value to a Field object identified by $identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="Field identifier" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="param" description="Field value object" type="\ezp\Content\FieldType\Value" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
          <tag line="36" name="throws" description="If any field identified by $identifier doesn't exist in the collection" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
          <tag line="36" name="throws" description="If $value is not a field value object" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="36" name="todo" description="Direct string assignation ? If we decide to implement this, magic should be done here"/>
        </docblock>
        <argument line="45">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Query/Builder.php" hash="a7be64bf81fb0c1050f624069fc043f7">
    <parse_markers>
      <error line="86" code="50010">No DocBlock was found for method __construct()</error>
      <error line="91" code="50015">Argument $property is missing from the Docblock of __get()</error>
      <error line="110" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $c in addCriteria()</error>
      <error line="133" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $elementOne in lOr()</error>
      <error line="133" code="50014">Name of argument $elementTwo does not match with the DocBlock's name $elementTwo$... in lOr()</error>
      <error line="133" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $elementTwo in lOr()</error>
      <notice line="133" code="50013">Parameter $elementTwo$... could not be found in lOr()</notice>
      <error line="148" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $elementOne in lAnd()</error>
      <error line="148" code="50014">Name of argument $elementTwo does not match with the DocBlock's name $elementTwo$... in lAnd()</error>
      <error line="148" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $elementTwo in lAnd()</error>
      <notice line="148" code="50013">Parameter $elementTwo$... could not be found in lAnd()</notice>
      <error line="163" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criterion in not()</error>
      <error line="200" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $sortClause in addSortClause()</error>
      <error line="238" code="50014">Name of argument $limit does not match with the DocBlock's name $offset in setLimit()</error>
      <notice line="238" code="50013">Parameter $offset could not be found in setLimit()</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Query/Builder.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <namespace-alias name="CriterionFactory">ezp\Content\CriterionFactory</namespace-alias>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Query" line="54" package="Default">
      <name>Builder</name>
      <full_name>\ezp\Content\Query\Builder</full_name>
      <extends/>
      <docblock line="19">
        <description><![CDATA[This class provides a fluent interface to create a content query]]></description>
        <long-description><![CDATA[<p>Every Criterion is accessible using a getter on the Builder object.
For instance, calling $queryBuilder->field will return a CriterionFactory object for a Field Criterion.
This CriterionFactory will then give access to the operators the contained Criterion supports, as methods.
These methods can then be used to construct a new Criterion for the given target &amp; value:</p>

<pre><code>$queryBuilder = new ezp\Content\Query\Builder();
$queryBuilder->addCriteria( $queryBuilder->contentType->eq( null, 'article' ) );
</code></pre>]]></long-description>
        <tag line="19" name="property-read" description="A new Field CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$field">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="A new MetaData CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$metaData">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="A new DateMetadata CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$dateMetadata">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="A new ContentId CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$contentId">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="A new ContentType CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$contentType">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="A new ContentTypeGroup CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$contentTypeGroup">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="A new field CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$field">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="A new FullText CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$fullText">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="A new LocationId CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$locationId">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="A new ParentLocationId CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$parentLocationId">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="A new Permission CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$permission">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="A new Section CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$section">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="A new Subtree CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$subtree">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="An new UrlAlias CriterionFactory" type="\ezp\Content\CriterionFactory" variable="$urlAlias">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="New logical OR criterion (alias for {@see $lOr})" type="\ezp\Content\CriterionFactory" variable="$or">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="New logical OR criterion" type="\ezp\Content\CriterionFactory" variable="$lOr">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="New logical AND criterion (alias for {@see $lAnd})" type="\ezp\Content\CriterionFactory" variable="$and">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="New logical AND criterion" type="\ezp\Content\CriterionFactory" variable="$lAnd">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="New logical NOT criterion (alias for {@see $lNot})" type="\ezp\Content\CriterionFactory" variable="$not">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
        <tag line="19" name="property-read" description="" type="\ezp\Content\CriterionFactory" variable="$lNot">
          <type by_reference="false">\ezp\Content\CriterionFactory</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="private" line="60" package="Default">
        <name>$criteria</name>
        <default><![CDATA[array()]]></default>
        <docblock line="56">
          <description><![CDATA[The internal criteria array]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="" type="\ezp\Persistence\Content\Query\Criterion[]">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="66" package="Default">
        <name>$sortClauses</name>
        <default><![CDATA[array()]]></default>
        <docblock line="62">
          <description><![CDATA[SortClause objects array]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="var" description="" type="\ezp\Persistence\Content\Query\SortClause[]">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="72" package="Default">
        <name>$sort</name>
        <default><![CDATA[]]></default>
        <docblock line="68">
          <description><![CDATA[Sort clause builder]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="var" description="" type="\ezp\Content\Query\SortClauseBuilder">
            <type by_reference="false">\ezp\Content\Query\SortClauseBuilder</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="78" package="Default">
        <name>$offset</name>
        <default><![CDATA[0]]></default>
        <docblock line="74">
          <description><![CDATA[Query offset, starting from 0]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="84" package="Default">
        <name>$limit</name>
        <default><![CDATA[]]></default>
        <docblock line="80">
          <description><![CDATA[Query limit, as a number of items]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="var" description="" type="int|null">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Query" line="86">
        <name>__construct</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Query" line="100" package="Default">
        <name>__get</name>
        <type>function</type>
        <docblock line="91">
          <description><![CDATA[Magic getter.]]></description>
          <long-description><![CDATA[<p>Gives access to criteria classes by means of their class name:
MetaData -> metadata
Field -> Field
A criterion factory</p>]]></long-description>
          <tag line="91" name="return" description="" type="\ezp\Persistence\Content\Query\CriterionFactory">
            <type by_reference="false">\ezp\Persistence\Content\Query\CriterionFactory</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Query" line="119" package="Default">
        <name>addCriteria</name>
        <type>function</type>
        <docblock line="110">
          <description><![CDATA[Adds new criteria to the list. As many parameters as possible can be provided.]]></description>
          <long-description><![CDATA[<p>The given criteria will be added with a logical AND, meaning that they must all match.
To handle OR criteria, the {@see or}/{@see lOr} methods must be used.</p>]]></long-description>
          <tag line="110" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion..$" variable="$c">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion..$</type>
          </tag>
          <tag line="110" name="return" description="" type="\ezp\Content\Query\Builder">
            <type by_reference="false">\ezp\Content\Query\Builder</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$c</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Query" line="142" package="Default">
        <name>lOr</name>
        <type>function</type>
        <docblock line="133">
          <description><![CDATA[Logical or
Criterion: Criterion\LogicalAnd]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="133" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$elementOne">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="133" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$elementTwo$...">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="133" name="return" description="" type="\ezp\Persistence\Content\Query\Criterion\LogicalOr">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\LogicalOr</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$elementOne</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="142">
          <name>$elementTwo</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Query" line="157" package="Default">
        <name>lAnd</name>
        <type>function</type>
        <docblock line="148">
          <description><![CDATA[Logical and
Criterion: Criterion\LogicalAnd]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="148" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$elementOne">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="148" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$elementTwo$...">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="148" name="return" description="" type="\ezp\Persistence\Content\Query\Criterion\LogicalAnd">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\LogicalAnd</type>
          </tag>
        </docblock>
        <argument line="157">
          <name>$elementOne</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="157">
          <name>$elementTwo</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Query" line="171" package="Default">
        <name>not</name>
        <type>function</type>
        <docblock line="163">
          <description><![CDATA[Logical not
Criterion: Criterion\LogicalNot]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="163" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="163" name="return" description="" type="\ezp\Persistence\Content\Query\Criterion\LogicalNot">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\LogicalNot</type>
          </tag>
        </docblock>
        <argument line="171">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Query" line="185" package="Default">
        <name>__call</name>
        <type>function</type>
        <docblock line="177">
          <description><![CDATA[Magic call method, used to provide or/and methods as an alternative to lOr/lAnd]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="177" name="param" description="" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="177" name="param" description="" type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="177" name="return" description="" type="\ezp\Persistence\Content\Query\Criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
        </docblock>
        <argument line="185">
          <name>$method</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="185">
          <name>$arguments</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Query" line="207" package="Default">
        <name>addSortClause</name>
        <type>function</type>
        <docblock line="200">
          <description><![CDATA[Adds new sorting clause objects to the query. One to many objects can be provided.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="200" name="param" description="" type="\ezp\Persistence\Content\SortClause..$" variable="$sortClause">
            <type by_reference="false">\ezp\Persistence\Content\SortClause..$</type>
          </tag>
          <tag line="200" name="return" description="Self" type="\ezp\Content\Query\Builder">
            <type by_reference="false">\ezp\Content\Query\Builder</type>
          </tag>
        </docblock>
        <argument line="207">
          <name>$sortClause</name>
          <default><![CDATA[]]></default>
          <type>SortClause</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Query" line="227" package="Default">
        <name>setOffset</name>
        <type>function</type>
        <docblock line="221">
          <description><![CDATA[Sets the query offset to $offset]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="221" name="param" description="" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="221" name="return" description="Self" type="\ezp\Content\Query\Builder">
            <type by_reference="false">\ezp\Content\Query\Builder</type>
          </tag>
          <tag line="221" name="throws" description="if $limit isn't an integer &gt;= 0" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="227">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Query" line="246" package="Default">
        <name>setLimit</name>
        <type>function</type>
        <docblock line="238">
          <description><![CDATA[Sets the query offset to $limit.]]></description>
          <long-description><![CDATA[<p>A limit of 0 means no limit.</p>]]></long-description>
          <tag line="238" name="param" description="" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="238" name="return" description="Self" type="\ezp\Content\Query\Builder">
            <type by_reference="false">\ezp\Content\Query\Builder</type>
          </tag>
          <tag line="238" name="throws" description="if $limit isn't an integer &gt;= 0" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="246">
          <name>$limit</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Query" line="261" package="Default">
        <name>getQuery</name>
        <type>function</type>
        <docblock line="257">
          <description><![CDATA[Returns the query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="257" name="return" description="" type="\ezp\Content\Query">
            <type by_reference="false">\ezp\Content\Query</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Query/SortClauseBuilder.php" hash="058c0746e94cd916b6a3eef9647b075f">
    <parse_markers>
      <error line="32" code="50015">Argument $method is missing from the Docblock of __call()</error>
      <error line="32" code="50015">Argument $args is missing from the Docblock of __call()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Query/SortClauseBuilder.php</error>
    </parse_markers>
    <namespace-alias name="BadFunctionCallException">BadFunctionCallException</namespace-alias>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="ReflectionClass">ReflectionClass</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Query" line="30" package="Default">
      <name>SortClauseBuilder</name>
      <full_name>\ezp\Content\Query\SortClauseBuilder</full_name>
      <extends/>
      <docblock line="16">
        <description><![CDATA[This class provides the fluent factory interface for Content queries SortClause items]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="16" name="method" description="" type="" method_name=""/>
        <tag line="16" name="method" description="" type="" method_name=""/>
        <tag line="16" name="method" description="" type="" method_name=""/>
        <tag line="16" name="method" description="" type="" method_name=""/>
        <tag line="16" name="method" description="" type="" method_name=""/>
        <tag line="16" name="method" description="" type="" method_name=""/>
        <tag line="16" name="method" description="" type="" method_name=""/>
        <tag line="16" name="method" description="" type="" method_name=""/>
        <tag line="16" name="method" description="" type="" method_name=""/>
        <tag line="16" name="method" description="" type="" method_name=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Query" line="39" package="Default">
        <name>__call</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Intercepts all SortClause calls, and returns the matching SortClause object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="return" description="" type="\ezp\Persistence\Content\Query\SortClause">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause</type>
          </tag>
          <tag line="32" name="throws" description="If the sort clause doesn't exist" type="\ezp\Content\Query\BadFunctionCalException">
            <type by_reference="false">\ezp\Content\Query\BadFunctionCalException</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$method</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="39">
          <name>$args</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Query.php" hash="1f3df709430b7857118ea21b4e84b6e9">
    <parse_markers>
      <error line="12" code="50000">No DocBlock was found for Query</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Query.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Content" line="12">
      <name>Query</name>
      <full_name>\ezp\Content\Query</full_name>
      <extends/>
      <constant namespace="ezp\Content" line="39">
        <name>SORT_ASC</name>
        <value><![CDATA['ascending']]></value>
      </constant>
      <constant namespace="ezp\Content" line="41">
        <name>SORT_DESC</name>
        <value><![CDATA['descending']]></value>
      </constant>
      <property final="false" static="false" visibility="public" line="19" package="Default">
        <name>$criterion</name>
        <default><![CDATA[]]></default>
        <docblock line="14">
          <description><![CDATA[The Query criterion
Can contain multiple criterion, as items of a logical one (by default AND)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="14" name="var" description="" type="\ezp\Persistence\Content\Query\Criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="25" package="Default">
        <name>$sortClauses</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[Query sorting clauses]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="\ezp\Persistence\Content\Query\SortClause[]">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$offset</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[Query offset]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="37" package="Default">
        <name>$limit</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Query limit]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Content/Translation.php" hash="7b74052588a0b52ab44f60e4ea863d6e">
    <parse_markers>
      <critical line="25" code="50019">No short description for property $readWriteProperties</critical>
      <critical line="34" code="50019">No short description for property $dynamicProperties</critical>
      <error line="66" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Translation.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="Locale">ezp\Base\Locale</namespace-alias>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="ConcreteVersion">ezp\Content\Version\Concrete</namespace-alias>
    <namespace-alias name="DomainException">DomainException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content" line="22" package="Default">
      <name>Translation</name>
      <full_name>\ezp\Content\Translation</full_name>
      <extends>\ezp\Base\Model</extends>
      <docblock line="18">
        <description><![CDATA[This class represents a Content Translation]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'versions' => false,
        'locale' => false,
        'content' => false,
    )]]></default>
        <docblock line="25">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="Readable of properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array(
        'localeCode' => false,
        'contentId' => false,
        'fields' => false,
        'last' => false,
        'current' => false,
    )]]></default>
        <docblock line="34">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="Dynamic properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$content</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[Content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" package="Default">
        <name>$locale</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[Locale object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="\ezp\Base\Locale">
            <type by_reference="false">\ezp\Base\Locale</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" package="Default">
        <name>$versions</name>
        <default><![CDATA[]]></default>
        <docblock line="59">
          <description><![CDATA[Existing Version in the Translation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="" type="\ezp\Content\Version[]">
            <type by_reference="false">\ezp\Content\Version[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="66">
        <name>__construct</name>
        <type>function</type>
        <argument line="66">
          <name>$locale</name>
          <default><![CDATA[]]></default>
          <type>Locale</type>
        </argument>
        <argument line="66">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content" line="78" package="Default">
        <name>getContentId</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Returns the content id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content" line="88" package="Default">
        <name>getLocaleCode</name>
        <type>function</type>
        <docblock line="83">
          <description><![CDATA[Returns the locale code (eg eng-GB, fre-FR, ...)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content" line="99" package="Default">
        <name>getLast</name>
        <type>function</type>
        <docblock line="93">
          <description><![CDATA[Returns the last version added to the translation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="return" description="" type="\ezp\Content\Version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="93" name="throws" description="if the translation does not contain any version." type="\DomainException">
            <type by_reference="false">\DomainException</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content" line="114" package="Default">
        <name>getCurrent</name>
        <type>function</type>
        <docblock line="109">
          <description><![CDATA[Returns the published version in the translation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="109" name="return" description="" type="\ezp\Content\Version|null">
            <type by_reference="false">\ezp\Content\Version</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content" line="133" package="Default">
        <name>getFields</name>
        <type>function</type>
        <docblock line="126">
          <description><![CDATA[Returns the field collection in the currently published version added to
the translation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="126" name="return" description="" type="\ezp/Content/Field/Collection">
            <type by_reference="false">\ezp/Content/Field/Collection</type>
          </tag>
          <tag line="126" name="throws" description="if there's no currently published version" type="\DomainException">
            <type by_reference="false">\DomainException</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="149" package="Default">
        <name>createNewVersion</name>
        <type>function</type>
        <docblock line="143">
          <description><![CDATA[Create a new Version in the locale referenced by the translation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="143" name="param" description="" type="\ezp\Content\Version" variable="$base">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="143" name="return" description="" type="\ezp\Content\Version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
        </docblock>
        <argument line="149">
          <name>$base</name>
          <default><![CDATA[null]]></default>
          <type>Version</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Utils/NamePatternResolver.php" hash="fa2a1560ed50879e18a8ece75199e40c">
    <parse_markers>
      <error line="90" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentVersion in __construct()</error>
      <error line="131" code="50015">Argument $namePattern is missing from the Docblock of getFieldsTitle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Utils/NamePatternResolver.php</error>
    </parse_markers>
    <namespace-alias name="Version">ezp\Content\Version</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Utils" line="35" package="Default">
      <name>NamePatternResolver</name>
      <full_name>\ezp\Content\Utils\NamePatternResolver</full_name>
      <extends/>
      <docblock line="13">
        <description><![CDATA[NamePatternResolver is a utility class for resolving content name and url alias patterns.]]></description>
        <long-description><![CDATA[<p>This code supports content name pattern groups.</p>

<p>Syntax:</p>

<pre><code>&lt;attribute_identifier&gt;
&lt;attribute_identifier&gt; &lt;2nd-identifier&gt;
User text &lt;attribute_identifier&gt;|(&lt;2nd-identifier&gt;&lt;3rd-identifier&gt;)
</code></pre>

<p>Example:</p>

<pre><code>&lt;nickname|(&lt;firstname&gt; &lt;lastname&gt;)&gt;
</code></pre>

<p>Tokens are looked up from left to right. If a match is found for the
leftmost token, the 2nd token will not be used. Tokens are representations
of fields. So a match means that that the current field has data.</p>

<p>Tokens are the field definition identifiers which are used in the class edit-interface.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\Utils" line="42" package="Default">
        <name>META_STRING</name>
        <value><![CDATA['EZMETAGROUP_']]></value>
        <docblock line="37">
          <description><![CDATA[The string to use to signify group tokens.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ezp\Content\Utils" line="49" package="Default">
        <name>CONTENT_NAME_MAX_LENGTH</name>
        <value><![CDATA[255]]></value>
        <docblock line="44">
          <description><![CDATA[Max length of content name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="private" line="56" package="Default">
        <name>$groupLookupTable</name>
        <default><![CDATA[]]></default>
        <docblock line="51">
          <description><![CDATA[Holds token groups]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="63" package="Default">
        <name>$origNamePattern</name>
        <default><![CDATA[]]></default>
        <docblock line="58">
          <description><![CDATA[Contains the original name pattern entered]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="71" package="Default">
        <name>$namePattern</name>
        <default><![CDATA[]]></default>
        <docblock line="65">
          <description><![CDATA[Holds the filtered name pattern where token groups are replaced with
meta strings]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="78" package="Default">
        <name>$contentVersion</name>
        <default><![CDATA[]]></default>
        <docblock line="73">
          <description><![CDATA[The content object which holds the attributes used to resolve name pattern.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="var" description="" type="\ezp\Content\Version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="88" package="Default">
        <name>$fieldTitleArray</name>
        <default><![CDATA[]]></default>
        <docblock line="80">
          <description><![CDATA[Holds data fetched from content fields' Value object.]]></description>
          <long-description><![CDATA[<p>Key is the field identifier.
Value is the string value obtained via {@link \ezp\Content\FieldType\ValueInterface::getTitle()}</p>]]></long-description>
          <tag line="80" name="see" description="\ezp\Content\FieldType\ValueInterface::getTitle()" refers="\ezp\Content\FieldType\ValueInterface::getTitle()"/>
          <tag line="80" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Utils" line="98" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Constructs a object to resolve $namePattern with $contentVersion fields values]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="Name pattern (aka &quot;name schema&quot; for content name/urlAlias. See {@link \ezp\Persistence\Content\Type::$nameSchema} for more info." type="string" variable="$namePattern">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="param" description="" type="\ezp\Content\Version" variable="$contentVersion">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="90" name="todo" description="Take translation into account"/>
        </docblock>
        <argument line="98">
          <name>$namePattern</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="98">
          <name>$contentVersion</name>
          <default><![CDATA[]]></default>
          <type>Version</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Utils" line="112" package="Default">
        <name>resolveNamePattern</name>
        <type>function</type>
        <docblock line="105">
          <description><![CDATA[Return the real name for a content name pattern]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="param" description="The limit on the string length, by defaul 0 aka none" type="int" variable="$limit">
            <type by_reference="false">int</type>
          </tag>
          <tag line="105" name="param" description="End sequence applied to string if limit has been reached" type="string" variable="$sequence">
            <type by_reference="false">string</type>
          </tag>
          <tag line="105" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$limit</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="112">
          <name>$sequence</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\Utils" line="138" package="Default">
        <name>getFieldsTitle</name>
        <type>function</type>
        <docblock line="131">
          <description><![CDATA[Fetches the list of available Field identifiers in the token and returns
an array of their current title value.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="131" name="see" description="\ezp\Content\FieldType\ValueInterface::getTitle()" refers="\ezp\Content\FieldType\ValueInterface::getTitle()"/>
          <tag line="131" name="return" description="Key is the field identifier, value is the title value" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
        <argument line="138">
          <name>$namePattern</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\Utils" line="160" package="Default">
        <name>translatePattern</name>
        <type>function</type>
        <docblock line="155">
          <description><![CDATA[Replaces tokens in the name pattern with their resolved values.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="155" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\Utils" line="185" package="Default">
        <name>extractTokens</name>
        <type>function</type>
        <docblock line="174">
          <description><![CDATA[Extract all tokens from $namePattern]]></description>
          <long-description><![CDATA[<p>Example:</p>

<pre><code>Text &lt;token&gt; more text ==&gt; &lt;token&gt;
</code></pre>]]></long-description>
          <tag line="174" name="param" description="" type="string" variable="$namePattern">
            <type by_reference="false">string</type>
          </tag>
          <tag line="174" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="185">
          <name>$namePattern</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\Utils" line="201" package="Default">
        <name>resolveToken</name>
        <type>function</type>
        <docblock line="193">
          <description><![CDATA[Looks up the value $token should be replaced with and returns this as
a string. Meta strings denothing token groups are automatically
inferred.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="193" name="param" description="" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
          <tag line="193" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$token</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\Utils" line="243" package="Default">
        <name>isTokenGroup</name>
        <type>function</type>
        <docblock line="237">
          <description><![CDATA[Checks whether $identifier is a placeholder for a token group.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="237" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="237" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="243">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\Utils" line="266" package="Default">
        <name>tokenParts</name>
        <type>function</type>
        <docblock line="253">
          <description><![CDATA[Return the different constituents of $token in an array.]]></description>
          <long-description><![CDATA[<p>The normal case here is that the different identifiers within one token
will be tokenized and returned.</p>

<p>Example:</p>

<pre><code>"&lt;title|text&gt;" ==&gt; array( 'title', 'text' )
</code></pre>]]></long-description>
          <tag line="253" name="param" description="" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
          <tag line="253" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="266">
          <name>$token</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\Utils" line="282" package="Default">
        <name>filterNamePattern</name>
        <type>function</type>
        <docblock line="271">
          <description><![CDATA[Builds a lookup / translation table for groups in the $namePattern.]]></description>
          <long-description><![CDATA[<p>The groups are referenced with a generated meta-token in the original
name pattern.</p>

<p>Returns intermediate name pattern where groups are replaced with meta-
tokens.</p>]]></long-description>
          <tag line="271" name="param" description="" type="string" variable="$namePattern">
            <type by_reference="false">string</type>
          </tag>
          <tag line="271" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="282">
          <name>$namePattern</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\Utils" line="316" package="Default">
        <name>getIdentifiers</name>
        <type>function</type>
        <docblock line="310">
          <description><![CDATA[Returns all identifiers from all tokens in the name pattern.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="310" name="param" description="" type="string" variable="$patternString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="310" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="316">
          <name>$patternString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Search/Result.php" hash="5a0a2c47a73cfdae08d1995c83318ae7">
    <parse_markers>
      <critical line="19" code="50019">No short description for property $totalCount</critical>
      <critical line="24" code="50019">No short description for property $query</critical>
      <error line="29" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $elements in __construct()</error>
      <error line="29" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Search/Result.php</error>
    </parse_markers>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Search" line="17" package="Default">
      <name>Result</name>
      <full_name>\ezp\Content\Search\Result</full_name>
      <extends>\ezp\Base\Collection\Type</extends>
      <docblock line="13">
        <description><![CDATA[Result collection class
Holds results returned by a search]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="22" package="Default">
        <name>$totalCount</name>
        <default><![CDATA[0]]></default>
        <docblock line="19">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="Total count of result (might differ from collection count if offset and/or limit is used in query)" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="27" package="Default">
        <name>$query</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="Used to generate this result" type="\ezp\Content\Query">
            <type by_reference="false">\ezp\Content\Query</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Search" line="36" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="param" description="" type="\ezp\Content[]" variable="$elements">
            <type by_reference="false">\ezp\Content[]</type>
          </tag>
          <tag line="29" name="param" description="" type="int" variable="$totalCount">
            <type by_reference="false">int</type>
          </tag>
          <tag line="29" name="param" description="" type="\ezp\Content\Query" variable="$query">
            <type by_reference="false">\ezp\Content\Query</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$elements</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="36">
          <name>$totalCount</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="36">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>Query</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/CriterionFactory.php" hash="1ceecdd6e9a42db0619ff14116033b9a">
    <parse_markers>
      <error line="175" code="50014">Name of argument $valueTwo does not match with the DocBlock's name $valieTwo in between()</error>
      <notice line="175" code="50013">Parameter $valieTwo could not be found in between()</notice>
      <error line="195" code="50014">Name of argument $criterionTwo does not match with the DocBlock's name $criterionTwo$... in logicalOr()</error>
      <notice line="195" code="50013">Parameter $criterionTwo$... could not be found in logicalOr()</notice>
      <error line="206" code="50014">Name of argument $criterionTwo does not match with the DocBlock's name $criterionTwo$... in logicalAnd()</error>
      <notice line="206" code="50013">Parameter $criterionTwo$... could not be found in logicalAnd()</notice>
      <error line="227" code="50014">Name of argument $target does not match with the DocBlock's name $operator in handleCriterion()</error>
      <error line="227" code="50015">Argument $value is missing from the Docblock of handleCriterion()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/CriterionFactory.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Operator">ezp\Persistence\Content\Query\Criterion\Operator</namespace-alias>
    <namespace-alias name="LogicalOr">ezp\Persistence\Content\Query\Criterion\LogicalOr</namespace-alias>
    <namespace-alias name="LogicalAnd">ezp\Persistence\Content\Query\Criterion\LogicalAnd</namespace-alias>
    <namespace-alias name="LogicalNot">ezp\Persistence\Content\Query\Criterion\LogicalNot</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content" line="27" package="Default">
      <name>CriterionFactory</name>
      <full_name>\ezp\Content\CriterionFactory</full_name>
      <extends/>
      <docblock line="18">
        <description><![CDATA[This class provides a factory interface to a criterion object.]]></description>
        <long-description><![CDATA[<pre><code>$queryBuilder = new ezp\Content\Query\Builder;
$criterionFactory = $queryBuilder->metadata;
</code></pre>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="33" package="Default">
        <name>$criterionClass</name>
        <default><![CDATA[]]></default>
        <docblock line="29">
          <description><![CDATA[The Criterion class we are building.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="40" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Constructs a criterion factory for $criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="param" description="The Criterion we are creating a factory for" type="string" variable="$criterionClass">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$criterionClass</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="57" package="Default">
        <name>eq</name>
        <type>function</type>
        <docblock line="49">
          <description><![CDATA[Equal operator]]></description>
          <long-description><![CDATA[<p>If only one parameter is given, it is assumed that parameter one is the value, and $target is null</p>]]></long-description>
          <tag line="49" name="param" description="" type="mixed" variable="$target">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="49" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="57">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="75" package="Default">
        <name>gt</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Greater than operator]]></description>
          <long-description><![CDATA[<p>If only one parameter is given, it is assumed that parameter one is the value, and $target is null</p>]]></long-description>
          <tag line="67" name="param" description="" type="mixed" variable="$target">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="67" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="75">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="93" package="Default">
        <name>gte</name>
        <type>function</type>
        <docblock line="85">
          <description><![CDATA[Greater than or equals operator]]></description>
          <long-description><![CDATA[<p>If only one parameter is given, it is assumed that parameter one is the value, and $target is null</p>]]></long-description>
          <tag line="85" name="param" description="" type="mixed" variable="$target">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="85" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="93">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="111" package="Default">
        <name>lt</name>
        <type>function</type>
        <docblock line="103">
          <description><![CDATA[Lower than operator]]></description>
          <long-description><![CDATA[<p>If only one parameter is given, it is assumed that parameter one is the value, and $target is null</p>]]></long-description>
          <tag line="103" name="param" description="" type="mixed" variable="$target">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="103" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="111">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="111">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="129" package="Default">
        <name>lte</name>
        <type>function</type>
        <docblock line="121">
          <description><![CDATA[Lower than or equals operator]]></description>
          <long-description><![CDATA[<p>If only one parameter is given, it is assumed that parameter one is the value, and $target is null</p>]]></long-description>
          <tag line="121" name="param" description="" type="mixed" variable="$target">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="121" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="129">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="147" package="Default">
        <name>in</name>
        <type>function</type>
        <docblock line="139">
          <description><![CDATA[In operator]]></description>
          <long-description><![CDATA[<p>If only one parameter is given, it is assumed that parameter one is the value, and $target is null</p>]]></long-description>
          <tag line="139" name="param" description="" type="mixed" variable="$target">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="139" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="147">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="147">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="165" package="Default">
        <name>like</name>
        <type>function</type>
        <docblock line="157">
          <description><![CDATA[Like operator]]></description>
          <long-description><![CDATA[<p>If only one parameter is given, it is assumed that parameter one is the value, and $target is null</p>]]></long-description>
          <tag line="157" name="param" description="" type="mixed" variable="$target">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="157" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="165">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="165">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="184" package="Default">
        <name>between</name>
        <type>function</type>
        <docblock line="175">
          <description><![CDATA[Between range operator]]></description>
          <long-description><![CDATA[<p>If only two parameters are given, it is assumed that $target is $valueOne, and $valueOne is $valueTwo</p>]]></long-description>
          <tag line="175" name="param" description="" type="string" variable="$target">
            <type by_reference="false">string</type>
          </tag>
          <tag line="175" name="param" description="range start value" type="mixed" variable="$valueOne">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="175" name="param" description="range end value" type="mixed" variable="$valieTwo">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="184">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="184">
          <name>$valueOne</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="184">
          <name>$valueTwo</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="201" package="Default">
        <name>logicalOr</name>
        <type>function</type>
        <docblock line="195">
          <description><![CDATA[Logical or between 2...n criteria]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="195" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterionOne">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="195" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterionTwo$...">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$criterionOne</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="201">
          <name>$criterionTwo</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="212" package="Default">
        <name>logicalAnd</name>
        <type>function</type>
        <docblock line="206">
          <description><![CDATA[Logical and between 2...n criteria]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="206" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterionOne">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="206" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterionTwo$...">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
        </docblock>
        <argument line="212">
          <name>$criterionOne</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="212">
          <name>$criterionTwo</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="222" package="Default">
        <name>logicalNot</name>
        <type>function</type>
        <docblock line="217">
          <description><![CDATA[Logical not on one Criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="217" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
        </docblock>
        <argument line="222">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content" line="235" package="Default">
        <name>handleCriterion</name>
        <type>function</type>
        <docblock line="227">
          <description><![CDATA[Handles factory of the current criterion with a given operator & value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="227" name="param" description="" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="227" name="param" description="Criterion arguments" type="\ezp\Content\$argument$..." variable="$operator">
            <type by_reference="false">\ezp\Content\$argument$...</type>
          </tag>
          <tag line="227" name="return" description="" type="\ezp\Content\Query\Builder">
            <type by_reference="false">\ezp\Content\Query\Builder</type>
          </tag>
        </docblock>
        <argument line="235">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="235">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="235">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Location.php" hash="20c5459946f5ee19b5df0358d5e39c89">
    <markers>
      <todo line="36">const from eZ Publish 4.5</todo>
    </markers>
    <parse_markers>
      <error line="61" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $parent in setParent()</error>
      <error line="75" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in setContent()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Location.php</error>
    </parse_markers>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <interface namespace="ezp\Content" line="34" package="Default">
      <name>Location</name>
      <full_name>\ezp\Content\Location</full_name>
      <extends/>
      <docblock line="13">
        <description><![CDATA[This interface represents a Content Location]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="13" name="property-read" description="" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property" description="" type="int" variable="$priority">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property-read" description="" type="bool" variable="$hidden">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="13" name="property-read" description="" type="bool" variable="$invisible">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="13" name="property-read" description="" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="13" name="property-read" description="" type="int" variable="$contentId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property-read" description="" type="int" variable="$parentId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property-read" description="" type="string" variable="$pathIdentificationString">
          <type by_reference="false">string</type>
        </tag>
        <tag line="13" name="property-read" description="Path string for location (like /1/2/)" type="string" variable="$pathString">
          <type by_reference="false">string</type>
        </tag>
        <tag line="13" name="property-read" description="" type="int" variable="$modifiedSubLocation">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property-read" description="" type="int" variable="$mainLocationId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property-read" description="" type="int" variable="$depth">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property" description="Sort field int, to be compared with \ezp\Content\Location::SORT_FIELD_* constants" type="int" variable="$sortField">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property" description="Sort order int, to be compared with \ezp\Content\Location::SORT_ORDER_* constants" type="int" variable="$sortOrder">
          <type by_reference="false">int</type>
        </tag>
        <tag line="13" name="property-read" description="Location's children in subtree" type="\ezp\Content\Location[]" variable="$children">
          <type by_reference="false">\ezp\Content\Location[]</type>
        </tag>
        <tag line="13" name="property" description="Associated Content object" type="\ezp\Content" variable="$content">
          <type by_reference="false">\ezp\Content</type>
        </tag>
        <tag line="13" name="property" description="Location's parent location" type="\ezp\Content\Location" variable="$parent">
          <type by_reference="false">\ezp\Content\Location</type>
        </tag>
      </docblock>
      <constant namespace="ezp\Content" line="38">
        <name>SORT_FIELD_PATH</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="ezp\Content" line="39">
        <name>SORT_FIELD_PUBLISHED</name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="ezp\Content" line="40">
        <name>SORT_FIELD_MODIFIED</name>
        <value><![CDATA[3]]></value>
      </constant>
      <constant namespace="ezp\Content" line="41">
        <name>SORT_FIELD_SECTION</name>
        <value><![CDATA[4]]></value>
      </constant>
      <constant namespace="ezp\Content" line="42">
        <name>SORT_FIELD_DEPTH</name>
        <value><![CDATA[5]]></value>
      </constant>
      <constant namespace="ezp\Content" line="43">
        <name>SORT_FIELD_CLASS_IDENTIFIER</name>
        <value><![CDATA[6]]></value>
      </constant>
      <constant namespace="ezp\Content" line="44">
        <name>SORT_FIELD_CLASS_NAME</name>
        <value><![CDATA[7]]></value>
      </constant>
      <constant namespace="ezp\Content" line="45">
        <name>SORT_FIELD_PRIORITY</name>
        <value><![CDATA[8]]></value>
      </constant>
      <constant namespace="ezp\Content" line="46">
        <name>SORT_FIELD_NAME</name>
        <value><![CDATA[9]]></value>
      </constant>
      <constant namespace="ezp\Content" line="47">
        <name>SORT_FIELD_MODIFIED_SUBNODE</name>
        <value><![CDATA[10]]></value>
      </constant>
      <constant namespace="ezp\Content" line="48">
        <name>SORT_FIELD_NODE_ID</name>
        <value><![CDATA[11]]></value>
      </constant>
      <constant namespace="ezp\Content" line="49">
        <name>SORT_FIELD_CONTENTOBJECT_ID</name>
        <value><![CDATA[12]]></value>
      </constant>
      <constant namespace="ezp\Content" line="51">
        <name>SORT_ORDER_DESC</name>
        <value><![CDATA[0]]></value>
      </constant>
      <constant namespace="ezp\Content" line="52">
        <name>SORT_ORDER_ASC</name>
        <value><![CDATA[1]]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="59" package="Default">
        <name>getParent</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Returns the parent Location]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="return" description="" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="66" package="Default">
        <name>setParent</name>
        <type>function</type>
        <docblock line="61">
          <description><![CDATA[Sets the parent Location and updates inverse side ( $parent->children )]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="param" description="" type="\ezp\Content\Location" variable="$parent">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$parent</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="73" package="Default">
        <name>getContent</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Returns the Content the Location holds]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="return" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="80" package="Default">
        <name>setContent</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Sets the content and updates inverse side ( $content->locations )]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="87" package="Default">
        <name>getChildren</name>
        <type>function</type>
        <docblock line="82">
          <description><![CDATA[Returns collection of children locations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="return" description="" type="\ezp\Content\Location[]">
            <type by_reference="false">\ezp\Content\Location[]</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/Content/Language.php" hash="12da02dbfc30abd4e0782e676fbb4af7">
    <parse_markers>
      <critical line="29" code="50019">No short description for property $readWriteProperties</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Language.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="ModelDefinition">ezp\Base\ModelDefinition</namespace-alias>
    <namespace-alias name="LanguageValue">ezp\Persistence\Content\Language</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content" line="27" package="Default">
      <name>Language</name>
      <full_name>\ezp\Content\Language</full_name>
      <extends>\ezp\Base\Model</extends>
      <extends>\ezp\Base\ModelDefinition</extends>
      <docblock line="15">
        <description><![CDATA[This class represents a Language object]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="property-read" description="The ID, automatically assigned by the persistence layer" type="integer" variable="$id">
          <type by_reference="false">integer</type>
        </tag>
        <tag line="15" name="property" description="Locale for this Language object" type="string" variable="$locale">
          <type by_reference="false">string</type>
        </tag>
        <tag line="15" name="property" description="Human readable name of the language" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="15" name="property" description="Defines if language is enabled or not." type="bool" variable="$isEnabled">
          <type by_reference="false">bool</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="33" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'locale' => true,
        'name' => true,
        'isEnabled' => true,
    )]]></default>
        <docblock line="29">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="inherit-doc" description=""/>
          <tag line="29" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="43" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Constructor, setups all internal objects.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content" line="54" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[Returns definition of the language object, atm: permissions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="access" description="private"/>
          <tag line="48" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Section/Proxy.php" hash="e32fbebcdd63ea769fb7c71886f7bcef">
    <parse_markers>
      <error line="26" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Section/Proxy.php</error>
    </parse_markers>
    <namespace-alias name="ModelProxy">ezp\Base\Proxy\Model</namespace-alias>
    <namespace-alias name="Section">ezp\Content\Section</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Section" line="24" package="Default">
      <name>Proxy</name>
      <full_name>\ezp\Content\Section\Proxy</full_name>
      <extends>\ezp\Base\Proxy\Model</extends>
      <extends>\ezp\Content\Section</extends>
      <docblock line="14">
        <description><![CDATA[This class represents a Proxy Section object]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="property-read" description="The ID, automatically assigned by the persistence layer" type="integer" variable="$id">
          <type by_reference="false">integer</type>
        </tag>
        <tag line="14" name="property" description="Unique identifier for the section." type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property" description="Human readable name of the section (preferably short for gui's)" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Section" line="26">
        <name>__construct</name>
        <type>function</type>
        <argument line="26">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="26">
          <name>$service</name>
          <default><![CDATA[]]></default>
          <type>Service</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\Section" line="37" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[Returns definition of the section object, atm: permissions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="access" description="private"/>
          <tag line="31" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Section/Concrete.php" hash="869c8a1b100f9f7ca10911ae96fc42e5">
    <parse_markers>
      <critical line="30" code="50019">No short description for property $readWriteProperties</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Section/Concrete.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="Repository">ezp\Base\Repository</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="Section">ezp\Content\Section</namespace-alias>
    <namespace-alias name="SectionValue">ezp\Persistence\Content\Section</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Section" line="28" package="Default">
      <name>Concrete</name>
      <full_name>\ezp\Content\Section\Concrete</full_name>
      <extends>\ezp\Base\Model</extends>
      <extends>\ezp\Content\Section</extends>
      <docblock line="18">
        <description><![CDATA[This class represents a Concrete Section object]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="18" name="property-read" description="The ID, automatically assigned by the persistence layer" type="integer" variable="$id">
          <type by_reference="false">integer</type>
        </tag>
        <tag line="18" name="property" description="Unique identifier for the section." type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="18" name="property" description="Human readable name of the section (preferably short for gui's)" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="34" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'identifier' => true,
        'name' => true,
    )]]></default>
        <docblock line="30">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="inherit-doc" description=""/>
          <tag line="30" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Section" line="43" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Constructor, setups all internal objects.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\Section" line="54" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[Returns definition of the section object, atm: permissions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="access" description="private"/>
          <tag line="48" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Section/Service.php" hash="9fd229a57cf636a7560107e739b2fcde">
    <parse_markers>
      <error line="24" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $section in create()</error>
      <error line="41" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $section in update()</error>
      <error line="111" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $section in assign()</error>
      <error line="131" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $section in delete()</error>
      <error line="157" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $vo in buildDomainObject()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Section/Service.php</error>
    </parse_markers>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="Forbidden">ezp\Base\Exception\Forbidden</namespace-alias>
    <namespace-alias name="BaseService">ezp\Base\Service</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="Section">ezp\Content\Section</namespace-alias>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Section" line="22" package="Default">
      <name>Service</name>
      <full_name>\ezp\Content\Section\Service</full_name>
      <extends>\ezp\Base\Service</extends>
      <docblock line="19">
        <description><![CDATA[Section service, used for section operations]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Section" line="32" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Creates the a new Section in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="\ezp\Content\Section" variable="$section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
          <tag line="24" name="return" description="The newly create section" type="\ezp\Content\Section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
          <tag line="24" name="todo" description="Should api be adjusted to take name and identifier like handler instead of object?"/>
          <tag line="24" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Section" line="48" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[Updates $section in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="param" description="" type="\ezp\Content\Section" variable="$section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
          <tag line="41" name="return" description="" type="\ezp\Content\Section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
          <tag line="41" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Section" line="64" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Loads a Section from its id ($sectionId)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="" type="int" variable="$sectionId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="57" name="return" description="" type="\ezp\Content\Section|null">
            <type by_reference="false">\ezp\Content\Section</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="57" name="throws" description="if section could not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Section" line="84" package="Default">
        <name>loadByIdentifier</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Loads a Section from its identifier ($sectionIdentifier)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="" type="string" variable="$sectionIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="return" description="" type="\ezp\Content\Section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
          <tag line="77" name="throws" description="if section could not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$sectionIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Section" line="103" package="Default">
        <name>countAssignedContents</name>
        <type>function</type>
        <docblock line="97">
          <description><![CDATA[Counts the contents which $section is assigned to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="param" description="" type="mixed" variable="$sectionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="97" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Section" line="119" package="Default">
        <name>assign</name>
        <type>function</type>
        <docblock line="111">
          <description><![CDATA[Counts the contents which $section is assigned to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="111" name="param" description="" type="\ezp\Content\Section" variable="$section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
          <tag line="111" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="111" name="throws" description="If user does not have access to view provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
        <argument line="119">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Section" line="142" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="131">
          <description><![CDATA[Deletes $section from content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="131" name="param" description="" type="\ezp\Content\Section" variable="$section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
          <tag line="131" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="131" name="throws" description="if section can not be deleted because it is still assigned to some contents." type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
          <tag line="131" name="throws" description="If the specified section is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="131" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\Section" line="163" package="Default">
        <name>buildDomainObject</name>
        <type>function</type>
        <docblock line="157">
          <description><![CDATA[Build DO based on VO]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="157" name="param" description="" type="\ezp\Persistence\ValueObject" variable="$vo">
            <type by_reference="false">\ezp\Persistence\ValueObject</type>
          </tag>
          <tag line="157" name="return" description="" type="\ezp\Content\Section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
        </docblock>
        <argument line="163">
          <name>$vo</name>
          <default><![CDATA[]]></default>
          <type>ValueObject</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Media/Type.php" hash="42dc967404085328c7dc8fc35ad1b2f9">
    <parse_markers>
      <error line="37" code="50018">No DocBlock was found for property $allowedValidators</error>
      <error line="53" code="50018">No DocBlock was found for property $allowedSettings</error>
      <error line="68" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="101" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $subject in onFieldSetValue()</error>
      <error line="101" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in onFieldSetValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Media/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="Field">ezp\Content\Field</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="Observable">ezp\Base\Observable</namespace-alias>
    <namespace-alias name="BinaryFile">ezp\Io\BinaryFile</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Media" line="24" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\Media\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <docblock line="19">
        <description><![CDATA[The TextLine field type.]]></description>
        <long-description><![CDATA[<p>This field type represents a simple string.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\Media" line="26">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA['ezmedia']]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\Media" line="27">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[false]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\Media" line="29">
        <name>TYPE_FLASH</name>
        <value><![CDATA['flash']]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="37">
        <name>$allowedValidators</name>
        <default><![CDATA[array(
        'ezp\\Content\\FieldType\\BinaryFile\\FileSizeValidator'
    )]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="53">
        <name>$allowedSettings</name>
        <default><![CDATA[array(
        'mediaType' => self::TYPE_HTML5_VIDEO
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Media" line="63" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="return" description="" type="\ezp\Content\FieldType\Media\Value">
            <type by_reference="false">\ezp\Content\FieldType\Media\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Media" line="78" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Checks if $inputValue can be parsed.]]></description>
          <long-description><![CDATA[<p>If the $inputValue actually can be parsed, the value is returned.
Otherwise, an \ezp\Base\Exception\BadFieldTypeInput exception is thrown</p>]]></long-description>
          <tag line="68" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="68" name="throws" description="" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="68" name="param" description="" type="\ezp\Content\FieldType\Media\Value" variable="$inputValue">
            <type by_reference="false">\ezp\Content\FieldType\Media\Value</type>
          </tag>
          <tag line="68" name="return" description="" type="\ezp\Content\FieldType\Media\Value">
            <type by_reference="false">\ezp\Content\FieldType\Media\Value</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Media" line="96" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="91">
          <description><![CDATA[BinaryFile does not support sorting]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Media" line="108" package="Default">
        <name>onFieldSetValue</name>
        <type>function</type>
        <docblock line="101">
          <description><![CDATA[Fills in $value->type and $value->pluginspage according to field settings set in FieldDefinition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="101" name="see" description="\ezp\Content\FieldType::onFieldSetValue()" refers="\ezp\Content\FieldType::onFieldSetValue()"/>
          <tag line="101" name="param" description="" type="\ezp\Base\Observable" variable="$subject">
            <type by_reference="false">\ezp\Base\Observable</type>
          </tag>
          <tag line="101" name="param" description="" type="\ezp\Content\FieldType\Media\Value" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\Media\Value</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$subject</name>
          <default><![CDATA[]]></default>
          <type>Observable</type>
        </argument>
        <argument line="108">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Media/Value.php" hash="c1be5f6f67c6ce9dd79b2fde43777818">
    <parse_markers>
      <critical line="95" code="50019">No short description for property $handler</critical>
      <error line="122" code="50012">No short description for method fromString()</error>
      <error line="122" code="50015">Argument $stringValue is missing from the Docblock of fromString()</error>
      <error line="131" code="50012">No short description for method __toString()</error>
      <error line="182" code="50012">No short description for method getTitle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Media/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Media" line="22" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\Media\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="15">
        <description><![CDATA[Value for Media field type]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="property" description="The name of the file in the eZ publish var directory (for example &quot;44b963c9e8d1ffa80cbb08e84d576735.avi&quot;)." type="string" variable="$filename">
          <type by_reference="false">string</type>
        </tag>
        <tag line="15" name="property" description="" type="string" variable="$mimeType">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="29" package="Default">
        <name>$file</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[BinaryFile object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$originalFilename</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Original file name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="43" package="Default">
        <name>$width</name>
        <default><![CDATA[0]]></default>
        <docblock line="38">
          <description><![CDATA[The playback width - in number of pixels (for example "640").]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$height</name>
        <default><![CDATA[0]]></default>
        <docblock line="45">
          <description><![CDATA[The playback height - in number of pixels (for example "480").]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="57" package="Default">
        <name>$hasController</name>
        <default><![CDATA[true]]></default>
        <docblock line="52">
          <description><![CDATA[Flag indicating to show controller or not]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="64" package="Default">
        <name>$controls</name>
        <default><![CDATA[false]]></default>
        <docblock line="59">
          <description><![CDATA[Real Media specific - controls the control-bar]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="71" package="Default">
        <name>$isAutoplay</name>
        <default><![CDATA[true]]></default>
        <docblock line="66">
          <description><![CDATA[Automatically start playback or not]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="79" package="Default">
        <name>$pluginspage</name>
        <default><![CDATA[]]></default>
        <docblock line="73">
          <description><![CDATA[A URL that leads to the plug-in that is required for proper playback.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="see" description="\ezp\Content\FieldType\Media\Handler::getPluginspageByType" refers="\ezp\Content\FieldType\Media\Handler::getPluginspageByType"/>
          <tag line="73" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="86" package="Default">
        <name>$quality</name>
        <default><![CDATA[]]></default>
        <docblock line="81">
          <description><![CDATA[Flash specific - controls the quality of the media.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="93" package="Default">
        <name>$isLoop</name>
        <default><![CDATA[false]]></default>
        <docblock line="88">
          <description><![CDATA[Flag indicating if media should be looped playback or single-cycle]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="98" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="95">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="var" description="" type="\ezp\Content\FieldType\Media\Handler">
            <type by_reference="false">\ezp\Content\FieldType\Media\Handler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Media" line="111" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="100">
          <description><![CDATA[Construct a new Value object.]]></description>
          <long-description><![CDATA[<p>To affect a BinaryFile object to the $file property, use the handler:</p>

<pre><code>use \ezp\Content\FieldType\Media;
$binaryValue = new BinaryFile\Value;
$binaryValue->file = $binaryValue->getHandler()->createFromLocalPath( '/path/to/local/file.txt' );
</code></pre>]]></long-description>
          <tag line="100" name="param" description="File to use" type="null|string" variable="$file">
            <type by_reference="false">null</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="111">
          <name>$file</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\Media" line="126" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="122">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="122" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
          <tag line="122" name="return" description="" type="\ezp\Content\FieldType\Media\Value">
            <type by_reference="false">\ezp\Content\FieldType\Media\Value</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Media" line="134" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="131">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="131" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Media" line="144" package="Default">
        <name>__get</name>
        <type>function</type>
        <docblock line="139">
          <description><![CDATA[Magic getter]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="139" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Media" line="177" package="Default">
        <name>getHandler</name>
        <type>function</type>
        <docblock line="171">
          <description><![CDATA[Returns handler object.]]></description>
          <long-description><![CDATA[<p>Useful manipulate {@link self::$file}</p>]]></long-description>
          <tag line="171" name="return" description="" type="\ezp\Content\FieldType\Media\Handler">
            <type by_reference="false">\ezp\Content\FieldType\Media\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Media" line="185" package="Default">
        <name>getTitle</name>
        <type>function</type>
        <docblock line="182">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="182" name="see" description="\ezp\Content\FieldType\ValueInterface::getTitle()" refers="\ezp\Content\FieldType\ValueInterface::getTitle()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Media/Handler.php" hash="ceecd26dc7dc33a1a1dde1a439256733">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Media/Handler.php</error>
    </parse_markers>
    <namespace-alias name="BinaryFileHandler">ezp\Content\FieldType\BinaryFile\Handler</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Media" line="16" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Content\FieldType\Media\Handler</full_name>
      <extends>\ezp\Content\FieldType\BinaryFile\Handler</extends>
      <docblock line="13">
        <description><![CDATA[Media file handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\Media" line="18">
        <name>PLUGINSPAGE_FLASH</name>
        <value><![CDATA['http://www.adobe.com/go/EN_US-H-GET-FLASH']]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Media" line="30" package="Default">
        <name>getPluginspageByType</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Returns default plugin page depending on $mediaType]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="" variable="$mediaType"/>
          <tag line="24" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$mediaType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Image/Type.php" hash="f90a27aedfb06ab8c0a010f3ac89e712">
    <parse_markers>
      <critical line="25" code="50019">No short description for property $allowedValidators</critical>
      <error line="32" code="50012">No short description for method getDefaultValue()</error>
      <error line="40" code="50010">No DocBlock was found for method canParseValue()</error>
      <error line="53" code="50012">No short description for method getSortInfo()</error>
      <error line="62" code="50012">No short description for method onFieldSetValue()</error>
      <error line="62" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $subject in onFieldSetValue()</error>
      <error line="62" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in onFieldSetValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Image/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="Field">ezp\Content\Field</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <namespace-alias name="Observable">ezp\Base\Observable</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Image" line="20" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\Image\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <docblock line="17">
        <description><![CDATA[The Image field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\Image" line="22">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA['ezimage']]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\Image" line="23">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[false]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$allowedValidators</name>
        <default><![CDATA[array(
        'ezp\\Content\\FieldType\\BinaryFile\\FileSizeValidator'
    )]]></default>
        <docblock line="25">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="see" description="\ezp\Content\FieldType::$allowedValidators" refers="\ezp\Content\FieldType::$allowedValidators"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Image" line="35" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="return" description="" type="\ezp\Content\FieldType\Image\Value">
            <type by_reference="false">\ezp\Content\FieldType\Image\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Image" line="40">
        <name>canParseValue</name>
        <type>function</type>
        <argument line="40">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Image" line="57" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="see" description="\ezp\Content\FieldType::getSortInfo()" refers="\ezp\Content\FieldType::getSortInfo()"/>
          <tag line="53" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Image" line="67" package="Default">
        <name>onFieldSetValue</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="param" description="" type="\ezp\Base\Observable" variable="$subject">
            <type by_reference="false">\ezp\Base\Observable</type>
          </tag>
          <tag line="62" name="param" description="" type="\ezp\Content\FieldType\Image\Value" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\Image\Value</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$subject</name>
          <default><![CDATA[]]></default>
          <type>Observable</type>
        </argument>
        <argument line="67">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Image/Alias.php" hash="3283475b0ba33dc4c3261c4e1c972b13">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Image/Alias.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Image" line="28" package="Default">
      <name>Alias</name>
      <full_name>\ezp\Content\FieldType\Image\Alias</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[Class representing an image alias]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="property-read" description="" type="\ezp\Io\ContentType" variable="$mimeType">
          <type by_reference="false">\ezp\Io\ContentType</type>
        </tag>
        <tag line="14" name="property-read" description="The name of the file (for example &quot;my_image.png&quot;)." type="string" variable="$filename">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property-read" description="The file suffix, aka &quot;extension&quot; (for example &quot;png&quot;)." type="string" variable="$suffix">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property-read" description="The path to the image (for example &quot;var/storage/images/test/199-2-eng-GB&quot;)." type="string" variable="$dirpath">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property-read" description="The basename of the image file, without extension (for example &quot;apple&quot;)." type="string" variable="$basename">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property-read" description="Complete path + name of image file (for example &quot;var/storage/images/test/199-2-eng-GB/apple.png&quot;)." type="string" variable="$url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property-read" description="Same as $url" type="string" variable="$fullPath">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property-read" description="A UNIX timestamp pinpointing the exact date/time when the alias was last modified. For the &quot;original&quot; alias, the timestamp will reveal the time when the image was originally uploaded." type="int" variable="$timestamp">
          <type by_reference="false">int</type>
        </tag>
        <tag line="14" name="property-read" description="The number of bytes that the image consumes." type="int" variable="$filesize">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[The name of the variation (for example "original").]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="42" package="Default">
        <name>$width</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[The width as number of pixels (for example 320).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="49" package="Default">
        <name>$height</name>
        <default><![CDATA[]]></default>
        <docblock line="44">
          <description><![CDATA[The height as number of pixels (for example 256).]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="56" package="Default">
        <name>$fileInfo</name>
        <default><![CDATA[]]></default>
        <docblock line="51">
          <description><![CDATA[FileInfo object for image alias]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="var" description="" type="\ezp\Io\FileInfo">
            <type by_reference="false">\ezp\Io\FileInfo</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="63" package="Default">
        <name>$alternativeText</name>
        <default><![CDATA[]]></default>
        <docblock line="58">
          <description><![CDATA[The alternative image text (for example "Picture of an apple.").]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="70" package="Default">
        <name>$text</name>
        <default><![CDATA[]]></default>
        <docblock line="65">
          <description><![CDATA[Contains the "alternative_text" of the original image.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="77" package="Default">
        <name>$originalFilename</name>
        <default><![CDATA[]]></default>
        <docblock line="72">
          <description><![CDATA[The name of the original file (for example "apple.png").]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="89" package="Default">
        <name>$aliasKey</name>
        <default><![CDATA[]]></default>
        <docblock line="79">
          <description><![CDATA[A internal CRC32 value which is used when an alias is created.]]></description>
          <long-description><![CDATA[<p>This value is based on the filters that were used (parameters included)
and is checked when an alias is accessed.</p>

<p>If this values differs from the configured filters (in image.ini or an override),
the system will recreate the alias.</p>]]></long-description>
          <tag line="79" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="98" package="Default">
        <name>$modified</name>
        <default><![CDATA[]]></default>
        <docblock line="91">
          <description><![CDATA[DateTime object pinpointing the exact date/time when the alias was last modified.]]></description>
          <long-description><![CDATA[<p>For the "original" alias, the timestamp will reveal the time
when the image was originally uploaded.</p>]]></long-description>
          <tag line="91" name="var" description="" type="\DateTime">
            <type by_reference="false">\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="108" package="Default">
        <name>$isValid</name>
        <default><![CDATA[]]></default>
        <docblock line="100">
          <description><![CDATA[TRUE if the alias was created properly, that means all conversion and filters
were applied without problems.]]></description>
          <long-description><![CDATA[<p>It will be FALSE if the image manager is wrongly configured or if no
compatible image converters could be found.</p>]]></long-description>
          <tag line="100" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="117" package="Default">
        <name>$isNew</name>
        <default><![CDATA[]]></default>
        <docblock line="110">
          <description><![CDATA[Will be set to TRUE the first time the alias is created, the next time
(reload of the same page) it will be FALSE.]]></description>
          <long-description><![CDATA[<p>It will also be set to TRUE every time the alias is re-created due to changes in filters (see alias_key).</p>]]></long-description>
          <tag line="110" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="126" package="Default">
        <name>$info</name>
        <default><![CDATA[]]></default>
        <docblock line="119">
          <description><![CDATA[Contains extra information about the image, depending on the image type.]]></description>
          <long-description><![CDATA[<p>It will typically contain EXIF information from digital cameras or information about animated GIFs.
If there is no information, the info will be a boolean FALSE.</p>]]></long-description>
          <tag line="119" name="var" description="" type="\ezp\Base\Image\Data">
            <type by_reference="false">\ezp\Base\Image\Data</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Image" line="135" package="Default">
        <name>__get</name>
        <type>function</type>
        <docblock line="128">
          <description><![CDATA[Generic getter.]]></description>
          <long-description><![CDATA[<p>Maps legacy alias information to new properties.</p>]]></long-description>
          <tag line="128" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="128" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="135">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Image/AliasCollection.php" hash="4dbcb86449361782263d63c26cdfe961">
    <parse_markers>
      <critical line="37" code="50019">No short description for property $binaryRepository</critical>
      <critical line="42" code="50019">No short description for property $imageManager</critical>
      <critical line="47" code="50019">No short description for property $imageConf</critical>
      <error line="66" code="50010">No DocBlock was found for method __construct()</error>
      <error line="123" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $imageInfo in createOriginalAlias()</error>
      <error line="123" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $originalImageInfo in createOriginalAlias()</error>
      <error line="178" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $originalImageInfo in generateTempImageName()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Image/AliasCollection.php</error>
    </parse_markers>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="InvalidAlias">ezp\Content\FieldType\Image\Exception\InvalidAlias</namespace-alias>
    <namespace-alias name="MissingClass">ezp\Content\FieldType\Image\Exception\MissingClass</namespace-alias>
    <namespace-alias name="BinaryRepository">ezp\Base\BinaryRepository</namespace-alias>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="BinaryFile">ezp\Io\BinaryFile</namespace-alias>
    <namespace-alias name="FileInfo">ezp\Io\FileInfo</namespace-alias>
    <namespace-alias name="SysInfo">ezp\Io\SysInfo</namespace-alias>
    <namespace-alias name="DirHandler">ezp\Io\DirHandler</namespace-alias>
    <namespace-alias name="FileHandler">ezp\Io\FileHandler</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="Version">ezp\Content\Version</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Image" line="28" package="Default">
      <name>AliasCollection</name>
      <full_name>\ezp\Content\FieldType\Image\AliasCollection</full_name>
      <extends>\ezp\Base\Collection\Type</extends>
      <docblock line="24">
        <description><![CDATA[Image alias collection.]]></description>
        <long-description><![CDATA[<p>This collection can only hold image Alias objects</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$imageValue</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Image type value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="\ezp\Content\FieldType\Image\Value">
            <type by_reference="false">\ezp\Content\FieldType\Image\Value</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$binaryRepository</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="\ezp\Base\BinaryRepository">
            <type by_reference="false">\ezp\Base\BinaryRepository</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$imageManager</name>
        <default><![CDATA[]]></default>
        <docblock line="42">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="" type="\ezp\Content\FieldType\Image\Manager">
            <type by_reference="false">\ezp\Content\FieldType\Image\Manager</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$imageConf</name>
        <default><![CDATA[]]></default>
        <docblock line="47">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="" type="\ezp\Base\Configuration">
            <type by_reference="false">\ezp\Base\Configuration</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" package="Default">
        <name>$imageSerialNumber</name>
        <default><![CDATA[0]]></default>
        <docblock line="52">
          <description><![CDATA[The current serial number, the value will be 1 or higher.]]></description>
          <long-description><![CDATA[<p>The serial number is used to create unique filenames for uploaded images,
it will be increased each time an image is uploaded.</p>]]></long-description>
          <tag line="52" name="note" description="This was required to get around the problem where browsers&#10;caches image information, if two images were uploaded in one version (e.g. a draft)&#10;the browser would not load the new image since it thought it had not changed."/>
          <tag line="52" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Image" line="66">
        <name>__construct</name>
        <type>function</type>
        <argument line="66">
          <name>$imageValue</name>
          <default><![CDATA[]]></default>
          <type>Value</type>
        </argument>
        <argument line="66">
          <name>$binaryRepository</name>
          <default><![CDATA[]]></default>
          <type>BinaryRepository</type>
        </argument>
        <argument line="66">
          <name>$elements</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Image" line="83" package="Default">
        <name>offsetGet</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Returns image alias identified by $aliasName).]]></description>
          <long-description><![CDATA[<p>If needed, the alias will be created</p>]]></long-description>
          <tag line="75" name="param" description="" type="string" variable="$aliasName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="75" name="return" description="" type="\ezp\Content\FieldType\Image\Alias">
            <type by_reference="false">\ezp\Content\FieldType\Image\Alias</type>
          </tag>
          <tag line="75" name="throws" description="when trying to access to an invalid (not configured) image alias" type="\ezp\Content\FieldType\Image\Exception\InvalidAlias">
            <type by_reference="false">\ezp\Content\FieldType\Image\Exception\InvalidAlias</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$aliasName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Image" line="105" package="Default">
        <name>initializeFromLocalImage</name>
        <type>function</type>
        <docblock line="99">
          <description><![CDATA[Initializes the collection from an image path.]]></description>
          <long-description><![CDATA[<p>$imagePath will be considered as the original alias and will be moved to the appropriate storage directory.</p>]]></long-description>
          <tag line="99" name="param" description="Real (absolute) path to the image." type="string" variable="$imagePath">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$imagePath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Image" line="129" package="Default">
        <name>createOriginalAlias</name>
        <type>function</type>
        <docblock line="123">
          <description><![CDATA[Creates original image alias and resets the collection with it]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="123" name="param" description="File info object for image file stored at the right place" type="\ezp\Io\FileInfo" variable="$imageInfo">
            <type by_reference="false">\ezp\Io\FileInfo</type>
          </tag>
          <tag line="123" name="param" description="File info object for original image (e.g. that has been uploaded)" type="\ezp\Io\FileInfo" variable="$originalImageInfo">
            <type by_reference="false">\ezp\Io\FileInfo</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$imageInfo</name>
          <default><![CDATA[]]></default>
          <type>FileInfo</type>
        </argument>
        <argument line="129">
          <name>$originalImageInfo</name>
          <default><![CDATA[]]></default>
          <type>FileInfo</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Image" line="144" package="Default">
        <name>createImageAlias</name>
        <type>function</type>
        <docblock line="137">
          <description><![CDATA[Creates image alias identifed by $aliasName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="param" description="" type="string" variable="$aliasName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="137" name="return" description="" type="\ezp\Content\FieldType\Image\Alias">
            <type by_reference="false">\ezp\Content\FieldType\Image\Alias</type>
          </tag>
          <tag line="137" name="todo" description="Implement this method"/>
        </docblock>
        <argument line="144">
          <name>$aliasName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\Image" line="158" package="Default">
        <name>getDestinationPath</name>
        <type>function</type>
        <docblock line="149">
          <description><![CDATA[Returns path (directory) where aliases should be stored, depending on content version status and $isImageOwner]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="149" name="param" description="Is considered image owner a field that has created the field collection. See {@link \eZImageAliasHandler::isImageOwner()}" type="bool" variable="$isImageOwner">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="149" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="149" name="todo" description="Implement for already published content"/>
          <tag line="149" name="see" description="\eZImageAliasHandler::imagePath()" refers="\eZImageAliasHandler::imagePath()"/>
        </docblock>
        <argument line="158">
          <name>$isImageOwner</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\Image" line="184" package="Default">
        <name>generateTempImageName</name>
        <type>function</type>
        <docblock line="178">
          <description><![CDATA[Generates temporary image file name from $originalImageInfo]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="178" name="param" description="" type="\ezp\Io\FileInfo" variable="$originalImageInfo">
            <type by_reference="false">\ezp\Io\FileInfo</type>
          </tag>
          <tag line="178" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="184">
          <name>$originalImageInfo</name>
          <default><![CDATA[]]></default>
          <type>FileInfo</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Image/Exception/InvalidAlias.php" hash="777edc6c4629add77e7ed62d69da9639">
    <parse_markers>
      <error line="26" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Image/Exception/InvalidAlias.php</error>
    </parse_markers>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Image\Exception" line="17" package="Default">
      <name>InvalidAlias</name>
      <full_name>\ezp\Content\FieldType\Image\Exception\InvalidAlias</full_name>
      <extends>\ezp\Base\Exception\InvalidArgumentValue</extends>
      <docblock line="14">
        <description><![CDATA[Exception for invalid (not configured) image alias]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$aliasName</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Invalid alias name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Image\Exception" line="26">
        <name>__construct</name>
        <type>function</type>
        <argument line="26">
          <name>$aliasName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="26">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Image/Exception/MissingAlias.php" hash="e840572e47cffd367bd8f7351aa3a76a">
    <parse_markers>
      <error line="16" code="50018">No DocBlock was found for property $aliasName</error>
      <error line="18" code="50010">No DocBlock was found for method __construct()</error>
      <error line="14" code="50000">No DocBlock was found for MissingAlias</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Image/Exception/MissingAlias.php</error>
    </parse_markers>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Image\Exception" line="14">
      <name>MissingAlias</name>
      <full_name>\ezp\Content\FieldType\Image\Exception\MissingAlias</full_name>
      <extends>\ezp\Base\Exception\Logic</extends>
      <property final="false" static="false" visibility="public" line="16">
        <name>$aliasName</name>
        <default><![CDATA[]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Image\Exception" line="18">
        <name>__construct</name>
        <type>function</type>
        <argument line="18">
          <name>$aliasName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="18">
          <name>$previous</name>
          <default><![CDATA[]]></default>
          <type>PHPExcetion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Image/Value.php" hash="f23ee612a035c2e796fc2b5443336e09">
    <parse_markers>
      <critical line="34" code="50019">No short description for property $isValid</critical>
      <error line="47" code="50018">No DocBlock was found for property $properties</error>
      <error line="56" code="50015">Argument $imagePath is missing from the Docblock of __construct()</error>
      <error line="56" code="50015">Argument $alternativeText is missing from the Docblock of __construct()</error>
      <error line="66" code="50012">No short description for method fromString()</error>
      <error line="76" code="50012">No short description for method __toString()</error>
      <error line="119" code="50012">No short description for method getTitle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Image/Value.php</error>
    </parse_markers>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BinaryRepository">ezp\Base\BinaryRepository</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Image" line="18" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\Image\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="15">
        <description><![CDATA[Value for Image field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="25" package="Default">
        <name>$alternativeText</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[The alternative image text (for example "Picture of an apple.").]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$originalFilename</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[Original file name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="38" package="Default">
        <name>$isValid</name>
        <default><![CDATA[]]></default>
        <docblock line="34">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="45" package="Default">
        <name>$aliasList</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[Image alias list, indexed by alias name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="\ezp\Content\FieldType\Image\AliasCollection">
            <type by_reference="false">\ezp\Content\FieldType\Image\AliasCollection</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47">
        <name>$properties</name>
        <default><![CDATA[array(
        'fieldId' => null,
        'contentId' => null,
        'versionNo' => null,
        // Publication status (one of \ezp\Content\Version::STATUS_*)
        'status' => null,
        'languageCode' => null,
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Image" line="59" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Construct a new Value object.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="59">
          <name>$imagePath</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="59">
          <name>$alternativeText</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\Image" line="71" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="param" description="Image path (can be real path or relative to eZ Publish root)." type="string" variable="$stringValue">
            <type by_reference="false">string</type>
          </tag>
          <tag line="66" name="return" description="" type="\ezp\Content\FieldType\Media\Value">
            <type by_reference="false">\ezp\Content\FieldType\Media\Value</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Image" line="79" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Image" line="93" package="Default">
        <name>__get</name>
        <type>function</type>
        <docblock line="88">
          <description><![CDATA[Magic getter]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Image" line="122" package="Default">
        <name>getTitle</name>
        <type>function</type>
        <docblock line="119">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="119" name="see" description="\ezp\Content\FieldType\ValueInterface::getTitle()" refers="\ezp\Content\FieldType\ValueInterface::getTitle()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Image/Manager.php" hash="104cca7b4a61e13926779d1f42483704">
    <parse_markers>
      <error line="25" code="50018">No DocBlock was found for property $className</error>
      <error line="49" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $aliasCollection in __construct()</error>
      <error line="49" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $binaryRepository in __construct()</error>
      <notice line="63" code="50013">Parameter $parameters could not be found in createImageAlias()</notice>
      <error line="78" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $imageInfo in createOriginalAlias()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Image/Manager.php</error>
    </parse_markers>
    <namespace-alias name="Carpet">ezp\Base\Legacy\Carpet</namespace-alias>
    <namespace-alias name="ImageData">ezp\Base\Image\Data</namespace-alias>
    <namespace-alias name="BinaryRepository">ezp\Base\BinaryRepository</namespace-alias>
    <namespace-alias name="AliasCollection">ezp\Content\FieldType\Image\AliasCollection</namespace-alias>
    <namespace-alias name="FileInfo">ezp\Io\FileInfo</namespace-alias>
    <namespace-alias name="DateTime">DateTime</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Image" line="23" package="Default">
      <name>Manager</name>
      <full_name>\ezp\Content\FieldType\Image\Manager</full_name>
      <extends>\ezp\Base\Legacy\Carpet</extends>
      <docblock line="18">
        <description><![CDATA[Wraps eZImageManager class from old eZ Publish]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="18" name="note" description="This implementation is to be changed not to be dependent on the old eZImageManager"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="25">
        <name>$className</name>
        <default><![CDATA['eZImageManager']]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="32" package="Default">
        <name>$aliasCollection</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[Image alias collection object for which this manager is used]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="\ezp\Content\FieldType\Image\AliasCollection">
            <type by_reference="false">\ezp\Content\FieldType\Image\AliasCollection</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$binaryRepository</name>
        <default><![CDATA[]]></default>
        <docblock line="34">
          <description><![CDATA[The binary repository.]]></description>
          <long-description><![CDATA[<p>Can be used to store image aliases once generation is done</p>]]></long-description>
          <tag line="34" name="var" description="" type="\ezp\Base\BinaryRepository">
            <type by_reference="false">\ezp\Base\BinaryRepository</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$object</name>
        <default><![CDATA[]]></default>
        <docblock line="42">
          <description><![CDATA[Legacy image manager class]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="" type="\eZImageManager">
            <type by_reference="false">\eZImageManager</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Image" line="55" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="49">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="param" description="The image alias collection calling this manager" type="\ezp\Content\FieldType\Image\AliasCollection" variable="$aliasCollection">
            <type by_reference="false">\ezp\Content\FieldType\Image\AliasCollection</type>
          </tag>
          <tag line="49" name="param" description="The binary repository" type="\ezp\Base\BinaryRepository" variable="$binaryRepository">
            <type by_reference="false">\ezp\Base\BinaryRepository</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$aliasCollection</name>
          <default><![CDATA[]]></default>
          <type>AliasCollection</type>
        </argument>
        <argument line="55">
          <name>$binaryRepository</name>
          <default><![CDATA[]]></default>
          <type>BinaryRepository</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Image" line="71" package="Default">
        <name>createImageAlias</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Creates the image alias $aliasName if it's not already part of the
existing aliases]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="param" description="Name of the alias to create" type="string" variable="$aliasName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="63" name="param" description="Optional array that can be used to specify the original image's basename" type="array" variable="$parameters">
            <type by_reference="false">array</type>
          </tag>
          <tag line="63" name="return" description="" type="\ezp\Content\FieldType\Image\Alias">
            <type by_reference="false">\ezp\Content\FieldType\Image\Alias</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$aliasName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Image" line="86" package="Default">
        <name>createOriginalAlias</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Creates original alias from $imageInfo.]]></description>
          <long-description><![CDATA[<p>$originalFilename will be stored in the alias object</p>]]></long-description>
          <tag line="78" name="param" description="Object containing all information regarding physical image file" type="\ezp\Io\FileInfo" variable="$imageInfo">
            <type by_reference="false">\ezp\Io\FileInfo</type>
          </tag>
          <tag line="78" name="param" description="The original file name to store in the alias ($imageInfo filename is a temporary unique hash)" type="string" variable="$originalFilename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="78" name="return" description="" type="\ezp\Content\FieldType\Image\Alias">
            <type by_reference="false">\ezp\Content\FieldType\Image\Alias</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$imageInfo</name>
          <default><![CDATA[]]></default>
          <type>FileInfo</type>
        </argument>
        <argument line="86">
          <name>$originalFilename</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\Image" line="150" package="Default">
        <name>buildImageData</name>
        <type>function</type>
        <docblock line="143">
          <description><![CDATA[Builds an {@link \ezp\Base\Image\Data} object from $imageInfo and maps properties]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="143" name="param" description="Image info array returned by legacy image analyzer" type="array" variable="$imageInfo">
            <type by_reference="false">array</type>
          </tag>
          <tag line="143" name="see" description="\eZImageManager::analyzeImage()" refers="\eZImageManager::analyzeImage()"/>
          <tag line="143" name="return" description="" type="\ezp\Base\Image\Data">
            <type by_reference="false">\ezp\Base\Image\Data</type>
          </tag>
        </docblock>
        <argument line="150">
          <name>$imageInfo</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Country/Type.php" hash="77422d5e627dd77436214c98d6254940">
    <parse_markers>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Country/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <namespace-alias name="RuntimeException">RuntimeException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Country" line="21" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\Country\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <docblock line="16">
        <description><![CDATA[The Country field type.]]></description>
        <long-description><![CDATA[<p>This field type represents a simple string.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\Country" line="23">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA["ezcountry"]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\Country" line="24">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[true]]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Country" line="34" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="todo" description="Is a default value really possible with this type?&#10;Shouldn't an exception be used?"/>
          <tag line="26" name="return" description="" type="\ezp\Content\FieldType\Country\Value">
            <type by_reference="false">\ezp\Content\FieldType\Country\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Country" line="48" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Checks if $inputValue can be parsed.]]></description>
          <long-description><![CDATA[<p>If the $inputValue actually can be parsed, the value is returned.
Otherwise, an \ezp\Base\Exception\BadFieldTypeInput exception is thrown</p>]]></long-description>
          <tag line="39" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="39" name="param" description="" type="\ezp\Content\FieldType\Country\Value" variable="$inputValue">
            <type by_reference="false">\ezp\Content\FieldType\Country\Value</type>
          </tag>
          <tag line="39" name="return" description="" type="\ezp\Content\FieldType\Country\Value">
            <type by_reference="false">\ezp\Content\FieldType\Country\Value</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Country" line="62" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Returns information for FieldValue->$sortKey relevant to the field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Country/Exception/InvalidValue.php" hash="8df756e021c96fa0258fecdda3515605">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Country/Exception/InvalidValue.php</error>
    </parse_markers>
    <namespace-alias name="BaseException">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="Exception">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Country\Exception" line="18" package="Default">
      <name>InvalidValue</name>
      <full_name>\ezp\Content\FieldType\Country\Exception\InvalidValue</full_name>
      <extends>\Exception</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[Exception thrown if an invalid identifier is used for a country]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Country\Exception" line="25" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Creates a new exception when $value is invalid.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Country/Value.php" hash="0e5b4fa849d05338a37c5b86dbda88c6">
    <parse_markers>
      <error line="64" code="50010">No DocBlock was found for method getCountriesInfo()</error>
      <error line="69" code="50012">No short description for method fromString()</error>
      <error line="69" code="50015">Argument $stringValue is missing from the Docblock of fromString()</error>
      <error line="77" code="50012">No short description for method __toString()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Country/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="InvalidValue">ezp\Content\FieldType\Country\Exception\InvalidValue</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Country" line="19" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\Country\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="16">
        <description><![CDATA[Value for Country field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" package="Default">
        <name>$values</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[Countries values]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="33" package="Default">
        <name>$data</name>
        <default><![CDATA[array()]]></default>
        <docblock line="28">
          <description><![CDATA[Countries data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Country" line="40" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Construct a new Value object and initialize it with its $values]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="param" description="" type="\string[]" variable="$values">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$values</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Country" line="64">
        <name>getCountriesInfo</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\Country" line="72" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
        <argument line="72">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Country" line="80" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Keyword/Type.php" hash="b403a8cb1fd77ed28b7184221715b358">
    <parse_markers>
      <error line="36" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Keyword/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Keyword" line="20" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\Keyword\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <docblock line="15">
        <description><![CDATA[Keyword field types]]></description>
        <long-description><![CDATA[<p>Represents keywords.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\Keyword" line="22">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA["ezkeyword"]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\Keyword" line="23">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[true]]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Keyword" line="31" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="25">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="return" description="" type="\ezp\Content\FieldType\Keyword\Value">
            <type by_reference="false">\ezp\Content\FieldType\Keyword\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Keyword" line="46" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Checks if value can be parsed.]]></description>
          <long-description><![CDATA[<p>If the value actually can be parsed, the value is returned.</p>]]></long-description>
          <tag line="36" name="todo" description="Implement it"/>
          <tag line="36" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="36" name="param" description="" type="mixed" variable="$inputValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="36" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Keyword" line="57" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Returns information for FieldValue->$sortKey relevant to the field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="todo" description="Review this, created from copy/paste to unblock failing tests!"/>
          <tag line="51" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Keyword/Value.php" hash="45fb739bf8bfa296f6469776f6880e45">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Keyword/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Keyword" line="17" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\Keyword\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="14">
        <description><![CDATA[Value for Keyword field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$values</name>
        <default><![CDATA[array()]]></default>
        <docblock line="19">
          <description><![CDATA[Content of the value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Keyword" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Construct a new Value object and initialize with $values]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="\string[]|string" variable="$values">
            <type by_reference="false">\string[]</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$values</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\Keyword" line="59" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Initializes the keyword value with a simple string.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="A comma separated list of tags, eg: &quot;php, eZ Publish, html5&quot; Space after comma is optional, each tag is trimmed to remove it." type="string" variable="$stringValue">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="return" description="Instance of the keyword value" type="\ezp\Content\FieldType\Keyword\Value">
            <type by_reference="false">\ezp\Content\FieldType\Keyword\Value</type>
          </tag>
          <tag line="51" name="throws" description="" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Keyword" line="69" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Returns a string representation of the keyword value.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="return" description="A comma separated list of tags, eg: &quot;php, eZ Publish, html5&quot;" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/OnCreate.php" hash="62aa36f6eeaf89fbe1fa01e4dd93ba66">
    <parse_markers>
      <error line="31" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $repository in onPreCreate()</error>
      <error line="31" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in onPreCreate()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $repository in onPostCreate()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in onPostCreate()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/OnCreate.php</error>
    </parse_markers>
    <namespace-alias name="Repository">ezp\Base\Repository</namespace-alias>
    <namespace-alias name="Field">ezp\Content\Field</namespace-alias>
    <interface namespace="ezp\Content\FieldType" line="29" package="Default">
      <name>OnCreate</name>
      <full_name>\ezp\Content\FieldType\OnCreate</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[This interface is used to add on create events handling to a FieldType]]></description>
        <long-description><![CDATA[<pre><code><?php
use ezp\Content\FieldType\OnCreate;

class MyField extends FieldType implements OnCreate
{
}
?>
</code></pre>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="37" package="Default">
        <name>onPreCreate</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[Event handler for pre_create, triggered by the version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="param" description="The repository instance" type="\ezp\Base\Repository" variable="$repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
          <tag line="31" name="param" description="The Field being created" type="\ezp\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Content\Field</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>Repository</type>
        </argument>
        <argument line="37">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="45" package="Default">
        <name>onPostCreate</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Event handler for post_create, triggered by the version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="The repository instance" type="\ezp\Base\Repository" variable="$repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
          <tag line="39" name="param" description="The Field being created" type="\ezp\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Content\Field</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>Repository</type>
        </argument>
        <argument line="45">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Content/FieldType/TextBlock/Type.php" hash="d3010d8f67fad0b627a7f70a256b852a">
    <parse_markers>
      <error line="24" code="50018">No DocBlock was found for property $allowedValidators</error>
      <error line="26" code="50018">No DocBlock was found for property $allowedSettings</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/TextBlock/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="TextLine">ezp\Content\FieldType\TextLine\Type</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\TextBlock" line="19" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\TextBlock\Type</full_name>
      <extends>\ezp\Content\FieldType\TextLine\Type</extends>
      <docblock line="14">
        <description><![CDATA[The TextBlock field type.]]></description>
        <long-description><![CDATA[<p>Represents a larger body of text, such as text areas.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\TextBlock" line="21">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA["eztext"]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\TextBlock" line="22">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[true]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="24">
        <name>$allowedValidators</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="26">
        <name>$allowedSettings</name>
        <default><![CDATA[array( 'textColumns' => 10 )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\TextBlock" line="34" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="28">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="return" description="" type="\ezp\Content\FieldType\TextBlock\Value">
            <type by_reference="false">\ezp\Content\FieldType\TextBlock\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\TextBlock" line="44" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Returns information for FieldValue->$sortKey relevant to the field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/TextBlock/Value.php" hash="3cfc92085c656c675b6f013d6a55457c">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/TextBlock/Value.php</error>
    </parse_markers>
    <namespace-alias name="TextLineValue">ezp\Content\FieldType\TextLine\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\TextBlock" line="16" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\TextBlock\Value</full_name>
      <extends>\ezp\Content\FieldType\TextLine\Value</extends>
      <docblock line="13">
        <description><![CDATA[Value for TextBlock field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </class>
  </file>
  <file path="ezp/Content/FieldType/OnPublish.php" hash="8cd1b56ca5c380f398566c5f24e47bff">
    <parse_markers>
      <error line="31" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $repository in onPrePublish()</error>
      <error line="31" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in onPrePublish()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $repository in onPostPublish()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in onPostPublish()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/OnPublish.php</error>
    </parse_markers>
    <namespace-alias name="Repository">ezp\Base\Repository</namespace-alias>
    <namespace-alias name="Field">ezp\Content\Field</namespace-alias>
    <interface namespace="ezp\Content\FieldType" line="29" package="Default">
      <name>OnPublish</name>
      <full_name>\ezp\Content\FieldType\OnPublish</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[This interface is used to add on publish events handling to a FieldType]]></description>
        <long-description><![CDATA[<pre><code><?php
use ezp\Content\FieldType\OnPublish;

class MyField extends FieldType implements OnPublish
{
}
?>
</code></pre>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="37" package="Default">
        <name>onPrePublish</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[Event handler for pre_publish, triggered by the version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="param" description="The repository instance" type="\ezp\Base\Repository" variable="$repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
          <tag line="31" name="param" description="The Field being published" type="\ezp\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Content\Field</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>Repository</type>
        </argument>
        <argument line="37">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="45" package="Default">
        <name>onPostPublish</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Event handler for post_publish, triggered by the version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="The repository instance" type="\ezp\Base\Repository" variable="$repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
          <tag line="39" name="param" description="The Field being published" type="\ezp\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Content\Field</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>Repository</type>
        </argument>
        <argument line="45">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Content/FieldType/Url/Type.php" hash="70995e3de8cf38e7a6ef6f09bfce51c3">
    <parse_markers>
      <error line="25" code="50018">No DocBlock was found for property $allowedSettings</error>
      <error line="42" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Url/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Url" line="20" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\Url\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <docblock line="15">
        <description><![CDATA[The Url field type.]]></description>
        <long-description><![CDATA[<p>This field type represents a simple string.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\Url" line="22">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA["ezurl"]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\Url" line="23">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[false]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="25">
        <name>$allowedSettings</name>
        <default><![CDATA[array(
        'defaultText' => ''
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Url" line="37" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="todo" description="Is a default value really possible with this type?&#10;Shouldn't an exception be used?"/>
          <tag line="29" name="return" description="" type="\ezp\Content\FiedlType\Url\Value">
            <type by_reference="false">\ezp\Content\FiedlType\Url\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Url" line="51" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Checks if $inputValue can be parsed.]]></description>
          <long-description><![CDATA[<p>If the $inputValue actually can be parsed, the value is returned.
Otherwise, an \ezp\Base\Exception\BadFieldTypeInput exception is thrown</p>]]></long-description>
          <tag line="42" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="42" name="param" description="" type="\ezp\Content\FieldType\Url\Value" variable="$inputValue">
            <type by_reference="false">\ezp\Content\FieldType\Url\Value</type>
          </tag>
          <tag line="42" name="return" description="" type="\ezp\Content\FieldType\Url\Value">
            <type by_reference="false">\ezp\Content\FieldType\Url\Value</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Url" line="66" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Returns information for FieldValue->$sortKey relevant to the field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="todo" description="Sort seems to not be supported by this FieldType, is this handled correctly?"/>
          <tag line="60" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Url/Value.php" hash="ef57465b6ecf7b5d758d3bc86596b320">
    <parse_markers>
      <error line="47" code="50012">No short description for method fromString()</error>
      <error line="47" code="50015">Argument $stringValue is missing from the Docblock of fromString()</error>
      <error line="55" code="50012">No short description for method __toString()</error>
      <error line="63" code="50012">No short description for method getTitle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Url/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Url" line="17" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\Url\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="14">
        <description><![CDATA[Value for Url field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$link</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Link content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$text</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[Text content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Url" line="39" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Construct a new Value object and initialize it with its $link and optional $text]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="" type="string" variable="$link">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="param" description="" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$link</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="39">
          <name>$text</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\Url" line="50" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
        <argument line="50">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Url" line="58" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Url" line="66" package="Default">
        <name>getTitle</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="see" description="\ezp\Content\FieldType\ValueInterface::getTitle()" refers="\ezp\Content\FieldType\ValueInterface::getTitle()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Integer/Type.php" hash="2b37a78a8bb445cc736b2549dbb30bc1">
    <parse_markers>
      <error line="25" code="50018">No DocBlock was found for property $allowedValidators</error>
      <error line="29" code="50018">No DocBlock was found for property $allowedSettings</error>
      <error line="44" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Integer/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Integer" line="20" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\Integer\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <docblock line="15">
        <description><![CDATA[Integer field types]]></description>
        <long-description><![CDATA[<p>Represents integers.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\Integer" line="22">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA['ezinteger']]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\Integer" line="23">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[true]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="25">
        <name>$allowedValidators</name>
        <default><![CDATA[array(
        'ezp\\Content\\FieldType\\Integer\\IntegerValueValidator'
    )]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="29">
        <name>$allowedSettings</name>
        <default><![CDATA[array(
        'defaultValue' => 0
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Integer" line="39" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="return" description="" type="\ezp\Content\FieldType\Integer\Value">
            <type by_reference="false">\ezp\Content\FieldType\Integer\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Integer" line="53" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Checks if value can be parsed.]]></description>
          <long-description><![CDATA[<p>If the value actually can be parsed, the value is returned.</p>]]></long-description>
          <tag line="44" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="44" name="param" description="" type="mixed" variable="$inputValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="44" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Integer" line="71" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[Returns information for FieldValue->$sortKey relevant to the field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Integer/Value.php" hash="1969fa38346e324364b4533adf466d82">
    <parse_markers>
      <error line="37" code="50012">No short description for method fromString()</error>
      <error line="37" code="50015">Argument $stringValue is missing from the Docblock of fromString()</error>
      <error line="45" code="50012">No short description for method __toString()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Integer/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Integer" line="17" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\Integer\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="14">
        <description><![CDATA[Value for Integer field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$value</name>
        <default><![CDATA[0]]></default>
        <docblock line="19">
          <description><![CDATA[Content of the value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Integer" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Construct a new Value object and initialize with $value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="int" variable="$value">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\Integer" line="40" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
        <argument line="40">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Integer" line="48" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Integer/IntegerValueValidator.php" hash="eb0b46172f3c6f00bcb88c4f8cd50b66">
    <parse_markers>
      <error line="22" code="50018">No DocBlock was found for property $constraints</error>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in validate()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Integer/IntegerValueValidator.php</error>
    </parse_markers>
    <namespace-alias name="Validator">ezp\Content\FieldType\Validator</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Integer" line="20" package="Default">
      <name>IntegerValueValidator</name>
      <full_name>\ezp\Content\FieldType\Integer\IntegerValueValidator</full_name>
      <extends>\ezp\Content\FieldType\Validator</extends>
      <docblock line="14">
        <description><![CDATA[Validate ranges of integer value.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="property" description="The minimum allowed integer value." type="int" variable="$minIntegerValue">
          <type by_reference="false">int</type>
        </tag>
        <tag line="14" name="property" description="The maximum allowed integer value." type="int" variable="$maxIntegerValue">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="22">
        <name>$constraints</name>
        <default><![CDATA[array(
        'minIntegerValue' => false,
        'maxIntegerValue' => false
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Integer" line="39" package="Default">
        <name>validate</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Perform validation on $value.]]></description>
          <long-description><![CDATA[<p>Will return true when all constraints are matched. If one or more
constraints fail, the method will return false.</p>

<p>When a check against aconstaint has failed, an entry will be added to the
$errors array.</p>]]></long-description>
          <tag line="27" name="param" description="" type="\ezp\Content\FieldType\Integer\Value" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\Integer\Value</type>
          </tag>
          <tag line="27" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Float/Type.php" hash="f391b48fb30e22b4b86c6b58b702ddf3">
    <parse_markers>
      <error line="25" code="50018">No DocBlock was found for property $allowedValidators</error>
      <error line="40" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Float/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Float" line="20" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\Float\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <docblock line="15">
        <description><![CDATA[Float field types]]></description>
        <long-description><![CDATA[<p>Represents floats.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\Float" line="22">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA['ezfloat']]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\Float" line="23">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[false]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="25">
        <name>$allowedValidators</name>
        <default><![CDATA[array(
        'ezp\\Content\\FieldType\\Float\\FloatValueValidator'
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Float" line="35" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="return" description="" type="\ezp\Content\FieldType\Float\Value">
            <type by_reference="false">\ezp\Content\FieldType\Float\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Float" line="49" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Checks if value can be parsed.]]></description>
          <long-description><![CDATA[<p>If the value actually can be parsed, the value is returned.</p>]]></long-description>
          <tag line="40" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="40" name="param" description="" type="mixed" variable="$inputValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="40" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Float" line="64" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Returns information for FieldValue->$sortKey relevant to the field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="todo" description="Sort seems to not be supported by this FieldType, is this handled correctly?"/>
          <tag line="58" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Float/Value.php" hash="bfa2efacf99c1aecbac2bd18a4f1e82c">
    <parse_markers>
      <error line="37" code="50012">No short description for method fromString()</error>
      <error line="37" code="50015">Argument $stringValue is missing from the Docblock of fromString()</error>
      <error line="45" code="50012">No short description for method __toString()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Float/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Float" line="17" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\Float\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="14">
        <description><![CDATA[Value for Float field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$value</name>
        <default><![CDATA[0.0]]></default>
        <docblock line="19">
          <description><![CDATA[Float content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Float" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Construct a new Value object and initialize with $value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="float" variable="$value">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$value</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\Float" line="40" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
        <argument line="40">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Float" line="48" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Float/FloatValueValidator.php" hash="1aba90b681ba475a2079d6800d0d7d28">
    <parse_markers>
      <error line="25" code="50018">No DocBlock was found for property $constraints</error>
      <error line="30" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in validate()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Float/FloatValueValidator.php</error>
    </parse_markers>
    <namespace-alias name="Validator">ezp\Content\FieldType\Validator</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Float" line="23" package="Default">
      <name>FloatValueValidator</name>
      <full_name>\ezp\Content\FieldType\Float\FloatValueValidator</full_name>
      <extends>\ezp\Content\FieldType\Validator</extends>
      <docblock line="14">
        <description><![CDATA[Validator to validate ranges in float values.]]></description>
        <long-description><![CDATA[<p>Note that this validator can be limited by limitation on precision when
dealing with floating point numbers, and conversions.</p>]]></long-description>
        <tag line="14" name="property" description="Minimum value for float." type="float" variable="$minFloatValue">
          <type by_reference="false">float</type>
        </tag>
        <tag line="14" name="property" description="Maximum value for float." type="float" variable="$maxFloatValue">
          <type by_reference="false">float</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25">
        <name>$constraints</name>
        <default><![CDATA[array(
        'minFloatValue' => false,
        'maxFloatValue' => false
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Float" line="42" package="Default">
        <name>validate</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Perform validation on $value.]]></description>
          <long-description><![CDATA[<p>Will return true when all constraints are matched. If one or more
constraints fail, the method will return false.</p>

<p>When a check against aconstaint has failed, an entry will be added to the
$errors array.</p>]]></long-description>
          <tag line="30" name="param" description="" type="\ezp\Content\FieldType\Float\Value" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\Float\Value</type>
          </tag>
          <tag line="30" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Validator.php" hash="3d10726eb163659ebcb9655e814618ca">
    <parse_markers>
      <error line="19" code="50018">No DocBlock was found for property $errors</error>
      <error line="44" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in validate()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Validator.php</error>
    </parse_markers>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <namespace-alias name="Value">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Content\FieldType" line="17" package="Default">
      <name>Validator</name>
      <full_name>\ezp\Content\FieldType\Validator</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Base field type validator validator.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="19">
        <name>$errors</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="42" package="Default">
        <name>$constraints</name>
        <default><![CDATA[array()]]></default>
        <docblock line="21">
          <description><![CDATA[Hash of constraints handled by the validator.]]></description>
          <long-description><![CDATA[<p>Key is the constraint name, value is the default value.
If no default value is needed, just set to false.</p>

<p>Example:</p>

<pre><code>// With no default value
protected $constraints = array(
    "maxStringLength" => false
);

// With a default value
protected $constraints = array(
    "minIntegerValue" => 0,
    "maxIntegerValue" => 40
);
</code></pre>]]></long-description>
          <tag line="21" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Content\FieldType" line="57" package="Default">
        <name>validate</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Perform validation on $value.]]></description>
          <long-description><![CDATA[<p>Will return true when all constraints are matched. If one or more
constraints fail, the method will return false.</p>

<p>When a check against a constraint has failed, an entry will be added to the
$errors array.</p>]]></long-description>
          <tag line="44" name="abstract" description=""/>
          <tag line="44" name="param" description="" type="\ezp\Content\FieldType\Value" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
          <tag line="44" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>Value</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="66" package="Default">
        <name>getMessage</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Return array of messages on performed validations.]]></description>
          <long-description><![CDATA[<p>When no validation errors occured, the returned array should be empty.</p>]]></long-description>
          <tag line="59" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="79" package="Default">
        <name>getValidatorConstraints</name>
        <type>function</type>
        <docblock line="71">
          <description><![CDATA[Combines configurable constraints in the validator and creates a map.]]></description>
          <long-description><![CDATA[<p>This map is then supposed to be used inside a FieldDefinition.</p>]]></long-description>
          <tag line="71" name="internal" description=""/>
          <tag line="71" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="true" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="92" package="Default">
        <name>initializeWithConstraints</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[Initialized an instance of Validator, with earlier configured constraints.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="internal" description=""/>
          <tag line="84" name="throws" description="" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="84" name="param" description="" type="array" variable="$constraints">
            <type by_reference="false">array</type>
          </tag>
          <tag line="84" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$constraints</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="113" package="Default">
        <name>__get</name>
        <type>function</type>
        <docblock line="105">
          <description><![CDATA[Magic getter.]]></description>
          <long-description><![CDATA[<p>Returns constraint value, from its $name</p>]]></long-description>
          <tag line="105" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="105" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="105" name="throws" description="" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="129" package="Default">
        <name>__set</name>
        <type>function</type>
        <docblock line="121">
          <description><![CDATA[Magic setter.]]></description>
          <long-description><![CDATA[<p>Sets $value to constraint, identified by $name</p>]]></long-description>
          <tag line="121" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="121" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="121" name="throws" description="" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="129">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/TextLine/Type.php" hash="5141f0f1e7cd5fe4256f740ca59d95e6">
    <parse_markers>
      <error line="25" code="50018">No DocBlock was found for property $allowedValidators</error>
      <error line="40" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/TextLine/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\TextLine" line="20" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\TextLine\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <docblock line="15">
        <description><![CDATA[The TextLine field type.]]></description>
        <long-description><![CDATA[<p>This field type represents a simple string.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\TextLine" line="22">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA["ezstring"]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\TextLine" line="23">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[true]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="25">
        <name>$allowedValidators</name>
        <default><![CDATA[array(
        'ezp\\Content\\FieldType\\TextLine\\StringLengthValidator'
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\TextLine" line="35" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="return" description="" type="\ezp\Content\FieldType\TextLine\Value">
            <type by_reference="false">\ezp\Content\FieldType\TextLine\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\TextLine" line="49" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Checks if $inputValue can be parsed.]]></description>
          <long-description><![CDATA[<p>If the $inputValue actually can be parsed, the value is returned.
Otherwise, an \ezp\Base\Exception\BadFieldTypeInput exception is thrown</p>]]></long-description>
          <tag line="40" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="40" name="param" description="" type="\ezp\Content\FieldType\TextLine\Value" variable="$inputValue">
            <type by_reference="false">\ezp\Content\FieldType\TextLine\Value</type>
          </tag>
          <tag line="40" name="return" description="" type="\ezp\Content\FieldType\TextLine\Value">
            <type by_reference="false">\ezp\Content\FieldType\TextLine\Value</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\TextLine" line="64" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Returns information for FieldValue->$sortKey relevant to the field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="todo" description="String normalization should occur here."/>
          <tag line="58" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/TextLine/Value.php" hash="8fecfa3b254590acae08028b0200169d">
    <parse_markers>
      <error line="36" code="50012">No short description for method fromString()</error>
      <error line="36" code="50015">Argument $stringValue is missing from the Docblock of fromString()</error>
      <error line="44" code="50012">No short description for method __toString()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/TextLine/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\TextLine" line="17" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\TextLine\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="14">
        <description><![CDATA[Value for TextLine field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$text</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Text content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\TextLine" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Construct a new Value object and initialize it $text]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$text</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\TextLine" line="39" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
        <argument line="39">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\TextLine" line="47" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/TextLine/StringLengthValidator.php" hash="cb5f5cd0369219191f683e2b9ee539c4">
    <parse_markers>
      <error line="22" code="50018">No DocBlock was found for property $constraints</error>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in validate()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/TextLine/StringLengthValidator.php</error>
    </parse_markers>
    <namespace-alias name="Validator">ezp\Content\FieldType\Validator</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\TextLine" line="20" package="Default">
      <name>StringLengthValidator</name>
      <full_name>\ezp\Content\FieldType\TextLine\StringLengthValidator</full_name>
      <extends>\ezp\Content\FieldType\Validator</extends>
      <docblock line="14">
        <description><![CDATA[Validator for checking min. and max. length of strings.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="property" description="The maximum allowed length of the string." type="int" variable="$maxStringLength">
          <type by_reference="false">int</type>
        </tag>
        <tag line="14" name="property" description="The minimum required length of the string." type="int" variable="$minStringLength">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="22">
        <name>$constraints</name>
        <default><![CDATA[array(
        'maxStringLength' => false,
        'minStringLength' => false
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\TextLine" line="35" package="Default">
        <name>validate</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Checks if the string $value is in desired range.]]></description>
          <long-description><![CDATA[<p>The range is determined by $maxStringLength and $minStringLength.</p>]]></long-description>
          <tag line="27" name="param" description="" type="\ezp\Content\FieldType\TextLine\Value" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\TextLine\Value</type>
          </tag>
          <tag line="27" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/ValueInterface.php" hash="0d5a9dd6eca29cb31b164ec768c1dcd8">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/ValueInterface.php</error>
    </parse_markers>
    <interface namespace="ezp\Content\FieldType" line="16" package="Default">
      <name>ValueInterface</name>
      <full_name>\ezp\Content\FieldType\ValueInterface</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Interface for all field value classes.]]></description>
        <long-description><![CDATA[<p>A field value object is to be understood with associated field type</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType" line="27" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Initializes the field value with a simple string.]]></description>
          <long-description><![CDATA[<p>It's up to the field value to define $stringValue format.
If $stringValue format is not supported, an {@link \ezp\Base\Exception\InvalidArgumentValue} exception should be thrown.</p>]]></long-description>
          <tag line="18" name="param" description="" type="string" variable="$stringValue">
            <type by_reference="false">string</type>
          </tag>
          <tag line="18" name="return" description="Instance of the field value" type="\ezp\Content\FieldType\Value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
          <tag line="18" name="throws" description="" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="35" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Returns a string representation of the field value.]]></description>
          <long-description><![CDATA[<p>This string representation must be compatible with {@link self::fromString()} supported format</p>]]></long-description>
          <tag line="29" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/Content/FieldType/Value.php" hash="50d92c82f3f63911428765b0d39e32ea">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Value.php</error>
    </parse_markers>
    <namespace-alias name="ModelState">ezp\Base\ModelState</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Content\FieldType" line="18" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\Value</full_name>
      <extends/>
      <extends>\ezp\Base\ModelState</extends>
      <docblock line="14">
        <description><![CDATA[Abstract class for all field value classes.]]></description>
        <long-description><![CDATA[<p>A field value object is to be understood with associated field type</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" package="Default">
        <name>$properties</name>
        <default><![CDATA[array()]]></default>
        <docblock line="20">
          <description><![CDATA[Internal properties]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="internal" description=""/>
          <tag line="20" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="37" package="Default">
        <name>setState</name>
        <type>function</type>
        <docblock line="28">
          <description><![CDATA[Sets internal variables on object from array]]></description>
          <long-description><![CDATA[<p>Key is property name and value is property value.</p>]]></long-description>
          <tag line="28" name="internal" description=""/>
          <tag line="28" name="param" description="" type="array" variable="$state">
            <type by_reference="false">array</type>
          </tag>
          <tag line="28" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$state</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="52" package="Default">
        <name>getState</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Gets internal variables on object as array]]></description>
          <long-description><![CDATA[<p>Key is property name and value is property value.</p>]]></long-description>
          <tag line="42" name="internal" description=""/>
          <tag line="42" name="param" description="Optional, lets you specify to only return one property by name" type="string|null" variable="$property">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="42" name="return" description="Array if $property is null, else value of property" type="array|mixed">
            <type by_reference="false">array</type>
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="42" name="throws" description="If $property is not found (when not null)" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$property</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="70" package="Default">
        <name>getTitle</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Returns the title of the current field value.]]></description>
          <long-description><![CDATA[<p>It will be used to generate content name and url alias if current field is designated
to be used in the content name/urlAlias pattern.</p>]]></long-description>
          <tag line="63" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/XmlText/Type.php" hash="0e3556d79de6a8a6965861bba65564cb">
    <parse_markers>
      <error line="64" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="108" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in convertValueToRawValue()</error>
      <error line="108" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $repository in convertValueToRawValue()</error>
      <error line="108" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in convertValueToRawValue()</error>
      <error line="127" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $repository in onPrePublish()</error>
      <error line="127" code="50014">Name of argument $field does not match with the DocBlock's name $version in onPrePublish()</error>
      <error line="127" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in onPrePublish()</error>
      <notice line="127" code="50013">Parameter $version could not be found in onPrePublish()</notice>
      <error line="137" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $repository in onPostPublish()</error>
      <error line="137" code="50014">Name of argument $field does not match with the DocBlock's name $version in onPostPublish()</error>
      <error line="137" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in onPostPublish()</error>
      <notice line="137" code="50013">Parameter $version could not be found in onPostPublish()</notice>
      <error line="147" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $repository in onPreCreate()</error>
      <error line="147" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in onPreCreate()</error>
      <error line="157" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $repository in onPostCreate()</error>
      <error line="157" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in onPostCreate()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/XmlText/Type.php</error>
    </parse_markers>
    <namespace-alias name="Repository">ezp\Base\Repository</namespace-alias>
    <namespace-alias name="Field">ezp\Content\Field</namespace-alias>
    <namespace-alias name="Version">ezp\Content\Version</namespace-alias>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="OnPublish">ezp\Content\FieldType\OnPublish</namespace-alias>
    <namespace-alias name="OnCreate">ezp\Content\FieldType\OnCreate</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="Value">ezp\Content\FieldType\XmlText\Value</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\XmlText" line="29" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\XmlText\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <extends>\ezp\Content\FieldType\OnPublish</extends>
      <extends>\ezp\Content\FieldType\OnCreate</extends>
      <docblock line="23">
        <description><![CDATA[XmlBlock field type.]]></description>
        <long-description><![CDATA[<p>This field</p>]]></long-description>
        <tag line="23" name="package" description=""/>
      </docblock>
      <constant namespace="ezp\Content\FieldType\XmlText" line="31">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA["ezxmltext"]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText" line="32">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[true]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$allowedSettings</name>
        <default><![CDATA[array(
        'numRows' => 10,
        'tagPreset' => null,
        'defaultText' => '',
    )]]></default>
        <docblock line="34">
          <description><![CDATA[List of settings available for this FieldType]]></description>
          <long-description><![CDATA[<p>The key is the setting name, and the value is the default value for this setting</p>]]></long-description>
          <tag line="34" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText" line="53" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="return" description="" type="\ezp\Content\FieldType\TextLine\Value">
            <type by_reference="false">\ezp\Content\FieldType\TextLine\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText" line="73" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Checks if $inputValue can be parsed.]]></description>
          <long-description><![CDATA[<p>If the $inputValue actually can be parsed, the value is returned.
Otherwise, an \ezp\Base\Exception\BadFieldTypeInput exception is thrown</p>]]></long-description>
          <tag line="64" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="64" name="param" description="" type="\ezp\Content\FieldType\XmlText\Value" variable="$inputValue">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Value</type>
          </tag>
          <tag line="64" name="return" description="" type="\ezp\Content\FieldType\TextLine\Value">
            <type by_reference="false">\ezp\Content\FieldType\TextLine\Value</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText" line="103" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Returns sortKey information]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="see" description="\ezp\Content\FieldType" refers="\ezp\Content\FieldType"/>
          <tag line="96" name="return" description="" type="array|bool">
            <type by_reference="false">array</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText" line="115" package="Default">
        <name>convertValueToRawValue</name>
        <type>function</type>
        <docblock line="108">
          <description><![CDATA[Converts complex values to a Value\Raw object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="param" description="" type="\ezp\Content\FieldType\XmlText\Value" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Value</type>
          </tag>
          <tag line="108" name="param" description="" type="\ezp\Base\Repository" variable="$repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
          <tag line="108" name="param" description="" type="\ezp\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Content\Field</type>
          </tag>
          <tag line="108" name="return" description="" type="\ezp\Content\FieldType\XmlText\Value">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Value</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>Value</type>
        </argument>
        <argument line="115">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>Repository</type>
        </argument>
        <argument line="115">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="133" package="Default">
        <name>onPrePublish</name>
        <type>function</type>
        <docblock line="127">
          <description><![CDATA[Event handler for pre_publish]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="127" name="param" description="" type="\ezp\Base\Repository" variable="$repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
          <tag line="127" name="param" description="" type="\ezp\Content\Version" variable="$version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="127" name="param" description="" type="\ezp\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Content\Field</type>
          </tag>
        </docblock>
        <argument line="133">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>Repository</type>
        </argument>
        <argument line="133">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="143" package="Default">
        <name>onPostPublish</name>
        <type>function</type>
        <docblock line="137">
          <description><![CDATA[Event handler for post_publish]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="param" description="" type="\ezp\Base\Repository" variable="$repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
          <tag line="137" name="param" description="" type="\ezp\Content\Version" variable="$version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="137" name="param" description="" type="\ezp\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Content\Field</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>Repository</type>
        </argument>
        <argument line="143">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="152" package="Default">
        <name>onPreCreate</name>
        <type>function</type>
        <docblock line="147">
          <description><![CDATA[Event handler for pre_create]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="147" name="param" description="" type="\ezp\Base\Repository" variable="$repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
          <tag line="147" name="param" description="" type="\ezp\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Content\Field</type>
          </tag>
        </docblock>
        <argument line="152">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>Repository</type>
        </argument>
        <argument line="152">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="162" package="Default">
        <name>onPostCreate</name>
        <type>function</type>
        <docblock line="157">
          <description><![CDATA[Event handler for pre_create]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="157" name="param" description="" type="\ezp\Base\Repository" variable="$repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
          <tag line="157" name="param" description="" type="\ezp\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Content\Field</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>Repository</type>
        </argument>
        <argument line="162">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/XmlText/Schema.php" hash="c351c74c0156458540ad1527186d43be">
    <parse_markers>
      <critical line="152" code="50019">No short description for property $instance</critical>
      <error line="157" code="50010">No DocBlock was found for method __construct()</error>
      <error line="249" code="50010">No DocBlock was found for method isInline()</error>
      <error line="329" code="50010">No DocBlock was found for method childrenRequired()</error>
      <error line="337" code="50010">No DocBlock was found for method hasAttributes()</error>
      <error line="345" code="50010">No DocBlock was found for method attributes()</error>
      <error line="350" code="50010">No DocBlock was found for method customAttributes()</error>
      <error line="372" code="50010">No DocBlock was found for method attrDefaultValue()</error>
      <error line="380" code="50010">No DocBlock was found for method attrDefaultValues()</error>
      <error line="388" code="50010">No DocBlock was found for method exists()</error>
      <error line="410" code="50010">No DocBlock was found for method availableElements()</error>
      <error line="415" code="50010">No DocBlock was found for method getClassesList()</error>
      <error line="423" code="50010">No DocBlock was found for method addAvailableClass()</error>
      <error line="431" code="50010">No DocBlock was found for method addCustomAttribute()</error>
      <critical line="14" code="50005">No short description for class Schema</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/XmlText/Schema.php</error>
    </parse_markers>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\XmlText" line="17" package="Default">
      <name>Schema</name>
      <full_name>\ezp\Content\FieldType\XmlText\Schema</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="internal" description=""/>
      </docblock>
      <property final="false" static="false" visibility="private" line="23" package="Default">
        <name>$schema</name>
        <default><![CDATA[array(
        'section'   => array( 'blockChildrenAllowed' => array( 'header', 'paragraph', 'section' ),
                              'inlineChildrenAllowed' => false,
                              'childrenRequired' => false,
                              'isInline' => false,
                              'attributes' => array( 'xmlns:image', 'xmlns:xhtml', 'xmlns:custom', 'xmlns:tmp' ) ),

        'embed'     => array( 'blockChildrenAllowed' => false,
                              'inlineChildrenAllowed' => false,
                              'childrenRequired' => null,
                              'isInline' => true,
                              'attributes' => array( 'object_id', 'node_id', 'show_path', 'size',
                                                     'align', 'view', 'xhtml:id', 'class', 'target' ),
                              'attributesDefaults' => array( 'align' => '', 'view' => 'embed', 'class' => '' ) ),

        'embed-inline' => array( 'blockChildrenAllowed' => false,
                              'inlineChildrenAllowed' => false,
                              'childrenRequired' => null,
                              'isInline' => true,
                              'attributes' => array( 'object_id', 'node_id', 'show_path', 'size',
                                                     'align', 'view', 'xhtml:id', 'class', 'target' ),
                              'attributesDefaults' => array( 'align' => '', 'view' => 'embed-inline', 'class' => '' ) ),

        'table'     => array( 'blockChildrenAllowed' => array( 'tr' ),
                              'inlineChildrenAllowed' => false,
                              'childrenRequired' => true,
                              'isInline' => false,
                              'attributes' => array( 'class', 'width', 'border', 'align' ) ),

        'tr'        => array( 'blockChildrenAllowed' => array( 'td', 'th' ),
                              'inlineChildrenAllowed' => false,
                              'childrenRequired' => false,
                              'isInline' => false,
                              'attributes' => array( 'class' ) ),

        'td'        => array( 'blockChildrenAllowed' => array( 'header', 'paragraph', 'section', 'table' ),
                              'inlineChildrenAllowed' => false,
                              'childrenRequired' => false,
                              'isInline' => false,
                              'attributes' => array( 'class', 'align', 'xhtml:width', 'xhtml:colspan', 'xhtml:rowspan' ) ),

        'th'        => array( 'blockChildrenAllowed' => array( 'header', 'paragraph', 'section', 'table' ),
                              'inlineChildrenAllowed' => false,
                              'childrenRequired' => false,
                              'isInline' => false,
                              'attributes' => array( 'class', 'align', 'xhtml:width', 'xhtml:colspan', 'xhtml:rowspan' ) ),

        'ol'        => array( 'blockChildrenAllowed' => array( 'li' ),
                              'inlineChildrenAllowed' => false,
                              'childrenRequired' => true,
                              'isInline' => false,
                              'attributes' => array( 'class' ) ),

        'ul'        => array( 'blockChildrenAllowed' => array( 'li' ),
                              'inlineChildrenAllowed' => false,
                              'childrenRequired' => true,
                              'isInline' => false,
                              'attributes' => array( 'class' ) ),

        'li'        => array( 'blockChildrenAllowed' => array( 'paragraph' ),
                              'inlineChildrenAllowed' => false,
                              'childrenRequired' => true,
                              'isInline' => false,
                              'attributes' => array( 'class' ) ),

        'header'    => array( 'blockChildrenAllowed' => false,
                              'inlineChildrenAllowed' => true,
                              'childrenRequired' => true,
                              'isInline' => false,
                              'attributes' => array( 'class', 'anchor_name', 'align' ) ),

        'paragraph' => array( 'blockChildrenAllowed' => array( 'line', 'link', 'embed', 'table', 'ol', 'ul', 'custom', 'literal' ),
                              'inlineChildrenAllowed' => true,
                              'childrenRequired' => true,
                              'isInline' => false,
                              'attributes' => array( 'class', 'align' ) ),

        'line'      => array( 'blockChildrenAllowed' => false,
                              'inlineChildrenAllowed' => true,
                              'childrenRequired' => true,
                              'isInline' => false,
                              'attributes' => false ),

        'literal'   => array( 'blockChildrenAllowed' => false,
                              'inlineChildrenAllowed' => array( '#text' ),
                              'childrenRequired' => true,
                              'isInline' => false,
                              'attributes' => array( 'class' ) ),

        'strong'    => array( 'blockChildrenAllowed' => false,
                              'inlineChildrenAllowed' => true,
                              'childrenRequired' => true,
                              'isInline' => true,
                              'attributes' => array( 'class' ) ),

        'emphasize' => array( 'blockChildrenAllowed' => false,
                              'inlineChildrenAllowed' => true,
                              'childrenRequired' => true,
                              'isInline' => true,
                              'attributes' => array( 'class' ) ),

        'link'      => array( 'blockChildrenAllowed' => false,
                              'inlineChildrenAllowed' => true,
                              'childrenRequired' => true,
                              'isInline' => true,
                              'attributes' => array( 'class', 'xhtml:id', 'target', 'xhtml:title',
                                                     'object_id', 'node_id', 'show_path', 'anchor_name',
                                                     'url_id', 'id', 'view' ),
                              'attributesDefaults' => array( 'target' => '_self' ) ),

        'anchor'    => array( 'blockChildrenAllowed' => false,
                              'inlineChildrenAllowed' => false,
                              'childrenRequired' => false,
                              'isInline' => true,
                              'attributes' => array( 'name' ) ),

        'custom'    => array( 'blockChildrenAllowed' => true,
                              'inlineChildrenAllowed' => true,
                              'childrenRequired' => false,
                              'isInline' => null,
                              'attributes' => array( 'name', 'align' ) ),

        '#text'     => array( 'blockChildrenAllowed' => false,
                              'inlineChildrenAllowed' => false,
                              'childrenRequired' => false,
                              'isInline' => true,
                              'attributes' => false )
    )]]></default>
        <docblock line="19">
          <description><![CDATA[Schema contents]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="private" line="155" package="Default">
        <name>$instance</name>
        <default><![CDATA[]]></default>
        <docblock line="152">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="var" description="" type="\ezp\Content\FieldType\XmlText\Schema">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Schema</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="157">
        <name>__construct</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="239" package="Default">
        <name>getInstance</name>
        <type>function</type>
        <docblock line="234">
          <description><![CDATA[Returns a shared instance of the eZXMLSchema class.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="234" name="return" description="" type="\ezp\Content\FieldType\XmlText\eZXMLSchema">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\eZXMLSchema</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="249">
        <name>isInline</name>
        <type>function</type>
        <argument line="249">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="282" package="Default">
        <name>check</name>
        <type>function</type>
        <docblock line="273">
          <description><![CDATA[Checks if one element is allowed to be a child of another]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="273" name="param" description="parent element: DOMNode or string" type="\ezp\Content\FieldType\XmlText\$parent" variable="$parent">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\$parent</type>
          </tag>
          <tag line="273" name="param" description="child element: DOMNode or string" type="\ezp\Content\FieldType\XmlText\$child" variable="$child">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\$child</type>
          </tag>
          <tag line="273" name="return" description="true if elements match schema, false if elements don't match schema, null in case of errors" type="bool|null">
            <type by_reference="false">bool</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="273" name="todo" description="Add exceptions"/>
        </docblock>
        <argument line="282">
          <name>$parent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="282">
          <name>$child</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="329">
        <name>childrenRequired</name>
        <type>function</type>
        <argument line="329">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="337">
        <name>hasAttributes</name>
        <type>function</type>
        <argument line="337">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="345">
        <name>attributes</name>
        <type>function</type>
        <argument line="345">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="350">
        <name>customAttributes</name>
        <type>function</type>
        <argument line="350">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="372">
        <name>attrDefaultValue</name>
        <type>function</type>
        <argument line="372">
          <name>$tagName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="372">
          <name>$attrName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="380">
        <name>attrDefaultValues</name>
        <type>function</type>
        <argument line="380">
          <name>$tagName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="388">
        <name>exists</name>
        <type>function</type>
        <argument line="388">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="410">
        <name>availableElements</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="415">
        <name>getClassesList</name>
        <type>function</type>
        <argument line="415">
          <name>$tagName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="423">
        <name>addAvailableClass</name>
        <type>function</type>
        <argument line="423">
          <name>$tagName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="423">
          <name>$class</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="431">
        <name>addCustomAttribute</name>
        <type>function</type>
        <argument line="431">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="431">
          <name>$attrName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/XmlText/Input/Parser.php" hash="d940d6c8f6fb357ede4b055307bd8c04">
    <parse_markers>
      <error line="41" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $handler in setHandler()</error>
      <error line="62" code="50012">No short description for method getRelatedContentIdArray()</error>
      <error line="67" code="50012">No short description for method getLinkedContentIdArray()</error>
      <error line="72" code="50012">No short description for method getUrlIdArray()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/XmlText/Input/Parser.php</error>
    </parse_markers>
    <namespace-alias name="Handler">ezp\Content\FieldType\XmlText\Input\Handler</namespace-alias>
    <interface namespace="ezp\Content\FieldType\XmlText\Input" line="17" package="Default">
      <name>Parser</name>
      <full_name>\ezp\Content\FieldType\XmlText\Input\Parser</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[XmlText input parser interface]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="27" package="Default">
        <name>process</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Processes $xmlString]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="param" description="" type="string" variable="$xmlString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="19" name="param" description="" type="bool" variable="$createRootNode">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="19" name="return" description="" type="\DOMDocument">
            <type by_reference="false">\DOMDocument</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$xmlString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="27">
          <name>$createRootNode</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="33" package="Default">
        <name>getMessages</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Returns the XML processing messages]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="39" package="Default">
        <name>isValid</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Returns the validity status of the processed XML String]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="45" package="Default">
        <name>setHandler</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[Sets the input handler for the parser to $handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="param" description="" type="\ezp\Content\FieldType\XmlText\Input\Handler" variable="$handler">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Input\Handler</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>Handler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="53" package="Default">
        <name>setOption</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Sets the parser option $option to $value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="One of self::OPT_*" type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="47" name="throws" description="If the option is unknown or the value incorrect" type="\ezp\Base\Exception\BadConfiguration">
            <type by_reference="false">\ezp\Base\Exception\BadConfiguration</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$option</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="53">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="60" package="Default">
        <name>getOption</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Gets the parser option $option]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="One of self::OPT_*" type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="throws" description="If the option is unknown or the value incorrect" type="\ezp\Base\Exception\BadConfiguration">
            <type by_reference="false">\ezp\Base\Exception\BadConfiguration</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$option</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="65" package="Default">
        <name>getRelatedContentIdArray</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="70" package="Default">
        <name>getLinkedContentIdArray</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="75" package="Default">
        <name>getUrlIdArray</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/Content/FieldType/XmlText/Input/Handler.php" hash="2c768ce679b51bea39094ad0c225bf55">
    <parse_markers>
      <error line="36" code="50014">Name of argument $parser does not match with the DocBlock's name $xmlString in __construct()</error>
      <error line="36" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $parser in __construct()</error>
      <notice line="36" code="50013">Parameter $xmlString could not be found in __construct()</notice>
      <notice line="36" code="50013">Parameter  could not be found in __construct()</notice>
      <error line="84" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $repository in process()</error>
      <error line="84" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $version in process()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/XmlText/Input/Handler.php</error>
    </parse_markers>
    <namespace-alias name="Repository">ezp\Base\Repository</namespace-alias>
    <namespace-alias name="Version">ezp\Content\Version</namespace-alias>
    <namespace-alias name="InputParserInterface">ezp\Content\FieldType\XmlText\Input\Parser</namespace-alias>
    <namespace-alias name="BaseInputParser">ezp\Content\FieldType\XmlText\Input\Parser\Base</namespace-alias>
    <namespace-alias name="Relation">ezp\Content\Relation</namespace-alias>
    <namespace-alias name="DOMDocument">DOMDocument</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\XmlText\Input" line="22" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Content\FieldType\XmlText\Input\Handler</full_name>
      <extends/>
      <docblock line="19">
        <description><![CDATA[Simplified XmlText input handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$parser</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[XmlText parser]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="\ezp\Content\FieldType\XmlText\Input\Parser">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Input\Parser</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="34" package="Default">
        <name>$document</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[DOMDocument, as processed]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="\DOMDocument">
            <type by_reference="false">\DOMDocument</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="42" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Construct a new Simplified InputHandler$xmlString]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="" type="string" variable="$xmlString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="param" description="Parser" type="\ezp\Content\FieldType\XmlText\Input\Parser" variable="">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Input\Parser</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$parser</name>
          <default><![CDATA[]]></default>
          <type>InputParserInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="60" package="Default">
        <name>isXmlValid</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[Checks if $xmlString is a valid XML]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="param" description="" type="string" variable="$xmlString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="53" name="param" description="Wether or not to check external data (content, location...) validity If the option is set to false, the tags will be checked, but not the external elements they reference" type="bool" variable="$checkExternalData">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="53" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$xmlString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="60">
          <name>$checkExternalData</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="79" package="Default">
        <name>getParsingMessages</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Returns the last parsing messages (from the last parsing operation, {@see isXmlValid}, {@see process})]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="91" package="Default">
        <name>process</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[Processes $xmlString and indexes the external data it references]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="param" description="" type="string" variable="$xmlString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="84" name="param" description="" type="\ezp\Base\Repository" variable="$repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
          <tag line="84" name="param" description="" type="\ezp\Content\Version" variable="$version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="84" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$xmlString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="91">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>Repository</type>
        </argument>
        <argument line="91">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type>Version</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="125" package="Default">
        <name>getLocationById</name>
        <type>function</type>
        <docblock line="120">
          <description><![CDATA[Callback that gets a location from its id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="120" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="120" name="return" description="" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
        </docblock>
        <argument line="125">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="135" package="Default">
        <name>getLocationByPath</name>
        <type>function</type>
        <docblock line="130">
          <description><![CDATA[Callback that gets a location from its path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="130" name="param" description="" type="string" variable="$locationPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="130" name="return" description="" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
        </docblock>
        <argument line="135">
          <name>$locationPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="145" package="Default">
        <name>getContentById</name>
        <type>function</type>
        <docblock line="140">
          <description><![CDATA[Callback that gets a content from its id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="140" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="140" name="return" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
        <argument line="145">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="156" package="Default">
        <name>registerUrl</name>
        <type>function</type>
        <docblock line="150">
          <description><![CDATA[Registers an external URL]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="150" name="param" description="" type="string" variable="$url">
            <type by_reference="false">string</type>
          </tag>
          <tag line="150" name="return" description="" type="\ezp\Content\FieldType\XmlText\Input\Url">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Input\Url</type>
          </tag>
          <tag line="150" name="todo" description="Implement &amp; Document"/>
        </docblock>
        <argument line="156">
          <name>$url</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="166" package="Default">
        <name>checkContentById</name>
        <type>function</type>
        <docblock line="161">
          <description><![CDATA[Checks if a Content exists using its id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="161" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="161" name="return" description="true if the Content exists, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input" line="175" package="Default">
        <name>getDocumentAsXml</name>
        <type>function</type>
        <docblock line="171">
          <description><![CDATA[Returns the processed DOMDocument as an XML string]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="171" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/XmlText/Input/Parser/Raw.php" hash="e3bcdaa5dbd1f8dc8b2c3ee31fa2b2cb">
    <parse_markers>
      <error line="26" code="50018">No DocBlock was found for property $OutputTags</error>
      <error line="103" code="50010">No DocBlock was found for method process()</error>
      <error line="232" code="50010">No DocBlock was found for method parsingHandlerLiteral()</error>
      <error line="260" code="50010">No DocBlock was found for method breakInlineFlow()</error>
      <error line="326" code="50010">No DocBlock was found for method appendLineParagraph()</error>
      <error line="381" code="50010">No DocBlock was found for method structHandlerBr()</error>
      <error line="448" code="50010">No DocBlock was found for method appendParagraph()</error>
      <error line="486" code="50010">No DocBlock was found for method structHandlerHeader()</error>
      <error line="610" code="50010">No DocBlock was found for method structHandlerCustom()</error>
      <error line="625" code="50010">No DocBlock was found for method structHandlerLists()</error>
      <error line="685" code="50010">No DocBlock was found for method structHandlerText()</error>
      <error line="749" code="50010">No DocBlock was found for method publishHandlerParagraph()</error>
      <error line="774" code="50010">No DocBlock was found for method publishHandlerLink()</error>
      <error line="892" code="50010">No DocBlock was found for method convertHrefToID()</error>
      <error line="907" code="50010">No DocBlock was found for method publishHandlerEmbed()</error>
      <error line="999" code="50010">No DocBlock was found for method publishHandlerObject()</error>
      <error line="1042" code="50010">No DocBlock was found for method publishHandlerCustom()</error>
      <error line="1052" code="50010">No DocBlock was found for method convertCustomAttributes()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/XmlText/Input/Parser/Raw.php</error>
    </parse_markers>
    <namespace-alias name="InputParser">ezp\Content\FieldType\XmlText\Input\Parser</namespace-alias>
    <namespace-alias name="BaseParser">ezp\Content\FieldType\XmlText\Input\Parser\Base</namespace-alias>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="Location">ezp\Content\Location</namespace-alias>
    <namespace-alias name="DOMElement">DOMElement</namespace-alias>
    <namespace-alias name="DOMDocument">DOMDocument</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="24" package="Default">
      <name>Raw</name>
      <full_name>\ezp\Content\FieldType\XmlText\Input\Parser\Raw</full_name>
      <extends>\ezp\Content\FieldType\XmlText\Input\Parser\Base</extends>
      <extends>\ezp\Content\FieldType\XmlText\Input\Parser</extends>
      <docblock line="18">
        <description><![CDATA[Raw XmlText input parser.]]></description>
        <long-description><![CDATA[<p>Accepts native XmlText, as it doesn't perform any tag conversion.
Other parsers are available for this purpose (Simplified and OnlineEditor).</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26">
        <name>$OutputTags</name>
        <default><![CDATA[array(
        'section'   => array(),

        'embed'     => array( //'parsingHandler' => 'breakInlineFlow',
                              'structHandler' => 'appendLineParagraph',
                              'publishHandler' => 'publishHandlerEmbed',
                              'attributes' => array( 'id' => 'xhtml:id' ),
                              'requiredInputAttributes' => array( 'href' ) ),

        'embed-inline'     => array( //'parsingHandler' => 'breakInlineFlow',
                              'structHandler' => 'appendLineParagraph',
                              'publishHandler' => 'publishHandlerEmbed',
                              'attributes' => array( 'id' => 'xhtml:id' ),
                              'requiredInputAttributes' => array( 'href' ) ),

        'object'    => array( //'parsingHandler' => 'breakInlineFlow',
                              'structHandler' => 'appendLineParagraph',
                              'publishHandler' => 'publishHandlerObject',
                              'attributes' => array( 'href' => 'image:ezurl_href',
                                                     'target' => 'image:ezurl_target',
                                                     'ezurl_href' => 'image:ezurl_href',
                                                     'ezurl_id' => 'image:ezurl_id',
                                                     'ezurl_target' => 'image:ezurl_target' ),
                              'requiredInputAttributes' => array( 'id' ) ),

        'table'     => array( 'structHandler' => 'appendParagraph' ),

        'tr'        => array(),

        'td'        => array( 'attributes' => array( 'width' => 'xhtml:width',
                                                     'colspan' => 'xhtml:colspan',
                                                     'rowspan' => 'xhtml:rowspan' ) ),

        'th'        => array( 'attributes' => array( 'width' => 'xhtml:width',
                                                     'colspan' => 'xhtml:colspan',
                                                     'rowspan' => 'xhtml:rowspan' ) ),

        'ol'        => array( 'structHandler' => 'structHandlerLists' ),

        'ul'        => array( 'structHandler' => 'structHandlerLists' ),

        'li'        => array( 'autoCloseOn' => array( 'li' ) ),

        'header'    => array( 'autoCloseOn' => array( 'paragraph' ),
                              'structHandler' => 'structHandlerHeader' ),

        'paragraph' => array( 'autoCloseOn' => array( 'paragraph' ),
                              'publishHandler' => 'publishHandlerParagraph' ),

        'line'      => array(),

        'br'        => array( 'parsingHandler' => 'breakInlineFlow',
                              'structHandler' => 'structHandlerBr',
                              'attributes' => false ),

        'literal'   => array( 'parsingHandler' => 'parsingHandlerLiteral',
                              'structHandler' => 'appendParagraph' ),

        'strong'    => array( 'structHandler' => 'appendLineParagraph' ),

        'emphasize' => array( 'structHandler' => 'appendLineParagraph' ),

        'link'      => array( 'structHandler' => 'appendLineParagraph',
                              'publishHandler' => 'publishHandlerLink',
                              'attributes' => array( 'title' => 'xhtml:title',
                                                     'id' => 'xhtml:id' ),
                              'requiredInputAttributes' => array( 'href' ) ),

        'anchor'    => array( 'structHandler' => 'appendLineParagraph' ),

        'custom'    => array( 'structHandler' => 'structHandlerCustom',
                              'publishHandler' => 'publishHandlerCustom',
                              'requiredInputAttributes' => array( 'name' ) ),

        '#text'     => array( 'structHandler' => 'structHandlerText' )
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="103">
        <name>process</name>
        <type>function</type>
        <argument line="103">
          <name>$xmlString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="103">
          <name>$createRootNode</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="126" package="Default">
        <name>processRootSection</name>
        <type>function</type>
        <docblock line="120">
          <description><![CDATA[Checks $xmlString for the root section + namespaces, and removes it afterwards]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="120" name="param" description="" type="mixed" variable="$xmlString">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="120" name="return" description="$xmlString without the root section" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$xmlString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="216" package="Default">
        <name>processXmlHeader</name>
        <type>function</type>
        <docblock line="211">
          <description><![CDATA[Checks the <? xml header in $xmlstring, and removes it]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="211" name="param" description="return string $xmlString with the tag removed" type="string" variable="$xmlString">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="216">
          <name>$xmlString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="232">
        <name>parsingHandlerLiteral</name>
        <type>function</type>
        <argument line="232">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="232">
          <name>$param</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="260">
        <name>breakInlineFlow</name>
        <type>function</type>
        <argument line="260">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="260">
          <name>$param</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="326">
        <name>appendLineParagraph</name>
        <type>function</type>
        <argument line="326">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="326">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="381">
        <name>structHandlerBr</name>
        <type>function</type>
        <argument line="381">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="381">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="448">
        <name>appendParagraph</name>
        <type>function</type>
        <argument line="448">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="448">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="486">
        <name>structHandlerHeader</name>
        <type>function</type>
        <argument line="486">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="486">
          <name>$param</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="610">
        <name>structHandlerCustom</name>
        <type>function</type>
        <argument line="610">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="610">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="625">
        <name>structHandlerLists</name>
        <type>function</type>
        <argument line="625">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="625">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="685">
        <name>structHandlerText</name>
        <type>function</type>
        <argument line="685">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="685">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="749">
        <name>publishHandlerParagraph</name>
        <type>function</type>
        <argument line="749">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="749">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="774">
        <name>publishHandlerLink</name>
        <type>function</type>
        <argument line="774">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="774">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="892">
        <name>convertHrefToID</name>
        <type>function</type>
        <argument line="892">
          <name>$href</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="907">
        <name>publishHandlerEmbed</name>
        <type>function</type>
        <argument line="907">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="907">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="999">
        <name>publishHandlerObject</name>
        <type>function</type>
        <argument line="999">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="999">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1042">
        <name>publishHandlerCustom</name>
        <type>function</type>
        <argument line="1042">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1042">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1052">
        <name>convertCustomAttributes</name>
        <type>function</type>
        <argument line="1052">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/XmlText/Input/Parser/OnlineEditor.php" hash="e169bd0d8bd624439142bab262278ccf">
    <parse_markers>
      <error line="159" code="50018">No DocBlock was found for property $deletedEmbeddedNodeIDArray</error>
      <error line="160" code="50018">No DocBlock was found for property $deletedEmbeddedObjectIDArray</error>
      <error line="161" code="50018">No DocBlock was found for property $thrashedEmbeddedObjectIDArray</error>
      <error line="163" code="50018">No DocBlock was found for property $anchorAsAttribute</error>
      <critical line="165" code="50019">No short description for property $customTagList</critical>
      <notice line="176" code="50013">Parameter $validateErrorLevel could not be found in __construct()</notice>
      <notice line="176" code="50013">Parameter $detectErrorLevel could not be found in __construct()</notice>
      <notice line="176" code="50013">Parameter $parseLineBreaks could not be found in __construct()</notice>
      <notice line="176" code="50013">Parameter $removeDefaultAttrs could not be found in __construct()</notice>
      <error line="564" code="50014">Name of argument $params does not match with the DocBlock's name $param in initHandlerCustom()</error>
      <notice line="564" code="50013">Parameter $param could not be found in initHandlerCustom()</notice>
      <error line="581" code="50014">Name of argument $params does not match with the DocBlock's name $param in initHandlerHeader()</error>
      <notice line="581" code="50013">Parameter $param could not be found in initHandlerHeader()</notice>
      <error line="1108" code="50014">Name of argument $params does not match with the DocBlock's name $param in publishHandlerLink()</error>
      <notice line="1108" code="50013">Parameter $param could not be found in publishHandlerLink()</notice>
      <error line="1260" code="50014">Name of argument $params does not match with the DocBlock's name $param in publishHandlerEmbed()</error>
      <notice line="1260" code="50013">Parameter $param could not be found in publishHandlerEmbed()</notice>
      <error line="1352" code="50010">No DocBlock was found for method getEmbeddedObjectIDArray()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/XmlText/Input/Parser/OnlineEditor.php</error>
    </parse_markers>
    <namespace-alias name="InputParser">ezp\Content\FieldType\XmlText\Input\Parser</namespace-alias>
    <namespace-alias name="BaseParser">ezp\Content\FieldType\XmlText\Input\Parser\Base</namespace-alias>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="DOMElement">DOMElement</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="22" package="Default">
      <name>OnlineEditor</name>
      <full_name>\ezp\Content\FieldType\XmlText\Input\Parser\OnlineEditor</full_name>
      <extends>\ezp\Content\FieldType\XmlText\Input\Parser\Base</extends>
      <extends>\ezp\Content\FieldType\XmlText\Input\Parser</extends>
      <docblock line="17">
        <description><![CDATA[OnlineEditor XmlText input parser.]]></description>
        <long-description><![CDATA[<p>Parses X(HT)ML produced by the OnlineEditor.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="27" package="Default">
        <name>HTML_CLASS_REGEX</name>
        <value><![CDATA["/(webkit-[\w\-]+|Apple-[\w\-]+|mceItem\w+|ezoeItem\w+|mceVisualAid)/i"]]></value>
        <docblock line="24">
          <description><![CDATA[Used to strip out ezoe, tinymce & browser specific classes]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$InputTags</name>
        <default><![CDATA[array(
        'section' => array( 'name' => 'section' ),
        'b'       => array( 'name' => 'strong' ),
        'bold'    => array( 'name' => 'strong' ),
        'strong'  => array( 'name' => 'strong' ),
        'i'       => array( 'name' => 'emphasize' ),
        'em'      => array( 'name' => 'emphasize' ),
        'pre'     => array( 'name' => 'literal' ),
        'div'     => array( 'nameHandler' => 'tagNameDivnImg' ),
        'u'       => array( 'nameHandler' => 'tagNameCustomHelper' ),
        'sub'       => array( 'nameHandler' => 'tagNameCustomHelper' ),
        'sup'       => array( 'nameHandler' => 'tagNameCustomHelper' ),
        'img'     => array( 'nameHandler' => 'tagNameDivnImg',
                            'noChildren' => true ),
        'h1'      => array( 'nameHandler' => 'tagNameHeader' ),
        'h2'      => array( 'nameHandler' => 'tagNameHeader' ),
        'h3'      => array( 'nameHandler' => 'tagNameHeader' ),
        'h4'      => array( 'nameHandler' => 'tagNameHeader' ),
        'h5'      => array( 'nameHandler' => 'tagNameHeader' ),
        'h6'      => array( 'nameHandler' => 'tagNameHeader' ),
        'p'       => array( 'name' => 'paragraph' ),
        'br'      => array( 'name' => 'br',
                            'noChildren' => true ),
        'span'    => array( 'nameHandler' => 'tagNameSpan' ),
        'table'   => array( 'nameHandler' => 'tagNameTable' ),
        'td'      => array( 'name' => 'td' ),
        'tr'      => array( 'name' => 'tr' ),
        'th'      => array( 'name' => 'th' ),
        'ol'      => array( 'name' => 'ol' ),
        'ul'      => array( 'name' => 'ul' ),
        'li'      => array( 'name' => 'li' ),
        'a'       => array( 'nameHandler' => 'tagNameLink' ),
        'link'    => array( 'nameHandler' => 'tagNameLink' ),
       // Stubs for not supported tags.
        'tbody'   => array( 'name' => '' ),
        'thead'   => array( 'name' => '' ),
        'tfoot'   => array( 'name' => '' )
    )]]></default>
        <docblock line="29">
          <description><![CDATA[Maps input tags (html) to a output tag or a hander to
decide what kind of ezxml tag to use.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="80" package="Default">
        <name>$OutputTags</name>
        <default><![CDATA[array(
        'section'   => array(),

        'embed'     => array( 'initHandler'    => 'transformStyles',
                              'structHandler'  => 'appendLineParagraph',
                              'publishHandler' => 'publishHandlerEmbed',
                              'attributes'     => array( 'alt' => 'size',
                                                         'html_id' => 'xhtml:id' ) ),

        'embed-inline' => array( 'initHandler'    => 'transformStyles',
                                 'structHandler'  => 'appendLineParagraph',
                                 'publishHandler' => 'publishHandlerEmbed',
                                 'attributes'     => array( 'alt' => 'size',
                                                            'html_id' => 'xhtml:id' ) ),

        'table'     => array( 'initHandler'   => 'transformStyles',
                              'structHandler' => 'appendParagraph',
                              'attributes'    => array( 'border' => false,
                                                        'ezborder' => 'border' ) ),

        'tr'        => array(),

        'td'        => array( 'initHandler' => 'transformStyles',
                              'attributes'  => array( 'width' => 'xhtml:width',
                                                      'colspan' => 'xhtml:colspan',
                                                      'rowspan' => 'xhtml:rowspan' ) ),

        'th'        => array( 'initHandler' => 'transformStyles',
                              'attributes'  => array( 'width' => 'xhtml:width',
                                                      'colspan' => 'xhtml:colspan',
                                                      'rowspan' => 'xhtml:rowspan' ) ),

        'ol'        => array( 'structHandler' => 'structHandlerLists' ),

        'ul'        => array( 'structHandler' => 'structHandlerLists' ),

        'li'        => array( 'autoCloseOn' => array( 'li' ) ),

        'header'    => array( 'initHandler'   => 'initHandlerHeader',
                              'autoCloseOn'   => array( 'paragraph' ),
                              'structHandler' => 'structHandlerHeader' ),

        'paragraph' => array( 'parsingHandler' => 'parsingHandlerParagraph',
                              'autoCloseOn'    => array( 'paragraph' ),
                              'initHandler'    => 'transformStyles',
                              'structHandler'  => 'structHandlerParagraph' ),

        'line'      => array(),

        'br'        => array( 'parsingHandler' => 'breakInlineFlow',
                              'structHandler'  => 'structHandlerBr',
                              'attributes'     => false ),

        'literal'   => array( 'parsingHandler' => 'parsingHandlerLiteral',
                              'structHandler'  => 'appendParagraph',
                              'attributes'     => array( 'class' => 'class' ) ),

        'strong'    => array( 'structHandler' => 'appendLineParagraph' ),

        'emphasize' => array( 'structHandler' => 'appendLineParagraph' ),

        'link'      => array( 'structHandler'  => 'appendLineParagraph',
                              'publishHandler' => 'publishHandlerLink',
                              'attributes'     => array( 'title' => 'xhtml:title',
                                                         'id' => 'xhtml:id' ) ),

        'anchor'    => array( 'structHandler' => 'appendLineParagraph' ),

        'custom'    => array( 'initHandler'   => 'initHandlerCustom',
                              'structHandler' => 'structHandlerCustom' ),

        '#text'     => array( 'structHandler' => 'structHandlerText' )
    )]]></default>
        <docblock line="74">
          <description><![CDATA[Maps output tags (ezxml) to varius handlers at different stages
decide what kind of ezxml tag to use.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="158" package="Default">
        <name>$embeddedObjectIDArray</name>
        <default><![CDATA[array()]]></default>
        <docblock line="154">
          <description><![CDATA[Lists of external ids found during parsing]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="154" name="var" description="" type="\integer[]">
            <type by_reference="false">\integer[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="159">
        <name>$deletedEmbeddedNodeIDArray</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="160">
        <name>$deletedEmbeddedObjectIDArray</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="161">
        <name>$thrashedEmbeddedObjectIDArray</name>
        <default><![CDATA[array()]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="163">
        <name>$anchorAsAttribute</name>
        <default><![CDATA[false]]></default>
      </property>
      <property final="false" static="true" visibility="protected" line="168" package="Default">
        <name>$customTagList</name>
        <default><![CDATA[null]]></default>
        <docblock line="165">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="165" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="174" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="170">
          <description><![CDATA[Input handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="170" name="var" description="" type="\ezp\Content\FieldType\XmlText\Input\Handler">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Input\Handler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="185" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="176">
          <description><![CDATA[Constructor
For more info see {@link eZXMLInputParser::eZXMLInputParser()}]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="176" name="param" description="" type="int" variable="$validateErrorLevel">
            <type by_reference="false">int</type>
          </tag>
          <tag line="176" name="param" description="" type="int" variable="$detectErrorLevel">
            <type by_reference="false">int</type>
          </tag>
          <tag line="176" name="param" description="flag if line breaks should be given meaning or not" type="bool" variable="$parseLineBreaks">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="176" name="param" description="signal if attributes of default value should not be saved." type="bool" variable="$removeDefaultAttrs">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="201" package="Default">
        <name>process</name>
        <type>function</type>
        <docblock line="194">
          <description><![CDATA[Process html text and transform it to xml.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="194" name="param" description="" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="194" name="param" description="" type="bool" variable="$createRootNode">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="194" name="return" description="" type="false|\ezp\Content\FieldType\XmlText\Input\Parser\DOMDocument">
            <type by_reference="false">false</type>
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Input\Parser\DOMDocument</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$text</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="201">
          <name>$createRootNode</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="217" package="Default">
        <name>tagNameSpan</name>
        <type>function</type>
        <docblock line="208">
          <description><![CDATA[tagNameSpan (tag mapping handler)
Handles span tag and maps it to embed|custom|strong|emphasize|custom.underline
Reuses {@link eZOEInputParser::tagNameDivnImg()} for embed and custom tag mapping.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="208" name="param" description="name of input (xhtml) tag" type="string" variable="$tagName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="208" name="param" description="byref value of tag attributes" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="208" name="return" description="name of ezxml tag or blank (then tag is removed, but not it's content)" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="217">
          <name>$tagName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="217">
          <name>$attributes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="254" package="Default">
        <name>tagNameHeader</name>
        <type>function</type>
        <docblock line="246">
          <description><![CDATA[tagNameHeader (tag mapping handler)
Handles H[1-6] tags and maps them to header tag]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="246" name="param" description="name of input (xhtml) tag" type="string" variable="$tagName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="246" name="param" description="byref value of tag attributes" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="246" name="return" description="name of ezxml tag or blank (then tag is removed, but not it's content)" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="254">
          <name>$tagName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="254">
          <name>$attributes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="268" package="Default">
        <name>tagNameTable</name>
        <type>function</type>
        <docblock line="260">
          <description><![CDATA[tagNameTable (tag mapping handler)
Handles table tag and cleanups some attributes for it]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="260" name="param" description="name of input (xhtml) tag" type="string" variable="$tagName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="260" name="param" description="byref value of tag attributes" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="260" name="return" description="name of ezxml tag or blank (then tag is removed, but not it's content)" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="268">
          <name>$tagName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="268">
          <name>$attributes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="288" package="Default">
        <name>tagNameDivnImg</name>
        <type>function</type>
        <docblock line="280">
          <description><![CDATA[tagNameDivnImg (tag mapping handler)
Handles div|img tags and maps them to embed|embed-inline|custom tag]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="280" name="param" description="name of input (xhtml) tag" type="string" variable="$tagName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="280" name="param" description="byref value of tag attributes" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="280" name="return" description="name of ezxml tag or blank (then tag is removed, but not it's content)" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="288">
          <name>$tagName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="288">
          <name>$attributes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="332" package="Default">
        <name>tagNameLink</name>
        <type>function</type>
        <docblock line="324">
          <description><![CDATA[tagNameLink (tag mapping handler)
Handles a|link tags and maps them to link|anchor tag]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="324" name="param" description="name of input (xhtml) tag" type="string" variable="$tagName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="324" name="param" description="byref value of tag attributes" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="324" name="return" description="name of ezxml tag or blank (then tag is removed, but not it's content)" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="332">
          <name>$tagName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="332">
          <name>$attributes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="383" package="Default">
        <name>tagNameCustomHelper</name>
        <type>function</type>
        <docblock line="375">
          <description><![CDATA[tagNameCustomHelper (tag mapping handler)
Handles u|sub|sup tags and maps them to custom tag if they are enabled]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="375" name="param" description="name of input (xhtml) tag" type="string" variable="$tagName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="375" name="param" description="byref value of tag attributes" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="375" name="return" description="name of ezxml tag or blank (then tag is removed, but not it's content)" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="383">
          <name>$tagName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="383">
          <name>$attributes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="409" package="Default">
        <name>tagClassNamesCleanup</name>
        <type>function</type>
        <docblock line="401">
          <description><![CDATA[tagClassNamesCleanup
Used by init handlers, removes any oe/tinMCE/browser specific classes and trims the result.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="401" name="static" description=""/>
          <tag line="401" name="param" description="'Dirty' class name as provided by TinyMCE" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="401" name="return" description="Cleaned and trimmed class name" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="409">
          <name>$className</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="422" package="Default">
        <name>parsingHandlerLiteral</name>
        <type>function</type>
        <docblock line="414">
          <description><![CDATA[parsingHandlerLiteral (parsing handler, pass 1)
parse content of literal tag so tags are threated like text.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="414" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="414" name="param" description="parameters for xml element" type="array" variable="$param">
            <type by_reference="false">array</type>
          </tag>
          <tag line="414" name="return" description="" type="bool|null">
            <type by_reference="false">bool</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="422">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="422">
          <name>$param</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="464" package="Default">
        <name>parsingHandlerParagraph</name>
        <type>function</type>
        <docblock line="456">
          <description><![CDATA[parsingHandlerParagraph (parsing handler, pass 1)
parse content of paragraph tag to fix empty paragraphs issues.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="456" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="456" name="param" description="parameters for xml element" type="array" variable="$param">
            <type by_reference="false">array</type>
          </tag>
          <tag line="456" name="return" description="" type="bool|null">
            <type by_reference="false">bool</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="464">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="464">
          <name>$param</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="504" package="Default">
        <name>breakInlineFlow</name>
        <type>function</type>
        <docblock line="496">
          <description><![CDATA[breakInlineFlow (parsing handler, pass 1)
handle flow around <br> tags, legazy from oe 4.x]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="496" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="496" name="param" description="parameters for xml element" type="array" variable="$param">
            <type by_reference="false">array</type>
          </tag>
          <tag line="496" name="return" description="" type="bool|null">
            <type by_reference="false">bool</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="504">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="504">
          <name>$param</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="572" package="Default">
        <name>initHandlerCustom</name>
        <type>function</type>
        <docblock line="564">
          <description><![CDATA[initHandlerCustom (init handler, pass 2 before childre tags)
seesm to be doing nothing]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="564" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="564" name="param" description="parameters for xml element" type="array" variable="$param">
            <type by_reference="false">array</type>
          </tag>
          <tag line="564" name="return" description="" type="bool|null">
            <type by_reference="false">bool</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="572">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="572">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="589" package="Default">
        <name>initHandlerHeader</name>
        <type>function</type>
        <docblock line="581">
          <description><![CDATA[initHandlerHeader (init handler, pass 2 before childre tags)
sets anchor as attribute if setting is enabled]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="581" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="581" name="param" description="parameters for xml element" type="array" variable="$param">
            <type by_reference="false">array</type>
          </tag>
          <tag line="581" name="return" description="" type="bool|null">
            <type by_reference="false">bool</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="589">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="589">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="612" package="Default">
        <name>transformStyles</name>
        <type>function</type>
        <docblock line="604">
          <description><![CDATA[transformStyles (init handler, pass 2 before childre tags)
tryes to convert css styles to attributes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="604" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="604" name="param" description="" type="array" variable="$params">
            <type by_reference="false">array</type>
          </tag>
          <tag line="604" name="return" description="changes structure if it contains 'result' key" type="null|array">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="612">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="612">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="626" package="Default">
        <name>appendLineParagraph</name>
        <type>function</type>
        <docblock line="618">
          <description><![CDATA[appendLineParagraph (Structure handler, pass 2 after childre tags)
Structure handler for inline nodes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="618" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="618" name="param" description="node that are going to become new parent." type="\DOMElement" variable="$newParent">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="618" name="return" description="changes structure if it contains 'result' key" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="626">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="626">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="686" package="Default">
        <name>structHandlerBr</name>
        <type>function</type>
        <docblock line="678">
          <description><![CDATA[structHandlerBr (Structure handler, pass 2 after childre tags)
Structure handler for temporary <br> elements]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="678" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="678" name="param" description="node that are going to become new parent." type="\DOMElement" variable="$newParent">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="678" name="return" description="changes structure if it contains 'result' key" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="686">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="686">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="704" package="Default">
        <name>appendParagraph</name>
        <type>function</type>
        <docblock line="696">
          <description><![CDATA[appendParagraph (Structure handler, pass 2 after childre tags)
Structure handler for in-paragraph nodes.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="696" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="696" name="param" description="node that are going to become new parent." type="\DOMElement" variable="$newParent">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="696" name="return" description="changes structure if it contains 'result' key" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="704">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="704">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="752" package="Default">
        <name>structHandlerText</name>
        <type>function</type>
        <docblock line="744">
          <description><![CDATA[structHandlerText (Structure handler, pass 2 after childre tags)
Structure handler for #text.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="744" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="744" name="param" description="node that are going to become new parent." type="\DOMElement" variable="$newParent">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="744" name="return" description="changes structure if it contains 'result' key" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="752">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="752">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="864" package="Default">
        <name>structHandlerHeader</name>
        <type>function</type>
        <docblock line="856">
          <description><![CDATA[structHandlerHeader (Structure handler, pass 2 after childre tags)
Structure handler for header tag.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="856" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="856" name="param" description="node that are going to become new parent." type="\DOMElement" variable="$newParent">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="856" name="return" description="changes structure if it contains 'result' key" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="864">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="864">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="968" package="Default">
        <name>structHandlerCustom</name>
        <type>function</type>
        <docblock line="960">
          <description><![CDATA[structHandlerCustom (Structure handler, pass 2 after childre tags)
Structure handler for custom tag.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="960" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="960" name="param" description="node that are going to become new parent." type="\DOMElement" variable="$newParent">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="960" name="return" description="changes structure if it contains 'result' key" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="968">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="968">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="999" package="Default">
        <name>structHandlerLists</name>
        <type>function</type>
        <docblock line="991">
          <description><![CDATA[structHandlerLists (Structure handler, pass 2 after childre tags)
Structure handler for ul|ol tags.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="991" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="991" name="param" description="node that are going to become new parent." type="\DOMElement" variable="$newParent">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="991" name="return" description="changes structure if it contains 'result' key" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="999">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="999">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1063" package="Default">
        <name>structHandlerParagraph</name>
        <type>function</type>
        <docblock line="1055">
          <description><![CDATA[structHandlerParagraph (Structure handler, pass 2 after childre tags)
Structure handler for paragraph tag.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1055" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="1055" name="param" description="node that are going to become new parent." type="\DOMElement" variable="$newParent">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="1055" name="return" description="changes structure if it contains 'result' key" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1063">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1063">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1116" package="Default">
        <name>publishHandlerLink</name>
        <type>function</type>
        <docblock line="1108">
          <description><![CDATA[publishHandlerLink (Publish handler, pass 2 after schema validation)
Publish handler for link element, converts href to [object|node|link]_id.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1108" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="1108" name="param" description="parameters for xml element" type="array" variable="$param">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1108" name="return" description="changes structure if it contains 'result' key" type="null|array">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1116">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1116">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1269" package="Default">
        <name>publishHandlerEmbed</name>
        <type>function</type>
        <docblock line="1260">
          <description><![CDATA[publishHandlerEmbed (Publish handler, pass 2 after schema validation)
Publish handler for embed element, convert id to [object|node]_id parameter,
fixes align=middle value (if embed was image) and tries to map css to attributes]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1260" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="1260" name="param" description="parameters for xml element" type="array" variable="$param">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1260" name="return" description="changes structure if it contains 'result' key" type="null|array">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1269">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1269">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1330" package="Default">
        <name>processAttributesBySchema</name>
        <type>function</type>
        <docblock line="1322">
          <description><![CDATA[processAttributesBySchema
Parses customattributes attribute and splits it into actual
custom: xml attributes, passes processing of normal attributes
to parent class.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1322" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
        </docblock>
        <argument line="1330">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1352">
        <name>getEmbeddedObjectIDArray</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1363" package="Default">
        <name>getDeletedEmbedIDArray</name>
        <type>function</type>
        <docblock line="1357">
          <description><![CDATA[Get list over currently deleted embeded objects, nodes and (optionally) objects in trash]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1357" name="param" description="" type="bool" variable="$includeTrash">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="1357" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1363">
          <name>$includeTrash</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1381" package="Default">
        <name>customTagIsEnabled</name>
        <type>function</type>
        <docblock line="1375">
          <description><![CDATA[Check if a custom tag is enabled]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1375" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1375" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="1381">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1397" package="Default">
        <name>elementStylesToAttribute</name>
        <type>function</type>
        <docblock line="1391">
          <description><![CDATA[Trying to convert CSS rules to XML attributes
(for the case of pasting from external source)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1391" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
        </docblock>
        <argument line="1397">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type>DOMElement</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/XmlText/Input/Parser/Simplified.php" hash="dd3569cdaa76ef41e40279d9f4525aba">
    <parse_markers>
      <error line="23" code="50018">No DocBlock was found for property $InputTags</error>
      <error line="42" code="50018">No DocBlock was found for property $OutputTags</error>
      <error line="119" code="50010">No DocBlock was found for method process()</error>
      <error line="124" code="50015">Argument $tagName is missing from the Docblock of tagNameHeader()</error>
      <error line="124" code="50015">Argument $attributes is missing from the Docblock of tagNameHeader()</error>
      <error line="166" code="50010">No DocBlock was found for method parsingHandlerLiteral()</error>
      <error line="194" code="50010">No DocBlock was found for method breakInlineFlow()</error>
      <error line="260" code="50010">No DocBlock was found for method appendLineParagraph()</error>
      <error line="315" code="50010">No DocBlock was found for method structHandlerBr()</error>
      <error line="382" code="50010">No DocBlock was found for method appendParagraph()</error>
      <error line="420" code="50010">No DocBlock was found for method structHandlerHeader()</error>
      <error line="544" code="50010">No DocBlock was found for method structHandlerCustom()</error>
      <error line="559" code="50010">No DocBlock was found for method structHandlerLists()</error>
      <error line="619" code="50010">No DocBlock was found for method structHandlerText()</error>
      <error line="683" code="50010">No DocBlock was found for method publishHandlerParagraph()</error>
      <error line="708" code="50010">No DocBlock was found for method publishHandlerLink()</error>
      <error line="853" code="50010">No DocBlock was found for method convertHrefToID()</error>
      <error line="868" code="50010">No DocBlock was found for method publishHandlerEmbed()</error>
      <error line="960" code="50010">No DocBlock was found for method publishHandlerObject()</error>
      <error line="1003" code="50010">No DocBlock was found for method publishHandlerCustom()</error>
      <error line="1013" code="50010">No DocBlock was found for method convertCustomAttributes()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/XmlText/Input/Parser/Simplified.php</error>
    </parse_markers>
    <namespace-alias name="InputParser">ezp\Content\FieldType\XmlText\Input\Parser</namespace-alias>
    <namespace-alias name="BaseParser">ezp\Content\FieldType\XmlText\Input\Parser\Base</namespace-alias>
    <namespace-alias name="Handler">ezp\Content\FieldType\XmlText\Input\Handler</namespace-alias>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="DOMElement">DOMElement</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="21" package="Default">
      <name>Simplified</name>
      <full_name>\ezp\Content\FieldType\XmlText\Input\Parser\Simplified</full_name>
      <extends>\ezp\Content\FieldType\XmlText\Input\Parser\Base</extends>
      <extends>\ezp\Content\FieldType\XmlText\Input\Parser</extends>
      <docblock line="18">
        <description><![CDATA[Simplified (native) XmlText input parser]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="23">
        <name>$InputTags</name>
        <default><![CDATA[array(
        'b'       => array( 'name' => 'strong' ),
        'bold'    => array( 'name' => 'strong' ),
        'i'       => array( 'name' => 'emphasize' ),
        'em'      => array( 'name' => 'emphasize' ),
        'h'       => array( 'name' => 'header' ),
        'p'       => array( 'name' => 'paragraph' ),
        'para'    => array( 'name' => 'paragraph' ),
        'br'      => array( 'name' => 'br',
                            'noChildren' => true ),
        'a'       => array( 'name' => 'link' ),
        'h1'     => array( 'nameHandler' => 'tagNameHeader' ),
        'h2'     => array( 'nameHandler' => 'tagNameHeader' ),
        'h3'     => array( 'nameHandler' => 'tagNameHeader' ),
        'h4'     => array( 'nameHandler' => 'tagNameHeader' ),
        'h5'     => array( 'nameHandler' => 'tagNameHeader' ),
        'h6'     => array( 'nameHandler' => 'tagNameHeader' ),
        )]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="42">
        <name>$OutputTags</name>
        <default><![CDATA[array(
        'section'   => array(),

        'embed'     => array( //'parsingHandler' => 'breakInlineFlow',
                              'structHandler' => 'appendLineParagraph',
                              'publishHandler' => 'publishHandlerEmbed',
                              'attributes' => array( 'id' => 'xhtml:id' ),
                              'requiredInputAttributes' => array( 'href' ) ),

        'embed-inline'     => array( //'parsingHandler' => 'breakInlineFlow',
                              'structHandler' => 'appendLineParagraph',
                              'publishHandler' => 'publishHandlerEmbed',
                              'attributes' => array( 'id' => 'xhtml:id' ),
                              'requiredInputAttributes' => array( 'href' ) ),

        'object'    => array( //'parsingHandler' => 'breakInlineFlow',
                              'structHandler' => 'appendLineParagraph',
                              'publishHandler' => 'publishHandlerObject',
                              'attributes' => array( 'href' => 'image:ezurl_href',
                                                     'target' => 'image:ezurl_target',
                                                     'ezurl_href' => 'image:ezurl_href',
                                                     'ezurl_id' => 'image:ezurl_id',
                                                     'ezurl_target' => 'image:ezurl_target' ),
                              'requiredInputAttributes' => array( 'id' ) ),

        'table'     => array( 'structHandler' => 'appendParagraph' ),

        'tr'        => array(),

        'td'        => array( 'attributes' => array( 'width' => 'xhtml:width',
                                                     'colspan' => 'xhtml:colspan',
                                                     'rowspan' => 'xhtml:rowspan' ) ),

        'th'        => array( 'attributes' => array( 'width' => 'xhtml:width',
                                                     'colspan' => 'xhtml:colspan',
                                                     'rowspan' => 'xhtml:rowspan' ) ),

        'ol'        => array( 'structHandler' => 'structHandlerLists' ),

        'ul'        => array( 'structHandler' => 'structHandlerLists' ),

        'li'        => array( 'autoCloseOn' => array( 'li' ) ),

        'header'    => array( 'autoCloseOn' => array( 'paragraph' ),
                              'structHandler' => 'structHandlerHeader' ),

        'paragraph' => array( 'autoCloseOn' => array( 'paragraph' ),
                              'publishHandler' => 'publishHandlerParagraph' ),

        'line'      => array(),

        'br'        => array( 'parsingHandler' => 'breakInlineFlow',
                              'structHandler' => 'structHandlerBr',
                              'attributes' => false ),

        'literal'   => array( 'parsingHandler' => 'parsingHandlerLiteral',
                              'structHandler' => 'appendParagraph' ),

        'strong'    => array( 'structHandler' => 'appendLineParagraph' ),

        'emphasize' => array( 'structHandler' => 'appendLineParagraph' ),

        'link'      => array( 'structHandler' => 'appendLineParagraph',
                              'publishHandler' => 'publishHandlerLink',
                              'attributes' => array( 'title' => 'xhtml:title',
                                                     'id' => 'xhtml:id' ),
                              'requiredInputAttributes' => array( 'href' ) ),

        'anchor'    => array( 'structHandler' => 'appendLineParagraph' ),

        'custom'    => array( 'structHandler' => 'structHandlerCustom',
                              'publishHandler' => 'publishHandlerCustom',
                              'requiredInputAttributes' => array( 'name' ) ),

        '#text'     => array( 'structHandler' => 'structHandlerText' )
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="119">
        <name>process</name>
        <type>function</type>
        <argument line="119">
          <name>$xmlString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="119">
          <name>$createRootNode</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="127" package="Default">
        <name>tagNameHeader</name>
        <type>function</type>
        <docblock line="124">
          <description><![CDATA[Tag Name handlers (init handlers)]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="127">
          <name>$tagName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="127">
          <name>$attributes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="166">
        <name>parsingHandlerLiteral</name>
        <type>function</type>
        <argument line="166">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="166">
          <name>$param</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="194">
        <name>breakInlineFlow</name>
        <type>function</type>
        <argument line="194">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="194">
          <name>$param</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="260">
        <name>appendLineParagraph</name>
        <type>function</type>
        <argument line="260">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="260">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="315">
        <name>structHandlerBr</name>
        <type>function</type>
        <argument line="315">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="315">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="382">
        <name>appendParagraph</name>
        <type>function</type>
        <argument line="382">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="382">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="420">
        <name>structHandlerHeader</name>
        <type>function</type>
        <argument line="420">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="420">
          <name>$param</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="544">
        <name>structHandlerCustom</name>
        <type>function</type>
        <argument line="544">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="544">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="559">
        <name>structHandlerLists</name>
        <type>function</type>
        <argument line="559">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="559">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="619">
        <name>structHandlerText</name>
        <type>function</type>
        <argument line="619">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="619">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="683">
        <name>publishHandlerParagraph</name>
        <type>function</type>
        <argument line="683">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="683">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="708">
        <name>publishHandlerLink</name>
        <type>function</type>
        <argument line="708">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="708">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="853">
        <name>convertHrefToID</name>
        <type>function</type>
        <argument line="853">
          <name>$href</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="868">
        <name>publishHandlerEmbed</name>
        <type>function</type>
        <argument line="868">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="868">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="960">
        <name>publishHandlerObject</name>
        <type>function</type>
        <argument line="960">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="960">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1003">
        <name>publishHandlerCustom</name>
        <type>function</type>
        <argument line="1003">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1003">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1013">
        <name>convertCustomAttributes</name>
        <type>function</type>
        <argument line="1013">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/XmlText/Input/Parser/Base.php" hash="a6eb89a01858e3cac5dd0234b6fcad61">
    <markers>
      <todo line="1061">break processing of any node that doesn't have parent</todo>
      <todo line="1100">break processing of any node that doesn't have parent</todo>
    </markers>
    <parse_markers>
      <error line="189" code="50018">No DocBlock was found for property $contentObjectID</error>
      <error line="215" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $handler in setHandler()</error>
      <error line="348" code="50010">No DocBlock was found for method performPass1()</error>
      <error line="379" code="50010">No DocBlock was found for method parseTag()</error>
      <error line="648" code="50015">Argument $attributeString is missing from the Docblock of parseAttributes()</error>
      <error line="758" code="50010">No DocBlock was found for method washText()</error>
      <error line="775" code="50010">No DocBlock was found for method entitiesDecode()</error>
      <error line="787" code="50010">No DocBlock was found for method convertNumericEntities()</error>
      <error line="833" code="50010">No DocBlock was found for method wordMatchSupport()</error>
      <error line="855" code="50010">No DocBlock was found for method performPass2()</error>
      <error line="862" code="50010">No DocBlock was found for method processSubtree()</error>
      <error line="1027" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $element in processBySchemaPresence()</error>
      <error line="1109" code="50015">Argument $element is missing from the Docblock of fixSubtree()</error>
      <error line="1109" code="50015">Argument $mainChild is missing from the Docblock of fixSubtree()</error>
      <error line="1131" code="50010">No DocBlock was found for method processAttributesBySchema()</error>
      <error line="1195" code="50010">No DocBlock was found for method callInputHandler()</error>
      <error line="1215" code="50010">No DocBlock was found for method callOutputHandler()</error>
      <error line="1235" code="50015">Argument $elementName is missing from the Docblock of createAndPublishElement()</error>
      <error line="1235" code="50015">Argument $ret is missing from the Docblock of createAndPublishElement()</error>
      <error line="1257" code="50010">No DocBlock was found for method processNewElements()</error>
      <error line="1354" code="50010">No DocBlock was found for method handleError()</error>
      <error line="1372" code="50010">No DocBlock was found for method getRelatedContentIdArray()</error>
      <error line="1377" code="50010">No DocBlock was found for method getLinkedContentIdArray()</error>
      <error line="1382" code="50010">No DocBlock was found for method getUrlIdArray()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/XmlText/Input/Parser/Base.php</error>
    </parse_markers>
    <namespace-alias name="DOMDocument">DOMDocument</namespace-alias>
    <namespace-alias name="DOMElement">DOMElement</namespace-alias>
    <namespace-alias name="DOMNode">DOMNode</namespace-alias>
    <namespace-alias name="DOMText">DOMText</namespace-alias>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="XmlSchema">ezp\Content\FieldType\XmlText\Schema</namespace-alias>
    <namespace-alias name="InputHandler">ezp\Content\FieldType\XmlText\Input\Handler</namespace-alias>
    <namespace-alias name="BadConfiguration">ezp\Base\Exception\BadConfiguration</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="28" package="Default">
      <name>Base</name>
      <full_name>\ezp\Content\FieldType\XmlText\Input\Parser\Base</full_name>
      <extends/>
      <docblock line="18">
        <description><![CDATA[Base class for the input parser.]]></description>
        <long-description><![CDATA[<p>The goal of the parser is XML/HTML analyzing, fixing and transforming.
The input is processed in 2 passes:
 - 1st pass: Parsing input, check for syntax errors, build DOM tree.
 - 2nd pass: Walking through DOM tree, checking validity by XML schema,
             calling tag handlers to transform the tree.</p>

<p>Both passes are controlled by the arrays described bellow and user handler functions.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="33" package="Default">
        <name>ERROR_NONE</name>
        <value><![CDATA[0]]></value>
        <docblock line="30">
          <description><![CDATA[Error types constants]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="34">
        <name>ERROR_SYNTAX</name>
        <value><![CDATA[4]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="35">
        <name>ERROR_SCHEMA</name>
        <value><![CDATA[8]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="36">
        <name>ERROR_DATA</name>
        <value><![CDATA[16]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="37">
        <name>ERROR_ALL</name>
        <value><![CDATA[28]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="44" package="Default">
        <name>OPT_VALIDATE_ERROR_LEVEL</name>
        <value><![CDATA['ValidateErrorLevel']]></value>
        <docblock line="39">
          <description><![CDATA[Parser options constants, to be used with setOption]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="39" name="see" description="\ezp\Content\FieldType\XmlText\Input\Parser\setOption()" refers="\ezp\Content\FieldType\XmlText\Input\Parser\setOption()"/>
        </docblock>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="45">
        <name>OPT_DETECT_ERROR_LEVEL</name>
        <value><![CDATA['DetectErrorLevel']]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="46">
        <name>OPT_REMOVE_DEFAULT_ATTRS</name>
        <value><![CDATA['RemoveDefaultAttrs']]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="47">
        <name>OPT_PARSE_LINE_BREAKS</name>
        <value><![CDATA['ParseLineBreaks']]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="48">
        <name>OPT_EZ_PUBLISH_VERSION</name>
        <value><![CDATA['eZPublishVersion']]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="49">
        <name>OPT_TRIM_SPACES</name>
        <value><![CDATA['TrimSpaces']]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="50">
        <name>OPT_ALLOW_MULTIPLE_SPACES</name>
        <value><![CDATA['AllowMultipleSpaces']]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="51">
        <name>OPT_ALLOW_NUMERIC_ENTITIES</name>
        <value><![CDATA['AllowNumericEntities']]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="52">
        <name>OPT_STRICT_HEADERS</name>
        <value><![CDATA['StrictHeaders']]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="53">
        <name>OPT_DOM_DOCUMENT_CLASS</name>
        <value><![CDATA['DOMDocumentClass']]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="54">
        <name>OPT_CHECK_EXTERNAL_DATA</name>
        <value><![CDATA['checkExternalData']]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="74" package="Default">
        <name>$InputTags</name>
        <default><![CDATA[array()]]></default>
        <docblock line="56">
          <description><![CDATA[Properties of elements that come from the input.]]></description>
          <long-description><![CDATA[<p>Each array element describes a tag that comes from the input. Arrays index is
a tag's name. Each element is an array that may contain the following members:
- name: a string representing a new name of the tag
- nameHandler: a name of the function that returns new tag name.
               Function format: function tagNameHandler( $tagName, &amp;$attributes )
               If none of those elements are defined the original tag's name is used.
- noChildren: boolean value that determines if this tag could have child tags. Default value is false.</p>

<pre><code>$InputTags = array(
    'original-name' => array( 'name' => 'new-name' ),
    'original-name2' => array( 'nameHandler' => 'tagNameHandler',
                               'noChildren' => true ),
);
</code></pre>]]></long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="103" package="Default">
        <name>$OutputTags</name>
        <default><![CDATA[array()]]></default>
        <docblock line="76">
          <description><![CDATA[Properties of elements that are produced in the output.]]></description>
          <long-description><![CDATA[<p>Each array element describes a tag presented in the output. Arrays index is
a tag's name. Each element is an array that may contain the following members:
- parsingHandler: "Parsing handler" called at parse pass 1 before processing tag's children.
- initHandler: "Init handler" called at pass 2 before proccessing tag's children.
- structHandler: "Structure handler" called at pass 2 after proccessing tag's children,
                 but before schema validity check. It can be used to implement structure
                 transformations.
- publishHandler: "Publish handler" called at pass 2 after schema validity check, so it is called
                 in case the element has it's guaranteed place in the DOM tree.
- attributes: an array that describes attributes transformations. Array's index is the
             original name of an attribute, and the value is the new name.
- requiredInputAttributes: attributes that are required in the input tag. If they are not presented
                           it raises invalid input flag.</p>

<p>&lt;</p>

<p>pre><code>public $OutputTags = array(
   'custom'    => array( 'parsingHandler' => 'parsingHandlerCustom',
                         'initHandler' => 'initHandlerCustom',
                         'structHandler' => 'structHandlerCustom',
                         'publishHandler' => 'publishHandlerCustom',
                         'attributes' => array( 'title' => 'name' ) ),
);</p>]]></long-description>
          <tag line="76" name="var" description="." type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="109" package="Default">
        <name>$Namespaces</name>
        <default><![CDATA[array( 'image' => 'http://ez.no/namespaces/ezpublish3/image/',
                                   'xhtml' => 'http://ez.no/namespaces/ezpublish3/xhtml/',
                                   'custom' => 'http://ez.no/namespaces/ezpublish3/custom/',
                                   'tmp' => 'http://ez.no/namespaces/ezpublish3/temporary/' )]]></default>
        <docblock line="105">
          <description><![CDATA[List of XmlText namespaces]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="118" package="Default">
        <name>$options</name>
        <default><![CDATA[array(
        'ValidateErrorLevel' => self::ERROR_NONE,
        'DetectErrorLevel' => self::ERROR_NONE,
        'RemoveDefaultAttrs' => false,
        'ParseLineBreaks' => false,
        'eZPublishVersion' => 4.6,
        'TrimSpaces' => false,
        'AllowMultipleSpaces' => false,
        'AllowNumericEntities' => false,
        'StrictHeaders' => false,
        'DOMDocumentClass' => 'DOMDocument',
        'checkExternalData' => true,
    )]]></default>
        <docblock line="114">
          <description><![CDATA[Parser options list]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="114" name="var" description="" type="\ezp\Content\FieldType\XmlText\Input\Parser\mixed[string]">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Input\Parser\mixed[string]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="136" package="Default">
        <name>$XMLSchema</name>
        <default><![CDATA[]]></default>
        <docblock line="132">
          <description><![CDATA[XmlSchema object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="var" description="" type="\ezp\Content\FieldType\XmlText\Schema">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Schema</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="142" package="Default">
        <name>$Document</name>
        <default><![CDATA[null]]></default>
        <docblock line="138">
          <description><![CDATA[DOM document object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="138" name="var" description="" type="\DOMDocument">
            <type by_reference="false">\DOMDocument</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="149" package="Default">
        <name>$Messages</name>
        <default><![CDATA[array()]]></default>
        <docblock line="144">
          <description><![CDATA[Processing messages]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="144" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
          <tag line="144" name="see" description="\ezp\Content\FieldType\XmlText\Input\Parser\getMessages()" refers="\ezp\Content\FieldType\XmlText\Input\Parser\getMessages()"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="155" package="Default">
        <name>$ParentStack</name>
        <default><![CDATA[array()]]></default>
        <docblock line="151">
          <description><![CDATA[Parent nodes stack]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="151" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="162" package="Default">
        <name>$isInputValid</name>
        <default><![CDATA[true]]></default>
        <docblock line="157">
          <description><![CDATA[Boolean holding the validity status of the input string]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="157" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="157" name="see" description="\ezp\Content\FieldType\XmlText\Input\Parser\isInputValid()" refers="\ezp\Content\FieldType\XmlText\Input\Parser\isInputValid()"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="168" package="Default">
        <name>$QuitProcess</name>
        <default><![CDATA[false]]></default>
        <docblock line="164">
          <description><![CDATA[Boolean used to interrupt the process between steps]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="164" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="174" package="Default">
        <name>$urlIDArray</name>
        <default><![CDATA[array()]]></default>
        <docblock line="170">
          <description><![CDATA[Array of Url objects ids]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="170" name="var" description="" type="\integer[]">
            <type by_reference="false">\integer[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="180" package="Default">
        <name>$relatedObjectIDArray</name>
        <default><![CDATA[array()]]></default>
        <docblock line="176">
          <description><![CDATA[Array of related Content objects id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="176" name="var" description="" type="\integer[]">
            <type by_reference="false">\integer[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="186" package="Default">
        <name>$linkedObjectIDArray</name>
        <default><![CDATA[array()]]></default>
        <docblock line="182">
          <description><![CDATA[Array of linked Content objects id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="182" name="var" description="" type="\integer[]">
            <type by_reference="false">\integer[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="189">
        <name>$contentObjectID</name>
        <default><![CDATA[0]]></default>
      </property>
      <property final="false" static="false" visibility="protected" line="195" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="191">
          <description><![CDATA[Input handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="191" name="var" description="" type="\ezp\Content\FieldType\XmlText\Input\Handler">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Input\Handler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="200" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="197">
          <description><![CDATA[Construct a new Parser]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="219" package="Default">
        <name>setHandler</name>
        <type>function</type>
        <docblock line="215">
          <description><![CDATA[Sets the input handler for the parser to $handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="215" name="param" description="" type="\ezp\Content\FieldType\XmlText\Input\Handler" variable="$handler">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Input\Handler</type>
          </tag>
        </docblock>
        <argument line="219">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>InputHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="230" package="Default">
        <name>setOption</name>
        <type>function</type>
        <docblock line="224">
          <description><![CDATA[Sets the parser option $option to $value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="224" name="param" description="One of self::OPT_*" type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="224" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="224" name="throws" description="If the option is unknown or the value incorrect" type="\ezp\Base\Exception\BadConfiguration">
            <type by_reference="false">\ezp\Base\Exception\BadConfiguration</type>
          </tag>
        </docblock>
        <argument line="230">
          <name>$option</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="230">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="245" package="Default">
        <name>getOption</name>
        <type>function</type>
        <docblock line="240">
          <description><![CDATA[Gets the parser option $option]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="240" name="param" description="One of self::OPT_*" type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="240" name="throws" description="If the option is unknown or the value incorrect" type="\ezp\Base\Exception\BadConfiguration">
            <type by_reference="false">\ezp\Base\Exception\BadConfiguration</type>
          </tag>
        </docblock>
        <argument line="245">
          <name>$option</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="260" package="Default">
        <name>optionExists</name>
        <type>function</type>
        <docblock line="254">
          <description><![CDATA[Check if $option exists]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="254" name="param" description="" type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="254" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="260">
          <name>$option</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="271" package="Default">
        <name>process</name>
        <type>function</type>
        <docblock line="265">
          <description><![CDATA[Processes $text]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="265" name="param" description="" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="265" name="param" description="" type="bool" variable="$createRootNode">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="265" name="return" description="" type="\DOMDocument">
            <type by_reference="false">\DOMDocument</type>
          </tag>
        </docblock>
        <argument line="271">
          <name>$text</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="271">
          <name>$createRootNode</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="327" package="Default">
        <name>createDomDocument</name>
        <type>function</type>
        <docblock line="322">
          <description><![CDATA[Creates the DOMDocument object holding the XML text]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="322" name="param" description="wether or not to create the root &lt;section&gt; node" type="bool" variable="$createRootNode">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="322" name="return" description="" type="\DOMDocument">
            <type by_reference="false">\DOMDocument</type>
          </tag>
        </docblock>
        <argument line="327">
          <name>$createRootNode</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="348">
        <name>performPass1</name>
        <type>function</type>
        <argument line="348">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="379">
        <name>parseTag</name>
        <type>function</type>
        <argument line="379">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="379">
          <name>$pos</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="379">
          <name>$parent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="652" package="Default">
        <name>parseAttributes</name>
        <type>function</type>
        <docblock line="648">
          <description><![CDATA[Helper functions for pass 1]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="648" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="652">
          <name>$attributeString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="685" package="Default">
        <name>setAttributes</name>
        <type>function</type>
        <docblock line="680">
          <description><![CDATA[Sets attributes from $attributes on $element]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="680" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
          <tag line="680" name="param" description="" type="array" variable="$attributes">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="685">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type>DOMElement</type>
        </argument>
        <argument line="685">
          <name>$attributes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="758">
        <name>washText</name>
        <type>function</type>
        <argument line="758">
          <name>$textContent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="775">
        <name>entitiesDecode</name>
        <type>function</type>
        <argument line="775">
          <name>$text</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="787">
        <name>convertNumericEntities</name>
        <type>function</type>
        <argument line="787">
          <name>$text</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="833">
        <name>wordMatchSupport</name>
        <type>function</type>
        <argument line="833">
          <name>$newTagName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="833">
          <name>$attributes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="833">
          <name>$attributeString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="855">
        <name>performPass2</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="862">
        <name>processSubtree</name>
        <type>function</type>
        <argument line="862">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type>DOMNode</type>
        </argument>
        <argument line="862">
          <name>$lastHandlerResult</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1018" package="Default">
        <name>removeAllAttributes</name>
        <type>function</type>
        <docblock line="1014">
          <description><![CDATA[Removes all attributes from $element]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1014" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
        </docblock>
        <argument line="1018">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type>DOMElement</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1031" package="Default">
        <name>processBySchemaPresence</name>
        <type>function</type>
        <docblock line="1027">
          <description><![CDATA[Check if the element is allowed to exist in this document and remove it if not.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1027" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
        </docblock>
        <argument line="1031">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type>DOMNode</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1074" package="Default">
        <name>processBySchemaTree</name>
        <type>function</type>
        <docblock line="1070">
          <description><![CDATA[Check that $element has a correct position in the tree and fix it if not.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1070" name="param" description="" type="\DOMElement" variable="$element">
            <type by_reference="false">\DOMElement</type>
          </tag>
        </docblock>
        <argument line="1074">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1112" package="Default">
        <name>fixSubtree</name>
        <type>function</type>
        <docblock line="1109">
          <description><![CDATA[Removes nodes that don't match schema (recursively)]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="1112">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1112">
          <name>$mainChild</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1131">
        <name>processAttributesBySchema</name>
        <type>function</type>
        <argument line="1131">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1195">
        <name>callInputHandler</name>
        <type>function</type>
        <argument line="1195">
          <name>$handlerName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1195">
          <name>$tagName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1195">
          <name>$attributes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1215">
        <name>callOutputHandler</name>
        <type>function</type>
        <argument line="1215">
          <name>$handlerName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1215">
          <name>$element</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1215">
          <name>$params</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1243" package="Default">
        <name>createAndPublishElement</name>
        <type>function</type>
        <docblock line="1235">
          <description><![CDATA[Creates new element from $elementName and adds it to array for further post-processing.]]></description>
          <long-description><![CDATA[<p>Use this function if you need to process newly created element (check it by schema
and call 'structure' and 'publish' handlers)</p>]]></long-description>
          <tag line="1235" name="return" description="the created element" type="\DOMElement">
            <type by_reference="false">\DOMElement</type>
          </tag>
        </docblock>
        <argument line="1243">
          <name>$elementName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1243">
          <name>$ret</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1257">
        <name>processNewElements</name>
        <type>function</type>
        <argument line="1257">
          <name>$createdElements</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1340" package="Default">
        <name>getMessages</name>
        <type>function</type>
        <docblock line="1336">
          <description><![CDATA[Returns the XML processing messages]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1336" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1349" package="Default">
        <name>isValid</name>
        <type>function</type>
        <docblock line="1345">
          <description><![CDATA[Returns the validity status of the processed XML String]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1345" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1354">
        <name>handleError</name>
        <type>function</type>
        <argument line="1354">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1354">
          <name>$message</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1372">
        <name>getRelatedContentIdArray</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1377">
        <name>getLinkedContentIdArray</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText\Input\Parser" line="1382">
        <name>getUrlIdArray</name>
        <type>function</type>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/XmlText/Value.php" hash="e564c1fd175678445d4a54636e7834b1">
    <parse_markers>
      <error line="81" code="50014">Name of argument $inputFormat does not match with the DocBlock's name $type in __construct()</error>
      <notice line="81" code="50013">Parameter $type could not be found in __construct()</notice>
      <error line="95" code="50012">No short description for method fromString()</error>
      <error line="95" code="50015">Argument $stringValue is missing from the Docblock of fromString()</error>
      <error line="103" code="50012">No short description for method __toString()</error>
      <error line="111" code="50012">No short description for method getTitle()</error>
      <notice line="132" code="50013">Parameter $value could not be found in getInputParser()</notice>
      <error line="153" code="50015">Argument $rawText is missing from the Docblock of setRawText()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/XmlText/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="PersistenceFieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="InputHandler">ezp\Content\FieldType\XmlText\Input\Handler</namespace-alias>
    <namespace-alias name="SimplifiedInputParser">ezp\Content\FieldType\XmlText\Input\Parser\Simplified</namespace-alias>
    <namespace-alias name="OnlineEditorParser">ezp\Content\FieldType\XmlText\Input\Parser\OnlineEditor</namespace-alias>
    <namespace-alias name="RawInputParser">ezp\Content\FieldType\XmlText\Input\Parser\Raw</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\XmlText" line="22" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\XmlText\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="19">
        <description><![CDATA[Basic, raw value for TextLine field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\XmlText" line="63" package="Default">
        <name>INPUT_FORMAT_PLAIN</name>
        <value><![CDATA['plain']]></value>
        <docblock line="60">
          <description><![CDATA[Plain text input format constant]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="ezp\Content\FieldType\XmlText" line="69" package="Default">
        <name>INPUT_FORMAT_RAW</name>
        <value><![CDATA['raw']]></value>
        <docblock line="65">
          <description><![CDATA[RAW input format constant
Internal storage format]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="public" line="29" package="Default">
        <name>$text</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[Text content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$rawText</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Text content, as RAW format (self::INPUT_FORMAT_RAW)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="41" package="Default">
        <name>$inputFormat</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[Text input format]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="type" description="string One of the INPUT_FORMAT_* class constants"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="47" package="Default">
        <name>$inputHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="43">
          <description><![CDATA[Input handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="var" description="" type="\ezp\Content\FieldType\XmlText\Input\Handler">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Input\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="53" package="Default">
        <name>$inputParser</name>
        <default><![CDATA[]]></default>
        <docblock line="49">
          <description><![CDATA[Input parser
\ezp\Content\FieldType\XmlText\Input\Parser]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="75" package="Default">
        <name>$parserClasses</name>
        <default><![CDATA[array(
        'raw'   => 'ezp\\Content\\FieldType\\XmlText\\Input\\Parser\\Raw',
        'plain' => 'ezp\\Content\\FieldType\\XmlText\\Input\\Parser\\Simplified',
        // 'html'  => 'ezp\\Content\\FieldType\\XmlText\\Input\\Parser\\OnlineEditor',
    )]]></default>
        <docblock line="71">
          <description><![CDATA[Input parsing classes mapping]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="var" description="" type="\ezp\Content\FieldType\XmlText\array(string=&gt;string)">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\array(string=&gt;string)</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="87" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[Initializes a new XmlText Value object with $text in]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="param" description="" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
          <tag line="81" name="param" description="Which format the input is provided as. Expects one of the FORMAT_* class constants" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$text</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
        <argument line="87">
          <name>$inputFormat</name>
          <default><![CDATA[self::INPUT_FORMAT_PLAIN]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="98" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
        <argument line="98">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="106" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="103">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="114" package="Default">
        <name>getTitle</name>
        <type>function</type>
        <docblock line="111">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="111" name="see" description="\ezp\Content\FieldType\ValueInterface::getTitle()" refers="\ezp\Content\FieldType\ValueInterface::getTitle()"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="123" package="Default">
        <name>getInputHandler</name>
        <type>function</type>
        <docblock line="119">
          <description><![CDATA[Returns the input handler depending on the input value type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="119" name="return" description="" type="\ezp\Content\FieldType\XmlText\Input\Handler">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Input\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\XmlText" line="137" package="Default">
        <name>getInputParser</name>
        <type>function</type>
        <docblock line="132">
          <description><![CDATA[Returns the XML Input Parser for an XmlText Value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="param" description="" type="\ezp\Content\FieldType\XmlText\Value" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Value</type>
          </tag>
          <tag line="132" name="return" description="" type="\ezp\Content\FieldType\XmlText\Input\Parser">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\Input\Parser</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\XmlText" line="157" package="Default">
        <name>setRawText</name>
        <type>function</type>
        <docblock line="153">
          <description><![CDATA[Sets the raw value for the XmlText to $rawText]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="153" name="var" description="" type="\ezp\Content\FieldType\XmlText\text">
            <type by_reference="false">\ezp\Content\FieldType\XmlText\text</type>
          </tag>
        </docblock>
        <argument line="157">
          <name>$rawText</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/DateAndTime/Type.php" hash="4d915aacada81890709f4b5cc515fc40">
    <parse_markers>
      <error line="29" code="50018">No DocBlock was found for property $allowedSettings</error>
      <error line="51" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="17" code="50000">No DocBlock was found for Type</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/DateAndTime/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="DateTime">DateTime</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\DateAndTime" line="17">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\DateAndTime\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <constant namespace="ezp\Content\FieldType\DateAndTime" line="19">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA["ezdatetime"]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\DateAndTime" line="20">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[true]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\DateAndTime" line="25" package="Default">
        <name>DEFAULT_EMPTY</name>
        <value><![CDATA[0]]></value>
        <docblock line="22">
          <description><![CDATA[Default value types]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="29">
        <name>$allowedSettings</name>
        <default><![CDATA[array(
        'useSeconds' => false,
        // One of the DEFAULT_* class constants
        'defaultType' => self::DEFAULT_EMPTY,
        /*
         * @var \DateInterval
         * Used only if defaultValueType is set to DEFAULT_CURRENT_DATE_ADJUSTED
         */
        'dateInterval' => null
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\DateAndTime" line="46" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="return" description="" type="\ezp\Content\FieldType\DateAndTime\Value">
            <type by_reference="false">\ezp\Content\FieldType\DateAndTime\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\DateAndTime" line="60" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Checks if value can be parsed.]]></description>
          <long-description><![CDATA[<p>If the value actually can be parsed, the value is returned.</p>]]></long-description>
          <tag line="51" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="51" name="param" description="" type="mixed" variable="$inputValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="51" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\DateAndTime" line="78" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Returns information for FieldValue->$sortKey relevant to the field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/DateAndTime/Value.php" hash="3f312dfb54ba8de8f9cb1e3df06af813">
    <parse_markers>
      <error line="67" code="50012">No short description for method fromString()</error>
      <error line="86" code="50012">No short description for method __toString()</error>
      <error line="94" code="50012">No short description for method getTitle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/DateAndTime/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="Exception">Exception</namespace-alias>
    <namespace-alias name="DateTime">DateTime</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\DateAndTime" line="21" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\DateAndTime\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="18">
        <description><![CDATA[Value for DateAndTime field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="28" package="Default">
        <name>$value</name>
        <default><![CDATA[]]></default>
        <docblock line="23">
          <description><![CDATA[Date content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="\DateTime">
            <type by_reference="false">\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$stringFormat</name>
        <default><![CDATA['U']]></default>
        <docblock line="30">
          <description><![CDATA[Date format to be used by {@link __toString()}]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\DateAndTime" line="44" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Construct a new Value object and initialize with $dateTime]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="param" description="Date/Time as a DateTime object or a string understood by the DateTime class" type="\DateTime|string" variable="$dateTime">
            <type by_reference="false">\DateTime</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="throws" description="If $dateTime does not comply to a valid dateTime or string" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="37" name="throws" description="If $dateTime does not comply to a valid date format string" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$dateTime</name>
          <default><![CDATA["now"]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\DateAndTime" line="74" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="param" description="A valid date/time string. Valid formats are explained in {@link http://php.net/manual/en/datetime.formats.php Date and Time Formats}." type="string" variable="$stringValue">
            <type by_reference="false">string</type>
          </tag>
          <tag line="67" name="throws" description="If $stringValue does not comply a valid date format" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="67" name="return" description="" type="\ezp\Content\FieldType\DateAndTime\Value">
            <type by_reference="false">\ezp\Content\FieldType\DateAndTime\Value</type>
          </tag>
          <tag line="67" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
        <argument line="74">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\DateAndTime" line="89" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\DateAndTime" line="98" package="Default">
        <name>getTitle</name>
        <type>function</type>
        <docblock line="94">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="see" description="\ezp\Content\FieldType\ValueInterface::getTitle()" refers="\ezp\Content\FieldType\ValueInterface::getTitle()"/>
          <tag line="94" name="todo" description="Return format taken from locale configuration"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Checkbox/Type.php" hash="daa3766e36282fe8ac8c2783152762c3">
    <parse_markers>
      <error line="26" code="50018">No DocBlock was found for property $allowedSettings</error>
      <error line="41" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Checkbox/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Checkbox" line="21" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\Checkbox\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <docblock line="16">
        <description><![CDATA[Checkbox field type.]]></description>
        <long-description><![CDATA[<p>Represent boolean values.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\Checkbox" line="23">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA["ezboolean"]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\Checkbox" line="24">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[true]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="26">
        <name>$allowedSettings</name>
        <default><![CDATA[array(
        'defaultValue' => false
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Checkbox" line="36" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="return" description="" type="\ezp\Content\FieldType\Checkbox\Value">
            <type by_reference="false">\ezp\Content\FieldType\Checkbox\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Checkbox" line="51" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[Checks if value can be parsed.]]></description>
          <long-description><![CDATA[<p>If the value actually can be parsed, the value is returned.</p>]]></long-description>
          <tag line="41" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="41" name="throws" description="" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="41" name="param" description="" type="\ezp\Content\FieldType\Value" variable="$inputValue">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
          <tag line="41" name="return" description="" type="\ezp\Content\FieldType\Checkbox\Value">
            <type by_reference="false">\ezp\Content\FieldType\Checkbox\Value</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Checkbox" line="69" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Returns information for FieldValue->$sortKey relevant to the field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Checkbox/Value.php" hash="ed296e27f2fc488a1aba2da0334e20af">
    <parse_markers>
      <error line="36" code="50012">No short description for method fromString()</error>
      <error line="36" code="50015">Argument $stringValue is missing from the Docblock of fromString()</error>
      <error line="45" code="50012">No short description for method __toString()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Checkbox/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Checkbox" line="17" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\Checkbox\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="14">
        <description><![CDATA[Value for Checkbox field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$bool</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Boolean value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Checkbox" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Construct a new Value object and initialize it $boolValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="bool" variable="$boolValue">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$boolValue</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\Checkbox" line="40" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
          <tag line="36" name="return" description="" type="\ezp\Content\FieldType\Checkbox\Value">
            <type by_reference="false">\ezp\Content\FieldType\Checkbox\Value</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Checkbox" line="49" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
          <tag line="45" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Factory.php" hash="9f9871efc3ccfe08cd350ff5e2ee1797">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Factory.php</error>
    </parse_markers>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="MissingClass">ezp\Base\Exception\MissingClass</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Content\FieldType" line="18" package="Default">
      <name>Factory</name>
      <full_name>\ezp\Content\FieldType\Factory</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[FieldType Factory class]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType" line="27" package="Default">
        <name>build</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Factory method for building field type object based on $identifier.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="throws" description="" type="\ezp\Base\Exception\MissingClass">
            <type by_reference="false">\ezp\Base\Exception\MissingClass</type>
          </tag>
          <tag line="20" name="param" description="" type="string" variable="$fieldTypeIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="20" name="return" description="" type="\ezp\Content\FieldType">
            <type by_reference="false">\ezp\Content\FieldType</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$fieldTypeIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType" line="49" package="Default">
        <name>buildValue</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Builds a field value object for a field type from a $plainValue.]]></description>
          <long-description><![CDATA[<p>Field type is identified by $fieldTypeIdentifier (e.g. "ezstring").
Format for $plainValue is entirely up to the field type value object.</p>]]></long-description>
          <tag line="40" name="param" description="" type="string" variable="$fieldTypeIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="40" name="param" description="" type="mixed" variable="$plainValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="40" name="return" description="" type="\ezp\Content\FieldType\Value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$fieldTypeIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="49">
          <name>$plainValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType" line="79" package="Default">
        <name>getFieldTypeNamespace</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Returns field type namespace.]]></description>
          <long-description><![CDATA[<p>Field type is identified by $fiedTypeIdentifier.
Will throw a MissingClass exception if $fieldTypeIdentifier cannot be identified as a valid field type.</p>

<pre><code>use ezp\Content\FieldType\Factory as FieldTypeFactory,
    ezp\Base\Exception\MissingClass;

try
{
    // Will return "ezp\Content\FieldType\TextLine"
    $fieldTypeIdentifier = "ezstring";
    $fieldTypeNS = FieldTypeFactory::getFiedTypeNamespace( $fieldTypeIdentifier );
}
catch ( MissingClass $e )
{
    echo "Oops, seems that field type '$fieldTypeIdentifier' is invalid :-/";
}
</code></pre>]]></long-description>
          <tag line="55" name="param" description="Field type identifier" type="string" variable="$fieldTypeIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="throws" description="" type="\ezp\Base\Exception\MissingClass">
            <type by_reference="false">\ezp\Base\Exception\MissingClass</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$fieldTypeIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Author/Type.php" hash="9b9b8154b5c29022c41a41a30a51a926">
    <parse_markers>
      <error line="38" code="50012">No short description for method canParseValue()</error>
      <error line="38" code="50015">Argument $inputValue is missing from the Docblock of canParseValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Author/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Author" line="22" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\Author\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <docblock line="16">
        <description><![CDATA[Author field type.]]></description>
        <long-description><![CDATA[<p>Field type representing a list of authors, consisting of author name, and
author email.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\Author" line="24">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA["ezauthor"]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\Author" line="25">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[true]]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Author" line="33" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="return" description="" type="\ezp\Content\FieldType\Author\Value">
            <type by_reference="false">\ezp\Content\FieldType\Author\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Author" line="41" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="see" description="\ezp\Content\FieldType::canParseValue()" refers="\ezp\Content\FieldType::canParseValue()"/>
        </docblock>
        <argument line="41">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Author" line="61" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Returns information for FieldValue->$sortKey relevant to the field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Author/Author.php" hash="3ff6b792eba860fe8bc581311dfe75a9">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Author/Author.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Author" line="16" package="Default">
      <name>Author</name>
      <full_name>\ezp\Content\FieldType\Author\Author</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="13">
        <description><![CDATA[Value object for an author]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[Author's Id in the collection that holds it.]]></description>
          <long-description><![CDATA[<p>If not set or -1, an Id will be generated when added to AuthorCollection.</p>]]></long-description>
          <tag line="18" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[Name of the author]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="38" package="Default">
        <name>$email</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Email of the author]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Author/AuthorCollection.php" hash="75b25a43e1f45823827e37dad52c9b88">
    <parse_markers>
      <critical line="19" code="50019">No short description for property $authorValue</critical>
      <error line="24" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Author/AuthorCollection.php</error>
    </parse_markers>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Author" line="17" package="Default">
      <name>AuthorCollection</name>
      <full_name>\ezp\Content\FieldType\Author\AuthorCollection</full_name>
      <extends>\ezp\Base\Collection\Type</extends>
      <docblock line="13">
        <description><![CDATA[Author collection.]]></description>
        <long-description><![CDATA[<p>This collection can only hold {@link \ezp\Content\FieldType\Author\Author} objects</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="22" package="Default">
        <name>$authorValue</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="\ezp\Content\FieldType\Author\Value">
            <type by_reference="false">\ezp\Content\FieldType\Author\Value</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Author" line="24">
        <name>__construct</name>
        <type>function</type>
        <argument line="24">
          <name>$authorValue</name>
          <default><![CDATA[]]></default>
          <type>Value</type>
        </argument>
        <argument line="24">
          <name>$elements</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Author" line="42" package="Default">
        <name>offsetSet</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Adds a new author to the collection]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="36" name="param" description="" type="\ezp\Content\FieldType\Author\Author" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\Author\Author</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Author" line="64" package="Default">
        <name>removeAuthorsById</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Removes authors from current collection with a list of Ids]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="param" description="Author's Ids to remove from current collection" type="array" variable="$authorIds">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$authorIds</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Author/Value.php" hash="ba5a78fd27ca6d0d37d74dafab29d547">
    <parse_markers>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $authors in __construct()</error>
      <error line="37" code="50012">No short description for method fromString()</error>
      <error line="37" code="50015">Argument $stringValue is missing from the Docblock of fromString()</error>
      <error line="45" code="50012">No short description for method __toString()</error>
      <error line="62" code="50012">No short description for method getTitle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Author/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Author" line="18" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\Author\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="15">
        <description><![CDATA[Value for Author field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="25" package="Default">
        <name>$authors</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[List of authors]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="\ezp\Content\FieldType\Author\AuthorCollection">
            <type by_reference="false">\ezp\Content\FieldType\Author\AuthorCollection</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Author" line="32" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Construct a new Value object and initialize with $authors]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="\ezp\Content\FieldType\Author\Author[]" variable="$authors">
            <type by_reference="false">\ezp\Content\FieldType\Author\Author[]</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$authors</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\Author" line="40" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
        <argument line="40">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Author" line="48" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Author" line="65" package="Default">
        <name>getTitle</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="see" description="\ezp\Content\FieldType\ValueInterface::getTitle()" refers="\ezp\Content\FieldType\ValueInterface::getTitle()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Handler.php" hash="66c9888337554316ca3a227fce012cb3">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Handler.php</error>
    </parse_markers>
    <interface namespace="ezp\Content\FieldType" line="18" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Content\FieldType\Handler</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Field type handler interface.]]></description>
        <long-description><![CDATA[<p>Some field types provides handlers which help manipulate the field type value.
These objects implement this interface.</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="27" package="Default">
        <name>initWithFieldTypeValue</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Populates the field type handler with data from a field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="abstract" description=""/>
          <tag line="20" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="20" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="36" package="Default">
        <name>getFieldTypeValue</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Return a compatible value to store in a field type after manipulation
in the handler.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="abstract" description=""/>
          <tag line="29" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/Content/FieldType/Service.php" hash="53f54df04d45c48680495a4bfd0ded4e">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Service.php</error>
    </parse_markers>
    <namespace-alias name="BaseService">ezp\Base\Service</namespace-alias>
    <namespace-alias name="Relation">ezp\Content\Relation</namespace-alias>
    <namespace-alias name="Proxy">ezp\Content\Proxy</namespace-alias>
    <namespace-alias name="RelationCreateStruct">ezp\Persistence\Content\Relation\CreateStruct</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType" line="20" package="Default">
      <name>Service</name>
      <full_name>\ezp\Content\FieldType\Service</full_name>
      <extends>\ezp\Base\Service</extends>
      <docblock line="17">
        <description><![CDATA[Service providing necessary functionality for field types to perform internal content operations.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="42" package="Default">
        <name>addRelation</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Creates a new relation entry.]]></description>
          <long-description><![CDATA[<p>This method will only be used by field types.</p>]]></long-description>
          <tag line="23" name="access" description="private"/>
          <tag line="23" name="internal" description=""/>
          <tag line="23" name="param" description="The type of relation to create." type="int" variable="$relationType">
            <type by_reference="false">int</type>
          </tag>
          <tag line="23" name="param" description="The content id you want where you want to add the relation." type="mixed" variable="$contentFromId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="23" name="param" description="The version number where we are adding this relation." type="mixed" variable="$versionFromNo">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="23" name="param" description="The destination of the relation, which content id we are relating to." type="mixed" variable="$contentToId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="23" name="param" description="The id of the field definition that holds the attribute level relation." type="null|mixed" variable="$fieldDefinitionId">
            <type by_reference="false">null</type>
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="23" name="throws" description="If $relationType has an unsupported value" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="23" name="throws" description="If there is a mismatch between $relationType and provided values." type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
          <tag line="23" name="return" description="" type="\ezp\Content\Relation">
            <type by_reference="false">\ezp\Content\Relation</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$relationType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$contentFromId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$versionFromNo</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$contentToId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="42">
          <name>$fieldDefinitionId</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/BinaryFile/Type.php" hash="fc55a0fd0d996cceea73378345fe1e0d">
    <parse_markers>
      <error line="27" code="50018">No DocBlock was found for property $allowedValidators</error>
      <error line="42" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/BinaryFile/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="BinaryFile">ezp\Io\BinaryFile</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\BinaryFile" line="22" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\BinaryFile\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <docblock line="17">
        <description><![CDATA[The TextLine field type.]]></description>
        <long-description><![CDATA[<p>This field type represents a simple string.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\BinaryFile" line="24">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA["ezbinaryfile"]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\BinaryFile" line="25">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[true]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="27">
        <name>$allowedValidators</name>
        <default><![CDATA[array(
        'ezp\\Content\\FieldType\\BinaryFile\\FileSizeValidator'
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\BinaryFile" line="37" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="return" description="" type="\ezp\Content\FieldType\BinaryFile\Value">
            <type by_reference="false">\ezp\Content\FieldType\BinaryFile\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\BinaryFile" line="51" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Checks if $inputValue can be parsed.]]></description>
          <long-description><![CDATA[<p>If the $inputValue actually can be parsed, the value is returned.
Otherwise, an \ezp\Base\Exception\BadFieldTypeInput exception is thrown</p>]]></long-description>
          <tag line="42" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="42" name="param" description="" type="\ezp\Content\FieldType\BinaryFile\Value" variable="$inputValue">
            <type by_reference="false">\ezp\Content\FieldType\BinaryFile\Value</type>
          </tag>
          <tag line="42" name="return" description="" type="\ezp\Content\FieldType\BinaryFile\Value">
            <type by_reference="false">\ezp\Content\FieldType\BinaryFile\Value</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\BinaryFile" line="69" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[BinaryFile does not support sorting]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/BinaryFile/Value.php" hash="70ce571a8e89cd1f58a732db1dc2d436">
    <parse_markers>
      <critical line="48" code="50019">No short description for property $handler</critical>
      <error line="53" code="50015">Argument $file is missing from the Docblock of __construct()</error>
      <error line="72" code="50012">No short description for method fromString()</error>
      <error line="72" code="50015">Argument $stringValue is missing from the Docblock of fromString()</error>
      <error line="81" code="50012">No short description for method __toString()</error>
      <error line="100" code="50010">No DocBlock was found for method __get()</error>
      <error line="127" code="50012">No short description for method getTitle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/BinaryFile/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\BinaryFile" line="25" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\BinaryFile\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="15">
        <description><![CDATA[Value for BinaryFile field type]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="property-read" description="The internal name of the file (generated by the system)" type="string" variable="$filename">
          <type by_reference="false">string</type>
        </tag>
        <tag line="15" name="property-read" description="The MIME type of the file (for example &quot;audio/wav&quot;)." type="string" variable="$mimeType">
          <type by_reference="false">string</type>
        </tag>
        <tag line="15" name="property-read" description="The MIME type category (for example &quot;audio&quot;)." type="string" variable="$mimeTypeCategory">
          <type by_reference="false">string</type>
        </tag>
        <tag line="15" name="property-read" description="The MIME type part (for example &quot;wav&quot;)." type="string" variable="$mimeTypePart">
          <type by_reference="false">string</type>
        </tag>
        <tag line="15" name="property-read" description="The size of the file (number of bytes)." type="int" variable="$filesize">
          <type by_reference="false">int</type>
        </tag>
        <tag line="15" name="property-read" description="The path to the file (including the filename)." type="string" variable="$filepath">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$file</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[BinaryFile object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="39" package="Default">
        <name>$originalFilename</name>
        <default><![CDATA[]]></default>
        <docblock line="34">
          <description><![CDATA[Original file name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="46" package="Default">
        <name>$downloadCount</name>
        <default><![CDATA[0]]></default>
        <docblock line="41">
          <description><![CDATA[Number of times the file has been downloaded through content/download module]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="51" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="48">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="var" description="" type="\ezp\Content\FieldType\BinaryFile\Handler">
            <type by_reference="false">\ezp\Content\FieldType\BinaryFile\Handler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\BinaryFile" line="62" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[Construct a new Value object.]]></description>
          <long-description><![CDATA[<p>To affect a BinaryFile object to the $file property, use the handler:</p>

<pre><code>use \ezp\Content\FieldType\BinaryFile;
$binaryValue = new BinaryFile\Value;
$binaryValue->file = $binaryValue->getHandler()->createFromLocalPath( '/path/to/local/file.txt' );
</code></pre>]]></long-description>
        </docblock>
        <argument line="62">
          <name>$file</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\BinaryFile" line="76" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
          <tag line="72" name="return" description="" type="\ezp\Content\FieldType\BinaryFile\Value">
            <type by_reference="false">\ezp\Content\FieldType\BinaryFile\Value</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\BinaryFile" line="84" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\BinaryFile" line="95" package="Default">
        <name>getHandler</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Returns handler object.]]></description>
          <long-description><![CDATA[<p>Useful manipulate {@link self::$file}</p>]]></long-description>
          <tag line="89" name="return" description="" type="\ezp\Content\FieldType\BinaryFile\Handler">
            <type by_reference="false">\ezp\Content\FieldType\BinaryFile\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\BinaryFile" line="100">
        <name>__get</name>
        <type>function</type>
        <argument line="100">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\BinaryFile" line="130" package="Default">
        <name>getTitle</name>
        <type>function</type>
        <docblock line="127">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="127" name="see" description="\ezp\Content\FieldType\ValueInterface::getTitle()" refers="\ezp\Content\FieldType\ValueInterface::getTitle()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/BinaryFile/FileSizeValidator.php" hash="627dbe7dca566e87bc701765962a3630">
    <parse_markers>
      <error line="21" code="50018">No DocBlock was found for property $constraints</error>
      <error line="25" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in validate()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/BinaryFile/FileSizeValidator.php</error>
    </parse_markers>
    <namespace-alias name="Validator">ezp\Content\FieldType\Validator</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\BinaryFile" line="19" package="Default">
      <name>FileSizeValidator</name>
      <full_name>\ezp\Content\FieldType\BinaryFile\FileSizeValidator</full_name>
      <extends>\ezp\Content\FieldType\Validator</extends>
      <docblock line="14">
        <description><![CDATA[Validator for checking max. size of binary files.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="property" description="The maximum allowed size of file, in bytes." type="int" variable="$maxFileSize">
          <type by_reference="false">int</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="21">
        <name>$constraints</name>
        <default><![CDATA[array(
        'maxFileSize' => false
    )]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\BinaryFile" line="31" package="Default">
        <name>validate</name>
        <type>function</type>
        <docblock line="25">
          <description><![CDATA[Checks if $binaryFile has the appropriate size]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="param" description="" type="\ezp\Content\FieldType\BinaryFile\Value" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\BinaryFile\Value</type>
          </tag>
          <tag line="25" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/BinaryFile/Handler.php" hash="768c1e673081f9465f47546a7bfe9a4c">
    <parse_markers>
      <critical line="22" code="50019">No short description for property $binaryRepository</critical>
      <error line="27" code="50010">No DocBlock was found for method __construct()</error>
      <error line="68" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in loadFileFromContentType()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/BinaryFile/Handler.php</error>
    </parse_markers>
    <namespace-alias name="ContentType">ezp\Io\ContentType</namespace-alias>
    <namespace-alias name="SysInfo">ezp\Io\SysInfo</namespace-alias>
    <namespace-alias name="FileInfo">ezp\Io\FileInfo</namespace-alias>
    <namespace-alias name="BinaryRepository">ezp\Base\BinaryRepository</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\BinaryFile" line="20" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Content\FieldType\BinaryFile\Handler</full_name>
      <extends/>
      <docblock line="16">
        <description><![CDATA[Binary file handler]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="16" name="todo" description="Handle creation from HTTP"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25" package="Default">
        <name>$binaryRepository</name>
        <default><![CDATA[]]></default>
        <docblock line="22">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="var" description="" type="\ezp\Base\BinaryRepository">
            <type by_reference="false">\ezp\Base\BinaryRepository</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\BinaryFile" line="27">
        <name>__construct</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\BinaryFile" line="39" package="Default">
        <name>getBinaryRepository</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Returns binary repository used by handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="todo" description="See todo in {@link __construct()}"/>
          <tag line="33" name="return" description="" type="\ezp\Base\BinaryRepository">
            <type by_reference="false">\ezp\Base\BinaryRepository</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\BinaryFile" line="53" package="Default">
        <name>createFromLocalPath</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Creates a {@link \ezp\Io\BinaryFile} object from $localPath.]]></description>
          <long-description><![CDATA[<p>Destination dir is to be something like <storageDir>/original/<MajorFileType>/ .
e.g. for an MP3 file (mime-type = audio/mp3) => var/storage/original/audio/ .
File name will be a hash with suffix added (if any).</p>]]></long-description>
          <tag line="44" name="param" description="Path to the local file, somewhere accessible in the system" type="string" variable="$localPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="44" name="return" description="" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$localPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\BinaryFile" line="74" package="Default">
        <name>loadFileFromContentType</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Loads a file from its $filename and $contentType (aka MIME Type)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="param" description="Name of the file to retrieve (including its extension)" type="string" variable="$filename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="ContentType object (aka MIME type)" type="\ezp\Io\ContentType" variable="$contentType">
            <type by_reference="false">\ezp\Io\ContentType</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$filename</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="74">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>ContentType</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/FieldSettings.php" hash="74ef0fa1700d46412acd1d9900e35651">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/FieldSettings.php</error>
    </parse_markers>
    <namespace-alias name="ArrayObject">\ArrayObject</namespace-alias>
    <namespace-alias name="PropertyPermission">ezp\Base\Exception\PropertyPermission</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType" line="20" package="Default">
      <name>FieldSettings</name>
      <full_name>\ezp\Content\FieldType\FieldSettings</full_name>
      <extends>\ArrayObject</extends>
      <docblock line="15">
        <description><![CDATA[Container for field type specific properties.]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="internal" description=""/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="33" package="Default">
        <name>offsetSet</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[Only allows existing indexes to be updated.]]></description>
          <long-description><![CDATA[<p>This is so that only settings specified by a field type can be set.</p>]]></long-description>
          <tag line="22" name="internal" description=""/>
          <tag line="22" name="throws" description="" type="\ezp\Base\Exception\PropertyPermission">
            <type by_reference="false">\ezp\Base\Exception\PropertyPermission</type>
          </tag>
          <tag line="22" name="param" description="" type="string|int" variable="$index">
            <type by_reference="false">string</type>
            <type by_reference="false">int</type>
          </tag>
          <tag line="22" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="22" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="33">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType" line="49" package="Default">
        <name>offsetGet</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[Returns value from internal array, identified by $index.]]></description>
          <long-description><![CDATA[<p>If $index cannot be found, a {@link \ezp\Base\Exception\PropertyNotFound} exception is thrown</p>]]></long-description>
          <tag line="41" name="param" description="" type="string" variable="$index">
            <type by_reference="false">string</type>
          </tag>
          <tag line="41" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="41" name="throws" description="" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$index</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Rating/Type.php" hash="f8381bb26d2930b206d1a6161289ec25">
    <parse_markers>
      <error line="25" code="50018">No DocBlock was found for property $allowedSettings</error>
      <error line="38" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Rating/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Rating" line="20" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\Rating\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <docblock line="15">
        <description><![CDATA[Rating field types]]></description>
        <long-description><![CDATA[<p>Represents rating.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\Rating" line="22">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA["ezsrrating"]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\Rating" line="23">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[true]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="25">
        <name>$allowedSettings</name>
        <default><![CDATA[array()]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Rating" line="33" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="return" description="" type="\ezp\Content\FieldType\Rating\Value">
            <type by_reference="false">\ezp\Content\FieldType\Rating\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Rating" line="47" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Checks if value can be parsed.]]></description>
          <long-description><![CDATA[<p>If the value actually can be parsed, the value is returned.</p>]]></long-description>
          <tag line="38" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="38" name="param" description="" type="mixed" variable="$inputValue">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="38" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Rating" line="62" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Returns information for FieldValue->$sortKey relevant to the field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Rating/Value.php" hash="1b42fa72d82cdffff842b51e8ce08957">
    <parse_markers>
      <error line="36" code="50012">No short description for method fromString()</error>
      <error line="36" code="50015">Argument $stringValue is missing from the Docblock of fromString()</error>
      <error line="44" code="50012">No short description for method __toString()</error>
      <error line="52" code="50012">No short description for method getTitle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Rating/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Rating" line="17" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\Rating\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="14">
        <description><![CDATA[Value for Rating field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$isDisabled</name>
        <default><![CDATA[false]]></default>
        <docblock line="19">
          <description><![CDATA[Is rating disabled]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Rating" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Construct a new Value object and initialize it with its $isDisabled state]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="bool" variable="$isDisabled">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$isDisabled</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\Rating" line="39" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
        <argument line="39">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Rating" line="47" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Rating" line="55" package="Default">
        <name>getTitle</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="see" description="\ezp\Content\FieldType\ValueInterface::getTitle()" refers="\ezp\Content\FieldType\ValueInterface::getTitle()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Selection/Type.php" hash="2fe5af4df2dc929e02c78733b06999fe">
    <parse_markers>
      <error line="36" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in canParseValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Selection/Type.php</error>
    </parse_markers>
    <namespace-alias name="FieldType">ezp\Content\FieldType</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="BadFieldTypeInput">ezp\Base\Exception\BadFieldTypeInput</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Selection" line="20" package="Default">
      <name>Type</name>
      <full_name>\ezp\Content\FieldType\Selection\Type</full_name>
      <extends>\ezp\Content\FieldType</extends>
      <docblock line="15">
        <description><![CDATA[The Selection field type.]]></description>
        <long-description><![CDATA[<p>This field type represents a simple string.</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Content\FieldType\Selection" line="22">
        <name>FIELD_TYPE_IDENTIFIER</name>
        <value><![CDATA["ezselection"]]></value>
      </constant>
      <constant namespace="ezp\Content\FieldType\Selection" line="23">
        <name>IS_SEARCHABLE</name>
        <value><![CDATA[true]]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Selection" line="31" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="25">
          <description><![CDATA[Returns the fallback default value of field type when no such default
value is provided in the field definition in content types.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="return" description="" type="\ezp\Content\FieldType\Selection\Value">
            <type by_reference="false">\ezp\Content\FieldType\Selection\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Selection" line="45" package="Default">
        <name>canParseValue</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Checks if $inputValue can be parsed.]]></description>
          <long-description><![CDATA[<p>If the $inputValue actually can be parsed, the value is returned.
Otherwise, an \ezp\Base\Exception\BadFieldTypeInput exception is thrown</p>]]></long-description>
          <tag line="36" name="throws" description="Thrown when $inputValue is not understood." type="\ezp\Base\Exception\BadFieldTypeInput">
            <type by_reference="false">\ezp\Base\Exception\BadFieldTypeInput</type>
          </tag>
          <tag line="36" name="param" description="" type="\ezp\Content\FieldType\Selection\Value" variable="$inputValue">
            <type by_reference="false">\ezp\Content\FieldType\Selection\Value</type>
          </tag>
          <tag line="36" name="return" description="" type="\ezp\Content\FieldType\Selection\Value">
            <type by_reference="false">\ezp\Content\FieldType\Selection\Value</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>BaseValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\FieldType\Selection" line="60" package="Default">
        <name>getSortInfo</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Returns information for FieldValue->$sortKey relevant to the field type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="todo" description="String normalization should occur here."/>
          <tag line="54" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/FieldType/Selection/Value.php" hash="3be2bf6f5563445340f42cca740bc1dc">
    <parse_markers>
      <error line="26" code="50014">Name of argument $selection does not match with the DocBlock's name $text in __construct()</error>
      <notice line="26" code="50013">Parameter $text could not be found in __construct()</notice>
      <error line="36" code="50012">No short description for method fromString()</error>
      <error line="36" code="50015">Argument $stringValue is missing from the Docblock of fromString()</error>
      <error line="44" code="50012">No short description for method __toString()</error>
      <error line="52" code="50012">No short description for method getTitle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/FieldType/Selection/Value.php</error>
    </parse_markers>
    <namespace-alias name="ValueInterface">ezp\Content\FieldType\ValueInterface</namespace-alias>
    <namespace-alias name="BaseValue">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\FieldType\Selection" line="17" package="Default">
      <name>Value</name>
      <full_name>\ezp\Content\FieldType\Selection\Value</full_name>
      <extends>\ezp\Content\FieldType\Value</extends>
      <extends>\ezp\Content\FieldType\ValueInterface</extends>
      <docblock line="14">
        <description><![CDATA[Value for Selection field type]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$selection</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Selection content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Selection" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Construct a new Value object and initialize it $text]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$selection</name>
          <default><![CDATA[array()]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\FieldType\Selection" line="39" package="Default">
        <name>fromString</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
        <argument line="39">
          <name>$stringValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Selection" line="47" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="see" description="\ezp\Content\FieldType\Value" refers="\ezp\Content\FieldType\Value"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\FieldType\Selection" line="55" package="Default">
        <name>getTitle</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="see" description="\ezp\Content\FieldType\ValueInterface::getTitle()" refers="\ezp\Content\FieldType\ValueInterface::getTitle()"/>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Relation.php" hash="e084bf5d9c556973e58bb0bb0a76855f">
    <parse_markers>
      <critical line="35" code="50019">No short description for property $readWriteProperties</critical>
      <critical line="47" code="50019">No short description for property $dynamicProperties</critical>
      <error line="61" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Relation.php</error>
    </parse_markers>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="RelationValue">ezp\Persistence\Content\Relation</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content" line="27" package="Default">
      <name>Relation</name>
      <full_name>\ezp\Content\Relation</full_name>
      <extends>\ezp\Base\Model</extends>
      <docblock line="16">
        <description><![CDATA[This class represents a Content Relation]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="16" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="" type="mixed" variable="$sourceContentId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="" type="\ezp\Content\id" variable="$sourceContentVersionNo">
          <type by_reference="false">\ezp\Content\id</type>
        </tag>
        <tag line="16" name="property-read" description="" type="mixed" variable="$sourceFieldDefinitionId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="" type="mixed" variable="$destinationContentId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="Bitmask" type="int" variable="$type">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="Associated Content object" type="\ezp\Content" variable="$content">
          <type by_reference="false">\ezp\Content</type>
        </tag>
      </docblock>
      <constant namespace="ezp\Content" line="30">
        <name>COMMON</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="ezp\Content" line="31">
        <name>EMBED</name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="ezp\Content" line="32">
        <name>LINK</name>
        <value><![CDATA[4]]></value>
      </constant>
      <constant namespace="ezp\Content" line="33">
        <name>ATTRIBUTE</name>
        <value><![CDATA[8]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        "id" => false,
        "sourceContentId" => true,
        "sourceContentVersionNo" => true,
        "sourceFieldDefinitionId" => true,
        "destinationContentId" => false,
        "type" => false,
    )]]></default>
        <docblock line="35">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="Readable of properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array(
        "content" => false,
    )]]></default>
        <docblock line="47">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="List of dynamic properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" package="Default">
        <name>$content</name>
        <default><![CDATA[]]></default>
        <docblock line="54">
          <description><![CDATA[Associated Content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="var" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="67" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="61">
          <description><![CDATA[Setups a Relation object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="param" description="" type="int" variable="$type">
            <type by_reference="false">int</type>
          </tag>
          <tag line="61" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="67">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="83" package="Default">
        <name>getContent</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Returns the associated Content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="return" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Proxy.php" hash="d79201cde3e03054de74f29714121934">
    <parse_markers>
      <error line="73" code="50010">No DocBlock was found for method __construct()</error>
      <error line="145" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $section in setSection()</error>
      <error line="167" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $owner in setOwner()</error>
      <error line="188" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $parentLocation in addParent()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Proxy.php</error>
    </parse_markers>
    <namespace-alias name="ModelProxy">ezp\Base\Proxy\Model</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="Service">ezp\Content\Service</namespace-alias>
    <namespace-alias name="User">ezp\User</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content" line="71" package="Default">
      <name>Proxy</name>
      <full_name>\ezp\Content\Proxy</full_name>
      <extends>\ezp\Base\Proxy\Model</extends>
      <extends>\ezp\Content</extends>
      <docblock line="16">
        <description><![CDATA[This class represents a Proxy Content item]]></description>
        <long-description><![CDATA[<p>It is used for both input and output manipulation.</p>]]></long-description>
        <tag line="16" name="property-read" description="The Content's ID, automatically assigned by the persistence layer" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="The Content's current version" type="int" variable="$currentVersionNo">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="The Content's status, as one of the \ezp\Content::STATUS_* constants" type="int" variable="$status">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="Id of the user object that owns the content" type="mixed" variable="$ownerId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="The Content's always available flag" type="bool" variable="$alwaysAvailable">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="16" name="property-read" description="The Content's remote identifier (custom identifier for the object)" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property-read" description="Read property for section id, use with object $section to change" type="mixed" variable="$sectionId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="Read property for type id" type="mixed" variable="$typeId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="The Content's type" type="\ezp\Content\Type" variable="$contentType">
          <type by_reference="false">\ezp\Content\Type</type>
        </tag>
        <tag line="16" name="property-read" description="Iterable collection of versions for content. Array-accessible :; &lt;code&gt; $myFirstVersion = $content-&gt;versions[1]; $myThirdVersion = $content-&gt;versions[3]; &lt;/code&gt;" type="\ezp\Content\Version[]" variable="$versions">
          <type by_reference="false">\ezp\Content\Version[]</type>
        </tag>
        <tag line="16" name="property-read" description="Current version of content" type="\ezp\Content\Version" variable="$currentVersion">
          <type by_reference="false">\ezp\Content\Version</type>
        </tag>
        <tag line="16" name="property-read" description="" type="\ezp\Content\Location" variable="$mainLocation">
          <type by_reference="false">\ezp\Content\Location</type>
        </tag>
        <tag line="16" name="property-read" description="Locations for content. Iterable, countable and Array-accessible (with numeric indexes) First location referenced in the collection represents the main location for content &lt;code&gt; $mainLocation = $content-&gt;locations[0]; $anotherLocation = $content-&gt;locations[2]; $locationById = $content-&gt;locations-&gt;byId( 60 ); &lt;/code&gt;" type="\ezp\Content\Location[]" variable="$locations">
          <type by_reference="false">\ezp\Content\Location[]</type>
        </tag>
        <tag line="16" name="property-read" description="The date the object was created" type="\ezp\Content\DateTime" variable="$creationDate">
          <type by_reference="false">\ezp\Content\DateTime</type>
        </tag>
        <tag line="16" name="property-read" description="The Section the content belongs to" type="\ezp\Content\Section" variable="$section">
          <type by_reference="false">\ezp\Content\Section</type>
        </tag>
        <tag line="16" name="property-read" description="Collection of \ezp\Content\Relation objects, related to the current one" type="\ezp\Content\Relation[]" variable="$relations">
          <type by_reference="false">\ezp\Content\Relation[]</type>
        </tag>
        <tag line="16" name="property-read" description="Collection of \ezp\Content\Relation objects, reverse-related to the current one" type="\ezp\Content\Relation[]" variable="$reverseRelations">
          <type by_reference="false">\ezp\Content\Relation[]</type>
        </tag>
        <tag line="16" name="property-read" description="Collection of content's translations, indexed by locale (ie. eng-GB) &lt;code&gt; $myEnglishTranslation = $content-&gt;translations[&quot;eng-GB&quot;]; $myEnglishTitle = $content-&gt;translations[&quot;eng-GB&quot;]-&gt;fields-&gt;title; // Where &quot;title&quot; is the field identifier &lt;/code&gt;" type="\ezp\Content\Translation[]" variable="$translations">
          <type by_reference="false">\ezp\Content\Translation[]</type>
        </tag>
        <tag line="16" name="property-read" description="Collection of content's fields in default (current) language. Shorthand property to directly access to the content's fields in current language &lt;code&gt; $myTitle = $content-&gt;fields-&gt;title; // Where &quot;title&quot; is the field identifier &lt;/code&gt;" type="\ezp\Content\Field[]" variable="$fields">
          <type by_reference="false">\ezp\Content\Field[]</type>
        </tag>
        <tag line="16" name="property-read" description="Owner identifier" type="int" variable="$ownerId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property" description="Owner user object" type="\ezp\User" variable="$owner">
          <type by_reference="false">\ezp\User</type>
        </tag>
        <tag line="16" name="property-read" description="The id of the language the Content was initially created in. Set using {@see setInitialLanguage()}" type="mixed" variable="$initialLanguageId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="The language the Content was initially created in" type="\ezp\Content\Language" variable="$initialLanguage">
          <type by_reference="false">\ezp\Content\Language</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="73">
        <name>__construct</name>
        <type>function</type>
        <argument line="73">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="73">
          <name>$service</name>
          <default><![CDATA[]]></default>
          <type>Service</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content" line="84" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Returns definition of the content object, atm: permissions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="access" description="private"/>
          <tag line="78" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="94" package="Default">
        <name>getMainLocation</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Return Main location object on this Content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="return" description="" type="\ezp\Content\Location|null">
            <type by_reference="false">\ezp\Content\Location</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="105" package="Default">
        <name>getVersions</name>
        <type>function</type>
        <docblock line="100">
          <description><![CDATA[Return a collection containing all available versions of the Content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="return" description="" type="\ezp\Content\Version[]">
            <type by_reference="false">\ezp\Content\Version[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="116" package="Default">
        <name>getCurrentVersion</name>
        <type>function</type>
        <docblock line="111">
          <description><![CDATA[Find current version amongst version objects]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="111" name="return" description="" type="\ezp\Content\Version|null">
            <type by_reference="false">\ezp\Content\Version</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="127" package="Default">
        <name>getContentType</name>
        <type>function</type>
        <docblock line="122">
          <description><![CDATA[Return Type object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="122" name="return" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="139" package="Default">
        <name>getFields</name>
        <type>function</type>
        <docblock line="133">
          <description><![CDATA[Get fields of current version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="133" name="todo" description="Do we really want/need this shortcut?"/>
          <tag line="133" name="return" description="" type="\ezp\Content\Field[]">
            <type by_reference="false">\ezp\Content\Field[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="150" package="Default">
        <name>setSection</name>
        <type>function</type>
        <docblock line="145">
          <description><![CDATA[Sets the Section the Content belongs to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="145" name="param" description="" type="\ezp\Content\Section" variable="$section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
        </docblock>
        <argument line="150">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="161" package="Default">
        <name>getSection</name>
        <type>function</type>
        <docblock line="156">
          <description><![CDATA[Returns the Section the Content belongs to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="156" name="return" description="" type="\ezp\Content\Section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="172" package="Default">
        <name>setOwner</name>
        <type>function</type>
        <docblock line="167">
          <description><![CDATA[Sets the Owner the Content belongs to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="167" name="param" description="" type="\ezp\User" variable="$owner">
            <type by_reference="false">\ezp\User</type>
          </tag>
        </docblock>
        <argument line="172">
          <name>$owner</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="182" package="Default">
        <name>getOwner</name>
        <type>function</type>
        <docblock line="177">
          <description><![CDATA[Returns the User the Content is owned by]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="177" name="return" description="" type="\ezp\User">
            <type by_reference="false">\ezp\User</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="194" package="Default">
        <name>addParent</name>
        <type>function</type>
        <docblock line="188">
          <description><![CDATA[Adds a new location to content under an existing one.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="188" name="param" description="" type="\ezp\Content\Location" variable="$parentLocation">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="188" name="return" description="" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
        </docblock>
        <argument line="194">
          <name>$parentLocation</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="205" package="Default">
        <name>getLocations</name>
        <type>function</type>
        <docblock line="200">
          <description><![CDATA[Gets locations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="200" name="return" description="" type="\ezp\Content\Location[]">
            <type by_reference="false">\ezp\Content\Location[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="216" package="Default">
        <name>getRelations</name>
        <type>function</type>
        <docblock line="211">
          <description><![CDATA[Gets Content relations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="211" name="return" description="" type="\ezp\Content[]">
            <type by_reference="false">\ezp\Content[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="227" package="Default">
        <name>getReverseRelations</name>
        <type>function</type>
        <docblock line="222">
          <description><![CDATA[Gets Content reverse relations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="222" name="return" description="" type="\ezp\Content[]">
            <type by_reference="false">\ezp\Content[]</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Concrete.php" hash="b72f3787706dc759369a5df66932400e">
    <parse_markers>
      <critical line="86" code="50019">No short description for property $readWriteProperties</critical>
      <critical line="105" code="50019">No short description for property $dynamicProperties</critical>
      <error line="186" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in __construct()</error>
      <error line="186" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $owner in __construct()</error>
      <error line="632" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $section in setSection()</error>
      <error line="653" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $owner in setOwner()</error>
      <error line="673" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $parentLocation in addParent()</error>
      <error line="716" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $initialLanguage in setInitialLanguage()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Concrete.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="LogicException">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="Repository">ezp\Base\Repository</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="ConcreteLocation">ezp\Content\Location\Concrete</namespace-alias>
    <namespace-alias name="VersionCollection">ezp\Content\Version\StaticCollection</namespace-alias>
    <namespace-alias name="ConcreteVersion">ezp\Content\Version\Concrete</namespace-alias>
    <namespace-alias name="ContentValue">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="TypeValue">ezp\Persistence\Content\Type</namespace-alias>
    <namespace-alias name="CriterionContentTypeId">ezp\Persistence\Content\Query\Criterion\ContentTypeId</namespace-alias>
    <namespace-alias name="CriterionSectionId">ezp\Persistence\Content\Query\Criterion\SectionId</namespace-alias>
    <namespace-alias name="CriterionUserMetadata">ezp\Persistence\Content\Query\Criterion\UserMetadata</namespace-alias>
    <namespace-alias name="CriterionLocationId">ezp\Persistence\Content\Query\Criterion\LocationId</namespace-alias>
    <namespace-alias name="CriterionSubtree">ezp\Persistence\Content\Query\Criterion\Subtree</namespace-alias>
    <namespace-alias name="CriterionOperator">ezp\Persistence\Content\Query\Criterion\Operator</namespace-alias>
    <namespace-alias name="User">ezp\User</namespace-alias>
    <namespace-alias name="DateTime">DateTime</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content" line="84" package="Default">
      <name>Concrete</name>
      <full_name>\ezp\Content\Concrete</full_name>
      <extends>\ezp\Base\Model</extends>
      <extends>\ezp\Content</extends>
      <docblock line="31">
        <description><![CDATA[This class represents a concrete Content item]]></description>
        <long-description><![CDATA[<p>It is used for both input and output manipulation.</p>]]></long-description>
        <tag line="31" name="property-read" description="The Content's ID, automatically assigned by the persistence layer" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="31" name="property-read" description="The Content's current version" type="int" variable="$currentVersionNo">
          <type by_reference="false">int</type>
        </tag>
        <tag line="31" name="property-read" description="The Content's status, as one of the ezp\Content::STATUS_* constants" type="int" variable="$status">
          <type by_reference="false">int</type>
        </tag>
        <tag line="31" name="property-read" description="Id of the user object that owns the content" type="mixed" variable="$ownerId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="31" name="property-read" description="The Content's always available flag" type="bool" variable="$alwaysAvailable">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="31" name="property-read" description="The Content's remote identifier (custom identifier for the object)" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="31" name="property-read" description="Read property for section id, use with object $section to change" type="mixed" variable="$sectionId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="31" name="property-read" description="Read property for type id" type="mixed" variable="$typeId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="31" name="property-read" description="The Content's type" type="\ezp\Content\Type" variable="$contentType">
          <type by_reference="false">\ezp\Content\Type</type>
        </tag>
        <tag line="31" name="property-read" description="Iterable collection of versions for content. Array-accessible :; &lt;code&gt; $myFirstVersion = $content-&gt;versions[1]; $myThirdVersion = $content-&gt;versions[3]; &lt;/code&gt;" type="\ezp\Content\Version[]" variable="$versions">
          <type by_reference="false">\ezp\Content\Version[]</type>
        </tag>
        <tag line="31" name="property-read" description="Current version of content" type="\ezp\Content\Version" variable="$currentVersion">
          <type by_reference="false">\ezp\Content\Version</type>
        </tag>
        <tag line="31" name="property-read" description="" type="\ezp\Content\Location" variable="$mainLocation">
          <type by_reference="false">\ezp\Content\Location</type>
        </tag>
        <tag line="31" name="property-read" description="Locations for content. Iterable, countable and Array-accessible (with numeric indexes) First location referenced in the collection represents the main location for content &lt;code&gt; $mainLocation = $content-&gt;locations[0]; $anotherLocation = $content-&gt;locations[2]; $locationById = $content-&gt;locations-&gt;byId( 60 ); &lt;/code&gt;" type="\ezp\Content\Location[]" variable="$locations">
          <type by_reference="false">\ezp\Content\Location[]</type>
        </tag>
        <tag line="31" name="property-read" description="The date the object was created" type="\DateTime" variable="$creationDate">
          <type by_reference="false">\DateTime</type>
        </tag>
        <tag line="31" name="property-read" description="The Section the content belongs to" type="\ezp\Content\Section" variable="$section">
          <type by_reference="false">\ezp\Content\Section</type>
        </tag>
        <tag line="31" name="property-read" description="Collection of \ezp\Content\Relation objects, related to the current one" type="\ezp\Content\Relation[]" variable="$relations">
          <type by_reference="false">\ezp\Content\Relation[]</type>
        </tag>
        <tag line="31" name="property-read" description="Collection of \ezp\Content\Relation objects, reverse-related to the current one" type="\ezp\Content\Relation[]" variable="$reverseRelations">
          <type by_reference="false">\ezp\Content\Relation[]</type>
        </tag>
        <tag line="31" name="property-read" description="Collection of content's translations, indexed by locale (ie. eng-GB) &lt;code&gt; $myEnglishTranslation = $content-&gt;translations[&quot;eng-GB&quot;]; $myEnglishTitle = $content-&gt;translations[&quot;eng-GB&quot;]-&gt;fields-&gt;title; // Where &quot;title&quot; is the field identifier &lt;/code&gt;" type="\ezp\Content\Translation[]" variable="$translations">
          <type by_reference="false">\ezp\Content\Translation[]</type>
        </tag>
        <tag line="31" name="property-read" description="Collection of content's fields in default (current) language. Shorthand property to directly access to the content's fields in current language &lt;code&gt; $myTitle = $content-&gt;fields-&gt;title; // Where &quot;title&quot; is the field identifier &lt;/code&gt;" type="\ezp\Content\Field[]" variable="$fields">
          <type by_reference="false">\ezp\Content\Field[]</type>
        </tag>
        <tag line="31" name="property" description="Owner user object" type="\ezp\User" variable="$owner">
          <type by_reference="false">\ezp\User</type>
        </tag>
        <tag line="31" name="property-read" description="The id of the language the Content was initially created in. Set using {@see setInitialLanguage()}" type="mixed" variable="$initialLanguageId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="31" name="property" description="The language the Content was initially created in" type="\ezp\Content\Language" variable="$initialLanguage">
          <type by_reference="false">\ezp\Content\Language</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="89" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'currentVersionNo' => false,
        'status' => false,
        'ownerId' => false,
        'alwaysAvailable' => true,
        'remoteId' => true,// @todo Make readonly and deal with this internally (in all DO's)
        'sectionId' => false,
        'typeId' => false,
        // @todo missing @property doc and missing properties getter/setter implementation
        // in Content/Version/Concrete for the following properties:
        'modified' => true,
        'published' => true,
        'initialLanguageId' => false,
    )]]></default>
        <docblock line="86">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="var" description="Readable of properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="108" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array(
        'creationDate' => false,
        'mainLocation' => false,
        'section' => false,
        'owner' => false,
        'fields' => true,
        'contentType' => false,
        'versions' => false,
        'locations' => true,
        //'translations' => true,
        'relations' => false,
        'reverseRelations' => false,
        'currentVersion' => false,
        'initialLanguage' => false,
    )]]></default>
        <docblock line="105">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="var" description="Dynamic properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="129" package="Default">
        <name>$section</name>
        <default><![CDATA[]]></default>
        <docblock line="124">
          <description><![CDATA[The Section the content belongs to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="var" description="" type="\ezp\Content\Section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="136" package="Default">
        <name>$locations</name>
        <default><![CDATA[]]></default>
        <docblock line="131">
          <description><![CDATA[Locations collection]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="131" name="var" description="" type="\ezp\Content\Location[]">
            <type by_reference="false">\ezp\Content\Location[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="143" package="Default">
        <name>$contentType</name>
        <default><![CDATA[]]></default>
        <docblock line="138">
          <description><![CDATA[Content type object that this Content object is an instance of]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="138" name="var" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="150" package="Default">
        <name>$relations</name>
        <default><![CDATA[]]></default>
        <docblock line="145">
          <description><![CDATA[Relations collection]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="145" name="var" description="" type="\ezp\Content\Relation[]">
            <type by_reference="false">\ezp\Content\Relation[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="157" package="Default">
        <name>$reverseRelations</name>
        <default><![CDATA[]]></default>
        <docblock line="152">
          <description><![CDATA[Reverse relation collection]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="var" description="" type="\ezp\Content\Relation[]">
            <type by_reference="false">\ezp\Content\Relation[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="164" package="Default">
        <name>$versions</name>
        <default><![CDATA[]]></default>
        <docblock line="159">
          <description><![CDATA[Versions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="159" name="var" description="" type="\ezp\Content\Version[]">
            <type by_reference="false">\ezp\Content\Version[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="171" package="Default">
        <name>$currentVersion</name>
        <default><![CDATA[]]></default>
        <docblock line="166">
          <description><![CDATA[Current Version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="166" name="var" description="" type="\ezp\Content\Version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="178" package="Default">
        <name>$owner</name>
        <default><![CDATA[]]></default>
        <docblock line="173">
          <description><![CDATA[Owner ( User )]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="var" description="" type="\ezp\User">
            <type by_reference="false">\ezp\User</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="184" package="Default">
        <name>$initialLanguage</name>
        <default><![CDATA[]]></default>
        <docblock line="180">
          <description><![CDATA[Initial content language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="180" name="var" description="" type="\ezp\Content\Language">
            <type by_reference="false">\ezp\Content\Language</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="194" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="186">
          <description><![CDATA[Create content based on content type object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="186" name="param" description="" type="\ezp\Content\Type" variable="$contentType">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="186" name="param" description="" type="\ezp\User" variable="$owner">
            <type by_reference="false">\ezp\User</type>
          </tag>
          <tag line="186" name="throws" description="If $contentType is not persisted or if it's not in the defined status." type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
        </docblock>
        <argument line="194">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
        <argument line="194">
          <name>$owner</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content" line="235" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="229">
          <description><![CDATA[Returns definition of the content object, atm: permissions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="229" name="access" description="private"/>
          <tag line="229" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="583" package="Default">
        <name>getMainLocation</name>
        <type>function</type>
        <docblock line="578">
          <description><![CDATA[Return Main location object on this Content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="578" name="return" description="" type="\ezp\Content\Location|null">
            <type by_reference="false">\ezp\Content\Location</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="596" package="Default">
        <name>getVersions</name>
        <type>function</type>
        <docblock line="591">
          <description><![CDATA[Return a collection containing all available versions of the Content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="591" name="return" description="" type="\ezp\Content\Version[]">
            <type by_reference="false">\ezp\Content\Version[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="606" package="Default">
        <name>getCurrentVersion</name>
        <type>function</type>
        <docblock line="601">
          <description><![CDATA[Find current version amongst version objects]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="601" name="return" description="" type="\ezp\Content\Version|null">
            <type by_reference="false">\ezp\Content\Version</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="616" package="Default">
        <name>getContentType</name>
        <type>function</type>
        <docblock line="611">
          <description><![CDATA[Return Type object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="611" name="return" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="627" package="Default">
        <name>getFields</name>
        <type>function</type>
        <docblock line="621">
          <description><![CDATA[Get fields of current version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="621" name="todo" description="Do we really want/need this shortcut?"/>
          <tag line="621" name="return" description="" type="\ezp\Content\Field[]">
            <type by_reference="false">\ezp\Content\Field[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="637" package="Default">
        <name>setSection</name>
        <type>function</type>
        <docblock line="632">
          <description><![CDATA[Sets the Section the Content belongs to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="632" name="param" description="" type="\ezp\Content\Section" variable="$section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
        </docblock>
        <argument line="637">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="648" package="Default">
        <name>getSection</name>
        <type>function</type>
        <docblock line="643">
          <description><![CDATA[Returns the Section the Content belongs to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="643" name="return" description="" type="\ezp\Content\Section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="658" package="Default">
        <name>setOwner</name>
        <type>function</type>
        <docblock line="653">
          <description><![CDATA[Sets the Owner the Content belongs to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="653" name="param" description="" type="\ezp\User" variable="$owner">
            <type by_reference="false">\ezp\User</type>
          </tag>
        </docblock>
        <argument line="658">
          <name>$owner</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="668" package="Default">
        <name>getOwner</name>
        <type>function</type>
        <docblock line="663">
          <description><![CDATA[Returns the User the Content is owned by]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="663" name="return" description="" type="\ezp\User">
            <type by_reference="false">\ezp\User</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="679" package="Default">
        <name>addParent</name>
        <type>function</type>
        <docblock line="673">
          <description><![CDATA[Adds a new location to content under an existing one.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="673" name="param" description="" type="\ezp\Content\Location" variable="$parentLocation">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="673" name="return" description="" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
        </docblock>
        <argument line="679">
          <name>$parentLocation</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="691" package="Default">
        <name>getLocations</name>
        <type>function</type>
        <docblock line="686">
          <description><![CDATA[Gets locations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="686" name="return" description="" type="\ezp\Content\Location[]">
            <type by_reference="false">\ezp\Content\Location[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="701" package="Default">
        <name>getRelations</name>
        <type>function</type>
        <docblock line="696">
          <description><![CDATA[Gets Content relations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="696" name="return" description="" type="\ezp\Content\Relation[]">
            <type by_reference="false">\ezp\Content\Relation[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="711" package="Default">
        <name>getReverseRelations</name>
        <type>function</type>
        <docblock line="706">
          <description><![CDATA[Gets Content reverse relations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="706" name="return" description="" type="\ezp\Content\Relation[]">
            <type by_reference="false">\ezp\Content\Relation[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content" line="720" package="Default">
        <name>setInitialLanguage</name>
        <type>function</type>
        <docblock line="716">
          <description><![CDATA[Sets the initial language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="716" name="param" description="\ezp\Content\Language" type="" variable="$initialLanguage"/>
        </docblock>
        <argument line="720">
          <name>$initialLanguage</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="730" package="Default">
        <name>getInitialLanguage</name>
        <type>function</type>
        <docblock line="726">
          <description><![CDATA[Gets the initial language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="726" name="return" description="" type="\ezp\Content\Language">
            <type by_reference="false">\ezp\Content\Language</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="738" package="Default">
        <name>__clone</name>
        <type>function</type>
        <docblock line="735">
          <description><![CDATA[Clone content object]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Version.php" hash="7120152df79d34684f393eff9391571d">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Version.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="FieldCollection">ezp\Content\Field\StaticCollection</namespace-alias>
    <namespace-alias name="VersionValue">ezp\Persistence\Content\Version</namespace-alias>
    <interface namespace="ezp\Content" line="45" package="Default">
      <name>Version</name>
      <full_name>\ezp\Content\Version</full_name>
      <extends/>
      <docblock line="16">
        <description><![CDATA[This class represents the Content Version Interface]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="16" name="property-read" description="" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="" type="int" variable="$versionNo">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="" type="mixed" variable="$contentId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="One of the STATUS_* constants" type="int" variable="$status">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="" type="\ezp\Content" variable="$content">
          <type by_reference="false">\ezp\Content</type>
        </tag>
        <tag line="16" name="property-read" description="Name in the different languages" type="\string[]" variable="$name">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="16" name="property-read" description="Content's Owner id" type="mixed" variable="$ownerId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="Content's always available flag" type="bool" variable="$alwaysAvailable">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="16" name="property-read" description="Content's Remote ID" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property-read" description="Content' Section ID" type="mixed" variable="$sectionId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="Content's Type ID" type="mixed" variable="$typeId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="Content' status, as one of the \ezp\Content::STATUS_* constants" type="int" variable="$contentStatus">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="Content's main location" type="\ezp\Content\Location" variable="$mainLocation">
          <type by_reference="false">\ezp\Content\Location</type>
        </tag>
        <tag line="16" name="property-read" description="Content's Section" type="\ezp\Content\Section" variable="$section">
          <type by_reference="false">\ezp\Content\Section</type>
        </tag>
        <tag line="16" name="property-read" description="Content's Owner" type="\ezp\User" variable="$owner">
          <type by_reference="false">\ezp\User</type>
        </tag>
        <tag line="16" name="property-read" description="Content's type" type="\ezp\Content\Type" variable="$contentType">
          <type by_reference="false">\ezp\Content\Type</type>
        </tag>
        <tag line="16" name="property-read" description="Content's locations" type="\ezp\Content\Location[]" variable="$locations">
          <type by_reference="false">\ezp\Content\Location[]</type>
        </tag>
        <tag line="16" name="property-read" description="Content's relations" type="\ezp\Content\Relation[]" variable="$relations">
          <type by_reference="false">\ezp\Content\Relation[]</type>
        </tag>
        <tag line="16" name="property-read" description="Content's reverse relations" type="\ezp\Content\Relation[]" variable="$reverseRelations">
          <type by_reference="false">\ezp\Content\Relation[]</type>
        </tag>
        <tag line="16" name="property-read" description="Content's initial language" type="\ezp\Content\Language" variable="$initialLanguage">
          <type by_reference="false">\ezp\Content\Language</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$initialLanguageId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="int" variable="$creatorId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property" description="" type="int" variable="$created">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property" description="" type="int" variable="$modified">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="An hash structure of fields" type="\ezp\Content\Field[]" variable="$fields">
          <type by_reference="false">\ezp\Content\Field[]</type>
        </tag>
      </docblock>
      <constant namespace="ezp\Content" line="50" package="Default">
        <name>STATUS_DRAFT</name>
        <value><![CDATA[0]]></value>
        <docblock line="47">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="todo" description="taken from eZContentObjectVersion, to be redefined"/>
        </docblock>
      </constant>
      <constant namespace="ezp\Content" line="51">
        <name>STATUS_PUBLISHED</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="ezp\Content" line="52">
        <name>STATUS_PENDING</name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="ezp\Content" line="53">
        <name>STATUS_ARCHIVED</name>
        <value><![CDATA[3]]></value>
      </constant>
      <constant namespace="ezp\Content" line="54">
        <name>STATUS_REJECTED</name>
        <value><![CDATA[4]]></value>
      </constant>
      <constant namespace="ezp\Content" line="55">
        <name>STATUS_INTERNAL_DRAFT</name>
        <value><![CDATA[5]]></value>
      </constant>
      <constant namespace="ezp\Content" line="56">
        <name>STATUS_REPEAT</name>
        <value><![CDATA[6]]></value>
      </constant>
      <constant namespace="ezp\Content" line="57">
        <name>STATUS_QUEUED</name>
        <value><![CDATA[7]]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="64" package="Default">
        <name>getFields</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Get fields of current version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="return" description="" type="\ezp\Content\Field[]">
            <type by_reference="false">\ezp\Content\Field[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="71" package="Default">
        <name>getContent</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[Get content that this version is attached to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="return" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/Content/Language/Service.php" hash="89c8d79817341e0d56f27b48c5ac0ed4">
    <parse_markers>
      <error line="47" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $language in update()</error>
      <error line="105" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $language in delete()</error>
      <error line="124" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $vo in buildDomainObject()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Language/Service.php</error>
    </parse_markers>
    <namespace-alias name="Forbidden">ezp\Base\Exception\Forbidden</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="BaseService">ezp\Base\Service</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="Language">ezp\Content\Language</namespace-alias>
    <namespace-alias name="LanguageValueObject">ezp\Persistence\Content\Language</namespace-alias>
    <namespace-alias name="LanguageCreateStruct">ezp\Persistence\Content\Language\CreateStruct</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Language" line="23" package="Default">
      <name>Service</name>
      <full_name>\ezp\Content\Language\Service</full_name>
      <extends>\ezp\Base\Service</extends>
      <docblock line="20">
        <description><![CDATA[Language service, used for language operations]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Language" line="34" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="25">
          <description><![CDATA[Creates the a new Language in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="param" description="" type="string" variable="$locale">
            <type by_reference="false">string</type>
          </tag>
          <tag line="25" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="25" name="param" description="" type="bool" variable="$isEnabled">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="25" name="return" description="" type="\ezp\Content\Language">
            <type by_reference="false">\ezp\Content\Language</type>
          </tag>
          <tag line="25" name="throws" description="If user does not have access to content translations" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$locale</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="34">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="34">
          <name>$isEnabled</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Language" line="53" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Updates $language in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="" type="\ezp\Content\Language" variable="$language">
            <type by_reference="false">\ezp\Content\Language</type>
          </tag>
          <tag line="47" name="throws" description="If user does not have access to content translations" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Language" line="68" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="61">
          <description><![CDATA[Loads a Language from its id ($languageId)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="param" description="" type="int" variable="$languageId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="61" name="return" description="" type="\ezp\Content\Language">
            <type by_reference="false">\ezp\Content\Language</type>
          </tag>
          <tag line="61" name="throws" description="if language could not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$languageId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Language" line="81" package="Default">
        <name>loadAll</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Loads all Languages]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="return" description="" type="\ezp\Content\Language[]">
            <type by_reference="false">\ezp\Content\Language[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Language" line="96" package="Default">
        <name>loadByLocale</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Loads a Language by its locale ($localeCode)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="param" description="" type="string" variable="$localeCode">
            <type by_reference="false">string</type>
          </tag>
          <tag line="89" name="return" description="" type="\ezp\Content\Language">
            <type by_reference="false">\ezp\Content\Language</type>
          </tag>
          <tag line="89" name="throws" description="if language could not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$localeCode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Language" line="116" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="105">
          <description><![CDATA[Deletes $language from content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="param" description="" type="\ezp\Content\Language" variable="$language">
            <type by_reference="false">\ezp\Content\Language</type>
          </tag>
          <tag line="105" name="throws" description="if language can not be deleted because it is still assigned to some content / type / (...)." type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
          <tag line="105" name="throws" description="If the specified language is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="105" name="todo" description="Add exception if still assigned to some content (needs handler support)"/>
          <tag line="105" name="throws" description="If user does not have access to content translations" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="116">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\Language" line="130" package="Default">
        <name>buildDomainObject</name>
        <type>function</type>
        <docblock line="124">
          <description><![CDATA[Build DO based on VO]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="param" description="" type="\ezp\Persistence\Content\Language" variable="$vo">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="124" name="return" description="" type="\ezp\Content\Language">
            <type by_reference="false">\ezp\Content\Language</type>
          </tag>
        </docblock>
        <argument line="130">
          <name>$vo</name>
          <default><![CDATA[]]></default>
          <type>LanguageValueObject</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Section.php" hash="35d6aace49b8ed6b6b743407e2a96574">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Section.php</error>
    </parse_markers>
    <namespace-alias name="ModelDefinition">ezp\Base\ModelDefinition</namespace-alias>
    <interface namespace="ezp\Content" line="23" package="Default">
      <name>Section</name>
      <full_name>\ezp\Content\Section</full_name>
      <extends>\ezp\Base\ModelDefinition</extends>
      <docblock line="13">
        <description><![CDATA[This interface represents a Section object]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="13" name="property-read" description="The ID, automatically assigned by the persistence layer" type="integer" variable="$id">
          <type by_reference="false">integer</type>
        </tag>
        <tag line="13" name="property" description="Unique identifier for the section." type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="13" name="property" description="Human readable name of the section (preferably short for gui's)" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
    </interface>
  </file>
  <file path="ezp/Content/Service.php" hash="2aec491715e6d68c4bf38fe8a1cf0525">
    <parse_markers>
      <error line="51" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in create()</error>
      <error line="122" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in update()</error>
      <error line="122" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $version in update()</error>
      <error line="203" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in delete()</error>
      <error line="240" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $version in loadFields()</error>
      <error line="287" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentFrom in addRelation()</error>
      <error line="287" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTo in addRelation()</error>
      <error line="329" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $relation in removeRelation()</error>
      <error line="365" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in copy()</error>
      <error line="365" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $version in copy()</error>
      <error line="384" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in createDraftFromVersion()</error>
      <error line="384" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $srcVersion in createDraftFromVersion()</error>
      <error line="411" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in find()</error>
      <error line="460" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in findSingle()</error>
      <error line="486" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in addUserPermissionsTo()</error>
      <error line="548" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $version in deleteVersion()</error>
      <error line="562" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $version in publish()</error>
      <error line="631" code="50014">Name of argument $version does not match with the DocBlock's name $content in generateContentName()</error>
      <error line="631" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $version in generateContentName()</error>
      <notice line="631" code="50013">Parameter $content could not be found in generateContentName()</notice>
      <error line="652" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $vo in buildDomainObject()</error>
      <error line="714" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in buildVersionDomainObject()</error>
      <error line="756" code="50015">Argument $struct is missing from the Docblock of setPropertyByConvention()</error>
      <error line="756" code="50015">Argument $property is missing from the Docblock of setPropertyByConvention()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Service.php</error>
    </parse_markers>
    <namespace-alias name="BaseService">ezp\Base\Service</namespace-alias>
    <namespace-alias name="LazyType">ezp\Base\Collection\LazyType</namespace-alias>
    <namespace-alias name="Forbidden">ezp\Base\Exception\Forbidden</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="ConcreteContent">ezp\Content\Concrete</namespace-alias>
    <namespace-alias name="ProxyContent">ezp\content\Proxy</namespace-alias>
    <namespace-alias name="ProxySection">ezp\Content\Section\Proxy</namespace-alias>
    <namespace-alias name="ProxyLocation">ezp\Content\Location\Proxy</namespace-alias>
    <namespace-alias name="ProxyType">ezp\Content\Type\Proxy</namespace-alias>
    <namespace-alias name="ConcreteType">ezp\Content\Type\Concrete</namespace-alias>
    <namespace-alias name="ProxyVersion">ezp\Content\Version\Proxy</namespace-alias>
    <namespace-alias name="ConcreteVersion">ezp\Content\Version\Concrete</namespace-alias>
    <namespace-alias name="ProxyUser">ezp\User\Proxy</namespace-alias>
    <namespace-alias name="LazyVersionCollection">ezp\Content\Version\LazyCollection</namespace-alias>
    <namespace-alias name="LazyFieldCollection">ezp\Content\Field\LazyCollection</namespace-alias>
    <namespace-alias name="StaticFieldCollection">ezp\Content\Field\StaticCollection</namespace-alias>
    <namespace-alias name="Result">ezp\Content\Search\Result</namespace-alias>
    <namespace-alias name="NamePatternResolver">ezp\Content\Utils\NamePatternResolver</namespace-alias>
    <namespace-alias name="ContentValue">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\UpdateStruct</namespace-alias>
    <namespace-alias name="LocationCreateStruct">ezp\Persistence\Content\Location\CreateStruct</namespace-alias>
    <namespace-alias name="ContentId">ezp\Persistence\Content\Query\Criterion\ContentId</namespace-alias>
    <namespace-alias name="LogicalOr">ezp\Persistence\Content\Query\Criterion\LogicalOr</namespace-alias>
    <namespace-alias name="LogicalAnd">ezp\Persistence\Content\Query\Criterion\LogicalAnd</namespace-alias>
    <namespace-alias name="RelationCreateStruct">ezp\Persistence\Content\Relation\CreateStruct</namespace-alias>
    <namespace-alias name="VersionValue">ezp\Persistence\Content\Version</namespace-alias>
    <namespace-alias name="RestrictedVersionValue">ezp\Persistence\Content\RestrictedVersion</namespace-alias>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content" line="49" package="Default">
      <name>Service</name>
      <full_name>\ezp\Content\Service</full_name>
      <extends>\ezp\Base\Service</extends>
      <docblock line="45">
        <description><![CDATA[Content service, used for Content operations]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="60" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Creates the new $content in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="51" name="return" description="The newly created content" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="51" name="throws" description="If $content already has an id" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="51" name="throws" description="If user does not have access to create provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
          <tag line="51" name="todo" description="If/when we have some sort of object storage, use that to check if object is persisted instead of just id"/>
        </docblock>
        <argument line="60">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="130" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="122">
          <description><![CDATA[Updates $content in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="122" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="122" name="param" description="" type="\ezp\Content\Version" variable="$version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="122" name="return" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="122" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="130">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
        <argument line="130">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type>Version</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="172" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="165">
          <description><![CDATA[Loads a content from its id ($contentId)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="165" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="165" name="return" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="165" name="throws" description="if content could not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="172">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="189" package="Default">
        <name>loadVersion</name>
        <type>function</type>
        <docblock line="181">
          <description><![CDATA[Loads a version from its id and versionNo]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="181" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="181" name="param" description="If null (default), then current version is returned" type="int|null" variable="$versionNo">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="181" name="return" description="" type="\ezp\Content\Version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="181" name="throws" description="If content/version could not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="189">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="189">
          <name>$versionNo</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="210" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="203">
          <description><![CDATA[Deletes a content from the repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="203" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="203" name="throws" description="if content could not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="203" name="throws" description="If user does not have access to remove provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="210">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="298" package="Default">
        <name>addRelation</name>
        <type>function</type>
        <docblock line="287">
          <description><![CDATA[Adds an object relation between $contentFrom and $contentTo.]]></description>
          <long-description><![CDATA[<p>The relation created will be of type Relation::COMMON,</p>]]></long-description>
          <tag line="287" name="param" description="" type="\ezp\Content" variable="$contentFrom">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="287" name="param" description="" type="\ezp\Content" variable="$contentTo">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="287" name="param" description="Version number for use in relation, $contentFrom-&gt;currentVersionNo used if null" type="mixed|null" variable="$versionFromNo">
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="287" name="return" description="" type="\ezp\Content\Relation">
            <type by_reference="false">\ezp\Content\Relation</type>
          </tag>
          <tag line="287" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="298">
          <name>$contentFrom</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
        <argument line="298">
          <name>$contentTo</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
        <argument line="298">
          <name>$versionFromNo</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="337" package="Default">
        <name>removeRelation</name>
        <type>function</type>
        <docblock line="329">
          <description><![CDATA[Removes content object relation represented by $relation.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="329" name="param" description="" type="\ezp\Content\Relation" variable="$relation">
            <type by_reference="false">\ezp\Content\Relation</type>
          </tag>
          <tag line="329" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="329" name="throws" description="If the relation to be removed is not found." type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="329" name="todo" description="Add permission checks when contentFrom object is available"/>
        </docblock>
        <argument line="337">
          <name>$relation</name>
          <default><![CDATA[]]></default>
          <type>Relation</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="351" package="Default">
        <name>loadRelations</name>
        <type>function</type>
        <docblock line="342">
          <description><![CDATA[Loads content relations from its id ($contentId)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="342" name="todo" description="Implement it (should be similar to listVersions())&#10;and use it for $content-&gt;relations lazy collection&#10;So should likewise be marked as private and take Version is argument?"/>
          <tag line="342" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="342" name="param" description="" type="int|null" variable="$version">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="351">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="351">
          <name>$version</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="374" package="Default">
        <name>copy</name>
        <type>function</type>
        <docblock line="365">
          <description><![CDATA[Copies $content in $version and returns the new copy.]]></description>
          <long-description><![CDATA[<p>If no version is provided, all versions will be copied</p>]]></long-description>
          <tag line="365" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="365" name="param" description="" type="\ezp\Content\Version" variable="$version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="365" name="return" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="365" name="throws" description="If user does not have access to create provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="374">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
        <argument line="374">
          <name>$version</name>
          <default><![CDATA[null]]></default>
          <type>Version</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="399" package="Default">
        <name>createDraftFromVersion</name>
        <type>function</type>
        <docblock line="384">
          <description><![CDATA[Creates a new draft version from $content in $srcVersion.]]></description>
          <long-description><![CDATA[<p>Copies all fields from $content in $srcVersion and creates a new
version of the referred Content from it.
If $srcVersion (default value) is null, currentVersion from $content will be taken</p>]]></long-description>
          <tag line="384" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="384" name="param" description="The source version to use. currentVersion is used if not specificed" type="\ezp\Content\Version" variable="$srcVersion">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="384" name="return" description="" type="\ezp\Content\Version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="384" name="throws" description="" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="384" name="todo" description="Language support"/>
          <tag line="384" name="todo" description="User support"/>
          <tag line="384" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="399">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
        <argument line="399">
          <name>$srcVersion</name>
          <default><![CDATA[null]]></default>
          <type>Version</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="433" package="Default">
        <name>find</name>
        <type>function</type>
        <docblock line="411">
          <description><![CDATA[Triggers a content search against $query.]]></description>
          <long-description><![CDATA[<p>$query should have been built using {@link \ezp\Content\Query\Builder} interface:</p>

<pre><code>$qb = new ezp\Content\Query\Builder();
$qb->addCriteria(
    $qb->fullText->like( 'eZ Publish' ),
    $qb->urlAlias->like( '/cms/amazing/*' ),
    $qb->contentTypeId->eq( 'folder' ),
    $qb->field->eq( 'author', 'community@ez.no' )
)->addSortClause(
    $qb->sort->field( 'folder', 'name', Query::SORT_ASC ),
    $qb->sort->dateCreated( Query::SORT_DESC )
)->setOffset( 5 )->setLimit( 15 );
$contentList = $contentService->find( $qb->getQuery() );
</code></pre>]]></long-description>
          <tag line="411" name="param" description="" type="\ezp\Content\Query" variable="$query">
            <type by_reference="false">\ezp\Content\Query</type>
          </tag>
          <tag line="411" name="param" description="" type="bool" variable="$filterOnUserPermissions">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="411" name="return" description="" type="\ezp\Content\Result">
            <type by_reference="false">\ezp\Content\Result</type>
          </tag>
          <tag line="411" name="todo" description="Translation filter"/>
        </docblock>
        <argument line="433">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>Query</type>
        </argument>
        <argument line="433">
          <name>$filterOnUserPermissions</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="469" package="Default">
        <name>findSingle</name>
        <type>function</type>
        <docblock line="460">
          <description><![CDATA[Triggers a content search against $query and returns only one content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="460" name="param" description="" type="\ezp\Content\Query" variable="$query">
            <type by_reference="false">\ezp\Content\Query</type>
          </tag>
          <tag line="460" name="param" description="" type="bool" variable="$filterOnUserPermissions">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="460" name="return" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="460" name="todo" description="Translation filter"/>
          <tag line="460" name="throws" description="If user does not have access to content read" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="469">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>Query</type>
        </argument>
        <argument line="469">
          <name>$filterOnUserPermissions</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content" line="493" package="Default">
        <name>addUserPermissionsTo</name>
        <type>function</type>
        <docblock line="486">
          <description><![CDATA[Add Permissions criteria to Query if current user has read limitations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="486" name="param" description="" type="\ezp\Content\Query" variable="$query">
            <type by_reference="false">\ezp\Content\Query</type>
          </tag>
          <tag line="486" name="throws" description="If some read limitation is missing query function" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
          <tag line="486" name="return" description="False if user does not have any read permissions at all" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="493">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>Query</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="554" package="Default">
        <name>deleteVersion</name>
        <type>function</type>
        <docblock line="548">
          <description><![CDATA[Deletes $version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="548" name="param" description="" type="\ezp\Content\Version" variable="$version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="548" name="throws" description="If user does not have access to version-remove provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="554">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type>Version</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="570" package="Default">
        <name>publish</name>
        <type>function</type>
        <docblock line="562">
          <description><![CDATA[Publishes $version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="562" name="param" description="" type="\ezp\Content\Version" variable="$version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="562" name="return" description="The updated, published Version" type="\ezp\Content\Version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="562" name="throws" description="if $version doesn't have the DRAFT status" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
          <tag line="562" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="570">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type>Version</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content" line="639" package="Default">
        <name>generateContentName</name>
        <type>function</type>
        <docblock line="631">
          <description><![CDATA[Generates content name for $content in $version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="631" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="631" name="param" description="" type="\ezp\Content\Version" variable="$version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="631" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="631" name="todo" description="Implement translations"/>
        </docblock>
        <argument line="639">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type>Version</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content" line="658" package="Default">
        <name>buildDomainObject</name>
        <type>function</type>
        <docblock line="652">
          <description><![CDATA[Build a content Domain Object from a content Value object returned by Persistence]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="652" name="param" description="" type="\ezp\Persistence\Content" variable="$vo">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="652" name="param" description="Will be set to version object during execution" type="\ezp\Content\Version" variable="$version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="652" name="return" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
        <argument line="658">
          <name>$vo</name>
          <default><![CDATA[]]></default>
          <type>ContentValue</type>
        </argument>
        <argument line="658">
          <name>$version</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content" line="721" package="Default">
        <name>buildVersionDomainObject</name>
        <type>function</type>
        <docblock line="714">
          <description><![CDATA[Builds a version Domain Object from its value object returned by persistence]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="714" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="714" name="param" description="" type="\ezp\Persistence\Content\Version|\ezp\Persistence\Content\RestrictedVersion" variable="$versionVo">
            <type by_reference="false">\ezp\Persistence\Content\Version</type>
            <type by_reference="false">\ezp\Persistence\Content\RestrictedVersion</type>
          </tag>
          <tag line="714" name="return" description="" type="\ezp\Content\Version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
        </docblock>
        <argument line="721">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
        <argument line="721">
          <name>$versionVo</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content" line="763" package="Default">
        <name>setPropertyByConvention</name>
        <type>function</type>
        <docblock line="756">
          <description><![CDATA[Defines specific conventions for filling content/update structs.]]></description>
          <long-description><![CDATA[<p>This method is here mainly to provide fallbacks if a struct property cannot be set in another way (aka not implemented yet)</p>]]></long-description>
          <tag line="756" name="todo" description="initialLanguageId should be processed via translation management, not hardcoded"/>
          <tag line="756" name="see" description="\ezp\Base\Service::setPropertyByConvention()" refers="\ezp\Base\Service::setPropertyByConvention()"/>
        </docblock>
        <argument line="763">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>ValueObject</type>
        </argument>
        <argument line="763">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Location/Collection.php" hash="b612cb2b9efa5ee1da6001fecef3553f">
    <parse_markers>
      <error line="17" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $elements in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Location/Collection.php</error>
    </parse_markers>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Location" line="15" package="Default">
      <name>Collection</name>
      <full_name>\ezp\Content\Location\Collection</full_name>
      <extends>\ezp\Base\Collection\Type</extends>
      <docblock line="12">
        <description><![CDATA[Location collection class]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="21" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="param" description="" type="\ezp\Content\Location[]" variable="$elements">
            <type by_reference="false">\ezp\Content\Location[]</type>
          </tag>
        </docblock>
        <argument line="21">
          <name>$elements</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Location/Trash/Exception/NotFound.php" hash="39d533b3bc4b02ec3ae7144fcb3320fd">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Location/Trash/Exception/NotFound.php</error>
    </parse_markers>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="BaseNotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Location\Trash\Exception" line="17" package="Default">
      <name>NotFound</name>
      <full_name>\ezp\Content\Location\Trash\Exception\NotFound</full_name>
      <extends>\ezp\Base\Exception\NotFound</extends>
      <docblock line="14">
        <description><![CDATA[NotFound exception implementation]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location\Trash\Exception" line="25" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="param" description="Location Id that cannot be found" type="integer" variable="$trashedLocationId">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="19" name="param" description="" type="\Exception" variable="$previous">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$trashedLocationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="25">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Location/Trash/Service.php" hash="161239fe931f6e0ace0c016ad92df512">
    <parse_markers>
      <error line="50" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in trash()</error>
      <error line="63" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $trashedLocation in untrash()</error>
      <error line="63" code="50015">Argument $newParentLocation is missing from the Docblock of untrash()</error>
      <error line="91" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $trashedLocation in emptyOne()</error>
      <error line="102" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in getList()</error>
      <error line="137" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $vo in buildDomainObject()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Location/Trash/Service.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="BaseService">ezp\Base\Service</namespace-alias>
    <namespace-alias name="Location">ezp\Content\Location</namespace-alias>
    <namespace-alias name="ProxyLocation">ezp\Content\Location\Proxy</namespace-alias>
    <namespace-alias name="Trashed">ezp\Content\Location\Trashed</namespace-alias>
    <namespace-alias name="Collection">ezp\Content\Location\Collection</namespace-alias>
    <namespace-alias name="TrashedLocationNotFound">ezp\Content\Location\Trash\Exception\NotFound</namespace-alias>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="ProxyContent">ezp\Content\Proxy</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="TrashedLocationValue">ezp\Persistence\Content\Location\Trashed</namespace-alias>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Location\Trash" line="29" package="Default">
      <name>Service</name>
      <full_name>\ezp\Content\Location\Trash\Service</full_name>
      <extends>\ezp\Base\Service</extends>
      <docblock line="26">
        <description><![CDATA[Location service, used for complex subtree operations]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location\Trash" line="38" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[Loads a trashed location object from its $id.]]></description>
          <long-description><![CDATA[<p>Note that $id is identical to original location, which has been previously trashed</p>]]></long-description>
          <tag line="31" name="param" description="" type="integer" variable="$id">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="31" name="return" description="" type="\ezp\Content\Location\Trashed">
            <type by_reference="false">\ezp\Content\Location\Trashed</type>
          </tag>
          <tag line="31" name="throws" description="if no trashed location is available with $id" type="\ezp\Content\Location\Trash\Exception\NotFound">
            <type by_reference="false">\ezp\Content\Location\Trash\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location\Trash" line="57" package="Default">
        <name>trash</name>
        <type>function</type>
        <docblock line="50">
          <description><![CDATA[Sends $location and all its children to trash and returns trashed location object
Content is left untouched.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="param" description="" type="\ezp\Content\Location" variable="$location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="50" name="return" description="" type="\ezp\Content\Location\Trashed">
            <type by_reference="false">\ezp\Content\Location\Trashed</type>
          </tag>
          <tag line="50" name="todo" description="Refresh $location (with an Identity map ?)"/>
        </docblock>
        <argument line="57">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location\Trash" line="72" package="Default">
        <name>untrash</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Restores $trashedLocation at its original place if possible.]]></description>
          <long-description><![CDATA[<p>If $newParentLocation is provided, $trashedLocation will be restored under it.
Will throw an exception if new/original parent is not available any more.</p>]]></long-description>
          <tag line="63" name="param" description="" type="\ezp\Content\Location\Trashed" variable="$trashedLocation">
            <type by_reference="false">\ezp\Content\Location\Trashed</type>
          </tag>
          <tag line="63" name="return" description="" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="63" name="throws" description="" type="\ezp\Content\Location\Exception\ParentNotFound">
            <type by_reference="false">\ezp\Content\Location\Exception\ParentNotFound</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$trashedLocation</name>
          <default><![CDATA[]]></default>
          <type>Trashed</type>
        </argument>
        <argument line="72">
          <name>$newParentLocation</name>
          <default><![CDATA[null]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location\Trash" line="86" package="Default">
        <name>emptyTrash</name>
        <type>function</type>
        <docblock line="82">
          <description><![CDATA[Empties trash.]]></description>
          <long-description><![CDATA[<p>All location/content contained in the trash will be removed</p>]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location\Trash" line="97" package="Default">
        <name>emptyOne</name>
        <type>function</type>
        <docblock line="91">
          <description><![CDATA[Deletes $trashedLocation from trash
Content will be removed]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="param" description="Trashed location to delete from trash" type="\ezp\Content\Location\Trashed" variable="$trashedLocation">
            <type by_reference="false">\ezp\Content\Location\Trashed</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$trashedLocation</name>
          <default><![CDATA[]]></default>
          <type>Trashed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location\Trash" line="119" package="Default">
        <name>getList</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Returns a collection of Trashed locations contained in the trash.]]></description>
          <long-description><![CDATA[<p>$query allows to filter/sort the elements to be contained in the collection.</p>

<pre><code>$qb = new ezp\Content\Query\Builder();
$qb->addCriteria(
    $qb->contentTypeId->eq( 'blog_post' ),
    $qb->field->eq( 'author', 'community@ez.no' )
)->addSortClause(
    $qb->sort->dateCreated( Query::SORT_DESC )
)->setOffset( 0 )->setLimit( 15 );
$trashList = $trashService->getList( $qb->getQuery() );
</code></pre>]]></long-description>
          <tag line="102" name="param" description="" type="\ezp\Content\Query" variable="$query">
            <type by_reference="false">\ezp\Content\Query</type>
          </tag>
          <tag line="102" name="return" description="" type="\ezp\Content\Location\Collection">
            <type by_reference="false">\ezp\Content\Location\Collection</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>Query</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\Location\Trash" line="144" package="Default">
        <name>buildDomainObject</name>
        <type>function</type>
        <docblock line="137">
          <description><![CDATA[Builds Trashed location domain object from $vo ValueObject returned by Persistence API]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="param" description="Location value object (extending \ezp\Persistence\ValueObject) returned by persistence" type="\ezp\Persistence\Location\Trashed" variable="$vo">
            <type by_reference="false">\ezp\Persistence\Location\Trashed</type>
          </tag>
          <tag line="137" name="return" description="" type="\ezp\Content\Location\Trashed">
            <type by_reference="false">\ezp\Content\Location\Trashed</type>
          </tag>
          <tag line="137" name="throws" description="" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$vo</name>
          <default><![CDATA[]]></default>
          <type>TrashedLocationValue</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Location/Exception/ParentNotFound.php" hash="560fedab9f097a66aa49a5b76e890b38">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Location/Exception/ParentNotFound.php</error>
    </parse_markers>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="BaseNotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Location\Exception" line="27" package="Default">
      <name>ParentNotFound</name>
      <full_name>\ezp\Content\Location\Exception\ParentNotFound</full_name>
      <extends>\ezp\Base\Exception\NotFound</extends>
      <docblock line="14">
        <description><![CDATA[ParentNotFound exception implementation]]></description>
        <long-description><![CDATA[<p>Use:</p>

<pre><code>// Assuming we can't find parent location for location #62
// This parent location originally had 2 as Id
throw new ParentNotFound( 62, 2 );

// Other example with Location domain object :
throw new ParentNotFound( $location->id, $location->parentId );
</code></pre>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location\Exception" line="36" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="param" description="Location Id which we can't find its parent" type="integer" variable="$locationId">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="29" name="param" description="Location Id we were originally looking for as $locationId's parent" type="integer" variable="$parentLocationId">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="29" name="param" description="" type="\Exception" variable="$previous">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="36">
          <name>$parentLocationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="36">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Location/Exception/NotFound.php" hash="69901cf7583f988f35ee53795d476b72">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Location/Exception/NotFound.php</error>
    </parse_markers>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="BaseNotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Location\Exception" line="26" package="Default">
      <name>NotFound</name>
      <full_name>\ezp\Content\Location\Exception\NotFound</full_name>
      <extends>\ezp\Base\Exception\NotFound</extends>
      <docblock line="14">
        <description><![CDATA[NotFound exception implementation]]></description>
        <long-description><![CDATA[<p>Use:</p>

<pre><code>// Assuming we can't find location #62
throw new NotFound( 62 );

// Other example with Location domain object :
throw new NotFound( $location->id );
</code></pre>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location\Exception" line="34" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="28">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="param" description="Location Id that cannot be found" type="integer" variable="$locationId">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="28" name="param" description="" type="\Exception" variable="$previous">
            <type by_reference="false">\Exception</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="34">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Location/Trashed.php" hash="909736d5c82882141ceac936d12055aa">
    <parse_markers>
      <critical line="18" code="50019">No short description for property $readWriteProperties</critical>
      <critical line="38" code="50019">No short description for property $dynamicProperties</critical>
      <error line="16" code="50000">No DocBlock was found for Trashed</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Location/Trashed.php</error>
    </parse_markers>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="ConcreteLocation">ezp\Content\Location\Concrete</namespace-alias>
    <namespace-alias name="TrashedLocationValue">ezp\Persistence\Content\Location\Trashed</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Location" line="16">
      <name>Trashed</name>
      <full_name>\ezp\Content\Location\Trashed</full_name>
      <extends>\ezp\Content\Location\Concrete</extends>
      <property final="false" static="false" visibility="protected" line="21" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'priority' => false,
        'hidden' => false,
        'invisible' => false,
        'remoteId' => false,
        'contentId' => false,
        'parentId' => false,
        'pathIdentificationString' => false,
        'pathString' => false,
        'modifiedSubLocation' => false,
        'mainLocationId' => false,
        'depth' => false,
        'sortField' => false,
        'sortOrder' => false,
    )]]></default>
        <docblock line="18">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="Readable of properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array(
        'content' => false,
        'parent' => false,
        'children' => false
    )]]></default>
        <docblock line="38">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="Dynamic properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Content/Location/Proxy.php" hash="95d7bf5586c09203cc3c9a21a03da7f4">
    <parse_markers>
      <error line="38" code="50010">No DocBlock was found for method __construct()</error>
      <error line="54" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $parent in setParent()</error>
      <error line="76" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in setContent()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Location/Proxy.php</error>
    </parse_markers>
    <namespace-alias name="ModelProxy">ezp\Base\Proxy\Model</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="Location">ezp\Content\Location</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Location" line="36" package="Default">
      <name>Proxy</name>
      <full_name>\ezp\Content\Location\Proxy</full_name>
      <extends>\ezp\Base\Proxy\Model</extends>
      <extends>\ezp\Content\Location</extends>
      <docblock line="15">
        <description><![CDATA[This class represents a Proxy Content Location]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="property-read" description="" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="15" name="property" description="" type="int" variable="$priority">
          <type by_reference="false">int</type>
        </tag>
        <tag line="15" name="property-read" description="" type="bool" variable="$hidden">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="15" name="property-read" description="" type="bool" variable="$invisible">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="15" name="property-read" description="" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="15" name="property-read" description="" type="int" variable="$contentId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="15" name="property-read" description="" type="int" variable="$parentId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="15" name="property-read" description="" type="string" variable="$pathIdentificationString">
          <type by_reference="false">string</type>
        </tag>
        <tag line="15" name="property-read" description="Path string for location (like /1/2/)" type="string" variable="$pathString">
          <type by_reference="false">string</type>
        </tag>
        <tag line="15" name="property-read" description="" type="int" variable="$modifiedSubLocation">
          <type by_reference="false">int</type>
        </tag>
        <tag line="15" name="property-read" description="" type="int" variable="$mainLocationId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="15" name="property-read" description="" type="int" variable="$depth">
          <type by_reference="false">int</type>
        </tag>
        <tag line="15" name="property" description="Sort field int, to be compared with \ezp\Content\Location::SORT_FIELD_* constants" type="int" variable="$sortField">
          <type by_reference="false">int</type>
        </tag>
        <tag line="15" name="property" description="Sort order int, to be compared with \ezp\Content\Location::SORT_ORDER_* constants" type="int" variable="$sortOrder">
          <type by_reference="false">int</type>
        </tag>
        <tag line="15" name="property-read" description="Location's children in subtree" type="\ezp\Content\Location[]" variable="$children">
          <type by_reference="false">\ezp\Content\Location[]</type>
        </tag>
        <tag line="15" name="property" description="Associated Content object" type="\ezp\Content" variable="$content">
          <type by_reference="false">\ezp\Content</type>
        </tag>
        <tag line="15" name="property" description="Location's parent location" type="\ezp\Content\Location" variable="$parent">
          <type by_reference="false">\ezp\Content\Location</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="38">
        <name>__construct</name>
        <type>function</type>
        <argument line="38">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="38">
          <name>$service</name>
          <default><![CDATA[]]></default>
          <type>Service</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="48" package="Default">
        <name>getParent</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Returns the parent Location]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="return" description="" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="59" package="Default">
        <name>setParent</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Sets the parent Location and updates inverse side ( $parent->children )]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="" type="\ezp\Content\Location" variable="$parent">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$parent</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="70" package="Default">
        <name>getContent</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Returns the Content the Location holds]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="return" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="81" package="Default">
        <name>setContent</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Sets the content and updates inverse side ( $content->locations )]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="92" package="Default">
        <name>getChildren</name>
        <type>function</type>
        <docblock line="87">
          <description><![CDATA[Returns collection of children locations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="87" name="return" description="" type="\ezp\Content\Location[]">
            <type by_reference="false">\ezp\Content\Location[]</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Location/Concrete.php" hash="0b9c1cffff5958d3e0e9c59d4b580ba5">
    <parse_markers>
      <critical line="43" code="50019">No short description for property $readWriteProperties</critical>
      <critical line="63" code="50019">No short description for property $dynamicProperties</critical>
      <error line="90" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in __construct()</error>
      <error line="124" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $parent in setParent()</error>
      <error line="152" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in setContent()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Location/Concrete.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="ConcreteContent">ezp\Content\Concrete</namespace-alias>
    <namespace-alias name="Location">ezp\Content\Location</namespace-alias>
    <namespace-alias name="LocationValue">ezp\Persistence\Content\Location</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="Lazy">ezp\Base\Collection\Lazy</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Location" line="41" package="Default">
      <name>Concrete</name>
      <full_name>\ezp\Content\Location\Concrete</full_name>
      <extends>\ezp\Base\Model</extends>
      <extends>\ezp\Content\Location</extends>
      <docblock line="20">
        <description><![CDATA[This class represents a Concrete Content Location]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="20" name="property-read" description="" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="20" name="property" description="" type="int" variable="$priority">
          <type by_reference="false">int</type>
        </tag>
        <tag line="20" name="property-read" description="" type="bool" variable="$hidden">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="20" name="property-read" description="" type="bool" variable="$invisible">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="20" name="property-read" description="" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="20" name="property-read" description="" type="int" variable="$contentId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="20" name="property-read" description="" type="int" variable="$parentId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="20" name="property-read" description="" type="string" variable="$pathIdentificationString">
          <type by_reference="false">string</type>
        </tag>
        <tag line="20" name="property-read" description="Path string for location (like /1/2/)" type="string" variable="$pathString">
          <type by_reference="false">string</type>
        </tag>
        <tag line="20" name="property-read" description="" type="int" variable="$modifiedSubLocation">
          <type by_reference="false">int</type>
        </tag>
        <tag line="20" name="property-read" description="" type="int" variable="$mainLocationId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="20" name="property-read" description="" type="int" variable="$depth">
          <type by_reference="false">int</type>
        </tag>
        <tag line="20" name="property" description="Sort field int, to be compared with \ezp\Content\Location::SORT_FIELD_* constants" type="int" variable="$sortField">
          <type by_reference="false">int</type>
        </tag>
        <tag line="20" name="property" description="Sort order int, to be compared with \ezp\Content\Location::SORT_ORDER_* constants" type="int" variable="$sortOrder">
          <type by_reference="false">int</type>
        </tag>
        <tag line="20" name="property-read" description="Location's children in subtree" type="\ezp\Content\Location[]" variable="$children">
          <type by_reference="false">\ezp\Content\Location[]</type>
        </tag>
        <tag line="20" name="property" description="Associated Content object" type="\ezp\Content" variable="$content">
          <type by_reference="false">\ezp\Content</type>
        </tag>
        <tag line="20" name="property" description="Location's parent location" type="\ezp\Content\Location" variable="$parent">
          <type by_reference="false">\ezp\Content\Location</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'priority' => true,
        'hidden' => false,
        'invisible' => false,
        'remoteId' => true,//@todo: Make readOnly
        'contentId' => false,
        'parentId' => false,
        'pathIdentificationString' => false,
        'pathString' => false,
        'modifiedSubLocation' => false,
        'mainLocationId' => false,
        'depth' => false,
        'sortField' => true,
        'sortOrder' => true,
    )]]></default>
        <docblock line="43">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="var" description="Readable of properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="66" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array(
        'content' => false,
        'parent' => false,
        'children' => false
    )]]></default>
        <docblock line="63">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="var" description="Dynamic properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="76" package="Default">
        <name>$children</name>
        <default><![CDATA[]]></default>
        <docblock line="72">
          <description><![CDATA[Children of current location]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="var" description="" type="\ezp\Content\Location[]">
            <type by_reference="false">\ezp\Content\Location[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="82" package="Default">
        <name>$content</name>
        <default><![CDATA[]]></default>
        <docblock line="78">
          <description><![CDATA[Content for current location]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="var" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="88" package="Default">
        <name>$parent</name>
        <default><![CDATA[]]></default>
        <docblock line="84">
          <description><![CDATA[Current location's parent]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="var" description="" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="96" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Setups empty children collection and attaches $content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="90" name="throws" description="" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="119" package="Default">
        <name>getParent</name>
        <type>function</type>
        <docblock line="114">
          <description><![CDATA[Returns the parent Location]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="114" name="return" description="" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="133" package="Default">
        <name>setParent</name>
        <type>function</type>
        <docblock line="124">
          <description><![CDATA[Sets the parent Location and updates inverse side ( $parent->children ) (if it has been loaded)]]></description>
          <long-description><![CDATA[<p>Note: This function does not store the change, use Location service for such functionality!</p>]]></long-description>
          <tag line="124" name="todo" description="Should be removed or documented as internal as you will have to use move api if you want to change&#10;parent after creation."/>
          <tag line="124" name="param" description="" type="\ezp\Content\Location" variable="$parent">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
        </docblock>
        <argument line="133">
          <name>$parent</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="147" package="Default">
        <name>getContent</name>
        <type>function</type>
        <docblock line="142">
          <description><![CDATA[Returns the Content the Location holds]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="142" name="return" description="" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="157" package="Default">
        <name>setContent</name>
        <type>function</type>
        <docblock line="152">
          <description><![CDATA[Sets the content and updates inverse side ( $content->locations )]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
        <argument line="157">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="170" package="Default">
        <name>getChildren</name>
        <type>function</type>
        <docblock line="165">
          <description><![CDATA[Returns collection of children locations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="165" name="return" description="" type="\ezp\Content\Location[]">
            <type by_reference="false">\ezp\Content\Location[]</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Location/Service.php" hash="e5b45d622364f4bf0f483b448f7d8764">
    <parse_markers>
      <error line="36" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $subtree in copySubtree()</error>
      <error line="36" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $targetLocation in copySubtree()</error>
      <error line="83" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in children()</error>
      <error line="150" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in create()</error>
      <error line="190" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in update()</error>
      <error line="221" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location1 in swap()</error>
      <error line="221" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location2 in swap()</error>
      <error line="248" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in hide()</error>
      <error line="278" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in unhide()</error>
      <error line="309" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in move()</error>
      <error line="309" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $newParent in move()</error>
      <error line="324" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in delete()</error>
      <error line="343" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $startingPoint in assignSection()</error>
      <error line="343" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $section in assignSection()</error>
      <error line="358" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $vo in buildDomainObject()</error>
      <error line="372" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in refreshDomainObject()</error>
      <error line="372" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $vo in refreshDomainObject()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Location/Service.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="Forbidden">ezp\Base\Exception\Forbidden</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="BaseService">ezp\Base\Service</namespace-alias>
    <namespace-alias name="Lazy">ezp\Base\Collection\Lazy</namespace-alias>
    <namespace-alias name="LazyType">ezp\Base\Collection\LazyType</namespace-alias>
    <namespace-alias name="Location">ezp\Content\Location</namespace-alias>
    <namespace-alias name="ConcreteLocation">ezp\Content\Location\Concrete</namespace-alias>
    <namespace-alias name="ProxyLocation">ezp\Content\Location\Proxy</namespace-alias>
    <namespace-alias name="LocationNotFound">ezp\Content\Location\Exception\NotFound</namespace-alias>
    <namespace-alias name="Section">ezp\Content\Section</namespace-alias>
    <namespace-alias name="ProxyContent">ezp\Content\Proxy</namespace-alias>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="Builder">ezp\Content\Query\Builder</namespace-alias>
    <namespace-alias name="LocationValue">ezp\Persistence\Content\Location</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Location\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Location\UpdateStruct</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Location" line="33" package="Default">
      <name>Service</name>
      <full_name>\ezp\Content\Location\Service</full_name>
      <extends>\ezp\Base\Service</extends>
      <docblock line="30">
        <description><![CDATA[Location service, used for complex subtree operations]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="46" package="Default">
        <name>copySubtree</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Copies the subtree starting from $subtree as a new subtree of $targetLocation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="" type="\ezp\Content\Location" variable="$subtree">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="36" name="param" description="" type="\ezp\Content\Location" variable="$targetLocation">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="36" name="return" description="The newly created subtree" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="36" name="throws" description="" type="\ezp\Content\Location\Exception\NotFound">
            <type by_reference="false">\ezp\Content\Location\Exception\NotFound</type>
          </tag>
          <tag line="36" name="todo" description="Permission checking, is it possible w/o loading all content in the subtree?"/>
        </docblock>
        <argument line="46">
          <name>$subtree</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
        <argument line="46">
          <name>$targetLocation</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="69" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Loads a location object from its $locationId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="param" description="" type="integer" variable="$locationId">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="63" name="return" description="" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="63" name="throws" description="if no location is available with $locationId" type="\ezp\Content\Location\Exception\NotFound">
            <type by_reference="false">\ezp\Content\Location\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="158" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="150">
          <description><![CDATA[Creates the new $location in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="150" name="param" description="" type="\ezp\Content\Location" variable="$location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="150" name="return" description="the newly created Location" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="150" name="throws" description="If a validation problem has been found for $content" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
          <tag line="150" name="throws" description="If user does not have access to create provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="158">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="198" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="190">
          <description><![CDATA[Updates $location in the content repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="190" name="param" description="" type="\ezp\Content\Location" variable="$location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="190" name="return" description="the updated Location" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="190" name="throws" description="If a validation problem has been found for $location" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
          <tag line="190" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="198">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="229" package="Default">
        <name>swap</name>
        <type>function</type>
        <docblock line="221">
          <description><![CDATA[Swaps the contents hold by the $location1 and $location2]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="221" name="param" description="" type="\ezp\Content\Location" variable="$location1">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="221" name="param" description="" type="\ezp\Content\Location" variable="$location2">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="221" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="221" name="throws" description="If user does not have access to create provided objects" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="229">
          <name>$location1</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
        <argument line="229">
          <name>$location2</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="256" package="Default">
        <name>hide</name>
        <type>function</type>
        <docblock line="248">
          <description><![CDATA[Hides the $location and marks invisible all descendants of $location.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="248" name="param" description="" type="\ezp\Content\Location" variable="$location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="248" name="return" description="$location, with updated hidden value" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="248" name="todo" description="Make children visibility update more dynamic with some kind of LazyLoadedCollection"/>
          <tag line="248" name="throws" description="If user does not have access to hide provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="256">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="287" package="Default">
        <name>unhide</name>
        <type>function</type>
        <docblock line="278">
          <description><![CDATA[Unhides the $location and marks visible all descendants of $locations
until a hidden location is found.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="278" name="param" description="" type="\ezp\Content\Location" variable="$location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="278" name="return" description="$location, with updated hidden value" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="278" name="todo" description="Make children visibility update more dynamic with some kind of LazyLoadedCollection"/>
          <tag line="278" name="throws" description="If user does not have access to (un)hide provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="287">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="318" package="Default">
        <name>move</name>
        <type>function</type>
        <docblock line="309">
          <description><![CDATA[Moves $location under $newParent and updates all descendants of
$location accordingly.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="309" name="param" description="" type="\ezp\Content\Location" variable="$location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="309" name="param" description="" type="\ezp\Content\Location" variable="$newParent">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="309" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="309" name="todo" description="Figure out a way to do permissions w/o loading whole tree"/>
        </docblock>
        <argument line="318">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
        <argument line="318">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="334" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="324">
          <description><![CDATA[Deletes the $locations and all descendants of $location.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="324" name="param" description="" type="\ezp\Content\Location" variable="$location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="324" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="324" name="throws" description="if no location is available with $locationId" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="324" name="throws" description="If user does not have access to remove provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
          <tag line="324" name="todo" description="Do we need to check permissions for delete on children? Or should we document that&#10;giving access to deleting implicit gives a user access to remove all childes no matter what?"/>
        </docblock>
        <argument line="334">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Location" line="352" package="Default">
        <name>assignSection</name>
        <type>function</type>
        <docblock line="343">
          <description><![CDATA[Assigns $section to the contents held by $startingPoint location and
all contents held by descendants location of $startingPoint]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="343" name="param" description="" type="\ezp\Content\Location" variable="$startingPoint">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="343" name="param" description="" type="\ezp\Content\Section" variable="$section">
            <type by_reference="false">\ezp\Content\Section</type>
          </tag>
          <tag line="343" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="343" name="todo" description="Figure out how to do permission checks w/o loading whole tree"/>
        </docblock>
        <argument line="352">
          <name>$startingPoint</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
        <argument line="352">
          <name>$section</name>
          <default><![CDATA[]]></default>
          <type>Section</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\Location" line="365" package="Default">
        <name>buildDomainObject</name>
        <type>function</type>
        <docblock line="358">
          <description><![CDATA[Builds Location domain object from $vo ValueObject returned by Persistence API]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="358" name="param" description="Location value object (extending \ezp\Persistence\ValueObject) returned by persistence" type="\ezp\Persistence\Location" variable="$vo">
            <type by_reference="false">\ezp\Persistence\Location</type>
          </tag>
          <tag line="358" name="return" description="" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="358" name="throws" description="" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
        </docblock>
        <argument line="365">
          <name>$vo</name>
          <default><![CDATA[]]></default>
          <type>LocationValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\Location" line="380" package="Default">
        <name>refreshDomainObject</name>
        <type>function</type>
        <docblock line="372">
          <description><![CDATA[Refreshes provided $location. Useful if backend data has changed]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="372" name="param" description="Location to refresh" type="\ezp\Content\Location" variable="$location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="372" name="param" description="Location value object. If provided, $location will be updated with $vo's data" type="\ezp\Persistence\Location" variable="$vo">
            <type by_reference="false">\ezp\Persistence\Location</type>
          </tag>
          <tag line="372" name="return" description="" type="\ezp\Content\Location">
            <type by_reference="false">\ezp\Content\Location</type>
          </tag>
          <tag line="372" name="throws" description="" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
        </docblock>
        <argument line="380">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>Location</type>
        </argument>
        <argument line="380">
          <name>$vo</name>
          <default><![CDATA[null]]></default>
          <type>LocationValue</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Field.php" hash="21ea81ae804537a0bd98fd0d3643773c">
    <parse_markers>
      <critical line="40" code="50019">No short description for property $readWriteProperties</critical>
      <critical line="51" code="50019">No short description for property $dynamicProperties</critical>
      <critical line="60" code="50019">No short description for property $version</critical>
      <critical line="65" code="50019">No short description for property $fieldDefinition</critical>
      <critical line="70" code="50019">No short description for property $value</critical>
      <error line="75" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentVersion in __construct()</error>
      <error line="75" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in __construct()</error>
      <error line="142" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in setValue()</error>
      <error line="154" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $inputValue in validateValue()</error>
      <error line="186" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $subject in update()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Field.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="FieldValidationException">ezp\Base\Exception\FieldValidation</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="Observer">ezp\Base\Observer</namespace-alias>
    <namespace-alias name="Observable">ezp\Base\Observable</namespace-alias>
    <namespace-alias name="Repository">ezp\Base\Repository</namespace-alias>
    <namespace-alias name="Version">ezp\Content\Version</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="FieldVO">ezp\Persistence\Content\Field</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="OnPublishFieldType">ezp\Content\FieldType\OnPublish</namespace-alias>
    <namespace-alias name="OnCreateFieldType">ezp\Content\FieldType\OnCreate</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content" line="38" package="Default">
      <name>Field</name>
      <full_name>\ezp\Content\Field</full_name>
      <extends>\ezp\Base\Model</extends>
      <extends>\ezp\Base\Observer</extends>
      <docblock line="25">
        <description><![CDATA[This class represents a Content's field]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="25" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="25" name="property-ready" description="string $type"/>
        <tag line="25" name="property" description="Value for current field" type="\ezp\Content\FieldType\Value" variable="$value">
          <type by_reference="false">\ezp\Content\FieldType\Value</type>
        </tag>
        <tag line="25" name="property" description="" type="string" variable="$type">
          <type by_reference="false">string</type>
        </tag>
        <tag line="25" name="property" description="" type="mixed" variable="$language">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="25" name="property-read" description="" type="int" variable="$versionNo">
          <type by_reference="false">int</type>
        </tag>
        <tag line="25" name="property-read" description="" type="mixed" variable="$fieldDefinitionId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="25" name="property-read" description="" type="\ezp\Content\Version" variable="$version">
          <type by_reference="false">\ezp\Content\Version</type>
        </tag>
        <tag line="25" name="property-read" description="" type="\ezp\Content\Type\FieldDefinition" variable="$fieldDefinition">
          <type by_reference="false">\ezp\Content\Type\FieldDefinition</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'type' => false,
        'language' => true,
        'versionNo' => false,
        'fieldDefinitionId' => false,
    )]]></default>
        <docblock line="40">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="Readable of properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="54" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array(
        'version' => false,
        'fieldDefinition' => false,
        'value' => true
    )]]></default>
        <docblock line="51">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="var" description="Dynamic properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" package="Default">
        <name>$version</name>
        <default><![CDATA[]]></default>
        <docblock line="60">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="var" description="" type="\ezp\Content\Version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="68" package="Default">
        <name>$fieldDefinition</name>
        <default><![CDATA[]]></default>
        <docblock line="65">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="var" description="" type="\ezp\Content\Type\FieldDefinition">
            <type by_reference="false">\ezp\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="73" package="Default">
        <name>$value</name>
        <default><![CDATA[]]></default>
        <docblock line="70">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="var" description="" type="\ezp\Content\FieldType\Value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="81" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Constructor, sets up properties]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="" type="\ezp\Content\Version" variable="$contentVersion">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
          <tag line="75" name="param" description="" type="\ezp\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$contentVersion</name>
          <default><![CDATA[]]></default>
          <type>Version</type>
        </argument>
        <argument line="81">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="117" package="Default">
        <name>getVersion</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Return content version object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="return" description="" type="\ezp\Content\Version">
            <type by_reference="false">\ezp\Content\Version</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="127" package="Default">
        <name>getFieldDefinition</name>
        <type>function</type>
        <docblock line="122">
          <description><![CDATA[Return content type object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="122" name="return" description="" type="\ezp\Content\Type\FieldDefinition">
            <type by_reference="false">\ezp\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="137" package="Default">
        <name>getValue</name>
        <type>function</type>
        <docblock line="132">
          <description><![CDATA[Returns current field value as FieldValue object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="return" description="" type="\ezp\Content\FieldType\Value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="148" package="Default">
        <name>setValue</name>
        <type>function</type>
        <docblock line="142">
          <description><![CDATA[Assigns FieldValue object $inputValue to current field]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="142" name="param" description="" type="\ezp\Content\FieldType\Value" variable="$inputValue">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
          <tag line="142" name="todo" description="Make validate optional."/>
        </docblock>
        <argument line="148">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content" line="165" package="Default">
        <name>validateValue</name>
        <type>function</type>
        <docblock line="154">
          <description><![CDATA[Validates $inputValue against validators registered in field definition.]]></description>
          <long-description><![CDATA[<p>If $inputValue is valid, it will be returned as is.
If not, a ValidationException will be thrown</p>]]></long-description>
          <tag line="154" name="todo" description="Change so validate does not throw exceptions for logical validation errors."/>
          <tag line="154" name="param" description="" type="\ezp\Content\FieldType\FieldValue" variable="$inputValue">
            <type by_reference="false">\ezp\Content\FieldType\FieldValue</type>
          </tag>
          <tag line="154" name="return" description="" type="\ezp\Content\FieldType\FieldValue">
            <type by_reference="false">\ezp\Content\FieldType\FieldValue</type>
          </tag>
          <tag line="154" name="throws" description="" type="\ezp\Base\Exception\FieldValidation">
            <type by_reference="false">\ezp\Base\Exception\FieldValidation</type>
          </tag>
        </docblock>
        <argument line="165">
          <name>$inputValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="196" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="186">
          <description><![CDATA[Called when subject has been updated
Supported events:
  - field/setValue Should be triggered when a field has been set a value. Will inject the value in the field type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="186" name="param" description="" type="\ezp\Base\Observable" variable="$subject">
            <type by_reference="false">\ezp\Base\Observable</type>
          </tag>
          <tag line="186" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="186" name="param" description="" type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="186" name="throws" description="If an expected observable argument isn't passed" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
        </docblock>
        <argument line="196">
          <name>$subject</name>
          <default><![CDATA[]]></default>
          <type>Observable</type>
        </argument>
        <argument line="196">
          <name>$event</name>
          <default><![CDATA['update']]></default>
          <type/>
        </argument>
        <argument line="196">
          <name>$arguments</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content" line="226" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="220">
          <description><![CDATA[Returns a string representation of the field value.]]></description>
          <long-description><![CDATA[<p>This string representation must be compatible with {@link self::fromString()} supported format</p>]]></long-description>
          <tag line="220" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Type/FieldDefinition.php" hash="3a900ac9cc84b953fcf7e8a2ca09692d">
    <parse_markers>
      <critical line="42" code="50019">No short description for property $readWriteProperties</critical>
      <critical line="60" code="50019">No short description for property $dynamicProperties</critical>
      <critical line="69" code="50019">No short description for property $contentType</critical>
      <critical line="74" code="50019">No short description for property $type</critical>
      <critical line="79" code="50019">No short description for property $defaultValue</critical>
      <error line="92" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in __construct()</error>
      <error line="133" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $validator in setValidator()</error>
      <error line="233" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in setDefaultValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Type/FieldDefinition.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="Type">ezp\Content\Type</namespace-alias>
    <namespace-alias name="FieldDefinitionValue">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="FieldTypeFactory">ezp\Content\FieldType\Factory</namespace-alias>
    <namespace-alias name="Validator">ezp\Content\FieldType\Validator</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="PersistenceFieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldTypeConstraints">ezp\Persistence\Content\FieldTypeConstraints</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Type" line="40" package="Default">
      <name>FieldDefinition</name>
      <full_name>\ezp\Content\Type\FieldDefinition</full_name>
      <extends>\ezp\Base\Model</extends>
      <docblock line="21">
        <description><![CDATA[Content Type Field (content class attribute) class]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="21" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="21" name="property" description="" type="\string[]" variable="$name">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="21" name="property" description="" type="\string[]" variable="$description">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="21" name="property" description="" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="21" name="property" description="" type="string" variable="$fieldGroup">
          <type by_reference="false">string</type>
        </tag>
        <tag line="21" name="property" description="" type="int" variable="$position">
          <type by_reference="false">int</type>
        </tag>
        <tag line="21" name="property-read" description="" type="string" variable="$fieldType">
          <type by_reference="false">string</type>
        </tag>
        <tag line="21" name="property" description="" type="bool" variable="$isTranslatable">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="21" name="property" description="" type="bool" variable="$isSearchable">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="21" name="property" description="" type="bool" variable="$isRequired">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="21" name="property" description="" type="bool" variable="$isInfoCollector">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="21" name="property-read" description="" type="\ezp\Content\FieldTypeConstraints" variable="$fieldTypeConstraints">
          <type by_reference="false">\ezp\Content\FieldTypeConstraints</type>
        </tag>
        <tag line="21" name="property" description="" type="\ezp\Content\FieldType\Value" variable="$defaultValue">
          <type by_reference="false">\ezp\Content\FieldType\Value</type>
        </tag>
        <tag line="21" name="property-read" description="ContentType object" type="\ezp\Content\Type" variable="$contentType">
          <type by_reference="false">\ezp\Content\Type</type>
        </tag>
        <tag line="21" name="property-read" description="FieldType object" type="\ezp\Content\FieldType" variable="$type">
          <type by_reference="false">\ezp\Content\FieldType</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'name' => true,
        'description' => true,
        'identifier' => true,
        'fieldGroup' => true,
        'position' => true,
        'fieldType' => false,
        'isTranslatable' => true,
        'isSearchable' => true,
        'isRequired' => true,
        'isInfoCollector' => true,
        'fieldTypeConstraints' => false,
    )]]></default>
        <docblock line="42">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="Readable of properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array(
        'contentType' => false,
        'type' => false,
        'defaultValue' => true
    )]]></default>
        <docblock line="60">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="var" description="Dynamic properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="72" package="Default">
        <name>$contentType</name>
        <default><![CDATA[]]></default>
        <docblock line="69">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="var" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="77" package="Default">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <docblock line="74">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="var" description="" type="\ezp\Content\FieldType">
            <type by_reference="false">\ezp\Content\FieldType</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="82" package="Default">
        <name>$defaultValue</name>
        <default><![CDATA[]]></default>
        <docblock line="79">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="var" description="" type="\ezp\Content\FieldType\Value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="90" package="Default">
        <name>$validators</name>
        <default><![CDATA[]]></default>
        <docblock line="84">
          <description><![CDATA[Array holding all the validator objects for this field definition.]]></description>
          <long-description><![CDATA[<p>The array is indexed by validator FQN (Full Qualified Name), i.e. class name with namespace without first slash.</p>]]></long-description>
          <tag line="84" name="var" description="" type="\ezp\Content\FieldType\Validator[]">
            <type by_reference="false">\ezp\Content\FieldType\Validator[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="98" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Constructor, sets up value object, fieldType string and attach $contentType]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="" type="\ezp\Content\Type" variable="$contentType">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="92" name="param" description="" type="string" variable="$fieldType">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
        <argument line="98">
          <name>$fieldType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="118" package="Default">
        <name>getContentType</name>
        <type>function</type>
        <docblock line="113">
          <description><![CDATA[Return content type object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="113" name="return" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="128" package="Default">
        <name>getType</name>
        <type>function</type>
        <docblock line="123">
          <description><![CDATA[Return field type object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="123" name="return" description="" type="\ezp\Content\FieldType">
            <type by_reference="false">\ezp\Content\FieldType</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="161" package="Default">
        <name>setValidator</name>
        <type>function</type>
        <docblock line="133">
          <description><![CDATA[Sets a validator for this field.]]></description>
          <long-description><![CDATA[<p>Only one kind of validator can exist at a time in a Field Definition.
If a similar validator (same Full Qualified Name) already exists, it will be replaced by $validator.
To update a validator, get it with {@link \ezp\Content\Type\FieldDefinition::getValidators()}, update its properties
and set it again with this method.</p>

<p>Examples:</p>

<pre><code>// Assume $fieldDefinition is of Integer field type

// Adding a new validator
$validator = new \ezp\Content\FieldType\Integer\IntegerValueValidator;
$validator->minIntegerValue = -6;
$validator->maxIntegerValue = 6;
$fieldDefinition->setValidator( $validator );

// Updating a validator
// $allValidators is an array indexed by validator FQN
$allValidators = $fieldDefinition->getValidators();
$validator = $allValidators["ezp\Content\FieldType\Integer\IntegerValueValidator"];
$validator->minIntegerValue = -5;
$fieldDefinition->setValidator( $validator );
</code></pre>]]></long-description>
          <tag line="133" name="param" description="" type="\ezp\Content\FieldType\Validator" variable="$validator">
            <type by_reference="false">\ezp\Content\FieldType\Validator</type>
          </tag>
          <tag line="133" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="161">
          <name>$validator</name>
          <default><![CDATA[]]></default>
          <type>Validator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="176" package="Default">
        <name>getValidator</name>
        <type>function</type>
        <docblock line="168">
          <description><![CDATA[Returns a validator object for this field definition, identified by $validatorName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="168" name="param" description="Validator's FQN (Full Qualified Name, class name with namespace, without first slash). e.g. \ezp\Content\FieldType\Integer\IntegerValueValidator" type="string" variable="$validatorName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="168" name="return" description="" type="\ezp\Content\FieldType\Validator">
            <type by_reference="false">\ezp\Content\FieldType\Validator</type>
          </tag>
          <tag line="168" name="throws" description="If no validator is referenced with $validatorName" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="176">
          <name>$validatorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Content\Type" line="190" package="Default">
        <name>initializeValidators</name>
        <type>function</type>
        <docblock line="185">
          <description><![CDATA[Initializes the validators map with constraints if it does not already exist.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="185" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="211" package="Default">
        <name>removeValidator</name>
        <type>function</type>
        <docblock line="205">
          <description><![CDATA[Removes a validator, identified by $validatorName, from the field definition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="205" name="param" description="Validator's FQN (Full Qualified Name, class name with namespace, without first slash). e.g. \ezp\Content\FieldType\Integer\IntegerValueValidator" type="string" variable="$validatorName">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="211">
          <name>$validatorName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="228" package="Default">
        <name>getDefaultValue</name>
        <type>function</type>
        <docblock line="223">
          <description><![CDATA[Returns default value for current field definition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="223" name="return" description="" type="\ezp\Content\FieldType\Value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="238" package="Default">
        <name>setDefaultValue</name>
        <type>function</type>
        <docblock line="233">
          <description><![CDATA[Sets a new default value for current field definition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="233" name="param" description="" type="\ezp\Content\FieldType\Value" variable="$value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
        </docblock>
        <argument line="238">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="250" package="Default">
        <name>getValidators</name>
        <type>function</type>
        <docblock line="245">
          <description><![CDATA[Returns registered validators for current field definition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="245" name="return" description="" type="\ezp\Content\FieldType\Validator[]">
            <type by_reference="false">\ezp\Content\FieldType\Validator[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="280" package="Default">
        <name>setFieldSetting</name>
        <type>function</type>
        <docblock line="273">
          <description><![CDATA[Sets a field setting, according to field type allowed settings]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="273" name="see" description="\ezp\Content\FieldType::$allowedSettings" refers="\ezp\Content\FieldType::$allowedSettings"/>
          <tag line="273" name="param" description="" type="string" variable="$settingName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="273" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="280">
          <name>$settingName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="280">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="292" package="Default">
        <name>getFieldSetting</name>
        <type>function</type>
        <docblock line="286">
          <description><![CDATA[Gets a field setting, identified by $settingName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="286" name="param" description="" type="string" variable="$settingName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="286" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="292">
          <name>$settingName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Type/Group/Proxy.php" hash="7a525835456440960d88f1aef6716a93">
    <parse_markers>
      <error line="31" code="50012">No short description for method __construct()</error>
      <error line="31" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $service in __construct()</error>
      <error line="51" code="50012">No short description for method lazyLoad()</error>
      <error line="63" code="50012">No short description for method getTypes()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Type/Group/Proxy.php</error>
    </parse_markers>
    <namespace-alias name="ModelProxy">ezp\Base\Proxy\Model</namespace-alias>
    <namespace-alias name="Group">ezp\Content\Type\Group</namespace-alias>
    <namespace-alias name="Service">ezp\Content\Type\Service</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Type\Group" line="29" package="Default">
      <name>Proxy</name>
      <full_name>\ezp\Content\Type\Group\Proxy</full_name>
      <extends>\ezp\Base\Proxy\Model</extends>
      <extends>\ezp\Content\Type\Group</extends>
      <docblock line="15">
        <description><![CDATA[Proxy Group class ( Content Class Group )]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="property-read" description="" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="15" name="property" description="" type="\string[]" variable="$name">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="15" name="property" description="" type="\string[]" variable="$description">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="15" name="property" description="" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="15" name="property" description="" type="mixed" variable="$created">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="15" name="property" description="" type="mixed" variable="$creatorId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="15" name="property" description="" type="mixed" variable="$modified">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="15" name="property" description="" type="mixed" variable="$modifierId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="15" name="property-read" description="Appended items will not be stored, use TypeService-&gt;link()" type="\ezp\Content\Type[]" variable="$types">
          <type by_reference="false">\ezp\Content\Type[]</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type\Group" line="35" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="31" name="param" description="" type="\ezp\Content\Type\Service" variable="$service">
            <type by_reference="false">\ezp\Content\Type\Service</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="35">
          <name>$service</name>
          <default><![CDATA[]]></default>
          <type>Service</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\Type\Group" line="46" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Returns definition of the content type group object, atm: permissions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="access" description="private"/>
          <tag line="40" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\Type\Group" line="54" package="Default">
        <name>lazyLoad</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type\Group" line="66" package="Default">
        <name>getTypes</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="return" description="" type="\ezp\Content\Type[]">
            <type by_reference="false">\ezp\Content\Type[]</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Type/Group/Concrete.php" hash="26ac857585f889337a056397110120ad">
    <parse_markers>
      <critical line="32" code="50019">No short description for property $readWriteProperties</critical>
      <critical line="46" code="50019">No short description for property $dynamicProperties</critical>
      <critical line="53" code="50019">No short description for property $types</critical>
      <error line="81" code="50012">No short description for method getTypes()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Type/Group/Concrete.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="ReadOnlyCollection">ezp\Base\Collection\ReadOnly</namespace-alias>
    <namespace-alias name="Group">ezp\Content\Type\Group</namespace-alias>
    <namespace-alias name="GroupValue">ezp\Persistence\Content\Type\Group</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Type\Group" line="30" package="Default">
      <name>Concrete</name>
      <full_name>\ezp\Content\Type\Group\Concrete</full_name>
      <extends>\ezp\Base\Model</extends>
      <extends>\ezp\Content\Type\Group</extends>
      <docblock line="16">
        <description><![CDATA[Concrete Group class ( Content Class Group )]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="16" name="property-read" description="" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property" description="" type="\string[]" variable="$name">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="16" name="property" description="" type="\string[]" variable="$description">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="16" name="property" description="" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$created">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$creatorId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$modified">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$modifierId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="Appended items will not be stored, use TypeService-&gt;link()" type="\ezp\Content\Type[]" variable="$types">
          <type by_reference="false">\ezp\Content\Type[]</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'name' => true,
        'description' => true,
        'identifier' => true,
        'created' => true,
        'creatorId' => true,
        'modified' => true,
        'modifierId' => true,
    )]]></default>
        <docblock line="32">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="List of read/Write VO properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="49" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array(
        'types' => true,
    )]]></default>
        <docblock line="46">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="var" description="List of dynamic properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="56" package="Default">
        <name>$types</name>
        <default><![CDATA[]]></default>
        <docblock line="53">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="var" description="" type="\ezp\Content\Type[]">
            <type by_reference="false">\ezp\Content\Type[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type\Group" line="61" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Construct object with all internal objects]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\Type\Group" line="73" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Returns definition of the content type group object, atm: permissions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="access" description="private"/>
          <tag line="67" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type\Group" line="84" package="Default">
        <name>getTypes</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="return" description="" type="\ezp\Content\Type[]">
            <type by_reference="false">\ezp\Content\Type[]</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Type/Proxy.php" hash="3c215f6a8c44518fa19f10e9e12a6056">
    <parse_markers>
      <error line="40" code="50010">No DocBlock was found for method __construct()</error>
      <error line="56" code="50012">No short description for method getFields()</error>
      <error line="65" code="50012">No short description for method getGroups()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Type/Proxy.php</error>
    </parse_markers>
    <namespace-alias name="ModelProxy">ezp\Base\Proxy\Model</namespace-alias>
    <namespace-alias name="Type">ezp\Content\Type</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Type" line="38" package="Default">
      <name>Proxy</name>
      <full_name>\ezp\Content\Type\Proxy</full_name>
      <extends>\ezp\Base\Proxy\Model</extends>
      <extends>\ezp\Content\Type</extends>
      <docblock line="14">
        <description><![CDATA[This class represents a Proxy Content Type]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="14" name="property-read" description="" type="int" variable="$status">
          <type by_reference="false">int</type>
        </tag>
        <tag line="14" name="property" description="" type="\string[]" variable="$name">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="14" name="property" description="" type="\string[]" variable="$description">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="14" name="property" description="" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property" description="" type="mixed" variable="$created">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="14" name="property" description="" type="mixed" variable="$creatorId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="14" name="property" description="" type="mixed" variable="$modified">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="14" name="property" description="" type="mixed" variable="$modifierId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="14" name="property-read" description="" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property" description="" type="string" variable="$urlAliasSchema">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property" description="" type="string" variable="$nameSchema">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property" description="" type="bool" variable="$isContainer">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="14" name="property" description="" type="int" variable="$initialLanguageId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="14" name="property" description="" type="bool" variable="$defaultAlwaysAvailable">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="14" name="property" description="Valid values are found at {@link \ezp\Content\Location::SORT_FIELD_*}" type="int" variable="$sortField">
          <type by_reference="false">int</type>
        </tag>
        <tag line="14" name="property" description="Valid values are {@link \ezp\Content\Location::SORT_ORDER_*}" type="int" variable="$sortOrder">
          <type by_reference="false">int</type>
        </tag>
        <tag line="14" name="property-read" description="" type="\int[]" variable="$groupIds">
          <type by_reference="false">\int[]</type>
        </tag>
        <tag line="14" name="property" description="Appending items after it has been created has no effect, use TypeService-&gt;addFieldDefinition()" type="\ezp\Content\Type\FieldDefinition[]" variable="$fields">
          <type by_reference="false">\ezp\Content\Type\FieldDefinition[]</type>
        </tag>
        <tag line="14" name="property-read" description="Appended items after it has been created has no effect, use TypeService-&gt;link()" type="\ezp\Content\Type\Group[]" variable="$groups">
          <type by_reference="false">\ezp\Content\Type\Group[]</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="40">
        <name>__construct</name>
        <type>function</type>
        <argument line="40">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="40">
          <name>$service</name>
          <default><![CDATA[]]></default>
          <type>Service</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\Type" line="51" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Returns definition of the content type object, atm: permissions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="access" description="private"/>
          <tag line="45" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="59" package="Default">
        <name>getFields</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="return" description="" type="\ezp\Content\Type\FieldDefinition[]">
            <type by_reference="false">\ezp\Content\Type\FieldDefinition[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="68" package="Default">
        <name>getGroups</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="return" description="" type="\ezp\Content\Type\Group[]">
            <type by_reference="false">\ezp\Content\Type\Group[]</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Type/Group.php" hash="32497ab011bd851a8948c5126b8f6fba">
    <parse_markers>
      <error line="32" code="50012">No short description for method getTypes()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Type/Group.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="ModelDefinition">ezp\Base\ModelDefinition</namespace-alias>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="GroupValue">ezp\Persistence\Content\Type\Group</namespace-alias>
    <interface namespace="ezp\Content\Type" line="30" package="Default">
      <name>Group</name>
      <full_name>\ezp\Content\Type\Group</full_name>
      <extends>\ezp\Base\ModelDefinition</extends>
      <docblock line="16">
        <description><![CDATA[Group class ( Content Class Group )]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="16" name="property-read" description="" type="int" variable="$id">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property" description="" type="\string[]" variable="$name">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="16" name="property" description="" type="\string[]" variable="$description">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="16" name="property" description="" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$created">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$creatorId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$modified">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$modifierId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="Appended items will not be stored, use TypeService-&gt;link()" type="\ezp\Content\Type[]" variable="$types">
          <type by_reference="false">\ezp\Content\Type[]</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="35" package="Default">
        <name>getTypes</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="return" description="" type="\ezp\Content\Type[]">
            <type by_reference="false">\ezp\Content\Type[]</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/Content/Type/Concrete.php" hash="6af8b1066a107fd053d05f8540c71fad">
    <parse_markers>
      <critical line="42" code="50019">No short description for property $readWriteProperties</critical>
      <critical line="66" code="50019">No short description for property $dynamicProperties</critical>
      <critical line="74" code="50019">No short description for property $fields</critical>
      <critical line="79" code="50019">No short description for property $groups</critical>
      <error line="108" code="50012">No short description for method getFields()</error>
      <error line="116" code="50012">No short description for method getGroups()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Type/Concrete.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="ReadOnlyCollection">ezp\Base\Collection\ReadOnly</namespace-alias>
    <namespace-alias name="Type">ezp\Content\Type</namespace-alias>
    <namespace-alias name="TypeValue">ezp\Persistence\Content\Type</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Type" line="40" package="Default">
      <name>Concrete</name>
      <full_name>\ezp\Content\Type\Concrete</full_name>
      <extends>\ezp\Base\Model</extends>
      <extends>\ezp\Content\Type</extends>
      <docblock line="16">
        <description><![CDATA[Concrete Content Type class]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="16" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="" type="int" variable="$status">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property" description="" type="\string[]" variable="$name">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="16" name="property" description="" type="\string[]" variable="$description">
          <type by_reference="false">\string[]</type>
        </tag>
        <tag line="16" name="property" description="" type="string" variable="$identifier">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$created">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$creatorId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$modified">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="mixed" variable="$modifierId">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property-read" description="" type="string" variable="$remoteId">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property" description="" type="string" variable="$urlAliasSchema">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property" description="" type="string" variable="$nameSchema">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property" description="" type="bool" variable="$isContainer">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="16" name="property" description="" type="int" variable="$initialLanguageId">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property" description="" type="bool" variable="$defaultAlwaysAvailable">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="16" name="property" description="Valid values are found at {@link \ezp\Content\Location::SORT_FIELD_*}" type="int" variable="$sortField">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property" description="Valid values are {@link \ezp\Content\Location::SORT_ORDER_*}" type="int" variable="$sortOrder">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property-read" description="" type="\int[]" variable="$groupIds">
          <type by_reference="false">\int[]</type>
        </tag>
        <tag line="16" name="property-read" description="Appending items after it has been created has no effect, use TypeService-&gt;addFieldDefinition()" type="\ezp\Content\Type\FieldDefinition[]" variable="$fields">
          <type by_reference="false">\ezp\Content\Type\FieldDefinition[]</type>
        </tag>
        <tag line="16" name="property-read" description="Appended items after it has been created has no effect, use TypeService-&gt;link()" type="\ezp\Content\Type\Group[]" variable="$groups">
          <type by_reference="false">\ezp\Content\Type\Group[]</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'status' => false,
        'name' => true,
        'description' => true,
        'identifier' => true,
        'created' => true,
        'creatorId' => true,
        'modified' => true,
        'modifierId' => true,
        'remoteId' => false,
        'urlAliasSchema' => true,
        'nameSchema' => true,
        'isContainer' => true,
        'initialLanguageId' => true,
        'groupIds' => false,
        'defaultAlwaysAvailable' => true,
        'sortField' => true,
        'sortOrder' => true,
    )]]></default>
        <docblock line="42">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="List of VO properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="69" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array(
        'fields' => true,
        'groups' => true,
    )]]></default>
        <docblock line="66">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="var" description="List of dynamic properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="77" package="Default">
        <name>$fields</name>
        <default><![CDATA[]]></default>
        <docblock line="74">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="var" description="" type="\ezp\Content\Type\FieldDefinition[]">
            <type by_reference="false">\ezp\Content\Type\FieldDefinition[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="82" package="Default">
        <name>$groups</name>
        <default><![CDATA[]]></default>
        <docblock line="79">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="var" description="" type="\ezp\Content\Type\Group[]">
            <type by_reference="false">\ezp\Content\Type\Group[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="87" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[Construct type and init all internal objects]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Content\Type" line="100" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="94">
          <description><![CDATA[Returns definition of the content type object, atm: permissions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="access" description="private"/>
          <tag line="94" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="111" package="Default">
        <name>getFields</name>
        <type>function</type>
        <docblock line="108">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="return" description="" type="\ezp\Base\Collection\ReadOnly[ezp\Content\Type\FieldDefinition]">
            <type by_reference="false">\ezp\Base\Collection\ReadOnly[ezp\Content\Type\FieldDefinition]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="119" package="Default">
        <name>getGroups</name>
        <type>function</type>
        <docblock line="116">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="116" name="return" description="" type="\ezp\Base\Collection\ReadOnly[ezp\Content\Type\Group]">
            <type by_reference="false">\ezp\Base\Collection\ReadOnly[ezp\Content\Type\Group]</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Content/Type/Service.php" hash="03d7cd8ba7e3019ca67e9869ab67d360">
    <parse_markers>
      <error line="43" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $group in createGroup()</error>
      <error line="92" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $group in updateGroup()</error>
      <error line="111" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $group in deleteGroup()</error>
      <error line="126" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $type in create()</error>
      <error line="126" code="50015">Argument $linkGroups is missing from the Docblock of create()</error>
      <error line="126" code="50015">Argument $addFields is missing from the Docblock of create()</error>
      <error line="190" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $type in createAndPublish()</error>
      <error line="190" code="50015">Argument $linkGroups is missing from the Docblock of createAndPublish()</error>
      <error line="190" code="50015">Argument $addFields is missing from the Docblock of createAndPublish()</error>
      <error line="294" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $type in update()</error>
      <error line="322" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $type in delete()</error>
      <error line="358" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $type in unlink()</error>
      <error line="399" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $type in link()</error>
      <error line="427" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $type in addFieldDefinition()</error>
      <error line="427" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in addFieldDefinition()</error>
      <error line="467" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $type in removeFieldDefinition()</error>
      <error line="467" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in removeFieldDefinition()</error>
      <error line="500" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $type in updateFieldDefinition()</error>
      <error line="500" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in updateFieldDefinition()</error>
      <error line="533" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $type in publish()</error>
      <error line="550" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $type in createDraft()</error>
      <error line="585" code="50012">No short description for method buildType()</error>
      <error line="585" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $vo in buildType()</error>
      <error line="616" code="50012">No short description for method buildGroup()</error>
      <error line="616" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $vo in buildGroup()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Content/Type/Service.php</error>
    </parse_markers>
    <namespace-alias name="BaseService">ezp\Base\Service</namespace-alias>
    <namespace-alias name="Forbidden">ezp\Base\Exception\Forbidden</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="LazyType">ezp\Base\Collection\LazyType</namespace-alias>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="ReadOnlyCollection">ezp\Base\Collection\ReadOnly</namespace-alias>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="Type">ezp\Content\Type</namespace-alias>
    <namespace-alias name="ConcreteType">ezp\Content\Type\Concrete</namespace-alias>
    <namespace-alias name="ConcreteGroup">ezp\Content\Type\Group\Concrete</namespace-alias>
    <namespace-alias name="ProxyGroup">ezp\Content\Type\Group\Proxy</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="FieldTypeValue">ezp\Content\FieldType\Value</namespace-alias>
    <namespace-alias name="TypeValue">ezp\Persistence\Content\Type</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Type\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Type\UpdateStruct</namespace-alias>
    <namespace-alias name="GroupValue">ezp\Persistence\Content\Type\Group</namespace-alias>
    <namespace-alias name="GroupCreateStruct">ezp\Persistence\Content\Type\Group\CreateStruct</namespace-alias>
    <namespace-alias name="GroupUpdateStruct">ezp\Persistence\Content\Type\Group\UpdateStruct</namespace-alias>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Content\Type" line="41" package="Default">
      <name>Service</name>
      <full_name>\ezp\Content\Type\Service</full_name>
      <extends>\ezp\Base\Service</extends>
      <docblock line="36">
        <description><![CDATA[Content Service, extends repository with content specific operations]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="36" name="todo" description="Figure out which methods should manipulate object provided or add doc on having to re fetch object."/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="52" package="Default">
        <name>createGroup</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Crate a Content Type Group object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="" type="\ezp\Content\Type\Group" variable="$group">
            <type by_reference="false">\ezp\Content\Type\Group</type>
          </tag>
          <tag line="43" name="return" description="" type="\ezp\Content\Type\Group">
            <type by_reference="false">\ezp\Content\Type\Group</type>
          </tag>
          <tag line="43" name="throws" description="If property is missing or has a value of null" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="43" name="todo" description="Validate that identifier is not already in use"/>
          <tag line="43" name="throws" description="If user does not have access to create provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>Group</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="70" package="Default">
        <name>loadGroup</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Get a Content Type Group object by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="param" description="" type="int" variable="$groupId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="63" name="return" description="" type="\ezp\Content\Type\Group">
            <type by_reference="false">\ezp\Content\Type\Group</type>
          </tag>
          <tag line="63" name="throws" description="If object can not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="83" package="Default">
        <name>loadAllGroups</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Get all Content Type Groups]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="return" description="" type="\ezp\Content\Type\Group[]">
            <type by_reference="false">\ezp\Content\Type\Group[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="101" package="Default">
        <name>updateGroup</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Update a Content Type Group object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="" type="\ezp\Content\Type\Group" variable="$group">
            <type by_reference="false">\ezp\Content\Type\Group</type>
          </tag>
          <tag line="92" name="throws" description="If property is missing or has a value of null" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="92" name="throws" description="If object can not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="92" name="todo" description="Validate that identifier is not already in use (if it has been changed?)"/>
          <tag line="92" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>Group</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="118" package="Default">
        <name>deleteGroup</name>
        <type>function</type>
        <docblock line="111">
          <description><![CDATA[Update a Content Type Group object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="111" name="param" description="" type="\ezp\Content\Type\Group" variable="$group">
            <type by_reference="false">\ezp\Content\Type\Group</type>
          </tag>
          <tag line="111" name="throws" description="If object can not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="111" name="throws" description="If user does not have access to delete provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="118">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>Group</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="139" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="126">
          <description><![CDATA[Create a Content Type object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="126" name="param" description="    * @param \ezp\Content\Type\Group[] $linkGroups Required array of Type\Group objects to link type with (must contain one)     * @param \ezp\Content\Type\FieldDefinition[] $addFields Optional array of fields to add on new Type" type="\ezp\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="126" name="return" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="126" name="throws" description="If property is missing or has a empty value" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="126" name="throws" description="If a group is _not_ persisted, or if type / fields is" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
          <tag line="126" name="throws" description="If $type-&gt;identifier is in use" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="126" name="throws" description="If $field-&gt;identifier is used in several fields" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="126" name="throws" description="If user does not have access to create provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
        <argument line="139">
          <name>$linkGroups</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="139">
          <name>$addFields</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="199" package="Default">
        <name>createAndPublish</name>
        <type>function</type>
        <docblock line="190">
          <description><![CDATA[Create a Content Type object and publish in one operation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="190" name="param" description="    * @param \ezp\Content\Type\Group[] $linkGroups Required array of Type\Group objects to link type with (must contain one)     * @param \ezp\Content\Type\Field[] $addFields Optional array of fields to add on new Type" type="\ezp\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="190" name="return" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="190" name="uses" description="\ezp\Content\Type\create()" refers="\ezp\Content\Type\create()"/>
        </docblock>
        <argument line="199">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
        <argument line="199">
          <name>$linkGroups</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="199">
          <name>$addFields</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="212" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="205">
          <description><![CDATA[Get a Content Type object by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="205" name="param" description="" type="int" variable="$typeId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="205" name="return" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="205" name="throws" description="If type can not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="212">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="224" package="Default">
        <name>loadDraft</name>
        <type>function</type>
        <docblock line="217">
          <description><![CDATA[Get a Content Type object draft by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="217" name="param" description="" type="int" variable="$typeId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="217" name="return" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="217" name="throws" description="If type draft can not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="224">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="235" package="Default">
        <name>loadByGroupId</name>
        <type>function</type>
        <docblock line="229">
          <description><![CDATA[Get Content Type objects by group Id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="229" name="param" description="" type="int" variable="$groupId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="229" name="return" description="" type="\ezp\Content\Type[]">
            <type by_reference="false">\ezp\Content\Type[]</type>
          </tag>
        </docblock>
        <argument line="235">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="250" package="Default">
        <name>loadDraftsByGroupId</name>
        <type>function</type>
        <docblock line="244">
          <description><![CDATA[Get Content Type draft objects by group Id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="244" name="param" description="" type="int" variable="$groupId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="244" name="return" description="" type="\ezp\Content\Type[]">
            <type by_reference="false">\ezp\Content\Type[]</type>
          </tag>
        </docblock>
        <argument line="250">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="266" package="Default">
        <name>loadByIdentifier</name>
        <type>function</type>
        <docblock line="259">
          <description><![CDATA[Get a Content Type by identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="259" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="259" name="return" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="259" name="throws" description="If object can not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="266">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\Type" line="277" package="Default">
        <name>loadIdIfExistsByIdentifier</name>
        <type>function</type>
        <docblock line="271">
          <description><![CDATA[Check if content type exists by identifier, return id if so.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="271" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="271" name="return" description="" type="int|false">
            <type by_reference="false">int</type>
            <type by_reference="false">false</type>
          </tag>
        </docblock>
        <argument line="277">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="308" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="294">
          <description><![CDATA[Update a Content Type object]]></description>
          <long-description><![CDATA[<p>Does not update fields (fieldDefinitions), use {@link updateFieldDefinition()} to update them.</p>]]></long-description>
          <tag line="294" name="param" description="" type="\ezp\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="294" name="throws" description="If property is missing or has a value of null" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="294" name="throws" description="If object can not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="294" name="throws" description="If $type-&gt;identifier is used on another type object" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="294" name="todo" description="Consider adding fieldDefinitions on update struct when we have dirty state and knowledge about which&#10;one has been updated (not added / removed, there are separate api's for that). But remember to validate&#10;fieldDefinition-&gt;identifier when this is added."/>
          <tag line="294" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="308">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="329" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="322">
          <description><![CDATA[Delete a Content Type object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="322" name="param" description="" type="\ezp\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="322" name="throws" description="If object can not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="322" name="throws" description="If user does not have access to delete provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="329">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="350" package="Default">
        <name>copy</name>
        <type>function</type>
        <docblock line="337">
          <description><![CDATA[Copy Type incl fields and groupIds to a new Type object]]></description>
          <long-description><![CDATA[<p>New Type will have $userId as creator / modifier, created / modified should be updated with current time,
updated remoteId and identifier should be appended with '_' + unique string.</p>]]></long-description>
          <tag line="337" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="337" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="337" name="return" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="337" name="throws" description="If user or published type is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="337" name="todo" description="Change to take objects in input? ( more consistent with rest and removes needs for lots of NotFound possibilities )"/>
          <tag line="337" name="throws" description="If user does not have access to create provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="350">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="350">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="369" package="Default">
        <name>unlink</name>
        <type>function</type>
        <docblock line="358">
          <description><![CDATA[Un-Link a content type from a group ( remove a group from a type )]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="358" name="param" description="" type="\ezp\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="358" name="param" description="" type="\ezp\Content\Type\Group" variable="$group">
            <type by_reference="false">\ezp\Content\Type\Group</type>
          </tag>
          <tag line="358" name="throws" description="If type or group is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="358" name="throws" description="If $group is not on type or type is not on $group" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="358" name="throws" description="If $group or $type is missing id value" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="358" name="throws" description="If $group is the last group on type" type="\ezp\Base\Exception\BadRequest">
            <type by_reference="false">\ezp\Base\Exception\BadRequest</type>
          </tag>
          <tag line="358" name="throws" description="If user does not have access to (un)link provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="369">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
        <argument line="369">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>Group</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="408" package="Default">
        <name>link</name>
        <type>function</type>
        <docblock line="399">
          <description><![CDATA[Link a content type to a group ( add a group to a type )]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="399" name="param" description="" type="\ezp\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="399" name="param" description="" type="\ezp\Content\Type\Group" variable="$group">
            <type by_reference="false">\ezp\Content\Type\Group</type>
          </tag>
          <tag line="399" name="throws" description="If type or group is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="399" name="throws" description="If $group does not have id value" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="399" name="throws" description="If user does not have access to link provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="408">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
        <argument line="408">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>Group</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="437" package="Default">
        <name>addFieldDefinition</name>
        <type>function</type>
        <docblock line="427">
          <description><![CDATA[Adds a new field definition to an existing Type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="427" name="param" description="" type="\ezp\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="427" name="param" description="" type="\ezp\Content\Type\FieldDefinition" variable="$field">
            <type by_reference="false">\ezp\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="427" name="throws" description="If field has id already" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="427" name="throws" description="If type is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="427" name="throws" description="If $field-&gt;identifier is used in existing field on $type" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="427" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="437">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
        <argument line="437">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="477" package="Default">
        <name>removeFieldDefinition</name>
        <type>function</type>
        <docblock line="467">
          <description><![CDATA[Remove a field definition from an existing Type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="467" name="param" description="" type="\ezp\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="467" name="param" description="" type="\ezp\Content\Type\FieldDefinition" variable="$field">
            <type by_reference="false">\ezp\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="467" name="throws" description="If $field-&gt;id is false" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="467" name="throws" description="If field/type is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="467" name="throws" description="If $field is not an group on type" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="467" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="477">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
        <argument line="477">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="510" package="Default">
        <name>updateFieldDefinition</name>
        <type>function</type>
        <docblock line="500">
          <description><![CDATA[Remove a field definition from an existing Type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="500" name="param" description="" type="\ezp\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="500" name="param" description="" type="\ezp\Content\Type\FieldDefinition" variable="$field">
            <type by_reference="false">\ezp\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="500" name="throws" description="If $field-&gt;id is false" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
          <tag line="500" name="throws" description="If field/type is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="500" name="throws" description="If $field-&gt;identifier is used in existing field on $type" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="500" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="510">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
        <argument line="510">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="542" package="Default">
        <name>publish</name>
        <type>function</type>
        <docblock line="533">
          <description><![CDATA[Publish Type and update content objects.]]></description>
          <long-description><![CDATA[<p>Updates content objects, depending on the changed field definitions.</p>]]></long-description>
          <tag line="533" name="param" description="The type draft to publish" type="\ezp\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="533" name="throws" description="If type draft is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="533" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="542">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Content\Type" line="559" package="Default">
        <name>createDraft</name>
        <type>function</type>
        <docblock line="550">
          <description><![CDATA[Creates a new draft for the published content type $type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="550" name="param" description="The type to create a draft for" type="\ezp\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
          <tag line="550" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
          <tag line="550" name="throws" description="If $type is not persisted" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
          <tag line="550" name="throws" description="If $type doesn't have the DEFINED status" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
          <tag line="550" name="throws" description="If draft already exists" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
          <tag line="550" name="return" description="A new draft for the provided type" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
        </docblock>
        <argument line="559">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\Type" line="589" package="Default">
        <name>buildType</name>
        <type>function</type>
        <docblock line="585">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="585" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$vo">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="585" name="return" description="" type="\ezp\Content\Type">
            <type by_reference="false">\ezp\Content\Type</type>
          </tag>
        </docblock>
        <argument line="589">
          <name>$vo</name>
          <default><![CDATA[]]></default>
          <type>TypeValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Content\Type" line="620" package="Default">
        <name>buildGroup</name>
        <type>function</type>
        <docblock line="616">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="616" name="param" description="" type="\ezp\Persistence\Content\Type\Group" variable="$vo">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group</type>
          </tag>
          <tag line="616" name="return" description="" type="\ezp\Content\Type\Group">
            <type by_reference="false">\ezp\Content\Type\Group</type>
          </tag>
        </docblock>
        <argument line="620">
          <name>$vo</name>
          <default><![CDATA[]]></default>
          <type>GroupValue</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Io/ContentType.php" hash="55dae04a82d70657e1db839b148e8233">
    <parse_markers>
      <error line="33" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/ContentType.php</error>
    </parse_markers>
    <namespace-alias name="finfo">finfo</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io" line="19" package="Default">
      <name>ContentType</name>
      <full_name>\ezp\Io\ContentType</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[This struct describes a file content type, as described in RFC 2045, RFC 2046,
RFC 2047, RFC 4288, RFC 4289 and RFC 2049.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="25" package="Default">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[The type (audio, video, text, image)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$subType</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[The subtype (mp3, mp4, plain, jpeg, ...)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="33">
        <name>__construct</name>
        <type>function</type>
        <argument line="33">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="33">
          <name>$subType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="42" package="Default">
        <name>__toString</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Returns the ContentType's string representation: type/subtype]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Io" line="53" package="Default">
        <name>getFromPath</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Returns a ContentType object from a file path, using fileinfo]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="return" description="" type="\ezp\Io\ContentType">
            <type by_reference="false">\ezp\Io\ContentType</type>
          </tag>
          <tag line="47" name="todo" description="Remove hardcoded dependency on fileinfo, use injection"/>
        </docblock>
        <argument line="53">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Io/DirHandler.php" hash="00f8099d2a16d32c68a9c2544ef6b373">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/DirHandler.php</error>
    </parse_markers>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="DirLogic">ezp\Io\Exception\DirLogic</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io" line="17" package="Default">
      <name>DirHandler</name>
      <full_name>\ezp\Io\DirHandler</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Handles directory operations]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Io" line="30" package="Default">
        <name>mkdir</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Creates the directory $dir with permissions $perm (if provided).]]></description>
          <long-description><![CDATA[<p>If $recursive is true it will create any missing parent directories, just like 'mkdir -p'.
If $dir already exists on the file system, this method will return false.</p>]]></long-description>
          <tag line="19" name="param" description="The path of to be created directory" type="string" variable="$dir">
            <type by_reference="false">string</type>
          </tag>
          <tag line="19" name="param" description="Permission, in octal text (i.e. 0777)" type="string" variable="$perm">
            <type by_reference="false">string</type>
          </tag>
          <tag line="19" name="param" description="" type="bool" variable="$recursive">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="19" name="return" description="True in case of success, false otherwise." type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="19" name="throws" description="If any problem occurs with mkdir underlying operation" type="\ezp\Io\Exception\DirLogic">
            <type by_reference="false">\ezp\Io\Exception\DirLogic</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$dir</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$perm</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$recursive</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Io" line="61" package="Default">
        <name>directoryPermission</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Returns the default permissions to use for directories.]]></description>
          <long-description><![CDATA[<p>The permission is converted from octal text (i.e. 0777) to decimal value.</p>]]></long-description>
          <tag line="55" name="return" description="" type="int|float">
            <type by_reference="false">int</type>
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Io/FileInfo.php" hash="75a276eaa456b28d5a0c36ab4d60f032">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/FileInfo.php</error>
    </parse_markers>
    <namespace-alias name="ContentType">ezp\Io\ContentType</namespace-alias>
    <namespace-alias name="SplFileInfo">SplFileInfo</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io" line="17" package="Default">
      <name>FileInfo</name>
      <full_name>\ezp\Io\FileInfo</full_name>
      <extends>\SplFileInfo</extends>
      <docblock line="14">
        <description><![CDATA[FileInfo allows to extract useful information from a file.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" package="Default">
        <name>$contentType</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Content type (aka MimeType) for file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="\ezp\Io\ContentType">
            <type by_reference="false">\ezp\Io\ContentType</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="31" package="Default">
        <name>getContentType</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Returns content type (aka MimeType) for file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="return" description="" type="\ezp\Io\ContentType">
            <type by_reference="false">\ezp\Io\ContentType</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="46" package="Default">
        <name>getExtension</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[Returns file extension, without the dot.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Io/BinaryFileUpdateStruct.php" hash="12c926bb79abbd0b12f591c26b18cf12">
    <parse_markers>
      <error line="36" code="50018">No DocBlock was found for property $inputStream</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/BinaryFileUpdateStruct.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Io" line="16" package="Default">
      <name>BinaryFileUpdateStruct</name>
      <full_name>\ezp\Io\BinaryFileUpdateStruct</full_name>
      <extends>\ezp\Io\BinaryFile</extends>
      <docblock line="12">
        <description><![CDATA[Update struct for BinaryFile objects]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="36">
        <name>$inputStream</name>
        <default><![CDATA[]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="22" package="Default">
        <name>getInputStream</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Returns the file's input resource]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="return" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="31" package="Default">
        <name>setInputStream</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Sets the file's input resource]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="resource" variable="$inputStream">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$inputStream</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Io/DirPath.php" hash="c31bb4410223bd3c8708682c12c22a67">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/DirPath.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Io" line="15" package="Default">
      <name>DirPath</name>
      <full_name>\ezp\Io\DirPath</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Utility class to deal with dir paths]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Io" line="26" package="Default">
        <name>clean</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Cleans a directory path.]]></description>
          <long-description><![CDATA[<p>Removes or add trailing slash in $path if necessary, according to $includeEndSeparator flag.</p>]]></long-description>
          <tag line="17" name="param" description="The directory path. Can also be an array of path. If an array of string is provided, then paths will be concatenated" type="string|array" variable="$path">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="17" name="param" description="" type="bool" variable="$includeEndSeparator">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="17" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="26">
          <name>$includeEndSeparator</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Io/FileHandler.php" hash="723ad57f2172647b21f8d8a5d92d27f5">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/FileHandler.php</error>
    </parse_markers>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="FileLogic">ezp\Io\Exception\FileLogic</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io" line="17" package="Default">
      <name>FileHandler</name>
      <full_name>\ezp\Io\FileHandler</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Description of FileHandler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Io" line="27" package="Default">
        <name>copy</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Copies $sourceFilename to $destinationFilename]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="param" description="" type="string" variable="$sourceFilename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="19" name="param" description="" type="string" variable="$destinationFilename">
            <type by_reference="false">string</type>
          </tag>
          <tag line="19" name="return" description="True in case of success, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="19" name="throws" description="If any problem occurs with mkdir underlying operation" type="\ezp\Io\Exception\FileLogic">
            <type by_reference="false">\ezp\Io\Exception\FileLogic</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$sourceFilename</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="27">
          <name>$destinationFilename</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Io" line="51" package="Default">
        <name>filePermission</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Returns the default permissions to use for files.]]></description>
          <long-description><![CDATA[<p>The permission is converted from octal text (i.e. 0777) to decimal value.</p>]]></long-description>
          <tag line="45" name="return" description="" type="int|float">
            <type by_reference="false">int</type>
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Io/Storage/Legacy/FileResourceProvider.php" hash="6be50046bced2f1a4d192bea39b7a081">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/Storage/Legacy/FileResourceProvider.php</error>
    </parse_markers>
    <interface namespace="ezp\Io\Storage\Legacy" line="16" package="Default">
      <name>FileResourceProvider</name>
      <full_name>\ezp\Io\Storage\Legacy\FileResourceProvider</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[This interface handles providing of a file resource based on a cluster handler / cluster file]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage\Legacy" line="23" package="Default">
        <name>getResource</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Returns a file resource for $clusterFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="Note: no hinting as not all handlers implement the interface" type="\ezp\Io\Storage\Legacy\eZClusterFileHandlerInterface" variable="$clusterFile">
            <type by_reference="false">\ezp\Io\Storage\Legacy\eZClusterFileHandlerInterface</type>
          </tag>
          <tag line="18" name="return" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$clusterFile</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Io/Storage/Legacy/FileResourceProvider/eZFSFileHandler.php" hash="5f4f000d90241508e34cb7031520bb88">
    <parse_markers>
      <error line="20" code="50014">Name of argument $file does not match with the DocBlock's name $clusterFile in getResource()</error>
      <notice line="20" code="50013">Parameter $clusterFile could not be found in getResource()</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/Storage/Legacy/FileResourceProvider/eZFSFileHandler.php</error>
    </parse_markers>
    <namespace-alias name="FileResourceProvider">ezp\Io\Storage\Legacy\FileResourceProvider</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io\Storage\Legacy\FileResourceProvider" line="18" package="Default">
      <name>eZFSFileHandler</name>
      <full_name>\ezp\Io\Storage\Legacy\FileResourceProvider\eZFSFileHandler</full_name>
      <extends/>
      <extends>\ezp\Io\Storage\Legacy\FileResourceProvider</extends>
      <docblock line="14">
        <description><![CDATA[This class provides file resource functionnality for a cluster file]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage\Legacy\FileResourceProvider" line="25" package="Default">
        <name>getResource</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Returns a read file resource for $clusterFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="Note: no hinting as not all handlers implement the interface" type="\ezp\Io\Storage\Legacy\FileResourceProvider\eZClusterFileHandlerInterface" variable="$clusterFile">
            <type by_reference="false">\ezp\Io\Storage\Legacy\FileResourceProvider\eZClusterFileHandlerInterface</type>
          </tag>
          <tag line="20" name="return" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$file</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Io/Storage/Legacy/FileResourceProvider/eZFS2FileHandler.php" hash="e5f3717676fcde69c3c7d8e9bad719a2">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/Storage/Legacy/FileResourceProvider/eZFS2FileHandler.php</error>
    </parse_markers>
    <namespace-alias name="FileResourceProvider">ezp\Io\Storage\Legacy\FileResourceProvider</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io\Storage\Legacy\FileResourceProvider" line="18" package="Default">
      <name>eZFS2FileHandler</name>
      <full_name>\ezp\Io\Storage\Legacy\FileResourceProvider\eZFS2FileHandler</full_name>
      <extends>\ezp\Io\Storage\Legacy\FileResourceProvider\eZFSFileHandler</extends>
      <docblock line="14">
        <description><![CDATA[This class provides file resource functionnality for a cluster file]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </class>
  </file>
  <file path="ezp/Io/Storage/Dispatcher.php" hash="3026e7ba3fd7424388307f00a4463f8b">
    <parse_markers>
      <error line="80" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $file in create()</error>
      <error line="103" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $updateFile in update()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/Storage/Dispatcher.php</error>
    </parse_markers>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="IoHandlerInterface">ezp\Io\Handler</namespace-alias>
    <namespace-alias name="BinaryFileUpdateStruct">ezp\Io\BinaryFileUpdateStruct</namespace-alias>
    <namespace-alias name="BinaryFileCreateStruct">ezp\Io\BinaryFileCreateStruct</namespace-alias>
    <namespace-alias name="DateTime">DateTime</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io\Storage" line="21" package="Default">
      <name>Dispatcher</name>
      <full_name>\ezp\Io\Storage\Dispatcher</full_name>
      <extends/>
      <extends>\ezp\Io\Handler</extends>
      <docblock line="17">
        <description><![CDATA[Handler interface for handling of binary files I/O]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="28" package="Default">
        <name>$config</name>
        <default><![CDATA[array()]]></default>
        <docblock line="23">
          <description><![CDATA[Io\Storage handler instances, {@see __construct()}]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="53" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Creates new object and validates $config param]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="param" description="Structure of handlers that follows the following format: array( 'handlers' =&gt; array( 'handler' =&gt; Handler, .. ), 'default' =&gt; Handler ) ie: array( 'default' =&gt; $handler1, 'handlers' =&gt; array( array( 'handler' =&gt; $handler2, // match conditions: 'prefix' =&gt; 'var/original/', 'suffix' =&gt; '.gif,.jpg', 'contains' =&gt; 'image-versioned' ) ) )" type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
          <tag line="30" name="throws" description="If $config does not contain default handler that implements Handler, handlers is unset or empty (hence you could have used default directly), one of the 'patterns' is unset or empty (hence it could have been default) or a 'handler' item does not implement Handler" type="\ezp\Base\Exception\InvalidArgumentType">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentType</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$config</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="87" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="80">
          <description><![CDATA[Creates and stores a new BinaryFile based on the BinaryFileCreateStruct $file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="param" description="" type="\ezp\Io\BinaryFileCreateStruct" variable="$file">
            <type by_reference="false">\ezp\Io\BinaryFileCreateStruct</type>
          </tag>
          <tag line="80" name="return" description="The newly created BinaryFile object" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="80" name="uses" description="\ezp\Io\Handler::create()" refers="\ezp\Io\Handler::create()"/>
        </docblock>
        <argument line="87">
          <name>$file</name>
          <default><![CDATA[]]></default>
          <type>BinaryFileCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="98" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Deletes the existing BinaryFile with path $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="92" name="uses" description="\ezp\Io\Handler::delete()" refers="\ezp\Io\Handler::delete()"/>
        </docblock>
        <argument line="98">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="111" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="103">
          <description><![CDATA[Updates the file identified by $path with data from $updateFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="103" name="param" description="" type="\ezp\Io\BinaryFileUpdateStruct" variable="$updateFile">
            <type by_reference="false">\ezp\Io\BinaryFileUpdateStruct</type>
          </tag>
          <tag line="103" name="return" description="The updated BinaryFile" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="103" name="uses" description="\ezp\Io\Handler::update()" refers="\ezp\Io\Handler::update()"/>
        </docblock>
        <argument line="111">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="111">
          <name>$updateFile</name>
          <default><![CDATA[]]></default>
          <type>BinaryFileUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="143" package="Default">
        <name>exists</name>
        <type>function</type>
        <docblock line="136">
          <description><![CDATA[Checks if the BinaryFile with path $path exists]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="136" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="136" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="136" name="uses" description="\ezp\Io\Handler::exists()" refers="\ezp\Io\Handler::exists()"/>
        </docblock>
        <argument line="143">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="155" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="148">
          <description><![CDATA[Loads the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="148" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="148" name="return" description="" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="148" name="uses" description="\ezp\Io\Handler::load()" refers="\ezp\Io\Handler::load()"/>
        </docblock>
        <argument line="155">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="167" package="Default">
        <name>getFileResource</name>
        <type>function</type>
        <docblock line="160">
          <description><![CDATA[Returns a file resource to the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="160" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="160" name="return" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="160" name="uses" description="\ezp\Io\Handler::getFileResource()" refers="\ezp\Io\Handler::getFileResource()"/>
        </docblock>
        <argument line="167">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="179" package="Default">
        <name>getFileContents</name>
        <type>function</type>
        <docblock line="172">
          <description><![CDATA[Returns the contents of the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="172" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="172" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="172" name="uses" description="\ezp\Io\Handler::getFileContents()" refers="\ezp\Io\Handler::getFileContents()"/>
        </docblock>
        <argument line="179">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Io\Storage" line="192" package="Default">
        <name>getHandler</name>
        <type>function</type>
        <docblock line="184">
          <description><![CDATA[Returns the appropriate handler for $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="184" name="internal" description="Depends on {@link $config} being validated by {@link __construct()}!"/>
          <tag line="184" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="184" name="return" description="" type="\ezp\Io\Handler">
            <type by_reference="false">\ezp\Io\Handler</type>
          </tag>
        </docblock>
        <argument line="192">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Io/Storage/InMemory.php" hash="db6c8b8fbadbd37211db3a13e44fbd9f">
    <parse_markers>
      <error line="43" code="50010">No DocBlock was found for method __construct()</error>
      <error line="48" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $file in create()</error>
      <error line="94" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $updateFile in update()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/Storage/InMemory.php</error>
    </parse_markers>
    <namespace-alias name="IoHandlerInterface">ezp\Io\Handler</namespace-alias>
    <namespace-alias name="BinaryFile">ezp\Io\BinaryFile</namespace-alias>
    <namespace-alias name="BinaryFileUpdateStruct">ezp\Io\BinaryFileUpdateStruct</namespace-alias>
    <namespace-alias name="BinaryFileCreateStruct">ezp\Io\BinaryFileCreateStruct</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="PathExists">ezp\Io\Exception\PathExists</namespace-alias>
    <namespace-alias name="DateTime">DateTime</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io\Storage" line="23" package="Default">
      <name>InMemory</name>
      <full_name>\ezp\Io\Storage\InMemory</full_name>
      <extends/>
      <extends>\ezp\Io\Handler</extends>
      <docblock line="19">
        <description><![CDATA[Backend interface for handling of binary files I/O]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="29" package="Default">
        <name>$storage</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[Files storage]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="35" package="Default">
        <name>$data</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Actual file data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="\ezp\Io\Storage\array(filepath=&gt;binaryData)">
            <type by_reference="false">\ezp\Io\Storage\array(filepath=&gt;binaryData)</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="41" package="Default">
        <name>$resources</name>
        <default><![CDATA[array()]]></default>
        <docblock line="37">
          <description><![CDATA[File data resources (handles)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="\resource[]">
            <type by_reference="false">\resource[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="43">
        <name>__construct</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="56" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[Creates and stores a new BinaryFile based on the BinaryFileCreateStruct $file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="param" description="" type="\ezp\Io\BinaryFileCreateStruct" variable="$file">
            <type by_reference="false">\ezp\Io\BinaryFileCreateStruct</type>
          </tag>
          <tag line="48" name="return" description="The newly created BinaryFile object" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="48" name="throws" description="If the target path already exists" type="\ezp\Base\Exception\PathExists">
            <type by_reference="false">\ezp\Base\Exception\PathExists</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$file</name>
          <default><![CDATA[]]></default>
          <type>BinaryFileCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="83" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Deletes the existing BinaryFile with path $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="throws" description="If the file doesn't exist" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="104" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="94">
          <description><![CDATA[Updates the file identified by $path with data from $updateFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="94" name="param" description="" type="\ezp\Io\BinaryFileUpdateStruct" variable="$updateFile">
            <type by_reference="false">\ezp\Io\BinaryFileUpdateStruct</type>
          </tag>
          <tag line="94" name="return" description="The updated BinaryFile" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="94" name="throws" description="If the source path doesn't exist" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="94" name="throws" description="If the target path already exists" type="\ezp\Base\Exception\PathExists">
            <type by_reference="false">\ezp\Base\Exception\PathExists</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="104">
          <name>$updateFile</name>
          <default><![CDATA[]]></default>
          <type>BinaryFileUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="162" package="Default">
        <name>exists</name>
        <type>function</type>
        <docblock line="156">
          <description><![CDATA[Checks if the BinaryFile with path $path exists]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="156" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="156" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="174" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="167">
          <description><![CDATA[Loads the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="167" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="167" name="return" description="" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="167" name="throws" description="If no file identified by $path exists" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="190" package="Default">
        <name>getFileResource</name>
        <type>function</type>
        <docblock line="183">
          <description><![CDATA[Returns a file resource to the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="183" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="183" name="return" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="183" name="throws" description="If no file identified by $path exists" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="190">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="208" package="Default">
        <name>getFileContents</name>
        <type>function</type>
        <docblock line="201">
          <description><![CDATA[Returns the contents of the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="201" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="201" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="201" name="throws" description="if the file couldn't be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="208">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Io/Storage/Legacy.php" hash="89adb7be9a1ab9549921f12101fedc36">
    <parse_markers>
      <error line="46" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $file in create()</error>
      <error line="89" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $updateFile in update()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/Storage/Legacy.php</error>
    </parse_markers>
    <namespace-alias name="IoHandlerInterface">ezp\Io\Handler</namespace-alias>
    <namespace-alias name="BinaryFile">ezp\Io\BinaryFile</namespace-alias>
    <namespace-alias name="BinaryFileCreateStruct">ezp\Io\BinaryFileCreateStruct</namespace-alias>
    <namespace-alias name="BinaryFileUpdateStruct">ezp\Io\BinaryFileUpdateStruct</namespace-alias>
    <namespace-alias name="ContentType">ezp\Io\ContentType</namespace-alias>
    <namespace-alias name="FileResourceAdapter">ezp\Io\Storage\Legacy\FileResourceAdapter</namespace-alias>
    <namespace-alias name="PathExists">ezp\Io\Exception\PathExists</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="eZClusterFileHandler">eZClusterFileHandler</namespace-alias>
    <namespace-alias name="DateTime">DateTime</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io\Storage" line="32" package="Default">
      <name>Legacy</name>
      <full_name>\ezp\Io\Storage\Legacy</full_name>
      <extends/>
      <extends>\ezp\Io\Handler</extends>
      <docblock line="24">
        <description><![CDATA[Legacy Io/Storage handler, based on eZ Cluster]]></description>
        <long-description><![CDATA[<p>Due to the legacy API, this handler has a few limitations:
- ctime is not really supported, and will always have the same value as mtime
- mtime can not be modified, and will always automatically be set depending on the server time upon each write operation</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="38" package="Default">
        <name>$fileResourceProvider</name>
        <default><![CDATA[null]]></default>
        <docblock line="34">
          <description><![CDATA[File resource provider]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="see" description="\ezp\Io\Storage\getFileResourceProvider" refers="\ezp\Io\Storage\getFileResourceProvider"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="44" package="Default">
        <name>$clusterHandler</name>
        <default><![CDATA[null]]></default>
        <docblock line="40">
          <description><![CDATA[Cluster handler instance]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="\ezp\Io\Storage\eZClusterFileHandlerInterface">
            <type by_reference="false">\ezp\Io\Storage\eZClusterFileHandlerInterface</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="54" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Creates and stores a new BinaryFile based on the BinaryFileCreateStruct $file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="" type="\ezp\Io\BinaryFileCreateStruct" variable="$file">
            <type by_reference="false">\ezp\Io\BinaryFileCreateStruct</type>
          </tag>
          <tag line="46" name="return" description="The newly created BinaryFile object" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="46" name="throws" description="If the target path already exists" type="\ezp\Base\Exception\PathExists">
            <type by_reference="false">\ezp\Base\Exception\PathExists</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$file</name>
          <default><![CDATA[]]></default>
          <type>BinaryFileCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="79" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Deletes the existing BinaryFile with path $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="throws" description="If the file doesn't exist" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="99" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Updates the file identified by $path with data from $updateFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="89" name="param" description="" type="\ezp\Io\BinaryFileUpdateStruct" variable="$updateFile">
            <type by_reference="false">\ezp\Io\BinaryFileUpdateStruct</type>
          </tag>
          <tag line="89" name="return" description="The updated BinaryFile" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="89" name="throws" description="If the source path doesn't exist" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="89" name="throws" description="If the target path already exists" type="\ezp\Base\Exception\PathExists">
            <type by_reference="false">\ezp\Base\Exception\PathExists</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="99">
          <name>$updateFile</name>
          <default><![CDATA[]]></default>
          <type>BinaryFileUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="142" package="Default">
        <name>exists</name>
        <type>function</type>
        <docblock line="136">
          <description><![CDATA[Checks if the BinaryFile with path $path exists]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="136" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="136" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="154" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="147">
          <description><![CDATA[Loads the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="147" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="147" name="return" description="" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="147" name="throws" description="If no file identified by $path exists" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="199" package="Default">
        <name>getFileResource</name>
        <type>function</type>
        <docblock line="192">
          <description><![CDATA[Returns a file resource to the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="192" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="192" name="return" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="192" name="throws" description="If no file identified by $path exists" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="199">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Storage" line="211" package="Default">
        <name>getFileContents</name>
        <type>function</type>
        <docblock line="204">
          <description><![CDATA[Returns the contents of the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="204" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="204" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="204" name="throws" description="if the file couldn't be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="211">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Io\Storage" line="226" package="Default">
        <name>getFileResourceProvider</name>
        <type>function</type>
        <docblock line="221">
          <description><![CDATA[Returns the appropriate FileResourceProvider depending on the cluster handler in use]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="221" name="return" description="" type="\ezp\Io\Storage\Legacy\FileResourceProvider">
            <type by_reference="false">\ezp\Io\Storage\Legacy\FileResourceProvider</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Io\Storage" line="246" package="Default">
        <name>getClusterHandler</name>
        <type>function</type>
        <docblock line="241">
          <description><![CDATA[Lazy loads eZClusterFileHandler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="241" name="return" description="" type="\eZClusterFileHandler">
            <type by_reference="false">\eZClusterFileHandler</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Io/Exception/PathExists.php" hash="e520f1577b0251ac501e09997a51f250">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/Exception/PathExists.php</error>
    </parse_markers>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io\Exception" line="21" package="Default">
      <name>PathExists</name>
      <full_name>\ezp\Io\Exception\PathExists</full_name>
      <extends>\InvalidArgumentException</extends>
      <extends>\ezp\Base\Exception</extends>
      <docblock line="15">
        <description><![CDATA[PathExists Exception implementation.]]></description>
        <long-description><![CDATA[<p>Used when a path should not exist for an operation to be executed.</p>]]></long-description>
        <tag line="15" name="use" description=": throw new PathExists( 'path/to/existing/file.ext' );"/>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Exception" line="29" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Generates: {$path} already exists]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="The path that already exists and conflicts" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="29">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Io/Exception/FileLogic.php" hash="acc1ae1d18da95504b4e80263f71a957">
    <parse_markers>
      <error line="20" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/Exception/FileLogic.php</error>
    </parse_markers>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io\Exception" line="18" package="Default">
      <name>FileLogic</name>
      <full_name>\ezp\Io\Exception\FileLogic</full_name>
      <extends>\ezp\Base\Exception\Logic</extends>
      <docblock line="14">
        <description><![CDATA[FileLogic exception.]]></description>
        <long-description><![CDATA[<p>Thrown when a problem occurs in an operation on a file.</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Exception" line="20">
        <name>__construct</name>
        <type>function</type>
        <argument line="20">
          <name>$message</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="20">
          <name>$code</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="20">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Io/Exception/DirLogic.php" hash="2cdd3a9e7754e4ba854e326e99428dea">
    <parse_markers>
      <error line="20" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/Exception/DirLogic.php</error>
    </parse_markers>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io\Exception" line="18" package="Default">
      <name>DirLogic</name>
      <full_name>\ezp\Io\Exception\DirLogic</full_name>
      <extends>\ezp\Base\Exception\Logic</extends>
      <docblock line="14">
        <description><![CDATA[DirLogic exception.]]></description>
        <long-description><![CDATA[<p>Thrown when a problem occurs in an operation on a directory.</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io\Exception" line="20">
        <name>__construct</name>
        <type>function</type>
        <argument line="20">
          <name>$message</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="20">
          <name>$code</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="20">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Io/SysInfo.php" hash="36af8b695d3d90ac99ac8d9fc76b750f">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/SysInfo.php</error>
    </parse_markers>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="DirPath">ezp\Io\DirPath</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io" line="17" package="Default">
      <name>SysInfo</name>
      <full_name>\ezp\Io\SysInfo</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Utility class for getting useful info on I/O]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Io" line="24" package="Default">
        <name>varDirectory</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Returns path of the directory used for storing various kinds of files like cache, temporary files and logs.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Io" line="35" package="Default">
        <name>storageDirectory</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Returns path of the directory used for storing various kinds of files like images, audio and more.]]></description>
          <long-description><![CDATA[<p>This will include the varDirectory().</p>]]></long-description>
          <tag line="29" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Io/Handler.php" hash="e61d8bedcebfcaede2850f34a0f4e1a0">
    <parse_markers>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $file in create()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $updateFile in update()</error>
      <error line="51" code="50014">Name of argument $file does not match with the DocBlock's name $path in exists()</error>
      <notice line="51" code="50013">Parameter $path could not be found in exists()</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/Handler.php</error>
    </parse_markers>
    <namespace-alias name="BinaryFile">ezp\Io\BinaryFile</namespace-alias>
    <namespace-alias name="BinaryFileUpdateStruct">ezp\Io\BinaryFileUpdateStruct</namespace-alias>
    <namespace-alias name="BinaryFileCreateStruct">ezp\Io\BinaryFileCreateStruct</namespace-alias>
    <interface namespace="ezp\Io" line="19" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Io\Handler</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[Backend interface for handling of binary files I/O]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="29" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Creates and stores a new BinaryFile based on the BinaryFileCreateStruct $file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Io\BinaryFileCreateStruct" variable="$file">
            <type by_reference="false">\ezp\Io\BinaryFileCreateStruct</type>
          </tag>
          <tag line="21" name="return" description="The newly created BinaryFile object" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="21" name="throws" description="If the target path already exists" type="\ezp\Base\Exception\PathExists">
            <type by_reference="false">\ezp\Base\Exception\PathExists</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$file</name>
          <default><![CDATA[]]></default>
          <type>BinaryFileCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="37" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[Deletes the existing BinaryFile with path $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="31" name="throws" description="If the file doesn't exist" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="49" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Updates the file identified by $path with data from $updateFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="39" name="param" description="" type="\ezp\Io\BinaryFileUpdateStruct" variable="$updateFile">
            <type by_reference="false">\ezp\Io\BinaryFileUpdateStruct</type>
          </tag>
          <tag line="39" name="return" description="The updated BinaryFile" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="39" name="throws" description="If the source path doesn't exist" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="39" name="throws" description="If the target path already exists" type="\ezp\Base\Exception\PathExists">
            <type by_reference="false">\ezp\Base\Exception\PathExists</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="49">
          <name>$updateFile</name>
          <default><![CDATA[]]></default>
          <type>BinaryFileUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="57" package="Default">
        <name>exists</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Checks if the BinaryFile with path $path exists]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$file</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="66" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Loads the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="59" name="return" description="" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="59" name="throws" description="If no file identified by $path exists" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="75" package="Default">
        <name>getFileResource</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Returns a file resource to the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="return" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="68" name="throws" description="If no file identified by $path exists" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="84" package="Default">
        <name>getFileContents</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Returns the contents of the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="throws" description="if the file couldn't be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Io/Service.php" hash="1af45ae44f5827a19b7b7b0592cae253">
    <parse_markers>
      <critical line="30" code="50019">No short description for property $handler</critical>
      <error line="35" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $repository in __construct()</error>
      <error line="35" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $handler in __construct()</error>
      <error line="101" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $binaryFile in create()</error>
      <error line="116" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $updateFile in update()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/Service.php</error>
    </parse_markers>
    <namespace-alias name="Repository">ezp\Base\Repository</namespace-alias>
    <namespace-alias name="BaseService">ezp\Base\Service</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="BinaryFile">ezp\Io\BinaryFile</namespace-alias>
    <namespace-alias name="BinaryFileUpdateStruct">ezp\Io\BinaryFileUpdateStruct</namespace-alias>
    <namespace-alias name="BinaryFileCreateStruct">ezp\Io\BinaryFileCreateStruct</namespace-alias>
    <namespace-alias name="ContentType">ezp\Io\ContentType</namespace-alias>
    <namespace-alias name="IoHandlerInterface">ezp\Io\Handler</namespace-alias>
    <namespace-alias name="DateTime">DateTime</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Io" line="28" package="Default">
      <name>Service</name>
      <full_name>\ezp\Io\Service</full_name>
      <extends>\ezp\Base\Service</extends>
      <docblock line="21">
        <description><![CDATA[Io\Service class]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="21" name="deprecated" description="Remove when IoService Interface has been implemented&#10;Differs from other Services in that it uses different handler, namely {@link \ezp\Io\Handler}"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="33" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="\ezp\Io\Handler">
            <type by_reference="false">\ezp\Io\Handler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="41" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Setups service with reference to repository object that created it & corresponding handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="param" description="" type="\ezp\Base\Repository" variable="$repository">
            <type by_reference="false">\ezp\Base\Repository</type>
          </tag>
          <tag line="35" name="param" description="" type="\ezp\Io\Handler" variable="$handler">
            <type by_reference="false">\ezp\Io\Handler</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$repository</name>
          <default><![CDATA[]]></default>
          <type>Repository</type>
        </argument>
        <argument line="41">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>IoHandlerInterface</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="57" package="Default">
        <name>createFromUploadedFile</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Creates a BinaryFile object from the uploaded file $uploadedFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="The $_POST hash of an uploaded file" type="array" variable="$uploadedFile">
            <type by_reference="false">array</type>
          </tag>
          <tag line="47" name="param" description="The path the file must be stored as" type="string" variable="$repositoryPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="47" name="return" description="" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="47" name="throws" description="When given an invalid uploaded file" type="\InvalidArgumentValue">
            <type by_reference="false">\InvalidArgumentValue</type>
          </tag>
          <tag line="47" name="uses" description="\ezp\Io\create()" refers="\ezp\Io\create()"/>
          <tag line="47" name="todo" description="Create file in backend like done in createFromLocalFile()"/>
        </docblock>
        <argument line="57">
          <name>$uploadedFile</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="57">
          <name>$repositoryPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="82" package="Default">
        <name>createFromLocalFile</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Creates a BinaryFile object from $localFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="param" description="Path to local file" type="string" variable="$localFile">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="param" description="The path the file must be stored as" type="string" variable="$repositoryPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="return" description="" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="73" name="throws" description="When given a non existing / unreadable file" type="\InvalidArgumentValue">
            <type by_reference="false">\InvalidArgumentValue</type>
          </tag>
          <tag line="73" name="uses" description="\ezp\Io\create()" refers="\ezp\Io\create()"/>
        </docblock>
        <argument line="82">
          <name>$localFile</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="82">
          <name>$repositoryPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="111" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="101">
          <description><![CDATA[Stores $binaryFile to the repository]]></description>
          <long-description><![CDATA[<p>It is recommended to use {@link createFromLocalFile()} or {@link createFromUploadedFile()} as they
handle most use cases with less code needed then using this method directly.</p>]]></long-description>
          <tag line="101" name="param" description="" type="\ezp\Io\BinaryFileCreateStruct" variable="$binaryFile">
            <type by_reference="false">\ezp\Io\BinaryFileCreateStruct</type>
          </tag>
          <tag line="101" name="return" description="The created BinaryFile object" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="101" name="uses" description="\ezp\Io\Handler::create()" refers="\ezp\Io\Handler::create()"/>
        </docblock>
        <argument line="111">
          <name>$binaryFile</name>
          <default><![CDATA[]]></default>
          <type>BinaryFileCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="124" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="116">
          <description><![CDATA[Updates the file identified by $path with data from $updateFile]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="116" name="param" description="" type="string" variable="$originalPath">
            <type by_reference="false">string</type>
          </tag>
          <tag line="116" name="param" description="" type="\ezp\Io\BinaryFileUpdateStruct" variable="$updateFile">
            <type by_reference="false">\ezp\Io\BinaryFileUpdateStruct</type>
          </tag>
          <tag line="116" name="return" description="The update BinaryFile" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="116" name="uses" description="\ezp\Io\Handler::update()" refers="\ezp\Io\Handler::update()"/>
        </docblock>
        <argument line="124">
          <name>$originalPath</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="124">
          <name>$updateFile</name>
          <default><![CDATA[]]></default>
          <type>BinaryFileUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="136" package="Default">
        <name>exists</name>
        <type>function</type>
        <docblock line="129">
          <description><![CDATA[Checks if a BinaryFile with $path exists in the repository]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="129" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="129" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="129" name="uses" description="\ezp\Io\Handler::exists()" refers="\ezp\Io\Handler::exists()"/>
        </docblock>
        <argument line="136">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="147" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="141">
          <description><![CDATA[Deletes the BinaryFile with $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="141" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="141" name="uses" description="\ezp\Io\Handler::delete()" refers="\ezp\Io\Handler::delete()"/>
        </docblock>
        <argument line="147">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="159" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="152">
          <description><![CDATA[Loads the binary file with $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="152" name="return" description="" type="\ezp\Io\BinaryFile">
            <type by_reference="false">\ezp\Io\BinaryFile</type>
          </tag>
          <tag line="152" name="uses" description="\ezp\Io\Handler::load()" refers="\ezp\Io\Handler::load()"/>
        </docblock>
        <argument line="159">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="171" package="Default">
        <name>getFileResource</name>
        <type>function</type>
        <docblock line="164">
          <description><![CDATA[Returns a read (mode: rb) file resource to the binary file identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="164" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="164" name="return" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
          <tag line="164" name="uses" description="\ezp\Io\Handler::getFileResource()" refers="\ezp\Io\Handler::getFileResource()"/>
        </docblock>
        <argument line="171">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="182" package="Default">
        <name>getFileContents</name>
        <type>function</type>
        <docblock line="176">
          <description><![CDATA[Returns the contents of the BinaryFile identified by $path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="176" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="176" name="return" description="Binary content" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="176" name="uses" description="\ezp\Io\Handler::getFileContents()" refers="\ezp\Io\Handler::getFileContents()"/>
        </docblock>
        <argument line="182">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Io/BinaryFile.php" hash="6ac52b35272ed91c65f7aba1ff8db099">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/BinaryFile.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Io" line="18" package="Default">
      <name>BinaryFile</name>
      <full_name>\ezp\Io\BinaryFile</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[This class provides an abstract access to binary files.]]></description>
        <long-description><![CDATA[<p>It allows reading &amp; writing of files in a unified way</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$path</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[Relative path to the file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$size</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[File size, in bytes]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$mtime</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[File modification time]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="\DateTime">
            <type by_reference="false">\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="42" package="Default">
        <name>$ctime</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[File creation time]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="\DateTime">
            <type by_reference="false">\DateTime</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="48" package="Default">
        <name>$contentType</name>
        <default><![CDATA[]]></default>
        <docblock line="44">
          <description><![CDATA[File contentType (image/jpeg, audio/mp3, etc)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="" type="\ezp\Io\ContentType">
            <type by_reference="false">\ezp\Io\ContentType</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="54" package="Default">
        <name>$uri</name>
        <default><![CDATA[]]></default>
        <docblock line="50">
          <description><![CDATA[HTTP URI to the binary file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="60" package="Default">
        <name>$originalFile</name>
        <default><![CDATA[]]></default>
        <docblock line="56">
          <description><![CDATA[Original file name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Io/BinaryFileCreateStruct.php" hash="b22d1b92bf3aab2ffb5c21593b9f8e7f">
    <parse_markers>
      <error line="35" code="50018">No DocBlock was found for property $inputStream</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Io/BinaryFileCreateStruct.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Io" line="15" package="Default">
      <name>BinaryFileCreateStruct</name>
      <full_name>\ezp\Io\BinaryFileCreateStruct</full_name>
      <extends>\ezp\Io\BinaryFile</extends>
      <docblock line="12">
        <description><![CDATA[Create struct for BinaryFile objects]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="35">
        <name>$inputStream</name>
        <default><![CDATA[]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="21" package="Default">
        <name>getInputStream</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Returns the file's input resource]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="return" description="" type="resource">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Io" line="30" package="Default">
        <name>setInputStream</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Sets the file's input resource]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="resource" variable="$inputStream">
            <type by_reference="false">resource</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$inputStream</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/User.php" hash="4b7c3ab8829a80d1c81c44aec569d91a">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/User.php</error>
    </parse_markers>
    <namespace-alias name="ModelDefinition">ezp\Base\ModelDefinition</namespace-alias>
    <namespace-alias name="Groupable">ezp\User\Groupable</namespace-alias>
    <interface namespace="ezp" line="26" package="Default">
      <name>User</name>
      <full_name>\ezp\User</full_name>
      <extends>\ezp\Base\ModelDefinition</extends>
      <docblock line="14">
        <description><![CDATA[This interface represents a User item]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="14" name="property" description="" type="string" variable="$login">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property" description="" type="string" variable="$email">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property" description="" type="string" variable="$password">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property" description="" type="int" variable="$hashAlgorithm">
          <type by_reference="false">int</type>
        </tag>
        <tag line="14" name="property" description="" type="\ezp\User\Group[]" variable="$groups">
          <type by_reference="false">\ezp\User\Group[]</type>
        </tag>
        <tag line="14" name="property" description="" type="\ezp\User\Role[]" variable="$roles">
          <type by_reference="false">\ezp\User\Role[]</type>
        </tag>
        <tag line="14" name="property" description="" type="\ezp\User\Policy[]" variable="$policies">
          <type by_reference="false">\ezp\User\Policy[]</type>
        </tag>
      </docblock>
      <constant namespace="ezp" line="31" package="Default">
        <name>PASSWORD_HASH_MD5_PASSWORD</name>
        <value><![CDATA[1]]></value>
        <docblock line="28">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="MD5 of password, not recommended" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ezp" line="36" package="Default">
        <name>PASSWORD_HASH_MD5_USER</name>
        <value><![CDATA[2]]></value>
        <docblock line="33">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="MD5 of user and password" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ezp" line="41" package="Default">
        <name>PASSWORD_HASH_MD5_SITE</name>
        <value><![CDATA[3]]></value>
        <docblock line="38">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="MD5 of site, user and password" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ezp" line="46" package="Default">
        <name>PASSWORD_HASH_PLAIN_TEXT</name>
        <value><![CDATA[5]]></value>
        <docblock line="43">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="var" description="Passwords in plaintext, should not be used for real sites" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="53" package="Default">
        <name>getGroups</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[List of assigned groups]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="return" description="" type="\ezp\User\Group[]">
            <type by_reference="false">\ezp\User\Group[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="60" package="Default">
        <name>getRoles</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[List of assigned Roles]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="return" description="" type="array|\User\Role[]">
            <type by_reference="false">array</type>
            <type by_reference="false">\User\Role[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="67" package="Default">
        <name>getPolicies</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[List of assigned and inherited policies (via assigned and inherited roles)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="return" description="" type="array|\User\Policy[]">
            <type by_reference="false">array</type>
            <type by_reference="false">\User\Policy[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp" line="81" package="Default">
        <name>hasAccessTo</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[Checks if user has access to a specific module/function]]></description>
          <long-description><![CDATA[<p>Return array of limitations if user has access to a certain function
but limited by the returned limitations.
If you have the model instance you want to check permissions against, then
use {@link \ezp\Base\Repository::canUser()}.</p>]]></long-description>
          <tag line="69" name="param" description="" type="string" variable="$module">
            <type by_reference="false">string</type>
          </tag>
          <tag line="69" name="param" description="" type="string" variable="$function">
            <type by_reference="false">string</type>
          </tag>
          <tag line="69" name="return" description="" type="array|bool">
            <type by_reference="false">array</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$module</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="81">
          <name>$function</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/User/Policy.php" hash="525e38c6564cebeaab3b90cd7ca26023">
    <parse_markers>
      <critical line="27" code="50019">No short description for property $readWriteProperties</critical>
      <critical line="38" code="50019">No short description for property $dynamicProperties</critical>
      <critical line="45" code="50019">No short description for property $role</critical>
      <error line="50" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in __construct()</error>
      <error line="61" code="50012">No short description for method getRole()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/User/Policy.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="PolicyValue">ezp\Persistence\User\Policy</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\User" line="25" package="Default">
      <name>Policy</name>
      <full_name>\ezp\User\Policy</full_name>
      <extends>\ezp\Base\Model</extends>
      <docblock line="16">
        <description><![CDATA[This class represents a Policy item]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="16" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="string" variable="$module">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property" description="" type="string" variable="$function">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property" description="" type="array|string" variable="$limitations">
          <type by_reference="false">array</type>
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property-read" description="" type="\ezp\User\Role|null" variable="$role">
          <type by_reference="false">\ezp\User\Role</type>
          <type by_reference="false">null</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'module' => true,
        'function' => true,
        'limitations' => true,
        'roleId' => false,
    )]]></default>
        <docblock line="27">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="Readable of properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array(
        'role' => false,
    )]]></default>
        <docblock line="38">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="Dynamic properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="48" package="Default">
        <name>$role</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="\ezp\User\Role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="55" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="50">
          <description><![CDATA[Creates and setups User object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="param" description="" type="\ezp\User\Role" variable="$role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="64" package="Default">
        <name>getRole</name>
        <type>function</type>
        <docblock line="61">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="return" description="" type="\ezp\User\Role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/User/Groupable.php" hash="74ff8db4e666325de5636c18671bb8ad">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/User/Groupable.php</error>
    </parse_markers>
    <interface namespace="ezp\User" line="17" package="Default">
      <name>Groupable</name>
      <full_name>\ezp\User\Groupable</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[User Groupable Interface]]></description>
        <long-description><![CDATA[<p>A interface for classes that is cable being assigned to groups</p>]]></long-description>
      </docblock>
    </interface>
  </file>
  <file path="ezp/User/Role.php" hash="f3563c805c3be3c4c3cd113821804102">
    <parse_markers>
      <error line="24" code="50012">No short description for method getPolicies()</error>
      <error line="29" code="50012">No short description for method addPolicy()</error>
      <error line="36" code="50012">No short description for method removePolicy()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/User/Role.php</error>
    </parse_markers>
    <namespace-alias name="ModelDefinition">ezp\Base\ModelDefinition</namespace-alias>
    <namespace-alias name="User">ezp\User</namespace-alias>
    <interface namespace="ezp\User" line="22" package="Default">
      <name>Role</name>
      <full_name>\ezp\User\Role</full_name>
      <extends>\ezp\Base\ModelDefinition</extends>
      <docblock line="14">
        <description><![CDATA[This class represents a Proxy Role item]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="14" name="property" description="" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property-read" description="Use {@link \ezp\User\Service::addGroup} &amp; {@link \ezp\User\Service::removeGroup}" type="\mixed[]" variable="$groupIds">
          <type by_reference="false">\mixed[]</type>
        </tag>
        <tag line="14" name="property-read" description="Use {@link \ezp\User\Service::addPolicy} &amp; {@link \ezp\User\Service::removePolicy}" type="\ezp\User\Policy[]" variable="$policies">
          <type by_reference="false">\ezp\User\Policy[]</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="27" package="Default">
        <name>getPolicies</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="return" description="" type="\ezp\User\Policy[]">
            <type by_reference="false">\ezp\User\Policy[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="34" package="Default">
        <name>addPolicy</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="internal" description="Use {@link \ezp\User\Service::addPolicy()}"/>
          <tag line="29" name="param" description="" type="\ezp\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\User\Policy</type>
          </tag>
          <tag line="29" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="41" package="Default">
        <name>removePolicy</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="internal" description="Use {@link \ezp\User\Service::removePolicy()}"/>
          <tag line="36" name="param" description="" type="\ezp\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\User\Policy</type>
          </tag>
          <tag line="36" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/User/Exception/FailedLogin.php" hash="08c14b800bcb7ece16c56fefa658b96d">
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $previous in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/User/Exception/FailedLogin.php</error>
    </parse_markers>
    <namespace-alias name="Unauthorized">ezp\Base\Exception\Unauthorized</namespace-alias>
    <namespace-alias name="PHPException">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\User\Exception" line="21" package="Default">
      <name>FailedLogin</name>
      <full_name>\ezp\User\Exception\FailedLogin</full_name>
      <extends>\ezp\Base\Exception\Unauthorized</extends>
      <docblock line="14">
        <description><![CDATA[FailedLogin Exception implementation]]></description>
        <long-description><![CDATA[<p>Use:
  throw new FailedLogin();</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Exception" line="29" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Generates: Login required to get access to 'login']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="todo" description="Find a more suitable message"/>
          <tag line="23" name="param" description="" type="\Exception|null" variable="$previous">
            <type by_reference="false">\Exception</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$previous</name>
          <default><![CDATA[null]]></default>
          <type>PHPException</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/User/Group/Proxy.php" hash="cf7949d71746bf17d64eb25ad4581043">
    <parse_markers>
      <error line="30" code="50010">No DocBlock was found for method __construct()</error>
      <error line="35" code="50010">No DocBlock was found for method lazyLoad()</error>
      <error line="44" code="50012">No short description for method getParent()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/User/Group/Proxy.php</error>
    </parse_markers>
    <namespace-alias name="ModelProxy">ezp\Base\Proxy\Model</namespace-alias>
    <namespace-alias name="ModelState">ezp\Base\ModelState</namespace-alias>
    <namespace-alias name="Observable">ezp\Base\Observable</namespace-alias>
    <namespace-alias name="Observer">ezp\Base\Observer</namespace-alias>
    <namespace-alias name="Group">ezp\User\Group</namespace-alias>
    <namespace-alias name="Service">ezp\User\Service</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\User\Group" line="28" package="Default">
      <name>Proxy</name>
      <full_name>\ezp\User\Group\Proxy</full_name>
      <extends>\ezp\Base\Proxy\Model</extends>
      <extends>\ezp\User\Group</extends>
      <extends>\ezp\Base\Observable</extends>
      <docblock line="18">
        <description><![CDATA[This class represents a Proxy Group item]]></description>
        <long-description><![CDATA[<p>Group is currently a facade for content objects of User Group type.
It requires that the User Group Content Type used has two attributes: name &amp; description, both ezstring field types</p>]]></long-description>
        <tag line="18" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="18" name="property" description="" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="18" name="property" description="description" type="string" variable="">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="30">
        <name>__construct</name>
        <type>function</type>
        <argument line="30">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$service</name>
          <default><![CDATA[]]></default>
          <type>Service</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\User\Group" line="35">
        <name>lazyLoad</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="47" package="Default">
        <name>getParent</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="return" description="" type="\ezp\User\Group|null">
            <type by_reference="false">\ezp\User\Group</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="60" package="Default">
        <name>getRoles</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[Roles assigned to Group]]></description>
          <long-description><![CDATA[<p>Use {@link \ezp\User\Service::assignRole} &amp; {@link \ezp\User\Service::unassignRole} to change</p>]]></long-description>
          <tag line="53" name="return" description="" type="\ezp\User\Role[]">
            <type by_reference="false">\ezp\User\Role[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="71" package="Default">
        <name>properties</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[Return list of properties, where key is properties and value depends on type and is internal so should be ignored for now.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/User/Group/Concrete.php" hash="2e677c0f47c30401e46e63b000aa59c7">
    <parse_markers>
      <critical line="32" code="50019">No short description for property $contentProperties</critical>
      <critical line="42" code="50019">No short description for property $content</critical>
      <critical line="47" code="50019">No short description for property $parent</critical>
      <critical line="52" code="50019">No short description for property $roles</critical>
      <error line="57" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in __construct()</error>
      <notice line="57" code="50013">Parameter $locations could not be found in __construct()</notice>
      <error line="70" code="50012">No short description for method getParent()</error>
      <error line="100" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $observer in attach()</error>
      <error line="112" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $observer in detach()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/User/Group/Concrete.php</error>
    </parse_markers>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <namespace-alias name="PropertyPermission">ezp\Base\Exception\PropertyPermission</namespace-alias>
    <namespace-alias name="ModelState">ezp\Base\ModelState</namespace-alias>
    <namespace-alias name="Observable">ezp\Base\Observable</namespace-alias>
    <namespace-alias name="Observer">ezp\Base\Observer</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="Group">ezp\User\Group</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\User\Group" line="30" package="Default">
      <name>Concrete</name>
      <full_name>\ezp\User\Group\Concrete</full_name>
      <extends/>
      <extends>\ezp\User\Group</extends>
      <extends>\ezp\Base\ModelState</extends>
      <extends>\ezp\Base\Observable</extends>
      <docblock line="20">
        <description><![CDATA[This class represents a Concrete Group item]]></description>
        <long-description><![CDATA[<p>Group is currently a facade for content objects of User Group type.
It requires that the User Group Content Type used has two attributes: name &amp; description, both ezstring field types</p>]]></long-description>
        <tag line="20" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="20" name="property" description="" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="20" name="property" description="description" type="string" variable="">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$contentProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'name' => true,
        'description' => true,
    )]]></default>
        <docblock line="32">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="Readable of properties on this object (and writable if value is true)" type="array">
            <type by_reference="false">array</type>
          </tag>
          <tag line="32" name="todo" description="Deal with translation when Content has it"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$content</name>
        <default><![CDATA[]]></default>
        <docblock line="42">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="The User Group Content Object" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$parent</name>
        <default><![CDATA[]]></default>
        <docblock line="47">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="The User Group locations" type="\ezp\User\Group|null">
            <type by_reference="false">\ezp\User\Group</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="55" package="Default">
        <name>$roles</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="The Roles assigned to Group" type="\ezp\User\Group|null">
            <type by_reference="false">\ezp\User\Group</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="73" package="Default">
        <name>getParent</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="return" description="" type="\ezp\User\Group|null">
            <type by_reference="false">\ezp\User\Group</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="85" package="Default">
        <name>getRoles</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Roles assigned to Group]]></description>
          <long-description><![CDATA[<p>Use {@link \ezp\User\Service::assignRole} &amp; {@link \ezp\User\Service::unassignRole} to change</p>]]></long-description>
          <tag line="78" name="return" description="" type="\ezp\User\Role[]">
            <type by_reference="false">\ezp\User\Role[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="95" package="Default">
        <name>properties</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Return list of properties, where key is properties and value depends on type and is internal so should be ignored for now.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="107" package="Default">
        <name>attach</name>
        <type>function</type>
        <docblock line="100">
          <description><![CDATA[Attach a event listener to this subject]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="param" description="" type="\ezp\Base\Observer" variable="$observer">
            <type by_reference="false">\ezp\Base\Observer</type>
          </tag>
          <tag line="100" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="100" name="return" description="" type="\ezp\User\Group\Model">
            <type by_reference="false">\ezp\User\Group\Model</type>
          </tag>
        </docblock>
        <argument line="107">
          <name>$observer</name>
          <default><![CDATA[]]></default>
          <type>Observer</type>
        </argument>
        <argument line="107">
          <name>$event</name>
          <default><![CDATA['update']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="119" package="Default">
        <name>detach</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Detach a event listener to this subject]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="param" description="" type="\ezp\Base\Observer" variable="$observer">
            <type by_reference="false">\ezp\Base\Observer</type>
          </tag>
          <tag line="112" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="return" description="" type="\ezp\User\Group\Model">
            <type by_reference="false">\ezp\User\Group\Model</type>
          </tag>
        </docblock>
        <argument line="119">
          <name>$observer</name>
          <default><![CDATA[]]></default>
          <type>Observer</type>
        </argument>
        <argument line="119">
          <name>$event</name>
          <default><![CDATA['update']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="131" package="Default">
        <name>notify</name>
        <type>function</type>
        <docblock line="124">
          <description><![CDATA[Notify listeners about certain events, by default $event is a plain 'update']]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="param" description="" type="string" variable="$event">
            <type by_reference="false">string</type>
          </tag>
          <tag line="124" name="param" description="" type="array|null" variable="$arguments">
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="124" name="return" description="" type="\ezp\User\Group\Model">
            <type by_reference="false">\ezp\User\Group\Model</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$event</name>
          <default><![CDATA['update']]></default>
          <type/>
        </argument>
        <argument line="131">
          <name>$arguments</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="143" package="Default">
        <name>__get</name>
        <type>function</type>
        <docblock line="136">
          <description><![CDATA[Magic getter]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="136" name="param" description="Property name" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="136" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="136" name="throws" description="If $property cannot be found" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="162" package="Default">
        <name>__set</name>
        <type>function</type>
        <docblock line="154">
          <description><![CDATA[Magic setter]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="154" name="param" description="" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="154" name="param" description="" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="154" name="throws" description="If $property cannot be found" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="154" name="throws" description="When trying to set a value to a read-only property" type="\ezp\Base\Exception\PropertyPermission">
            <type by_reference="false">\ezp\Base\Exception\PropertyPermission</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="162">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="183" package="Default">
        <name>__isset</name>
        <type>function</type>
        <docblock line="177">
          <description><![CDATA[Checks if a public virtual property is set]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="177" name="param" description="Property name" type="string" variable="$property">
            <type by_reference="false">string</type>
          </tag>
          <tag line="177" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="183">
          <name>$property</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="199" package="Default">
        <name>setState</name>
        <type>function</type>
        <docblock line="189">
          <description><![CDATA[Sets internal variables on object from array]]></description>
          <long-description><![CDATA[<p>Key is property name and value is property value.</p>]]></long-description>
          <tag line="189" name="access" description="private"/>
          <tag line="189" name="param" description="" type="array" variable="$state">
            <type by_reference="false">array</type>
          </tag>
          <tag line="189" name="return" description="" type="\ezp\User\Group\Model">
            <type by_reference="false">\ezp\User\Group\Model</type>
          </tag>
          <tag line="189" name="throws" description="If one of the properties in $state is not found" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="199">
          <name>$state</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Group" line="221" package="Default">
        <name>getState</name>
        <type>function</type>
        <docblock line="211">
          <description><![CDATA[Gets internal variables on object as array]]></description>
          <long-description><![CDATA[<p>Key is property name and value is property value.</p>]]></long-description>
          <tag line="211" name="access" description="private"/>
          <tag line="211" name="param" description="Optional, lets you specify to only return one property by name" type="string|null" variable="$property">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="211" name="return" description="Always returns array if $property is null, else value of property" type="array|mixed">
            <type by_reference="false">array</type>
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="211" name="throws" description="If $property is not found (when not null)" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="221">
          <name>$property</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/User/Proxy.php" hash="0fabed692084ba5edcf04e18a7106e9c">
    <parse_markers>
      <error line="28" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/User/Proxy.php</error>
    </parse_markers>
    <namespace-alias name="ModelProxy">ezp\Base\Proxy\Model</namespace-alias>
    <namespace-alias name="User">ezp\User</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\User" line="26" package="Default">
      <name>Proxy</name>
      <full_name>\ezp\User\Proxy</full_name>
      <extends>\ezp\Base\Proxy\Model</extends>
      <extends>\ezp\User</extends>
      <docblock line="14">
        <description><![CDATA[This class represents a Proxy User object]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="14" name="property" description="" type="string" variable="$login">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property" description="" type="string" variable="$email">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property" description="" type="string" variable="$password">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="property" description="" type="int" variable="$hashAlgorithm">
          <type by_reference="false">int</type>
        </tag>
        <tag line="14" name="property" description="" type="\ezp\User\Group[]" variable="$groups">
          <type by_reference="false">\ezp\User\Group[]</type>
        </tag>
        <tag line="14" name="property" description="" type="\ezp\User\Role[]" variable="$roles">
          <type by_reference="false">\ezp\User\Role[]</type>
        </tag>
        <tag line="14" name="property" description="" type="\ezp\User\Policy[]" variable="$policies">
          <type by_reference="false">\ezp\User\Policy[]</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="28">
        <name>__construct</name>
        <type>function</type>
        <argument line="28">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="28">
          <name>$service</name>
          <default><![CDATA[]]></default>
          <type>Service</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\User" line="39" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Returns definition of the user object, atm: permissions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="access" description="private"/>
          <tag line="33" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="49" package="Default">
        <name>getGroups</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[List of assigned groups]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="return" description="" type="\ezp\User\Group[]">
            <type by_reference="false">\ezp\User\Group[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="60" package="Default">
        <name>getRoles</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[List of assigned Roles]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="return" description="" type="array|\ezp\User\Role[]">
            <type by_reference="false">array</type>
            <type by_reference="false">\ezp\User\Role[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="71" package="Default">
        <name>getPolicies</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[List of assigned and inherited policies (via assigned and inherited roles)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="return" description="" type="array|\ezp\User\Policy[]">
            <type by_reference="false">array</type>
            <type by_reference="false">\ezp\User\Policy[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="89" package="Default">
        <name>hasAccessTo</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Checks if user has access to a specific module/function]]></description>
          <long-description><![CDATA[<p>Return array of limitations if user has access to a certain function
but limited by the returned limitations.
If you have the model instance you want to check permissions against, then
use {@link \ezp\Base\Repository::canUser()}.</p>]]></long-description>
          <tag line="77" name="param" description="" type="string" variable="$module">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="param" description="" type="string" variable="$function">
            <type by_reference="false">string</type>
          </tag>
          <tag line="77" name="return" description="" type="array|bool">
            <type by_reference="false">array</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$module</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="89">
          <name>$function</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/User/Group.php" hash="433cdbd45195e39516be4e3cb243f67e">
    <parse_markers>
      <error line="32" code="50012">No short description for method getParent()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/User/Group.php</error>
    </parse_markers>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <namespace-alias name="PropertyPermission">ezp\Base\Exception\PropertyPermission</namespace-alias>
    <namespace-alias name="Observer">ezp\Base\Observer</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="Type">ezp\Content\Type</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="Groupable">ezp\User\Groupable</namespace-alias>
    <interface namespace="ezp\User" line="30" package="Default">
      <name>Group</name>
      <full_name>\ezp\User\Group</full_name>
      <extends>\ezp\User\Groupable</extends>
      <docblock line="20">
        <description><![CDATA[This interface represents a Group item]]></description>
        <long-description><![CDATA[<p>Group is currently a facade for content objects of User Group type.
It requires that the User Group Content Type used has two attributes: name &amp; description, both ezstring field types</p>]]></long-description>
        <tag line="20" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="20" name="property" description="" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="20" name="property" description="description" type="string" variable="">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="35" package="Default">
        <name>getParent</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="return" description="" type="\ezp\User\Group|null">
            <type by_reference="false">\ezp\User\Group</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="44" package="Default">
        <name>getRoles</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Roles assigned to Group]]></description>
          <long-description><![CDATA[<p>Use {@link \ezp\User\Service::assignRole} &amp; {@link \ezp\User\Service::unassignRole} to change</p>]]></long-description>
          <tag line="37" name="return" description="" type="\ezp\User\Role[]">
            <type by_reference="false">\ezp\User\Role[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="51" package="Default">
        <name>properties</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Return list of properties, where key is properties and value depends on type and is internal so should be ignored for now.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/User/Concrete.php" hash="10ce42e5c54ea52b50974f1e5078454a">
    <parse_markers>
      <critical line="30" code="50019">No short description for property $readWriteProperties</critical>
      <critical line="43" code="50019">No short description for property $dynamicProperties</critical>
      <critical line="52" code="50019">No short description for property $content</critical>
      <critical line="71" code="50019">No short description for property $groups</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/User/Concrete.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="UserValue">ezp\Persistence\User</namespace-alias>
    <namespace-alias name="User">ezp\User</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\User" line="28" package="Default">
      <name>Concrete</name>
      <full_name>\ezp\User\Concrete</full_name>
      <extends>\ezp\Base\Model</extends>
      <extends>\ezp\User</extends>
      <docblock line="16">
        <description><![CDATA[This class represents a User item]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="16" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="string" variable="$login">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property" description="" type="string" variable="$email">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property" description="" type="string" variable="$password">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property" description="" type="int" variable="$hashAlgorithm">
          <type by_reference="false">int</type>
        </tag>
        <tag line="16" name="property" description="" type="\ezp\User\Group[]" variable="$groups">
          <type by_reference="false">\ezp\User\Group[]</type>
        </tag>
        <tag line="16" name="property" description="" type="\ezp\User\Role[]" variable="$roles">
          <type by_reference="false">\ezp\User\Role[]</type>
        </tag>
        <tag line="16" name="property" description="" type="\ezp\User\Policy[]" variable="$policies">
          <type by_reference="false">\ezp\User\Policy[]</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="33" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'login' => true,
        'email' => true,
        'passwordHash' => true,
        'hashAlgorithm' => true,// @todo Make read only?
        'isEnabled' => true,
        //'maxLogin' => true,
    )]]></default>
        <docblock line="30">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="Readable of properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array(
        'groups' => false,
        'roles' => false,
        'policies' => false,
    )]]></default>
        <docblock line="43">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="var" description="Dynamic properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="55" package="Default">
        <name>$content</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="The User Group Content Object" type="\ezp\Content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="62" package="Default">
        <name>$roles</name>
        <default><![CDATA[]]></default>
        <docblock line="57">
          <description><![CDATA[Assigned Roles]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="var" description="" type="\ezp\User\Role[]">
            <type by_reference="false">\ezp\User\Role[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="69" package="Default">
        <name>$policies</name>
        <default><![CDATA[]]></default>
        <docblock line="64">
          <description><![CDATA[Assigned and inherited policies (via assigned and inherited roles)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="var" description="" type="\ezp\User\Policy[]">
            <type by_reference="false">\ezp\User\Policy[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="74" package="Default">
        <name>$groups</name>
        <default><![CDATA[]]></default>
        <docblock line="71">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="var" description="The Groups user is assigned to" type="\ezp\User\Group[]">
            <type by_reference="false">\ezp\User\Group[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="81" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Creates and setups User object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="param" description="Lets you specify id of User object on creation" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$id</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\User" line="96" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Returns definition of the user object, atm: permissions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="access" description="private"/>
          <tag line="90" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="125" package="Default">
        <name>getGroups</name>
        <type>function</type>
        <docblock line="120">
          <description><![CDATA[List of assigned groups]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="120" name="return" description="" type="\ezp\User\Group[]">
            <type by_reference="false">\ezp\User\Group[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="135" package="Default">
        <name>getRoles</name>
        <type>function</type>
        <docblock line="130">
          <description><![CDATA[List of assigned Roles]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="130" name="return" description="" type="array|\ezp\User\Role[]">
            <type by_reference="false">array</type>
            <type by_reference="false">\ezp\User\Role[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="145" package="Default">
        <name>getPolicies</name>
        <type>function</type>
        <docblock line="140">
          <description><![CDATA[List of assigned and inherited policies (via assigned and inherited roles)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="140" name="return" description="" type="array|\ezp\User\Policy[]">
            <type by_reference="false">array</type>
            <type by_reference="false">\ezp\User\Policy[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="162" package="Default">
        <name>hasAccessTo</name>
        <type>function</type>
        <docblock line="150">
          <description><![CDATA[Checks if user has access to a specific module/function]]></description>
          <long-description><![CDATA[<p>Return array of limitations if user has access to a certain function
but limited by the returned limitations.
If you have the model instance you want to check permissions against, then
use {@link \ezp\Base\Repository::canUser()}.</p>]]></long-description>
          <tag line="150" name="param" description="" type="string" variable="$module">
            <type by_reference="false">string</type>
          </tag>
          <tag line="150" name="param" description="" type="string" variable="$function">
            <type by_reference="false">string</type>
          </tag>
          <tag line="150" name="return" description="" type="array|bool">
            <type by_reference="false">array</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="162">
          <name>$module</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="162">
          <name>$function</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/User/Service.php" hash="82dc2e0e38accbddb0ea1bf0f362868c">
    <parse_markers>
      <error line="45" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in create()</error>
      <error line="139" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in update()</error>
      <error line="152" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in delete()</error>
      <error line="162" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $parentGroup in createGroup()</error>
      <error line="259" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $group in assignGroup()</error>
      <error line="259" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in assignGroup()</error>
      <error line="286" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $group in unAssignGroup()</error>
      <error line="286" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in unAssignGroup()</error>
      <error line="335" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in createRole()</error>
      <error line="384" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in updateRole()</error>
      <error line="401" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in deleteRole()</error>
      <error line="415" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in addPolicy()</error>
      <error line="415" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $policy in addPolicy()</error>
      <error line="431" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in removePolicy()</error>
      <error line="431" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $policy in removePolicy()</error>
      <error line="463" code="50012">No short description for method assignRole()</error>
      <error line="463" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $group in assignRole()</error>
      <error line="463" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in assignRole()</error>
      <error line="486" code="50012">No short description for method unAssignRole()</error>
      <error line="486" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $group in unAssignRole()</error>
      <error line="486" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in unAssignRole()</error>
      <error line="509" code="50012">No short description for method buildUser()</error>
      <error line="509" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $vo in buildUser()</error>
      <error line="509" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in buildUser()</error>
      <error line="544" code="50012">No short description for method buildGroup()</error>
      <error line="544" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in buildGroup()</error>
      <error line="574" code="50012">No short description for method buildRole()</error>
      <error line="574" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $vo in buildRole()</error>
      <error line="595" code="50012">No short description for method buildPolicy()</error>
      <error line="595" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $vo in buildPolicy()</error>
      <error line="595" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in buildPolicy()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/User/Service.php</error>
    </parse_markers>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="BaseService">ezp\Base\Service</namespace-alias>
    <namespace-alias name="Lazy">ezp\Base\Collection\Lazy</namespace-alias>
    <namespace-alias name="LazyType">ezp\Base\Collection\LazyType</namespace-alias>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="BadConfiguration">ezp\Base\Exception\BadConfiguration</namespace-alias>
    <namespace-alias name="Forbidden">ezp\Base\Exception\Forbidden</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="NotFoundWithType">ezp\Base\Exception\NotFoundWithType</namespace-alias>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="Location">ezp\Content\Location</namespace-alias>
    <namespace-alias name="ProxyContent">ezp\Content\Proxy</namespace-alias>
    <namespace-alias name="User">ezp\User</namespace-alias>
    <namespace-alias name="ConcreteUser">ezp\User\Concrete</namespace-alias>
    <namespace-alias name="FailedLogin">ezp\User\Exception\FailedLogin</namespace-alias>
    <namespace-alias name="ProxyUser">ezp\User\Proxy</namespace-alias>
    <namespace-alias name="ConcreteGroup">ezp\User\Group\Concrete</namespace-alias>
    <namespace-alias name="ProxyGroup">ezp\User\Group\Proxy</namespace-alias>
    <namespace-alias name="ConcreteRole">ezp\User\Role\Concrete</namespace-alias>
    <namespace-alias name="ProxyRole">ezp\User\Role\Proxy</namespace-alias>
    <namespace-alias name="UserValueObject">ezp\Persistence\User</namespace-alias>
    <namespace-alias name="RoleValueObject">ezp\Persistence\User\Role</namespace-alias>
    <namespace-alias name="RoleUpdateStruct">ezp\Persistence\User\RoleUpdateStruct</namespace-alias>
    <namespace-alias name="PolicyValueObject">ezp\Persistence\User\Policy</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\User" line="43" package="Default">
      <name>Service</name>
      <full_name>\ezp\User\Service</full_name>
      <extends>\ezp\Base\Service</extends>
      <docblock line="39">
        <description><![CDATA[User Service, extends repository with user specific operations]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="53" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Crate a User object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="" type="\ezp\User" variable="$user">
            <type by_reference="false">\ezp\User</type>
          </tag>
          <tag line="45" name="return" description="" type="\ezp\User">
            <type by_reference="false">\ezp\User</type>
          </tag>
          <tag line="45" name="throws" description="If property is missing or has a value of null" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="45" name="throws" description="If attached content object with same id does not exist" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="72" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Load a User object by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="65" name="return" description="" type="\ezp\User">
            <type by_reference="false">\ezp\User</type>
          </tag>
          <tag line="65" name="throws" description="If user is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="89" package="Default">
        <name>loadByCredentials</name>
        <type>function</type>
        <docblock line="80">
          <description><![CDATA[Load a User object by login and password if user is enabled]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="param" description="" type="string" variable="$login">
            <type by_reference="false">string</type>
          </tag>
          <tag line="80" name="param" description="" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="80" name="return" description="" type="\ezp\User">
            <type by_reference="false">\ezp\User</type>
          </tag>
          <tag line="80" name="throws" description="If user is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="80" name="throws" description="If password does not match" type="\ezp\User\Exception\FailedLogin">
            <type by_reference="false">\ezp\User\Exception\FailedLogin</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$login</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="89">
          <name>$password</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ezp\User" line="120" package="Default">
        <name>createHash</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Create user password hash]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="param" description="" type="string" variable="$login">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="param" description="" type="string" variable="$password">
            <type by_reference="false">string</type>
          </tag>
          <tag line="112" name="param" description="One of User::PASSWORD_HASH_* constants" type="int" variable="$type">
            <type by_reference="false">int</type>
          </tag>
          <tag line="112" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$login</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="120">
          <name>$password</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="120">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="145" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="139">
          <description><![CDATA[Update a User object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="139" name="param" description="" type="\ezp\User" variable="$user">
            <type by_reference="false">\ezp\User</type>
          </tag>
          <tag line="139" name="throws" description="If property is missing or has a value of null" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="145">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="157" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="152">
          <description><![CDATA[Delete a User object by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="param" description="" type="\ezp\User" variable="$user">
            <type by_reference="false">\ezp\User</type>
          </tag>
        </docblock>
        <argument line="157">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="173" package="Default">
        <name>createGroup</name>
        <type>function</type>
        <docblock line="162">
          <description><![CDATA[Crate a Group object]]></description>
          <long-description><![CDATA[<p>Notice: Group related api currently deals with content in the background, see Readme.rst for info and constraints</p>]]></long-description>
          <tag line="162" name="param" description="" type="\ezp\User\Group" variable="$parentGroup">
            <type by_reference="false">\ezp\User\Group</type>
          </tag>
          <tag line="162" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="162" name="param" description="" type="string" variable="$description">
            <type by_reference="false">string</type>
          </tag>
          <tag line="162" name="return" description="" type="\ezp\User\Group">
            <type by_reference="false">\ezp\User\Group</type>
          </tag>
          <tag line="162" name="throws" description="If name or description properties (fields) are not found" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
        </docblock>
        <argument line="173">
          <name>$parentGroup</name>
          <default><![CDATA[]]></default>
          <type>Group</type>
        </argument>
        <argument line="173">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="173">
          <name>$description</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="214" package="Default">
        <name>loadGroup</name>
        <type>function</type>
        <docblock line="204">
          <description><![CDATA[Load a Group object by id]]></description>
          <long-description><![CDATA[<p>Notice: Group related api currently deals with content in the background, see Readme.rst for info and constraints</p>]]></long-description>
          <tag line="204" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="204" name="return" description="" type="\ezp\User\Group">
            <type by_reference="false">\ezp\User\Group</type>
          </tag>
          <tag line="204" name="throws" description="If group is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="204" name="throws" description="If content found with $id does not have correct typeId" type="\ezp\Base\Exception\NotFoundWithType">
            <type by_reference="false">\ezp\Base\Exception\NotFoundWithType</type>
          </tag>
        </docblock>
        <argument line="214">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="268" package="Default">
        <name>assignGroup</name>
        <type>function</type>
        <docblock line="259">
          <description><![CDATA[Assign a Group to User]]></description>
          <long-description><![CDATA[<p>Notice: Group related api currently deals with content in the background, see Readme.rst for info and constraints</p>]]></long-description>
          <tag line="259" name="param" description="" type="\ezp\User\Group" variable="$group">
            <type by_reference="false">\ezp\User\Group</type>
          </tag>
          <tag line="259" name="param" description="" type="\ezp\User" variable="$user">
            <type by_reference="false">\ezp\User</type>
          </tag>
          <tag line="259" name="throws" description="If $object has not been persisted yet" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
        </docblock>
        <argument line="268">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>Group</type>
        </argument>
        <argument line="268">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="297" package="Default">
        <name>unAssignGroup</name>
        <type>function</type>
        <docblock line="286">
          <description><![CDATA[Remove a Group assignment from a User]]></description>
          <long-description><![CDATA[<p>Notice: Group related api currently deals with content in the background, see Readme.rst for info and constraints</p>]]></long-description>
          <tag line="286" name="todo" description=": Either allow removing last group of a user or define which api should be used for deleting users + tree"/>
          <tag line="286" name="param" description="" type="\ezp\User\Group" variable="$group">
            <type by_reference="false">\ezp\User\Group</type>
          </tag>
          <tag line="286" name="param" description="" type="\ezp\User" variable="$user">
            <type by_reference="false">\ezp\User</type>
          </tag>
          <tag line="286" name="throws" description="If $object has not been persisted yet" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
        </docblock>
        <argument line="297">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>Group</type>
        </argument>
        <argument line="297">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="343" package="Default">
        <name>createRole</name>
        <type>function</type>
        <docblock line="335">
          <description><![CDATA[Crate a Role object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="335" name="param" description="" type="\ezp\User\Role" variable="$role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
          <tag line="335" name="return" description="" type="\ezp\User\Role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
          <tag line="335" name="throws" description="If property is missing or has a value of null" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="335" name="throws" description="If user does not have access to create provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="343">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="363" package="Default">
        <name>loadRole</name>
        <type>function</type>
        <docblock line="356">
          <description><![CDATA[Load a Role object by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="356" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="356" name="return" description="" type="\ezp\User\Role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
          <tag line="356" name="throws" description="If user is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="363">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="391" package="Default">
        <name>updateRole</name>
        <type>function</type>
        <docblock line="384">
          <description><![CDATA[Update a Role object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="384" name="param" description="" type="\ezp\User\Role" variable="$role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
          <tag line="384" name="throws" description="If property is missing or has a value of null" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="384" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="391">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="407" package="Default">
        <name>deleteRole</name>
        <type>function</type>
        <docblock line="401">
          <description><![CDATA[Delete a Role object by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="401" name="param" description="" type="\ezp\User\Role" variable="$role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
          <tag line="401" name="throws" description="If user does not have access to delete provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="407">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="422" package="Default">
        <name>addPolicy</name>
        <type>function</type>
        <docblock line="415">
          <description><![CDATA[Add a policy to a persisted role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="415" name="param" description="" type="\ezp\User\Role" variable="$role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
          <tag line="415" name="param" description="" type="\ezp\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\User\Policy</type>
          </tag>
          <tag line="415" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="422">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
        <argument line="422">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="438" package="Default">
        <name>removePolicy</name>
        <type>function</type>
        <docblock line="431">
          <description><![CDATA[Remove a policy from a persisted role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="431" name="param" description="" type="\ezp\User\Role" variable="$role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
          <tag line="431" name="param" description="" type="\ezp\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\User\Policy</type>
          </tag>
          <tag line="431" name="throws" description="If user does not have access to edit provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="438">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
        <argument line="438">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="469" package="Default">
        <name>assignRole</name>
        <type>function</type>
        <docblock line="463">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="463" name="param" description="" type="\ezp\User\Group" variable="$group">
            <type by_reference="false">\ezp\User\Group</type>
          </tag>
          <tag line="463" name="param" description="" type="\ezp\User\Role" variable="$role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
          <tag line="463" name="throws" description="If group is already contains role" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="463" name="throws" description="If user does not have access to assign provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="469">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>Group</type>
        </argument>
        <argument line="469">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User" line="492" package="Default">
        <name>unAssignRole</name>
        <type>function</type>
        <docblock line="486">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="486" name="param" description="Can also take instance of user atm" type="\ezp\User\Group" variable="$group">
            <type by_reference="false">\ezp\User\Group</type>
          </tag>
          <tag line="486" name="param" description="" type="\ezp\User\Role" variable="$role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
          <tag line="486" name="throws" description="If group does not contain role" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="486" name="throws" description="If user does not have access to (un)assign provided object" type="\ezp\Base\Exception\Forbidden">
            <type by_reference="false">\ezp\Base\Exception\Forbidden</type>
          </tag>
        </docblock>
        <argument line="492">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>Groupable</type>
        </argument>
        <argument line="492">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\User" line="514" package="Default">
        <name>buildUser</name>
        <type>function</type>
        <docblock line="509">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="509" name="param" description="" type="\ezp\Persistence\User" variable="$vo">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
          <tag line="509" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="509" name="return" description="" type="\ezp\User">
            <type by_reference="false">\ezp\User</type>
          </tag>
        </docblock>
        <argument line="514">
          <name>$vo</name>
          <default><![CDATA[]]></default>
          <type>UserValueObject</type>
        </argument>
        <argument line="514">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\User" line="548" package="Default">
        <name>buildGroup</name>
        <type>function</type>
        <docblock line="544">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="544" name="param" description="" type="\ezp\Content" variable="$content">
            <type by_reference="false">\ezp\Content</type>
          </tag>
          <tag line="544" name="return" description="" type="\ezp\User\Group">
            <type by_reference="false">\ezp\User\Group</type>
          </tag>
        </docblock>
        <argument line="548">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\User" line="578" package="Default">
        <name>buildRole</name>
        <type>function</type>
        <docblock line="574">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="574" name="param" description="" type="\ezp\Persistence\User\Role" variable="$vo">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
          <tag line="574" name="return" description="" type="\ezp\User\Role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
        </docblock>
        <argument line="578">
          <name>$vo</name>
          <default><![CDATA[]]></default>
          <type>RoleValueObject</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\User" line="600" package="Default">
        <name>buildPolicy</name>
        <type>function</type>
        <docblock line="595">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="595" name="param" description="" type="\ezp\Persistence\User\Policy" variable="$vo">
            <type by_reference="false">\ezp\Persistence\User\Policy</type>
          </tag>
          <tag line="595" name="param" description="" type="\ezp\User\Role" variable="$role">
            <type by_reference="false">\ezp\User\Role</type>
          </tag>
          <tag line="595" name="return" description="" type="\ezp\User\Policy">
            <type by_reference="false">\ezp\User\Policy</type>
          </tag>
        </docblock>
        <argument line="600">
          <name>$vo</name>
          <default><![CDATA[]]></default>
          <type>PolicyValueObject</type>
        </argument>
        <argument line="600">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/User/Role/Proxy.php" hash="5dd70084b120fa9c4f3713fe4f399d11">
    <parse_markers>
      <error line="26" code="50012">No short description for method __construct()</error>
      <error line="26" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $service in __construct()</error>
      <error line="35" code="50012">No short description for method lazyLoad()</error>
      <error line="58" code="50012">No short description for method getPolicies()</error>
      <error line="67" code="50012">No short description for method addPolicy()</error>
      <error line="78" code="50012">No short description for method removePolicy()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/User/Role/Proxy.php</error>
    </parse_markers>
    <namespace-alias name="ModelProxy">ezp\Base\Proxy\Model</namespace-alias>
    <namespace-alias name="Policy">ezp\User\Policy</namespace-alias>
    <namespace-alias name="Service">ezp\User\Service</namespace-alias>
    <namespace-alias name="Role">ezp\User\Role</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\User\Role" line="24" package="Default">
      <name>Proxy</name>
      <full_name>\ezp\User\Role\Proxy</full_name>
      <extends>\ezp\Base\Proxy\Model</extends>
      <extends>\ezp\User\Role</extends>
      <docblock line="16">
        <description><![CDATA[This class represents a Proxy Role item]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="16" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="16" name="property" description="" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="property-read" description="Use {@link \ezp\User\Service::addGroup} &amp; {@link \ezp\User\Service::removeGroup}" type="\mixed[]" variable="$groupIds">
          <type by_reference="false">\mixed[]</type>
        </tag>
        <tag line="16" name="property-read" description="Use {@link \ezp\User\Service::addPolicy} &amp; {@link \ezp\User\Service::removePolicy}" type="\ezp\User\Policy[]" variable="$policies">
          <type by_reference="false">\ezp\User\Policy[]</type>
        </tag>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Role" line="30" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="26" name="param" description="" type="\ezp\User\Service" variable="$service">
            <type by_reference="false">\ezp\User\Service</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$service</name>
          <default><![CDATA[]]></default>
          <type>Service</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\User\Role" line="38" package="Default">
        <name>lazyLoad</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\User\Role" line="53" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Returns definition of the section object, atm: permissions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="access" description="private"/>
          <tag line="47" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Role" line="61" package="Default">
        <name>getPolicies</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="return" description="" type="\ezp\User\Policy[]">
            <type by_reference="false">\ezp\User\Policy[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Role" line="72" package="Default">
        <name>addPolicy</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="internal" description="Use {@link \ezp\User\Service::addPolicy()}"/>
          <tag line="67" name="param" description="" type="\ezp\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\User\Policy</type>
          </tag>
          <tag line="67" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Role" line="83" package="Default">
        <name>removePolicy</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="internal" description="Use {@link \ezp\User\Service::removePolicy()}"/>
          <tag line="78" name="param" description="" type="\ezp\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\User\Policy</type>
          </tag>
          <tag line="78" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/User/Role/Concrete.php" hash="9e577c576e8a25387b0ddb7ba479fbd5">
    <parse_markers>
      <critical line="27" code="50019">No short description for property $readWriteProperties</critical>
      <critical line="36" code="50019">No short description for property $dynamicProperties</critical>
      <critical line="44" code="50019">No short description for property $policies</critical>
      <error line="74" code="50012">No short description for method getPolicies()</error>
      <error line="82" code="50012">No short description for method addPolicy()</error>
      <error line="96" code="50012">No short description for method removePolicy()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/User/Role/Concrete.php</error>
    </parse_markers>
    <namespace-alias name="Model">ezp\Base\Model</namespace-alias>
    <namespace-alias name="TypeCollection">ezp\Base\Collection\Type</namespace-alias>
    <namespace-alias name="Role">ezp\User\Role</namespace-alias>
    <namespace-alias name="Policy">ezp\User\Policy</namespace-alias>
    <namespace-alias name="RoleValue">ezp\Persistence\User\Role</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\User\Role" line="25" package="Default">
      <name>Concrete</name>
      <full_name>\ezp\User\Role\Concrete</full_name>
      <extends>\ezp\Base\Model</extends>
      <extends>\ezp\User\Role</extends>
      <docblock line="17">
        <description><![CDATA[This class represents a Concrete Role item]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="17" name="property-read" description="" type="mixed" variable="$id">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="17" name="property" description="" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="17" name="property-read" description="Use {@link \ezp\User\Service::addGroup} &amp; {@link \ezp\User\Service::removeGroup}" type="\mixed[]" variable="$groupIds">
          <type by_reference="false">\mixed[]</type>
        </tag>
        <tag line="17" name="property-read" description="Use {@link \ezp\User\Service::addPolicy} &amp; {@link \ezp\User\Service::removePolicy}" type="\ezp\User\Policy[]" variable="$policies">
          <type by_reference="false">\ezp\User\Policy[]</type>
        </tag>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$readWriteProperties</name>
        <default><![CDATA[array(
        'id' => false,
        'name' => true,
        'groupIds' => false,
    )]]></default>
        <docblock line="27">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="Readable of properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" package="Default">
        <name>$dynamicProperties</name>
        <default><![CDATA[array(
        //'groups' => false,
        'policies' => true,
    )]]></default>
        <docblock line="36">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="Dynamic properties on this object" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="47" package="Default">
        <name>$policies</name>
        <default><![CDATA[]]></default>
        <docblock line="44">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="" type="\ezp\User\Policy[]">
            <type by_reference="false">\ezp\User\Policy[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Role" line="52" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="49">
          <description><![CDATA[Creates and setups User object]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\User\Role" line="64" package="Default">
        <name>definition</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Returns definition of the role object, atm: permissions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="access" description="private"/>
          <tag line="58" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Role" line="77" package="Default">
        <name>getPolicies</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="return" description="" type="\ezp\User\Policy[]">
            <type by_reference="false">\ezp\User\Policy[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Role" line="87" package="Default">
        <name>addPolicy</name>
        <type>function</type>
        <docblock line="82">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="internal" description="Use {@link \ezp\User\Service::addPolicy()}"/>
          <tag line="82" name="param" description="" type="\ezp\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\User\Policy</type>
          </tag>
          <tag line="82" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\User\Role" line="101" package="Default">
        <name>removePolicy</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="internal" description="Use {@link \ezp\User\Service::removePolicy()}"/>
          <tag line="96" name="param" description="" type="\ezp\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\User\Policy</type>
          </tag>
          <tag line="96" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Fields/Storage.php" hash="f40bc3e4bf9dd4b3dddbe86a8a5f24ff">
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in storeFieldData()</error>
      <error line="74" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in getFieldData()</error>
      <error line="86" code="50012">No short description for method deleteFieldData()</error>
      <error line="100" code="50012">No short description for method copyFieldData()</error>
      <error line="100" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in copyFieldData()</error>
      <error line="106" code="50012">No short description for method getIndexData()</error>
      <error line="106" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in getIndexData()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Fields/Storage.php</error>
    </parse_markers>
    <namespace-alias name="Field">ezp\Persistence\Content\Field</namespace-alias>
    <interface namespace="ezp\Persistence\Fields" line="30" package="Default">
      <name>Storage</name>
      <full_name>\ezp\Persistence\Fields\Storage</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Interface for setting field type data.]]></description>
        <long-description><![CDATA[<p>Methods in this interface are called by storage engine.</p>

<p>$context array passed to most methods provides some context for the field handler about the
currently used storage engine.
The array should at least define 2 keys :
  - identifier (connection identifier)
  - connection (the connection handler)
For example, using Legacy storage engine, $context will be:
  - identifier = 'LegacyStorage'
  - connection = {@link \ezp\Persistence\Storage\Legacy\EzcDbHandler} object handler (for DB connection),
                 to be used accordingly to
                 {@link http://incubator.apache.org/zetacomponents/documentation/trunk/Database/tutorial.html ezcDatabase} usage</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Fields" line="72" package="Default">
        <name>storeFieldData</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Allows custom field types to store data in an external source (e.g. another DB table).]]></description>
          <long-description><![CDATA[<p>Stores value for $field in an external data source.
The whole {@link ezp\Persistence\Content\Field} object is passed and its value
is accessible through the {@link ezp\Persistence\Content\FieldValue} 'value' property.
This value holds the data filled by the user as a {@link ezp\Content\FieldType\Value} based object,
according to the field type (e.g. for TextLine, it will be a {@link ezp\Content\FieldType\TextLine\Value} object).</p>

<p>$field->id = unique ID from the attribute tables (needs to be generated by
database back end on create, before the external data source may be
called from storing).</p>

<p>The context array provides some context for the field handler about the
currently used storage engine.
The array should at least define 2 keys :
  - identifier (connection identifier)
  - connection (the connection handler)
For example, using Legacy storage engine, $context will be:
  - identifier = 'LegacyStorage'
  - connection = {@link \ezp\Persistence\Storage\Legacy\EzcDbHandler} object handler (for DB connection),
                 to be used accordingly to
The context array provides some context for the field handler about the
currently used storage engine.
The array should at least define 2 keys :
  - identifier (connection identifier)
  - connection (the connection handler)
For example, using Legacy storage engine, $context will be:
  - identifier = 'LegacyStorage'
  - connection = {@link \ezp\Persistence\Storage\Legacy\EzcDbHandler} object handler (for DB connection),
                 to be used accordingly to
                 {@link http://incubator.apache.org/zetacomponents/documentation/trunk/Database/tutorial.html ezcDatabase} usage</p>

<p>This method might return true if $field needs to be updated after storage done here (to store a PK for instance).
In any other case, this method must not return anything (null).</p>]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="32" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="32" name="return" description="" type="null|true">
            <type by_reference="false">null</type>
            <type by_reference="false">true</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="72">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Fields" line="84" package="Default">
        <name>getFieldData</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[Populates $field value property based on the external data.]]></description>
          <long-description><![CDATA[<p>$field->value is a {@link ezp\Persistence\Content\FieldValue} object.
This value holds the data as a {@link ezp\Content\FieldType\Value} based object,
according to the field type (e.g. for TextLine, it will be a {@link ezp\Content\FieldType\TextLine\Value} object).</p>]]></long-description>
          <tag line="74" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="74" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="74" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="84">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Fields" line="91" package="Default">
        <name>deleteFieldData</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="param" description="Array of field Ids" type="array" variable="$fieldId">
            <type by_reference="false">array</type>
          </tag>
          <tag line="86" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="86" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$fieldId</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="91">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Fields" line="98" package="Default">
        <name>hasFieldData</name>
        <type>function</type>
        <docblock line="93">
          <description><![CDATA[Checks if field type has external data to deal with]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Fields" line="104" package="Default">
        <name>copyFieldData</name>
        <type>function</type>
        <docblock line="100">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="100" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="104">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Fields" line="110" package="Default">
        <name>getIndexData</name>
        <type>function</type>
        <docblock line="106">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="106" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="110">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Persistence/Content.php" hash="aeffe6d8c88e1a00fa9321a1a86908ca">
    <parse_markers>
      <critical line="25" code="50019">No short description for property $id</critical>
      <critical line="37" code="50019">No short description for property $typeId</critical>
      <critical line="42" code="50019">No short description for property $sectionId</critical>
      <critical line="47" code="50019">No short description for property $ownerId</critical>
      <critical line="88" code="50019">No short description for property $locations</critical>
      <critical line="93" code="50019">No short description for property $alwaysAvailable</critical>
      <critical line="13" code="50005">No short description for class Content</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence" line="15" package="Default">
      <name>Content</name>
      <full_name>\ezp\Persistence\Content</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="13">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="ezp\Persistence" line="21" package="Default">
        <name>STATUS_DRAFT</name>
        <value><![CDATA[0]]></value>
        <docblock line="17">
          <description><![CDATA[Publication status constants]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ezp\Persistence" line="22">
        <name>STATUS_PUBLISHED</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="ezp\Persistence" line="23">
        <name>STATUS_ARCHIVED</name>
        <value><![CDATA[2]]></value>
      </constant>
      <property final="false" static="false" visibility="public" line="28" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$status</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[One of Content::STATUS_DRAFT, Content::STATUS_PUBLISHED, Content::STATUS_ARCHIVED]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="Constant." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="40" package="Default">
        <name>$typeId</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="45" package="Default">
        <name>$sectionId</name>
        <default><![CDATA[]]></default>
        <docblock line="42">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$ownerId</name>
        <default><![CDATA[]]></default>
        <docblock line="47">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="56" package="Default">
        <name>$modified</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[Content modification date]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="Unix timestamp" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="62" package="Default">
        <name>$published</name>
        <default><![CDATA[]]></default>
        <docblock line="58">
          <description><![CDATA[Content publication date]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="var" description="Unix timestamp" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="75" package="Default">
        <name>$currentVersionNo</name>
        <default><![CDATA[]]></default>
        <docblock line="64">
          <description><![CDATA[Current Version number]]></description>
          <long-description><![CDATA[<p>Contains the current version number of the published version.
If no published version exists, last draft is used, and if published version is removed, current version is
set to latest modified version.</p>

<p>Eg: When creating a new Content object current version will point to version 1 even if it is a draft.</p>]]></long-description>
          <tag line="64" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="86" package="Default">
        <name>$version</name>
        <default><![CDATA[]]></default>
        <docblock line="77">
          <description><![CDATA[The loaded version]]></description>
          <long-description><![CDATA[<p>The Version, containing version information and all
{@link \ezp\Persistence\Content\Field}s in this version (in all languages).
Non-translatable fields will only occur once!</p>]]></long-description>
          <tag line="77" name="var" description="" type="\ezp\Persistence\Content\Version">
            <type by_reference="false">\ezp\Persistence\Content\Version</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="91" package="Default">
        <name>$locations</name>
        <default><![CDATA[array()]]></default>
        <docblock line="88">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="var" description="" type="\ezp\Persistence\Content\Location[]">
            <type by_reference="false">\ezp\Persistence\Content\Location[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="96" package="Default">
        <name>$alwaysAvailable</name>
        <default><![CDATA[false]]></default>
        <docblock line="93">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="var" description="Always available flag" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="102" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="98">
          <description><![CDATA[Remote identifier used as a custom identifier for the object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="108" package="Default">
        <name>$initialLanguageId</name>
        <default><![CDATA[]]></default>
        <docblock line="104">
          <description><![CDATA[Language id the content was initially created in]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/UpdateStruct.php" hash="39d4d253058d67cb757fb249337f677b">
    <parse_markers>
      <critical line="18" code="50019">No short description for property $id</critical>
      <critical line="23" code="50019">No short description for property $versionNo</critical>
      <critical line="28" code="50019">No short description for property $name</critical>
      <critical line="33" code="50019">No short description for property $creatorId</critical>
      <critical line="38" code="50019">No short description for property $ownerId</critical>
      <critical line="62" code="50019">No short description for property $initialLanguageId</critical>
      <critical line="14" code="50005">No short description for class UpdateStruct</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/UpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content" line="16" package="Default">
      <name>UpdateStruct</name>
      <full_name>\ezp\Persistence\Content\UpdateStruct</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="21" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="" type="int|string">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="26" package="Default">
        <name>$versionNo</name>
        <default><![CDATA[]]></default>
        <docblock line="23">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$name</name>
        <default><![CDATA[array()]]></default>
        <docblock line="28">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="Eg. array( 'eng-GB' =&gt; &quot;New Article&quot; )" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$creatorId</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="Creator of the new version" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="41" package="Default">
        <name>$ownerId</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="Owner id of the content object" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="48" package="Default">
        <name>$fields</name>
        <default><![CDATA[array()]]></default>
        <docblock line="43">
          <description><![CDATA[Contains fields to be updated.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="var" description="" type="\ezp\Persistence\Content\Field[]">
            <type by_reference="false">\ezp\Persistence\Content\Field[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="54" package="Default">
        <name>$published</name>
        <default><![CDATA[]]></default>
        <docblock line="50">
          <description><![CDATA[Publication date, only used by publish()]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="var" description="Unix timestamp" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="60" package="Default">
        <name>$modified</name>
        <default><![CDATA[]]></default>
        <docblock line="56">
          <description><![CDATA[Modification date]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="Unix timestamp" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="67" package="Default">
        <name>$initialLanguageId</name>
        <default><![CDATA[false]]></default>
        <docblock line="62">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="todo" description=": Document"/>
          <tag line="62" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Type.php" hash="37aca089a8b93600e96551c4e9c34c76">
    <parse_markers>
      <critical line="183" code="50019">No short description for property $defaultAlwaysAvailable</critical>
      <critical line="14" code="50005">No short description for class Type</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Type.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <namespace-alias name="Location">ezp\Persistence\Content\Location</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content" line="17" package="Default">
      <name>Type</name>
      <full_name>\ezp\Persistence\Content\Type</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="14" name="todo" description="What about sort_field and sort_order?"/>
      </docblock>
      <constant namespace="ezp\Persistence\Content" line="22" package="Default">
        <name>STATUS_DEFINED</name>
        <value><![CDATA[0]]></value>
        <docblock line="19">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="Status constant for defined (aka &quot;published&quot;) Type" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="27" package="Default">
        <name>STATUS_DRAFT</name>
        <value><![CDATA[1]]></value>
        <docblock line="24">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="Status constant for draft (aka &quot;temporary&quot;) Type" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="32" package="Default">
        <name>STATUS_MODIFIED</name>
        <value><![CDATA[2]]></value>
        <docblock line="29">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="var" description="Status constant for modified (aka &quot;deferred for publishing&quot;) Type" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="public" line="39" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="34">
          <description><![CDATA[Primary key: Content type ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="46" package="Default">
        <name>$status</name>
        <default><![CDATA[self::STATUS_DRAFT]]></default>
        <docblock line="41">
          <description><![CDATA[Primary key: Status (legacy: "version")]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="var" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="58" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="48">
          <description><![CDATA[Human readable name of the content type]]></description>
          <long-description><![CDATA[<p>The structure of this field is:</p>

<pre><code>array( 'eng' => '<name_eng>', 'de' => '<name_de>' );
</code></pre>]]></long-description>
          <tag line="48" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="70" package="Default">
        <name>$description</name>
        <default><![CDATA[array()]]></default>
        <docblock line="60">
          <description><![CDATA[Human readable description of the content type]]></description>
          <long-description><![CDATA[<p>The structure of this field is:</p>

<pre><code>array( 'eng' => '<description_eng>', 'de' => '<description_de>' );
</code></pre>]]></long-description>
          <tag line="60" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="77" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="72">
          <description><![CDATA[String identifier of a type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="84" package="Default">
        <name>$created</name>
        <default><![CDATA[]]></default>
        <docblock line="79">
          <description><![CDATA[Creation date (timestamp)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="91" package="Default">
        <name>$modified</name>
        <default><![CDATA[]]></default>
        <docblock line="86">
          <description><![CDATA[Modification date (timestamp)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="98" package="Default">
        <name>$creatorId</name>
        <default><![CDATA[]]></default>
        <docblock line="93">
          <description><![CDATA[Creator user id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="106" package="Default">
        <name>$modifierId</name>
        <default><![CDATA[]]></default>
        <docblock line="100">
          <description><![CDATA[Modifier user id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="113" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="108">
          <description><![CDATA[Unique remote ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="123" package="Default">
        <name>$urlAliasSchema</name>
        <default><![CDATA[]]></default>
        <docblock line="115">
          <description><![CDATA[URL alias schema
Same as {@link \ezp\Persistence\Content\Type::$nameSchema}.]]></description>
          <long-description><![CDATA[<p>If nothing is provided, $nameSchema will be used instead.</p>]]></long-description>
          <tag line="115" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="115" name="see" description="\ezp\Persistence\Content\Type::$nameSchema" refers="\ezp\Persistence\Content\Type::$nameSchema"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="135" package="Default">
        <name>$nameSchema</name>
        <default><![CDATA[]]></default>
        <docblock line="125">
          <description><![CDATA[Name schema.]]></description>
          <long-description><![CDATA[<p>Can be composed of FieldDefinition identifier place holders.
These place holders must comply this pattern : <field_definition_identifier>.
An OR condition can be used :
&lt;field_def|other_field_def>
In this example, field_def will be used if available. If not, other_field_def will be used for content name generation</p>]]></long-description>
          <tag line="125" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="142" package="Default">
        <name>$isContainer</name>
        <default><![CDATA[]]></default>
        <docblock line="137">
          <description><![CDATA[Determines if the type is a container]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="149" package="Default">
        <name>$initialLanguageId</name>
        <default><![CDATA[]]></default>
        <docblock line="144">
          <description><![CDATA[Initial language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="144" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="158" package="Default">
        <name>$sortField</name>
        <default><![CDATA[Location::SORT_FIELD_PUBLISHED]]></default>
        <docblock line="151">
          <description><![CDATA[Specifies which property the child locations should be sorted on by default when created]]></description>
          <long-description><![CDATA[<p>Valid values are found at {@link Location::SORT_FIELD_*}</p>]]></long-description>
          <tag line="151" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="167" package="Default">
        <name>$sortOrder</name>
        <default><![CDATA[Location::SORT_ORDER_DESC]]></default>
        <docblock line="160">
          <description><![CDATA[Specifies whether the sort order should be ascending or descending by default when created]]></description>
          <long-description><![CDATA[<p>Valid values are {@link Location::SORT_ORDER_*}</p>]]></long-description>
          <tag line="160" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="174" package="Default">
        <name>$groupIds</name>
        <default><![CDATA[array()]]></default>
        <docblock line="169">
          <description><![CDATA[Contains an array of type group IDs]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="169" name="var" description="" type="\mixed[]">
            <type by_reference="false">\mixed[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="181" package="Default">
        <name>$fieldDefinitions</name>
        <default><![CDATA[array()]]></default>
        <docblock line="176">
          <description><![CDATA[Content fields in this type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="176" name="var" description="" type="\ezp\Persistence\Content\Type\FieldDefinition[]">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="188" package="Default">
        <name>$defaultAlwaysAvailable</name>
        <default><![CDATA[false]]></default>
        <docblock line="183">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="183" name="todo" description=": Document."/>
          <tag line="183" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/CreateStruct.php" hash="048824e49ca6b41819b7c01dd8935d60">
    <parse_markers>
      <critical line="18" code="50019">No short description for property $name</critical>
      <critical line="23" code="50019">No short description for property $typeId</critical>
      <critical line="28" code="50019">No short description for property $sectionId</critical>
      <critical line="33" code="50019">No short description for property $ownerId</critical>
      <critical line="58" code="50019">No short description for property $alwaysAvailable</critical>
      <critical line="63" code="50019">No short description for property $remoteId</critical>
      <critical line="14" code="50005">No short description for class CreateStruct</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/CreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content" line="16" package="Default">
      <name>CreateStruct</name>
      <full_name>\ezp\Persistence\Content\CreateStruct</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="21" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="Eg. array( 'eng-GB' =&gt; &quot;New Article&quot; )" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="26" package="Default">
        <name>$typeId</name>
        <default><![CDATA[]]></default>
        <docblock line="23">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$sectionId</name>
        <default><![CDATA[]]></default>
        <docblock line="28">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$ownerId</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="44" package="Default">
        <name>$locations</name>
        <default><![CDATA[array()]]></default>
        <docblock line="38">
          <description><![CDATA[contentId, contentVersion and mainLocationId are allowed to be left empty
when used on with this struct as these values are created by the create method.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="\ezp\Persistence\Content\Location\CreateStruct[]">
            <type by_reference="false">\ezp\Persistence\Content\Location\CreateStruct[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="56" package="Default">
        <name>$fields</name>
        <default><![CDATA[array()]]></default>
        <docblock line="46">
          <description><![CDATA[Contains *all* fields of the object to be created.]]></description>
          <long-description><![CDATA[<p>This attribute should contain <em>all</em> fields (in all language) of the
object to be created. If a field is not translateable, it may only occur
once. The storage layer will automatically take care that such fields
are assigned to each language version.</p>]]></long-description>
          <tag line="46" name="var" description="" type="\ezp\Persistence\Content\Field[]">
            <type by_reference="false">\ezp\Persistence\Content\Field[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="61" package="Default">
        <name>$alwaysAvailable</name>
        <default><![CDATA[false]]></default>
        <docblock line="58">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="var" description="Always available flag" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="66" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="63">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="var" description="Remote identifier used as a custom identifier for the object" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="72" package="Default">
        <name>$initialLanguageId</name>
        <default><![CDATA[]]></default>
        <docblock line="68">
          <description><![CDATA[Language id the content was initially created in]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="78" package="Default">
        <name>$published</name>
        <default><![CDATA[]]></default>
        <docblock line="74">
          <description><![CDATA[Creation date]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="84" package="Default">
        <name>$modified</name>
        <default><![CDATA[]]></default>
        <docblock line="80">
          <description><![CDATA[Modification date]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/SortClause/Target/Field.php" hash="17bd99e65a3d448bdb8b55019f3329df">
    <parse_markers>
      <error line="19" code="50018">No DocBlock was found for property $typeIdentifier</error>
      <error line="20" code="50018">No DocBlock was found for property $fieldIdentifier</error>
      <error line="22" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/SortClause/Target/Field.php</error>
    </parse_markers>
    <namespace-alias name="SortClauseTarget">ezp\Persistence\Content\Query\SortClause\Target</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\SortClause\Target" line="17" package="Default">
      <name>Field</name>
      <full_name>\ezp\Persistence\Content\Query\SortClause\Target\Field</full_name>
      <extends>\ezp\Persistence\Content\Query\SortClause\Target</extends>
      <docblock line="14">
        <description><![CDATA[Struct that stores extra target informations for a SortClause object]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="19">
        <name>$typeIdentifier</name>
        <default><![CDATA[]]></default>
      </property>
      <property final="false" static="false" visibility="public" line="20">
        <name>$fieldIdentifier</name>
        <default><![CDATA[]]></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\SortClause\Target" line="22">
        <name>__construct</name>
        <type>function</type>
        <argument line="22">
          <name>$typeIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="22">
          <name>$fieldIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/SortClause/ContentName.php" hash="1bd0342bee206f584ac3023ce67bc320">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/SortClause/ContentName.php</error>
    </parse_markers>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\SortClause" line="18" package="Default">
      <name>ContentName</name>
      <full_name>\ezp\Persistence\Content\Query\SortClause\ContentName</full_name>
      <extends>\ezp\Persistence\Content\Query\SortClause</extends>
      <docblock line="15">
        <description><![CDATA[Sets sort direction on Content name for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\SortClause" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Constructs a new ContentName SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/SortClause/LocationPath.php" hash="03de42aedb08190cb356468ab2f315b2">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/SortClause/LocationPath.php</error>
    </parse_markers>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\SortClause" line="18" package="Default">
      <name>LocationPath</name>
      <full_name>\ezp\Persistence\Content\Query\SortClause\LocationPath</full_name>
      <extends>\ezp\Persistence\Content\Query\SortClause</extends>
      <docblock line="15">
        <description><![CDATA[Sets sort direction on the location path date for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\SortClause" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Constructs a new LocationPath SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/SortClause/SectionIdentifier.php" hash="1c84c0164e1a09b816f47ef1ea9e0271">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/SortClause/SectionIdentifier.php</error>
    </parse_markers>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\SortClause" line="18" package="Default">
      <name>SectionIdentifier</name>
      <full_name>\ezp\Persistence\Content\Query\SortClause\SectionIdentifier</full_name>
      <extends>\ezp\Persistence\Content\Query\SortClause</extends>
      <docblock line="15">
        <description><![CDATA[Sets sort direction on Section identifier for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\SortClause" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Constructs a new SectionIdentifier SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/SortClause/DateCreated.php" hash="7640edcf587ceb068430ab2b5cb8ca51">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/SortClause/DateCreated.php</error>
    </parse_markers>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\SortClause" line="18" package="Default">
      <name>DateCreated</name>
      <full_name>\ezp\Persistence\Content\Query\SortClause\DateCreated</full_name>
      <extends>\ezp\Persistence\Content\Query\SortClause</extends>
      <docblock line="15">
        <description><![CDATA[Sets sort direction on the content creation date for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\SortClause" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Constructs a new DateCreated SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/SortClause/LocationDepth.php" hash="251475754eff4cb4cf8195d9b2159ca7">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/SortClause/LocationDepth.php</error>
    </parse_markers>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\SortClause" line="18" package="Default">
      <name>LocationDepth</name>
      <full_name>\ezp\Persistence\Content\Query\SortClause\LocationDepth</full_name>
      <extends>\ezp\Persistence\Content\Query\SortClause</extends>
      <docblock line="15">
        <description><![CDATA[Sets sort direction on the location depth string for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\SortClause" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Constructs a new LocationDepth SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/SortClause/Target.php" hash="f692243b04e8ca85dda95c40714b6c61">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/SortClause/Target.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="ezp\Persistence\Content\Query\SortClause" line="15" package="Default">
      <name>Target</name>
      <full_name>\ezp\Persistence\Content\Query\SortClause\Target</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Struct that stores extra target informations for a SortClause object]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/SortClause/SectionName.php" hash="fbd43d99599bf42d7bb57a8ba5e4ec8c">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/SortClause/SectionName.php</error>
    </parse_markers>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\SortClause" line="18" package="Default">
      <name>SectionName</name>
      <full_name>\ezp\Persistence\Content\Query\SortClause\SectionName</full_name>
      <extends>\ezp\Persistence\Content\Query\SortClause</extends>
      <docblock line="15">
        <description><![CDATA[Sets sort direction on Section name for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\SortClause" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Constructs a new SectionName SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/SortClause/LocationPriority.php" hash="e24a7c096fb480a1cdcca1c25098a96b">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/SortClause/LocationPriority.php</error>
    </parse_markers>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\SortClause" line="18" package="Default">
      <name>LocationPriority</name>
      <full_name>\ezp\Persistence\Content\Query\SortClause\LocationPriority</full_name>
      <extends>\ezp\Persistence\Content\Query\SortClause</extends>
      <docblock line="15">
        <description><![CDATA[Sets sort direction on the location priority date for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\SortClause" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Constructs a new LocationPriority SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/SortClause/LocationPathString.php" hash="221d87a01b950639ba65e1d773bd6fe9">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/SortClause/LocationPathString.php</error>
    </parse_markers>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\SortClause" line="18" package="Default">
      <name>LocationPathString</name>
      <full_name>\ezp\Persistence\Content\Query\SortClause\LocationPathString</full_name>
      <extends>\ezp\Persistence\Content\Query\SortClause</extends>
      <docblock line="15">
        <description><![CDATA[Sets sort direction on the location path string for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\SortClause" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Constructs a new LocationPathString SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/SortClause/Field.php" hash="6b54bbef2bf5b4d6d1a4475a8745d801">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/SortClause/Field.php</error>
    </parse_markers>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <namespace-alias name="FieldSortClauseTarget">ezp\Persistence\Content\Query\SortClause\Target\Field</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\SortClause" line="19" package="Default">
      <name>Field</name>
      <full_name>\ezp\Persistence\Content\Query\SortClause\Field</full_name>
      <extends>\ezp\Persistence\Content\Query\SortClause</extends>
      <docblock line="16">
        <description><![CDATA[Sets sort direction on a field value for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\SortClause" line="27" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Constructs a new Field SortClause on Type $typeIdentifier and Field $fieldIdentifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="string" variable="$typeIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="21" name="param" description="" type="string" variable="$fieldIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="21" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$typeIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="27">
          <name>$fieldIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="27">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/SortClause/DateModified.php" hash="ccab0c5de9c1f797c664b2c7d2002c02">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/SortClause/DateModified.php</error>
    </parse_markers>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\SortClause" line="18" package="Default">
      <name>DateModified</name>
      <full_name>\ezp\Persistence\Content\Query\SortClause\DateModified</full_name>
      <extends>\ezp\Persistence\Content\Query\SortClause</extends>
      <docblock line="15">
        <description><![CDATA[Sets sort direction on the content modification date for a content query]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\SortClause" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Constructs a new DateCreated SortClause]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$sortDirection</name>
          <default><![CDATA[Query::SORT_ASC]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/CriterionInterface.php" hash="5568dbc81d16a2f85deb8be75187983d">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/CriterionInterface.php</error>
    </parse_markers>
    <interface namespace="ezp\Persistence\Content\Query" line="15" package="Default">
      <name>CriterionInterface</name>
      <full_name>\ezp\Persistence\Content\Query\CriterionInterface</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Base interface for Criterion implementations]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Content\Query" line="26" package="Default">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Creates a new Criterion for $target with operator $operator on $value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="param" description="The target (field identifier for a field, metadata identifier, etc)" type="string" variable="$target">
            <type by_reference="false">string</type>
          </tag>
          <tag line="17" name="param" description="The criterion operator, from Criterion\Operator" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="17" name="param" description="The Criterion value, either as an individual item or an array" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="17" name="return" description="" type="\ezp\Persistence\Content\Query\CriterionInterface">
            <type by_reference="false">\ezp\Persistence\Content\Query\CriterionInterface</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="26">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="26">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query" line="57" package="Default">
        <name>getSpecifications</name>
        <type>function</type>
        <docblock line="28">
          <description><![CDATA[Criterion description function.]]></description>
          <long-description><![CDATA[<p>Returns the combination of the Criterion's supported operator/value,
as an array of ezp\Persistence\Content\Query\Criterion\Operator\Specifications objects
- Operator is one supported Operator, as an Operator::* constant
- ValueType is the type of input value this operator requires, either array or single
- SupportedTypes is an array of types the operator will accept
- ValueCountLimitation is an integer saying how many values are expected.</p>

<pre><code>// IN and EQ are supported
return array(
    // The EQ operator expects a single value, either as an integer or a string
    new Specifications(
        Operator::EQ,
        Specifications::INPUT_TYPE_SINGLE,
        array( Specifications::INPUT_VALUE_INTEGER, Specifications::INPUT_VALUE_STRING ),
    ),
    // The IN operator expects an array of values, of either integers or strings
    new Specifications(
        Operator::IN,
        Specifications::INPUT_TYPE_ARRAY,
        array( Specifications::INPUT_VALUE_INTEGER, Specifications::INPUT_VALUE_STRING )
    )
)*
</code></pre>]]></long-description>
          <tag line="28" name="return" description="" type="\ezp\Persistence\Content\Query\Criterion\Operator\Specifications[]">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\Operator\Specifications[]</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/ContentTypeGroupId.php" hash="8be10e9d2945e87595e7f54a432dccfe">
    <parse_markers>
      <error line="39" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="53" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/ContentTypeGroupId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="23" package="Default">
      <name>ContentTypeGroupId</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\ContentTypeGroupId</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="15">
        <description><![CDATA[A criterion that will match content based on its ContentTypeGroup id.]]></description>
        <long-description><![CDATA[<p>The ContentType must belong to at least one of the matched ContentTypeGroups</p>

<p>Supported operators:
- IN: will match from a list of ContentTypeGroup id
- EQ: will match against one ContentTypeGroup id</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="34" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="25">
          <description><![CDATA[Creates a new ContentTypeGroup criterion]]></description>
          <long-description><![CDATA[<p>Content will be matched if it matches one of the contentTypeGroupId in $value</p>]]></long-description>
          <tag line="25" name="param" description="One or more contentTypeGroupId that must be matched" type="integer|\ezp\Persistence\Content\Query\Criterion\array(integer)" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="25" name="throws" description="if the parameters don't match what the criterion expects" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="39">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="53">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="53">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="53">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="53">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/Operator.php" hash="2945a947b27e917f4ec374d157f10474">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/Operator.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="ezp\Persistence\Content\Query\Criterion" line="17" package="Default">
      <name>Operator</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\Operator</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Operators struct]]></description>
        <long-description><![CDATA[<p>Note that the method is abstract as there is no point in instanciating it</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="19">
        <name>EQ</name>
        <value><![CDATA["="]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="20">
        <name>GT</name>
        <value><![CDATA[">"]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="21">
        <name>GTE</name>
        <value><![CDATA[">="]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="22">
        <name>LT</name>
        <value><![CDATA["<"]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="23">
        <name>LTE</name>
        <value><![CDATA["<="]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="24">
        <name>IN</name>
        <value><![CDATA["in"]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="25">
        <name>BETWEEN</name>
        <value><![CDATA["between"]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="26">
        <name>LIKE</name>
        <value><![CDATA["like"]]></value>
      </constant>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/LogicalAnd.php" hash="b12b91f831041aaf5ccbda6b32d588b7">
    <parse_markers>
      <error line="17" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criteria in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/LogicalAnd.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="15" package="Default">
      <name>LogicalAnd</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\LogicalAnd</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion\LogicalOperator</extends>
      <docblock line="12">
        <description><![CDATA[This class does...]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Creates a new AND logic criterion.]]></description>
          <long-description><![CDATA[<p>This criterion will only match if ALL of the given criteria match</p>]]></long-description>
          <tag line="17" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion\array(Criterion)" variable="$criteria">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(Criterion)</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$criteria</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/FullText.php" hash="775c813631bcddd001f43a8840dd125b">
    <parse_markers>
      <error line="38" code="50014">Name of argument $value does not match with the DocBlock's name $text in __construct()</error>
      <notice line="38" code="50013">Parameter $text could not be found in __construct()</notice>
      <error line="48" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="55" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/FullText.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="36" package="Default">
      <name>FullText</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\FullText</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="16">
        <description><![CDATA[Full text search criterion]]></description>
        <long-description><![CDATA[<p>The string provided in this criterion is matched as a full text query
against all indexed content objects in the storage layer.</p>

<p>Normalization and querying capabilities might depend on the system
configuration or the used search engine and might differ. The following
basic query seamtics are supported:</p>

<ul>
<li><p>If multiple words are specified an AND query is performed. OR queries are
not yet supported.</p></li>
<li><p>Simple wild cards are supported. If an asterisk (<em>) is used at the end or
beginning of a word this is translated into a wild card query. Thus "fo</em>"
would match "foo" and "foobar", for example.</p></li>
<li><p>Simple stop word removal might be applied to the words provided in the
query.</p></li>
</ul>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="43" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Creates a FullText criterion on $text, using the IN Operator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="param" description="The text to match on" type="string" variable="$text">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="48">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="55">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="55">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/Operator/Specifications.php" hash="39acc6bf0f135bc39c6958505d9f8bbf">
    <parse_markers>
      <error line="61" code="50014">Name of argument $operator does not match with the DocBlock's name $valueFormat in __construct()</error>
      <error line="61" code="50014">Name of argument $valueFormat does not match with the DocBlock's name $valueTypes in __construct()</error>
      <error line="61" code="50014">Name of argument $valueTypes does not match with the DocBlock's name $valueCount in __construct()</error>
      <error line="61" code="50015">Argument $valueCount is missing from the Docblock of __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/Operator/Specifications.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion\Operator" line="17" package="Default">
      <name>Specifications</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\Operator\Specifications</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[This class is used by Criteria to describe which operators they support]]></description>
        <long-description><![CDATA[<p>Instances of this class are returned in an array by the {@see Criterion::getSpecifications()} method</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Persistence\Content\Query\Criterion\Operator" line="22" package="Default">
        <name>FORMAT_SINGLE</name>
        <value><![CDATA['single']]></value>
        <docblock line="19">
          <description><![CDATA[Criterion input type description constants.]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion\Operator" line="23">
        <name>FORMAT_ARRAY</name>
        <value><![CDATA['array']]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion\Operator" line="29" package="Default">
        <name>TYPE_INTEGER</name>
        <value><![CDATA[1]]></value>
        <docblock line="25">
          <description><![CDATA[Criterion input value type description constants.]]></description>
          <long-description><![CDATA[<p>Used by {@see getDescription()} to say which type of values an operator expects</p>]]></long-description>
        </docblock>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion\Operator" line="30">
        <name>TYPE_STRING</name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion\Operator" line="31">
        <name>TYPE_BOOLEAN</name>
        <value><![CDATA[4]]></value>
      </constant>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$operator</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Specified operator, as one of the Operator::* constants]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="43" package="Default">
        <name>$valueFormat</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Format supported for the Criterion value, either single (INPUT_TYPE_SINGLE) or multiple (INPUT_TYPE_ARRAY)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="see" description="\ezp\Persistence\Content\Query\Criterion\Operator\self::INPUT_TYPE_*" refers="\ezp\Persistence\Content\Query\Criterion\Operator\self::INPUT_TYPE_*"/>
          <tag line="38" name="param" description="self::INPUT_VALUE_*" type="" variable=""/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$valueTypes</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[Accepted values types, specifying what type of variables are accepted as a value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="see" description="\ezp\Persistence\Content\Query\Criterion\Operator\self::INPUT_VALUE_*" refers="\ezp\Persistence\Content\Query\Criterion\Operator\self::INPUT_VALUE_*"/>
          <tag line="45" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="59" package="Default">
        <name>$valueCount</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[Limitation on the number of items as the value]]></description>
          <long-description><![CDATA[<p>Only usable if {@see $parameterInputType} is {@see self::INPUT_TYPE_ARRAY}.
Not setting it means that 1...n will be required</p>]]></long-description>
          <tag line="52" name="var" description="" type="integer">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion\Operator" line="68" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="61">
          <description><![CDATA[Creates a new Specifications object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="pparam" description="string $operator The specified operator, as one of the Operator::* constants"/>
          <tag line="61" name="param" description="The accepted value format, either {@see self::FORMAT_ARRAY} or {@see self::FORMAT_SINGLE}" type="string" variable="$valueFormat">
            <type by_reference="false">string</type>
          </tag>
          <tag line="61" name="param" description="The supported value types, as a bit field of the {@see self::TYPES_*} constants" type="int" variable="$valueTypes">
            <type by_reference="false">int</type>
          </tag>
          <tag line="61" name="param" description="The required number of values, when the accepted format is {@see self::FORMAT_ARRAY}" type="integer" variable="$valueCount">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="68">
          <name>$valueFormat</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="68">
          <name>$valueTypes</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="68">
          <name>$valueCount</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/RemoteId.php" hash="af85493f55ba0974fb09fbdc5d08d268">
    <parse_markers>
      <error line="38" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="54" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/RemoteId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="23" package="Default">
      <name>RemoteId</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\RemoteId</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="16">
        <description><![CDATA[A criterion that matches content based on its RemoteId]]></description>
        <long-description><![CDATA[<p>Supported operators:
- IN: will match from a list of RemoteId
- EQ: will match against one RemoteId</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="33" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="25">
          <description><![CDATA[Creates a new remoteId criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="param" description="One or more remoteId that must be matched" type="integer|\ezp\Persistence\Content\Query\Criterion\array(integer)" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="25" name="throws" description="if a non numeric id is given" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="25" name="throws" description="if the value type doesn't match the operator" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="38">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="54">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="54">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="54">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="54">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/UserMetadata.php" hash="8e87b76f2e26b20e1a1be1d64d3be4e5">
    <parse_markers>
      <error line="50" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/UserMetadata.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="32" package="Default">
      <name>UserMetadata</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\UserMetadata</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="16">
        <description><![CDATA[A criterion that matches content based on one of the user metadata (owner,
creator, modifier)]]></description>
        <long-description><![CDATA[<p>Supported Operators:
EQ, IN: Matches the provided user ID(s) against the user IDs in the database</p>

<p>Example:</p>

<p>&lt;</p>

<p>pre><code>$createdCriterion = new Criterion\UserMetadata(
    Criterion\UserMetadata::CREATOR,
    Operator::IN,
    array( 10, 14 )
);</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="65" package="Default">
        <name>OWNER</name>
        <value><![CDATA['owner']]></value>
        <docblock line="62">
          <description><![CDATA[UserMetadata target: Owner user]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="70" package="Default">
        <name>GROUP</name>
        <value><![CDATA['group']]></value>
        <docblock line="67">
          <description><![CDATA[UserMetadata target: Owner user group]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="75" package="Default">
        <name>CREATOR</name>
        <value><![CDATA['creator']]></value>
        <docblock line="72">
          <description><![CDATA[UserMetadata target: Creator]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="80" package="Default">
        <name>MODIFIER</name>
        <value><![CDATA['modifier']]></value>
        <docblock line="77">
          <description><![CDATA[UserMetadata target: Modifier]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="41" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Creates a new UserMetadata criterion on $metadata]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="One of UserMetadata::OWNER, UserMetadata::GROUP, UserMetadata::CREATED or UserMetadata::MODIFIED" type="string" variable="$target">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="One of the Operator constants" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="34" name="param" description="The match value, either as an array of as a single value, depending on the operator*" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="41">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="41">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="50">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/DateMetadata.php" hash="00f82c5a62caee1be2ae5071498b712a">
    <parse_markers>
      <error line="52" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/DateMetadata.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="34" package="Default">
      <name>DateMetadata</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\DateMetadata</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="16">
        <description><![CDATA[A criterion that matches content based on one of the date metadata (created or modified)]]></description>
        <long-description><![CDATA[<p>Supported Operators:
EQ, IN: matches content whose date is or belongs to a list of timestamps
GT, GTE: matches content whose date is greater than/greater than or equals the given timestamp
LT, LTE: matches content whose date is lower than/lower than or equals the given timestamp
BETWEEN: matches content whose date is between (included) the TWO given timestamps</p>

<p>Example:</p>

<p>&lt;</p>

<p>pre><code>$createdCriterion = new Criterion\DateMetadata(
    Criterion\DateMetadata::CREATED,
    Operator::GTE,
    strtotime( 'yesterday' )
);</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="82" package="Default">
        <name>MODIFIED</name>
        <value><![CDATA['modified']]></value>
        <docblock line="79">
          <description><![CDATA[DateMetadata target: modification date]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="87" package="Default">
        <name>CREATED</name>
        <value><![CDATA['created']]></value>
        <docblock line="84">
          <description><![CDATA[DateMetadata target: creation date]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="43" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Creates a new DateMetadata criterion on $metadata]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="One of DateMetadata::CREATED or DateMetadata::MODIFIED" type="string" variable="$target">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="param" description="One of the Operator constants" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="param" description="The match value, either as an array of as a single value, depending on the operator*" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="43">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="43">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="52">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/LogicalNot.php" hash="b22f949be9f0395d486f8ef923fcc063">
    <parse_markers>
      <error line="19" code="50014">Name of argument $criterion does not match with the DocBlock's name $criteria in __construct()</error>
      <error line="19" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criterion in __construct()</error>
      <notice line="19" code="50013">Parameter $criteria could not be found in __construct()</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/LogicalNot.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="17" package="Default">
      <name>LogicalNot</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\LogicalNot</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion\LogicalOperator</extends>
      <docblock line="13">
        <description><![CDATA[A NOT logical criterion]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="28" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Creates a new NOT logic criterion.]]></description>
          <long-description><![CDATA[<p>Will match of the given criterion doesn't match</p>]]></long-description>
          <tag line="19" name="param" description="One criterion, as a an array" type="\ezp\Persistence\Content\Query\Criterion\array(Criterion)" variable="$criteria">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(Criterion)</type>
          </tag>
          <tag line="19" name="throws" description="if more than one criterion is given in the array parameter" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/ParentLocationId.php" hash="77f2659fd4c813ffe8d5ae4dc7f6692c">
    <parse_markers>
      <error line="39" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="55" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/ParentLocationId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="24" package="Default">
      <name>ParentLocationId</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\ParentLocationId</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="15">
        <description><![CDATA[A criterion that matches content based on its parent location id]]></description>
        <long-description><![CDATA[<p>Own location id is done using {@see LocationId}</p>

<p>Supported operators:
- IN: matches against a list of location ids
- EQ: matches against a unique location id</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="34" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Creates a new ParentLocationId criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="One or more locationId parent locations must be matched against" type="integer|\ezp\Persistence\Content\Query\Criterion\array(integer)" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="26" name="throws" description="if a non numeric id is given" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="26" name="throws" description="if the value type doesn't match the operator" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="39">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="55">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="55">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/ContentId.php" hash="f6b8f49006280acc767485522a18be96">
    <parse_markers>
      <error line="38" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="47" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/ContentId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="23" package="Default">
      <name>ContentId</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\ContentId</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="16">
        <description><![CDATA[A criterion that matches content based on its id]]></description>
        <long-description><![CDATA[<p>Supported operators:
- IN: will match from a list of ContentId
- EQ: will match against one ContentId</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="33" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="25">
          <description><![CDATA[Creates a new ContentId criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="param" description="One or more content Id that must be matched." type="integer|\ezp\Persistence\Content\Query\Criterion\array(integer)" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="25" name="throws" description="if a non numeric id is given" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="25" name="throws" description="if the value type doesn't match the operator" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="38">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="47">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="47">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="47">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="47">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/LocationId.php" hash="8ee434fe44bbb3d25b1c235a536fc08e">
    <parse_markers>
      <error line="26" code="50014">Name of argument $value does not match with the DocBlock's name $target in __construct()</error>
      <notice line="26" code="50013">Parameter $target could not be found in __construct()</notice>
      <notice line="26" code="50013">Parameter $operator could not be found in __construct()</notice>
      <notice line="26" code="50013">Parameter  could not be found in __construct()</notice>
      <error line="44" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="60" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/LocationId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="24" package="Default">
      <name>LocationId</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\LocationId</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="15">
        <description><![CDATA[A criterion that matches content based on its own location id]]></description>
        <long-description><![CDATA[<p>Parent location id is done using {@see ParentLocationId}</p>

<p>Supported operators:
- IN: matches against a list of location ids
- EQ: matches against a unique location id</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="39" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Creates a new LocationId criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="Not used" type="null" variable="$target">
            <type by_reference="false">null</type>
          </tag>
          <tag line="26" name="param" description="Possible values: - Operator::IN: match against a list of locationId. $value must be an array of locationId - Operator::EQ: match against a single locationId. $value must be a single locationId" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="param" description="One or more locationId that must be matched" type="integer|\ezp\Persistence\Content\Query\Criterion\array(integer)" variable="">
            <type by_reference="false">integer</type>
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="26" name="throws" description="if a non numeric id is given" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="26" name="throws" description="if the value type doesn't match the operator" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="44">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="60">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="60">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="60">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="60">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/Subtree.php" hash="13ab5481043d57c9c6a3dcf6c94de23c">
    <parse_markers>
      <error line="47" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="63" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/Subtree.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="22" package="Default">
      <name>Subtree</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\Subtree</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="17">
        <description><![CDATA[Criterion that matches content that belongs to a given (list of) Subtree(s)]]></description>
        <long-description><![CDATA[<p>Content will be matched if it is part of at least one of the given subtree path strings</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="32" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Creates a new SubTree criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="an array of subtree path strings, eg: /1/2/" type="string|\ezp\Persistence\Content\Query\Criterion\array(string)" variable="$value">
            <type by_reference="false">string</type>
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(string)</type>
          </tag>
          <tag line="24" name="throws" description="if a non path string is given" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
          <tag line="24" name="throws" description="if the value type doesn't match the operator" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="47">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="63">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="63">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/FieldIdentifierStruct.php" hash="785f871ce54302e4544d953c0936e103">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/FieldIdentifierStruct.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="15" package="Default">
      <name>FieldIdentifierStruct</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\FieldIdentifierStruct</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[This struct is used to reference a ContentType Field in content queries / criteria]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="33" package="Default">
        <name>$contentTypeIdentifier</name>
        <default><![CDATA[]]></default>
        <docblock line="29">
          <description><![CDATA[ContentType identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="39" package="Default">
        <name>$fieldIdentifier</name>
        <default><![CDATA[]]></default>
        <docblock line="35">
          <description><![CDATA[Field identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="23" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Constructs a new FieldIdentifierStruct for $contentTypeIdentifier and $fieldIdentifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="param" description="" type="string" variable="$contentTypeIdentifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="17" name="param" description="" type="string" variable="$fieldIdentifier">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$contentTypeIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="23">
          <name>$fieldIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/ContentTypeId.php" hash="be94115902887872a8e2ed52663e0b91">
    <parse_markers>
      <error line="40" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="49" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/ContentTypeId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="23" package="Default">
      <name>ContentTypeId</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\ContentTypeId</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="16">
        <description><![CDATA[A criterion that matches content based on its ContentType id]]></description>
        <long-description><![CDATA[<p>Supported operators:
- IN: will match from a list of ContentTypeId
- EQ: will match against one ContentTypeId</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="35" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="25">
          <description><![CDATA[Creates a new ContentType criterion]]></description>
          <long-description><![CDATA[<p>Content will be matched if it matches one of the contentTypeId in $value</p>]]></long-description>
          <tag line="25" name="param" description="One or more content Id that must be matched" type="integer|\ezp\Persistence\Content\Query\Criterion\array(integer)" variable="$value">
            <type by_reference="false">integer</type>
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="25" name="throws" description="if a non numeric id is given" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="25" name="throws" description="if the value type doesn't match the operator" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="40">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="49">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="49">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="49">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="49">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/LogicalOr.php" hash="68c72f6e047bd36bd528d459d998846a">
    <parse_markers>
      <error line="17" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criteria in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/LogicalOr.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="15" package="Default">
      <name>LogicalOr</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\LogicalOr</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion\LogicalOperator</extends>
      <docblock line="12">
        <description><![CDATA[This class does...]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Creates a new OR logic criterion.]]></description>
          <long-description><![CDATA[<p>This criterion will match if AT LEAST ONE of the given criteria match</p>]]></long-description>
          <tag line="17" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion\array(Criterion)" variable="$criteria">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(Criterion)</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$criteria</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/SectionId.php" hash="b4f40fe56482bffa885fae134dc36c96">
    <parse_markers>
      <error line="23" code="50014">Name of argument $value does not match with the DocBlock's name $target in __construct()</error>
      <notice line="23" code="50013">Parameter $target could not be found in __construct()</notice>
      <notice line="23" code="50013">Parameter $operator could not be found in __construct()</notice>
      <notice line="23" code="50013">Parameter  could not be found in __construct()</notice>
      <error line="43" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="59" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/SectionId.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="21" package="Default">
      <name>SectionId</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\SectionId</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="16">
        <description><![CDATA[SectionId Criterion]]></description>
        <long-description><![CDATA[<p>Will match content that belongs to one of the given sections</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="38" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Creates a new Section criterion]]></description>
          <long-description><![CDATA[<p>Matches the content against one or more sectionId</p>]]></long-description>
          <tag line="23" name="param" description="Not used" type="null" variable="$target">
            <type by_reference="false">null</type>
          </tag>
          <tag line="23" name="param" description="Possible values: - Operator::IN: match against a list of sectionId. $value must be an array of sectionId - Operator::EQ: match against a single sectionId. $value must be a single sectionId" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="One or more sectionId that must be matched" type="integer|\ezp\Persistence\Content\Query\Criterion\array(integer)" variable="">
            <type by_reference="false">integer</type>
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="23" name="throws" description="if a non numeric id is given" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="23" name="throws" description="if the value type doesn't match the operator" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="43">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="59">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="59">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="59">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="59">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/UrlAlias.php" hash="9c5ebc882a93b1dc68d0ebc19761335e">
    <parse_markers>
      <error line="26" code="50014">Name of argument $value does not match with the DocBlock's name $subtreeId in __construct()</error>
      <notice line="26" code="50013">Parameter $subtreeId could not be found in __construct()</notice>
      <error line="43" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="64" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/UrlAlias.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="24" package="Default">
      <name>UrlAlias</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\UrlAlias</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="15">
        <description><![CDATA[A criterion that matches Content based on Url aliases.]]></description>
        <long-description><![CDATA[<p>Supported operators:
- IN: will match from a list of URL aliases, wildcards allowed, using *:
  /articles/*
- EQ: strict match against one URL alias
- LIKE: fuzzy match using wildcards</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="38" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Creates a new UrlAlias Criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="Possible values: - Operator::IN, requires an array of subtree id as the $value - Operator::EQ, requires a single subtree id as the $value" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="param" description="an array of subtree ids" type="\ezp\Persistence\Content\Query\Criterion\array(integer)" variable="$subtreeId">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(integer)</type>
          </tag>
          <tag line="26" name="throws" description="if a non numeric id is given" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
          <tag line="26" name="throws" description="if the value type doesn't match the operator" type="\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="38">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="43">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="64">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="64">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="64">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="64">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/LogicalOperator.php" hash="511c6e076fdf88295510001778e3583b">
    <parse_markers>
      <error line="22" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criteria in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/LogicalOperator.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Content\Query\Criterion" line="20" package="Default">
      <name>LogicalOperator</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\LogicalOperator</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <docblock line="15">
        <description><![CDATA[Note that the class should ideally have been in a Logical namespace, but it would have then be named 'And',
and 'And' is a PHP reserved word.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="43" package="Default">
        <name>$criteria</name>
        <default><![CDATA[array()]]></default>
        <docblock line="39">
          <description><![CDATA[The set of criteria combined by the logical operator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="\ezp\Persistence\Content\Query\Criterion\array(Criterion)">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(Criterion)</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="27" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[Creates a Logic operation with the given criteria]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion\array(Criterion)" variable="$criteria">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\array(Criterion)</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$criteria</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/Field.php" hash="677b5c19eda81495f053d433624542e9">
    <parse_markers>
      <error line="23" code="50014">Name of argument $field does not match with the DocBlock's name $target in __construct()</error>
      <notice line="23" code="50013">Parameter $target could not be found in __construct()</notice>
      <error line="37" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/Field.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="21" package="Default">
      <name>Field</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\Field</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="16">
        <description><![CDATA[The Field Criterion class.]]></description>
        <long-description><![CDATA[<p>Provides content filtering based on Fields contents &amp; values.</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="32" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Creates a new Field Criterion.]]></description>
          <long-description><![CDATA[<p>Matches $field against $value using $operator</p>]]></long-description>
          <tag line="23" name="param" description="The target type/field" type="\ezp\Persistence\Content\Query\Criterion\FieldIdentifierStruct" variable="$target">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\FieldIdentifierStruct</type>
          </tag>
          <tag line="23" name="param" description="The match operator" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="The value to match against" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>FieldIdentifierStruct</type>
        </argument>
        <argument line="32">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="37">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion/Status.php" hash="e9254b1157f90faaaf77566f6bc15a17">
    <parse_markers>
      <error line="49" code="50010">No DocBlock was found for method getSpecifications()</error>
      <error line="65" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion/Status.php</error>
    </parse_markers>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="CriterionInterface">ezp\Persistence\Content\Query\CriterionInterface</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Query\Criterion" line="22" package="Default">
      <name>Status</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion\Status</full_name>
      <extends>\ezp\Persistence\Content\Query\Criterion</extends>
      <extends>\ezp\Persistence\Content\Query\CriterionInterface</extends>
      <docblock line="17">
        <description><![CDATA[A criterion that matches content based on its status]]></description>
        <long-description><![CDATA[<p>Multiple statuses can be used, asn array of statuses</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="73" package="Default">
        <name>STATUS_DRAFT</name>
        <value><![CDATA["draft"]]></value>
        <docblock line="70">
          <description><![CDATA[Status constant: draft]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="78" package="Default">
        <name>STATUS_PUBLISHED</name>
        <value><![CDATA["published"]]></value>
        <docblock line="75">
          <description><![CDATA[Status constant: published]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="ezp\Persistence\Content\Query\Criterion" line="83" package="Default">
        <name>STATUS_ARCHIVED</name>
        <value><![CDATA["archived"]]></value>
        <docblock line="80">
          <description><![CDATA[Status constant: archived]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="29" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Creates a new Status criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="Status: self::STATUS_ARCHIVED, self::STATUS_DRAFT, self::STATUS_PUBLISHED" type="string|\string[]" variable="$value">
            <type by_reference="false">string</type>
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="49">
        <name>getSpecifications</name>
        <type>function</type>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Content\Query\Criterion" line="65">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="65">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="65">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="65">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/Criterion.php" hash="7d020280328b74426a6577e44a389b88">
    <parse_markers>
      <error line="153" code="50010">No DocBlock was found for method createFromQueryBuilder()</error>
      <critical line="16" code="50005">No short description for class Criterion</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/Criterion.php</error>
    </parse_markers>
    <namespace-alias name="Specifications">ezp\Persistence\Content\Query\Criterion\Operator\Specifications</namespace-alias>
    <namespace-alias name="Operator">ezp\Persistence\Content\Query\Criterion\Operator</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Content\Query" line="18" package="Default">
      <name>Criterion</name>
      <full_name>\ezp\Persistence\Content\Query\Criterion</full_name>
      <extends/>
      <docblock line="16">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$operator</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[The operator used by the Criterion]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$value</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[The value(s) matched by the criteria]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="\ezp\Persistence\Content\Query\array(int|\ezp\Persistence\Content\Query\string)">
            <type by_reference="false">\ezp\Persistence\Content\Query\array(int</type>
            <type by_reference="false">\ezp\Persistence\Content\Query\string)</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$target</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[The target used by the criteria (field, metadata...)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query" line="49" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Performs operator validation based on the Criterion specifications returned by {@see getSpecifications()}]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="param" description="The target the Criterion applies to: metadata identifier, field identifier..." type="string|null" variable="$target">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="38" name="param" description="The operator the Criterion uses. If null is given, will default to Operator::IN if $value is an array, Operator::IN if it is not." type="string|null" variable="$operator">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="38" name="param" description="" type="\string[]|\int[]|int|string" variable="$value">
            <type by_reference="false">\string[]</type>
            <type by_reference="false">\int[]</type>
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="todo" description="Add a dedicated exception"/>
          <tag line="38" name="throws" description="if the provided operator isn't supported" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="49">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="49">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Content\Query" line="120" package="Default">
        <name>getValueTypeCheckCallback</name>
        <type>function</type>
        <docblock line="115">
          <description><![CDATA[Returns a callback that checks the values types depending on the operator specifications]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="115" name="param" description="The accepted values, as a bit field of Specifications::TYPE_* constants" type="int" variable="$valueTypes">
            <type by_reference="false">int</type>
          </tag>
          <tag line="115" name="return" description="" type="callback">
            <type by_reference="false">callback</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$valueTypes</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Content\Query" line="153">
        <name>createFromQueryBuilder</name>
        <type>function</type>
        <argument line="153">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="153">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="153">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Query/SortClause.php" hash="fac53172a6a39d6b77db108fe6cb272e">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Query/SortClause.php</error>
    </parse_markers>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="InvalidArgumentException">InvalidArgumentException</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Content\Query" line="18" package="Default">
      <name>SortClause</name>
      <full_name>\ezp\Persistence\Content\Query\SortClause</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[This class is the base for SortClause classes, used to set sorting of content queries]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="25" package="Default">
        <name>$direction</name>
        <default><![CDATA[Query::SORT_ASC]]></default>
        <docblock line="20">
          <description><![CDATA[Sort direction
One of \ezp\Content\Query::SORT_ASC or \ezp\Content\Query::SORT_DESC;]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$target</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[Sort target, high level: section_identifier, attribute_value, etc]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="37" package="Default">
        <name>$targetData</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Extra target data, required by some sort clauses, field for instance]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="\ezp\Persistence\Content\Query\SortClauseTarget">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClauseTarget</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Query" line="47" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Constructs a new SortClause on $sortTarget in direction $sortDirection]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="" type="string" variable="$sortTarget">
            <type by_reference="false">string</type>
          </tag>
          <tag line="39" name="param" description="one of ezp\Content\Query::SORT_ASC or ezp\Content\Query::SORT_DESC" type="string" variable="$sortDirection">
            <type by_reference="false">string</type>
          </tag>
          <tag line="39" name="param" description="Extra target data, used by some clauses (field for instance)" type="string" variable="$targetData">
            <type by_reference="false">string</type>
          </tag>
          <tag line="39" name="throws" description="if the given sort order isn't one of ezp\Content\Query::SORT_ASC or ezp\Content\Query::SORT_DESC" type="\InvalidArgumentException">
            <type by_reference="false">\InvalidArgumentException</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$sortTarget</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="47">
          <name>$sortDirection</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="47">
          <name>$targetData</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/UrlAlias/Handler.php" hash="eb5e2cda689712da2dd22ab2606575a8">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/UrlAlias/Handler.php</error>
    </parse_markers>
    <interface namespace="ezp\Persistence\Content\UrlAlias" line="18" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Content\UrlAlias\Handler</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[The UrlAlias Handler interface provides nice urls management.]]></description>
        <long-description><![CDATA[<p>Its methods operate on a representation of the url alias data structure held
inside a storage engine.</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\UrlAlias" line="31" package="Default">
        <name>storeUrlAliasPath</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Create a (nice) url alias, $path pointing to $locationId, in $languageName.]]></description>
          <long-description><![CDATA[<p>$alwaysAvailable controls whether the url alias is accessible in all
languages.</p>]]></long-description>
          <tag line="20" name="param" description="" type="string" variable="$path">
            <type by_reference="false">string</type>
          </tag>
          <tag line="20" name="param" description="" type="string" variable="$locationId">
            <type by_reference="false">string</type>
          </tag>
          <tag line="20" name="param" description="" type="string" variable="$languageName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="20" name="param" description="" type="boolean" variable="$alwaysAvailable">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$languageName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$alwaysAvailable</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\UrlAlias" line="46" package="Default">
        <name>createCustomUrlAlias</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Create a user chosen $alias pointing to $locationId in $languageName.]]></description>
          <long-description><![CDATA[<p>If $languageName is null the $alias is created in the system's default
language. $alwaysAvailable makes the alias available in all languages.</p>]]></long-description>
          <tag line="33" name="param" description="" type="string" variable="$alias">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="param" description="" type="int" variable="$locationId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="33" name="param" description="" type="boolean" variable="$forwarding">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="33" name="param" description="" type="string" variable="$languageName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="33" name="param" description="" type="boolean" variable="$alwaysAvailable">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="33" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$alias</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$forwarding</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$languageName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$alwaysAvailable</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\UrlAlias" line="59" package="Default">
        <name>createUrlHistoryEntry</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[Create a history url entry.]]></description>
          <long-description><![CDATA[<p>History url entries constitutes a log of earlier url aliases to a location,
and allows old urls to hit the location, even if the current url is a
different one.</p>]]></long-description>
          <tag line="48" name="param" description="" type="" variable="$historicUrl"/>
          <tag line="48" name="param" description="" type="" variable="$locationId"/>
          <tag line="48" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$historicUrl</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="59">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\UrlAlias" line="68" package="Default">
        <name>listUrlsForLocation</name>
        <type>function</type>
        <docblock line="61">
          <description><![CDATA[List of url entries of $urlType, pointing to $locationId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="param" description="" type="" variable="$locationId"/>
          <tag line="61" name="param" description="" type="" variable="$urlType"/>
          <tag line="61" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="68">
          <name>$urlType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\UrlAlias" line="77" package="Default">
        <name>removeUrlsForLocation</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Removes urls pointing to $locationId, identified by the element in $urlIdentifier.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="param" description="" type="" variable="$locationId"/>
          <tag line="70" name="param" description="" type="array" variable="$urlIdentifier">
            <type by_reference="false">array</type>
          </tag>
          <tag line="70" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="77">
          <name>$urlIdentifier</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\UrlAlias" line="93" package="Default">
        <name>getPath</name>
        <type>function</type>
        <docblock line="79">
          <description><![CDATA[Returns the full url alias to $locationId from /.]]></description>
          <long-description><![CDATA[<p>For best performance, a full path string should be used, and then the
abstraction of eZURLAliasML::fetchPathByActionList(…) is preferred to be used.</p>

<p>Secondly the recursive eZURLAliasML::getPath(…) shouold be used.
This is also required if a path is to be fetched in another $language,
than what is currently the most prioritized language in the context of eZURLAliasML.</p>]]></long-description>
          <tag line="79" name="param" description="" type="" variable="$locationId"/>
          <tag line="79" name="param" description="" type="" variable="$language"/>
          <tag line="79" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="93">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\UrlAlias" line="113" package="Default">
        <name>runUrlFilters</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Runs filters which are defined to be run on url aliases in the legacy engine,
and returns the modified $urlText for the path element representing $locationId.]]></description>
          <long-description><![CDATA[<p>See ezpublish/doc/features/3.10/multilingual_support_for_urlalias.txt,
"Filtering of alias text" for details, on the Legacy implementation this should connect to.</p>

<p>Relevant settings:
site.ini.[URLTranslator].FilterClasses</p>

<p>This method is an abstraction for the functionality of eZURLAliasFilter::processFilters(…)</p>]]></long-description>
          <tag line="95" name="abstract" description=""/>
          <tag line="95" name="param" description="" type="string" variable="$urlText">
            <type by_reference="false">string</type>
          </tag>
          <tag line="95" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="95" name="param" description="" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
          <tag line="95" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$urlText</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="113">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="113">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\UrlAlias" line="128" package="Default">
        <name>convertToUrlAlias</name>
        <type>function</type>
        <docblock line="115">
          <description><![CDATA[Returns $urlText transformed according to the selected URL transformation settings.]]></description>
          <long-description><![CDATA[<p>Relevant settings:
site.ini.[URLTranslator].TransformationGroup</p>

<p>This method is an abstraction of the functionality of eZURLAliasML::convertToAlias(…)</p>]]></long-description>
          <tag line="115" name="abstract" description=""/>
          <tag line="115" name="param" description="" type="string" variable="$urlText">
            <type by_reference="false">string</type>
          </tag>
          <tag line="115" name="param" description="" type="string" variable="$fallBackValue">
            <type by_reference="false">string</type>
          </tag>
          <tag line="115" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="128">
          <name>$urlText</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="128">
          <name>$fallBackValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\UrlAlias" line="145" package="Default">
        <name>adjustToUniqueUrlText</name>
        <type>function</type>
        <docblock line="130">
          <description><![CDATA[Converts $urlText to a unique value for the placement of Location, $locationId.]]></description>
          <long-description><![CDATA[<p>If the url being created for Location $locationId has moved,
$locationHasMoved should be set to true, as name conflicts needs to be
checked in the new destination.</p>

<p>This method represents an abstraction of the functionality of eZContentObjectTreeNode::adjustPathElement(…)</p>]]></long-description>
          <tag line="130" name="abstract" description=""/>
          <tag line="130" name="param" description="" type="string" variable="$urlText">
            <type by_reference="false">string</type>
          </tag>
          <tag line="130" name="param" description="" type="int" variable="$locationId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="130" name="param" description="" type="boolean" variable="$locationHasMoved">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="130" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="145">
          <name>$urlText</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="145">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="145">
          <name>$locationHasMoved</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Persistence/Content/FieldValue.php" hash="ec7b0d7722c92ea27f98a600489f3f3a">
    <parse_markers>
      <error line="52" code="50010">No DocBlock was found for method __clone()</error>
      <critical line="15" code="50005">No short description for class FieldValue</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/FieldValue.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <namespace-alias name="Value">ezp\Content\FieldType\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content" line="17" package="Default">
      <name>FieldValue</name>
      <full_name>\ezp\Persistence\Content\FieldValue</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="15">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="27" package="Default">
        <name>$data</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[FieldType Value object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="note" description=": For the &quot;old&quot; storage engine we will need adaptors to map them to&#10;the existing database fields, like data_int, data_float, data_text."/>
          <tag line="19" name="var" description="" type="\ezp\Content\FieldType\Value">
            <type by_reference="false">\ezp\Content\FieldType\Value</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="40" package="Default">
        <name>$fieldSettings</name>
        <default><![CDATA[]]></default>
        <docblock line="29">
          <description><![CDATA[Collection of custom properties which are specific to the field type.]]></description>
          <long-description><![CDATA[<p>Typically these properties are used to configure behaviour of field types
and normally set in the FieldDefinition on ContentTypes.</p>

<p>Example: List of base choices in ezselection field type</p>

<p>Settings are indexed by field setting name.</p>]]></long-description>
          <tag line="29" name="var" description="" type="\ezp\Content\FieldType\FieldSettings">
            <type by_reference="false">\ezp\Content\FieldType\FieldSettings</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$sortKey</name>
        <default><![CDATA[]]></default>
        <docblock line="42">
          <description><![CDATA[Mixed sort key]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="note" description=": For the &quot;old&quot; storage engine we will need adaptors to map them to&#10;the existing database fields, like sort_key_int, sort_key_string"/>
          <tag line="42" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="52">
        <name>__clone</name>
        <type>function</type>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Relation/CreateStruct.php" hash="8548d72700d73c3d95e32befe244eb23">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Relation/CreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Relation" line="17" package="Default">
      <name>CreateStruct</name>
      <full_name>\ezp\Persistence\Content\Relation\CreateStruct</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[CreateStruct representing a relation between content.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$sourceContentId</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Source Content ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$sourceContentVersionNo</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[Source Content Version number]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="38" package="Default">
        <name>$sourceFieldDefinitionId</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Source Content Type Field Definition Id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="45" package="Default">
        <name>$destinationContentId</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[Destination Content ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="53" package="Default">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <docblock line="47">
          <description><![CDATA[Type bitmask]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="see" description="\ezp\Content\Relation::COMMON," refers="\ezp\Content\Relation::COMMON,"/>
          <tag line="47" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Search/Handler.php" hash="190b0c3f246e6c7f41a3da700950eeb0">
    <parse_markers>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criterion in find()</error>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $sort in find()</error>
      <error line="37" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criterion in findSingle()</error>
      <error line="55" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in indexContent()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Search/Handler.php</error>
    </parse_markers>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Content\Search" line="19" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Content\Search\Handler</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[The Content Search handler retrieves sets of of Content objects, based on a
set of criteria.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Content\Search" line="35" package="Default">
        <name>find</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Returns a list of object satisfying the $criterion.]]></description>
          <long-description><![CDATA[<p>Optionally a translation filter may be specified. If specified only the
translations with the listed language codes will be retrieved. If not,
all translations will be retrieved.</p>]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="param" description="" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="21" name="param" description="" type="int|null" variable="$limit">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause[]" variable="$sort">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause[]</type>
          </tag>
          <tag line="21" name="param" description="" type="\string[]" variable="$translations">
            <type by_reference="false">\string[]</type>
          </tag>
          <tag line="21" name="return" description="" type="\ezp\Persistence\Content\Search\Result">
            <type by_reference="false">\ezp\Persistence\Content\Search\Result</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="35">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="35">
          <name>$limit</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="35">
          <name>$sort</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
        <argument line="35">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Content\Search" line="53" package="Default">
        <name>findSingle</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Returns a single Content object found.]]></description>
          <long-description><![CDATA[<p>Performs a {@link find()} query to find a single object. You need to
ensure, that your $criterion ensure that only a single object can be
retrieved.</p>

<p>Optionally a translation filter may be specified. If specified only the
translations with the listed language codes will be retrieved. If not,
all translations will be retrieved.</p>]]></long-description>
          <tag line="37" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="37" name="param" description="" type="\string[]" variable="$translations">
            <type by_reference="false">\string[]</type>
          </tag>
          <tag line="37" name="return" description="" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="37" name="todo" description="Define exceptions (InMemory uses NotFound while Legazy uses InvalidObjectCount)"/>
        </docblock>
        <argument line="53">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="53">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Content\Search" line="61" package="Default">
        <name>indexContent</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Indexes a content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="55" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Search/Result.php" hash="a7f3b7e5a06d17ef653c5b5233d9434c">
    <parse_markers>
      <critical line="14" code="50005">No short description for class Result</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Search/Result.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Search" line="16" package="Default">
      <name>Result</name>
      <full_name>\ezp\Persistence\Content\Search\Result</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$count</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[Number of results found by the search]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$content</name>
        <default><![CDATA[array()]]></default>
        <docblock line="25">
          <description><![CDATA[Content objects returned by the search]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="\ezp\Persistence\Content[]">
            <type by_reference="false">\ezp\Persistence\Content[]</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Location.php" hash="8430ace9450482ffb1a5a0a13715a5e9">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Location.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content" line="17" package="Default">
      <name>Location</name>
      <full_name>\ezp\Persistence\Content\Location</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[Struct containing accessible properties on Location entities.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="ezp\Persistence\Content" line="21">
        <name>SORT_FIELD_PATH</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="22">
        <name>SORT_FIELD_PUBLISHED</name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="23">
        <name>SORT_FIELD_MODIFIED</name>
        <value><![CDATA[3]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="24">
        <name>SORT_FIELD_SECTION</name>
        <value><![CDATA[4]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="25">
        <name>SORT_FIELD_DEPTH</name>
        <value><![CDATA[5]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="26">
        <name>SORT_FIELD_CLASS_IDENTIFIER</name>
        <value><![CDATA[6]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="27">
        <name>SORT_FIELD_CLASS_NAME</name>
        <value><![CDATA[7]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="28">
        <name>SORT_FIELD_PRIORITY</name>
        <value><![CDATA[8]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="29">
        <name>SORT_FIELD_NAME</name>
        <value><![CDATA[9]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="30">
        <name>SORT_FIELD_MODIFIED_SUBNODE</name>
        <value><![CDATA[10]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="31">
        <name>SORT_FIELD_NODE_ID</name>
        <value><![CDATA[11]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="32">
        <name>SORT_FIELD_CONTENTOBJECT_ID</name>
        <value><![CDATA[12]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="34">
        <name>SORT_ORDER_DESC</name>
        <value><![CDATA[0]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="35">
        <name>SORT_ORDER_ASC</name>
        <value><![CDATA[1]]></value>
      </constant>
      <property final="false" static="false" visibility="public" line="42" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[Location ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="Location ID." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="52" package="Default">
        <name>$priority</name>
        <default><![CDATA[]]></default>
        <docblock line="44">
          <description><![CDATA[Location priority]]></description>
          <long-description><![CDATA[<p>Position of the Location among its siblings when sorted using priority
sort order.</p>]]></long-description>
          <tag line="44" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="59" package="Default">
        <name>$hidden</name>
        <default><![CDATA[]]></default>
        <docblock line="54">
          <description><![CDATA[Indicates that the Location entity has been explicitly marked as hidden.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="67" package="Default">
        <name>$invisible</name>
        <default><![CDATA[]]></default>
        <docblock line="61">
          <description><![CDATA[Indicates that the Location is implicitly marked as hidden by a parent
location.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="76" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="69">
          <description><![CDATA[Remote ID.]]></description>
          <long-description><![CDATA[<p>A universally unique identifier.</p>]]></long-description>
          <tag line="69" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="83" package="Default">
        <name>$contentId</name>
        <default><![CDATA[]]></default>
        <docblock line="78">
          <description><![CDATA[ID of the corresponding {@link \ezp\Persistence\Content}.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="var" description="Content ID." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="90" package="Default">
        <name>$parentId</name>
        <default><![CDATA[]]></default>
        <docblock line="85">
          <description><![CDATA[Parent ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="var" description="Location ID." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="99" package="Default">
        <name>$pathIdentificationString</name>
        <default><![CDATA[]]></default>
        <docblock line="92">
          <description><![CDATA[Legacy format of the url alias.]]></description>
          <long-description><![CDATA[<p>This field might be removed in a later version.</p>]]></long-description>
          <tag line="92" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="106" package="Default">
        <name>$pathString</name>
        <default><![CDATA[]]></default>
        <docblock line="101">
          <description><![CDATA[The materialized path of the location entry, eg: /1/2/]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="101" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="113" package="Default">
        <name>$modifiedSubLocation</name>
        <default><![CDATA[]]></default>
        <docblock line="108">
          <description><![CDATA[Timestamp of the latest update of a content object in a sub location.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="123" package="Default">
        <name>$mainLocationId</name>
        <default><![CDATA[]]></default>
        <docblock line="115">
          <description><![CDATA[Identifier of the main location.]]></description>
          <long-description><![CDATA[<p>If the content object in this location has multiple locations,
$mainLocationId will point to the main one.</p>]]></long-description>
          <tag line="115" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="130" package="Default">
        <name>$depth</name>
        <default><![CDATA[]]></default>
        <docblock line="125">
          <description><![CDATA[Depth location has in the location tree.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="125" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="139" package="Default">
        <name>$sortField</name>
        <default><![CDATA[]]></default>
        <docblock line="132">
          <description><![CDATA[Specifies which property the child locations should be sorted on.]]></description>
          <long-description><![CDATA[<p>Valid values are found at {@link Location::SORT_FIELD_*}</p>]]></long-description>
          <tag line="132" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="148" package="Default">
        <name>$sortOrder</name>
        <default><![CDATA[]]></default>
        <docblock line="141">
          <description><![CDATA[Specifies whether the sort order should be ascending or descending.]]></description>
          <long-description><![CDATA[<p>Valid values are {@link Location::SORT_ORDER_*}</p>]]></long-description>
          <tag line="141" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Language.php" hash="fef518777c990f145e6e4e3bb37c877b">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Language.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content" line="17" package="Default">
      <name>Language</name>
      <full_name>\ezp\Persistence\Content\Language</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[Struct containing accessible properties on Language entities.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Language ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$locale</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[Language Code (eg: eng-GB)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="38" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Human readable language name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="45" package="Default">
        <name>$isEnabled</name>
        <default><![CDATA[true]]></default>
        <docblock line="40">
          <description><![CDATA[Indicates if language is enabled or not]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Section/Handler.php" hash="f7cd05482f3d678dde273a2e2f948220">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Section/Handler.php</error>
    </parse_markers>
    <interface namespace="ezp\Persistence\Content\Section" line="14" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Content\Section\Handler</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Section" line="25" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="16">
          <description><![CDATA[Creat a new section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="16" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="16" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="16" name="return" description="" type="\ezp\Persistence\Content\Section">
            <type by_reference="false">\ezp\Persistence\Content\Section</type>
          </tag>
          <tag line="16" name="todo" description="Should validate that $identifier is unique??"/>
          <tag line="16" name="todo" description="What about translatable $name?"/>
        </docblock>
        <argument line="25">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="25">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Section" line="35" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Update name and identifier of a section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="27" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="27" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="27" name="return" description="" type="\ezp\Persistence\Content\Section">
            <type by_reference="false">\ezp\Persistence\Content\Section</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="35">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="35">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Section" line="44" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Get section data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="37" name="return" description="" type="\ezp\Persistence\Content\Section">
            <type by_reference="false">\ezp\Persistence\Content\Section</type>
          </tag>
          <tag line="37" name="throws" description="If section is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Section" line="51" package="Default">
        <name>loadAll</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Get all section data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="return" description="" type="\ezp\Persistence\Content\Section[]">
            <type by_reference="false">\ezp\Persistence\Content\Section[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Section" line="60" package="Default">
        <name>loadByIdentifier</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[Get section data by identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="53" name="return" description="" type="\ezp\Persistence\Content\Section">
            <type by_reference="false">\ezp\Persistence\Content\Section</type>
          </tag>
          <tag line="53" name="throws" description="If section is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Section" line="71" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Delete a section]]></description>
          <long-description><![CDATA[<p>Might throw an exception if the section is still associated with some
content objects. Make sure that no content objects are associated with
the section any more <em>before</em> calling this method.</p>]]></long-description>
          <tag line="62" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Section" line="79" package="Default">
        <name>assign</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Assign section to single content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="param" description="" type="mixed" variable="$sectionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="73" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="79">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Section" line="87" package="Default">
        <name>assignmentsCount</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[Number of content assignments a Section has]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="param" description="" type="mixed" variable="$sectionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="81" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Persistence/Content/Relation.php" hash="3699c7d6265df18b012b04629a8b0be9">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Relation.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content" line="17" package="Default">
      <name>Relation</name>
      <full_name>\ezp\Persistence\Content\Relation</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[Class representing a relation between content.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Id of the relation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$sourceContentId</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[Source Content ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="38" package="Default">
        <name>$sourceContentVersionNo</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Source Content Version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="45" package="Default">
        <name>$sourceFieldDefinitionId</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[Source Content Type Field Definition Id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="52" package="Default">
        <name>$destinationContentId</name>
        <default><![CDATA[]]></default>
        <docblock line="47">
          <description><![CDATA[Destination Content ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="60" package="Default">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <docblock line="54">
          <description><![CDATA[Type bitmask]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="see" description="\ezp\Content\Relation::COMMON," refers="\ezp\Content\Relation::COMMON,"/>
          <tag line="54" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Handler.php" hash="c55261614b6e8882c35cf2155fea23cb">
    <parse_markers>
      <error line="28" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in create()</error>
      <error line="111" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in update()</error>
      <error line="151" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $relation in addRelation()</error>
      <error line="192" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $updateStruct in publish()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Handler.php</error>
    </parse_markers>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\UpdateStruct</namespace-alias>
    <namespace-alias name="AbstractCriterion">//</namespace-alias>
    <namespace-alias name="RestrictedVersion">ezp\Persistence\Content\RestrictedVersion</namespace-alias>
    <namespace-alias name="RelationCreateStruct">ezp\Persistence\Content\Relation\CreateStruct</namespace-alias>
    <interface namespace="ezp\Persistence\Content" line="26" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Content\Handler</full_name>
      <extends/>
      <docblock line="19">
        <description><![CDATA[The Content Handler interface defines content operations on the storage engine.]]></description>
        <long-description><![CDATA[<p>The basic operations which are performed on content objects are collected in
this interface. Typically this interface would be used by a service managing
business logic for content objects.</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="39" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="28">
          <description><![CDATA[Creates a new Content entity in the storage engine.]]></description>
          <long-description><![CDATA[<p>The values contained inside the $content will form the basis of stored
entity.</p>

<p>Will contain always a complete list of fields.</p>]]></long-description>
          <tag line="28" name="param" description="Content creation struct." type="\ezp\Persistence\Content\CreateStruct" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content\CreateStruct</type>
          </tag>
          <tag line="28" name="return" description="Content value object" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="52" package="Default">
        <name>createDraftFromVersion</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[Creates a new draft version from $contentId in $srcVersion number.]]></description>
          <long-description><![CDATA[<p>Copies all fields from $contentId in $srcVersion and creates a new
version of the referred Content from it.</p>]]></long-description>
          <tag line="41" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="41" name="param" description="" type="int" variable="$srcVersion">
            <type by_reference="false">int</type>
          </tag>
          <tag line="41" name="return" description="" type="\ezp\Persistence\Content\Version">
            <type by_reference="false">\ezp\Persistence\Content\Version</type>
          </tag>
          <tag line="41" name="throws" description="Thrown if $contentId and/or $srcVersion are invalid" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="52">
          <name>$srcVersion</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="70" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Returns the raw data of a content object identified by $id, in a struct.]]></description>
          <long-description><![CDATA[<p>A version to load must be specified. If you want to load the current
version of a content object use SearchHandler::findSingle() with the
ContentId criterion.</p>

<p>Optionally a translation filter may be specified. If specified only the
translations with the listed language codes will be retrieved. If not,
all translations will be retrieved.</p>]]></long-description>
          <tag line="54" name="param" description="" type="int|string" variable="$id">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="param" description="" type="int|string" variable="$version">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="param" description="" type="\string[]" variable="$translations">
            <type by_reference="false">\string[]</type>
          </tag>
          <tag line="54" name="return" description="Content value object" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="70">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="70">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="84" package="Default">
        <name>setStatus</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Sets the state of object identified by $contentId and $version to $status.]]></description>
          <long-description><![CDATA[<p>The $status can be one of STATUS_DRAFT, STATUS_PUBLISHED, STATUS_ARCHIVED</p>]]></long-description>
          <tag line="72" name="todo" description="Is this supposed to be constants from Content or Version? They differ.."/>
          <tag line="72" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="72" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="72" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="72" name="see" description="\ezp\Content" refers="\ezp\Content"/>
          <tag line="72" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="84">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="84">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="97" package="Default">
        <name>setObjectState</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[Sets the object-state of object identified by $contentId and $stateGroup to $state.]]></description>
          <long-description><![CDATA[<p>The $state is the id of the state within one group.</p>]]></long-description>
          <tag line="86" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="86" name="param" description="" type="mixed" variable="$stateGroup">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="86" name="param" description="" type="mixed" variable="$state">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="86" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="86" name="see" description="\ezp\Content" refers="\ezp\Content"/>
        </docblock>
        <argument line="97">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="97">
          <name>$stateGroup</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="97">
          <name>$state</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="109" package="Default">
        <name>getObjectState</name>
        <type>function</type>
        <docblock line="99">
          <description><![CDATA[Gets the object-state of object identified by $contentId and $stateGroup to $state.]]></description>
          <long-description><![CDATA[<p>The $state is the id of the state within one group.</p>]]></long-description>
          <tag line="99" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="99" name="param" description="" type="mixed" variable="$stateGroup">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="99" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="99" name="see" description="\ezp\Content" refers="\ezp\Content"/>
        </docblock>
        <argument line="109">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="109">
          <name>$stateGroup</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="117" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="111">
          <description><![CDATA[Updates a content object entity with data and identifier $content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="111" name="param" description="" type="\ezp\Persistence\Content\UpdateStruct" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content\UpdateStruct</type>
          </tag>
          <tag line="111" name="return" description="" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="128" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="119">
          <description><![CDATA[Deletes all versions and fields, all locations (subtree), and all relations.]]></description>
          <long-description><![CDATA[<p>Removes the relations, but not the related objects. All subtrees of the
assigned nodes of this content objects are removed (recursively).</p>]]></long-description>
          <tag line="119" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="119" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="128">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="136" package="Default">
        <name>listVersions</name>
        <type>function</type>
        <docblock line="130">
          <description><![CDATA[Return the versions for $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="130" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="130" name="return" description="" type="\ezp\Persistence\Content\RestrictedVersion[]">
            <type by_reference="false">\ezp\Persistence\Content\RestrictedVersion[]</type>
          </tag>
        </docblock>
        <argument line="136">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="149" package="Default">
        <name>copy</name>
        <type>function</type>
        <docblock line="138">
          <description><![CDATA[Copy Content with Fields and Versions from $contentId in $version.]]></description>
          <long-description><![CDATA[<p>Copies all fields from $contentId in $version (or all versions if false)
to a new object which is returned. Version numbers are maintained.</p>]]></long-description>
          <tag line="138" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="138" name="param" description="Copy all versions if left false" type="int|false" variable="$version">
            <type by_reference="false">int</type>
            <type by_reference="false">false</type>
          </tag>
          <tag line="138" name="return" description="" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="138" name="throws" description="If content or version is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="149">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="149">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="160" package="Default">
        <name>addRelation</name>
        <type>function</type>
        <docblock line="151">
          <description><![CDATA[Creates a relation between $sourceContentId in $sourceContentVersionNo
and $destinationContentId with a specific $type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="151" name="todo" description="Should the existence verifications happen here or is this supposed to be handled at a higher level?"/>
          <tag line="151" name="param" description="" type="\ezp\Persistence\Content\Relation\CreateStruct" variable="$relation">
            <type by_reference="false">\ezp\Persistence\Content\Relation\CreateStruct</type>
          </tag>
          <tag line="151" name="return" description="" type="\ezp\Persistence\Content\Relation">
            <type by_reference="false">\ezp\Persistence\Content\Relation</type>
          </tag>
        </docblock>
        <argument line="160">
          <name>$relation</name>
          <default><![CDATA[]]></default>
          <type>RelationCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="169" package="Default">
        <name>removeRelation</name>
        <type>function</type>
        <docblock line="162">
          <description><![CDATA[Removes a relation by relation Id.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="162" name="todo" description="Should the existence verifications happen here or is this supposed to be handled at a higher level?"/>
          <tag line="162" name="param" description="" type="mixed" variable="$relationId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="169">
          <name>$relationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="179" package="Default">
        <name>loadRelations</name>
        <type>function</type>
        <docblock line="171">
          <description><![CDATA[Loads relations from $sourceContentId. Optionally, loads only those with $type and $sourceContentVersionNo.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="171" name="param" description="Source Content ID" type="mixed" variable="$sourceContentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="171" name="param" description="Source Content Version, null if not specified" type="mixed|null" variable="$sourceContentVersionNo">
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="171" name="param" description="{@see \ezp\Content\Relation::COMMON, \ezp\Content\Relation::EMBED, \ezp\Content\Relation::LINK, \ezp\Content\Relation::ATTRIBUTE}" type="int|null" variable="$type">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="171" name="return" description="" type="\ezp\Persistence\Content\Relation[]">
            <type by_reference="false">\ezp\Persistence\Content\Relation[]</type>
          </tag>
        </docblock>
        <argument line="179">
          <name>$sourceContentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="179">
          <name>$sourceContentVersionNo</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="179">
          <name>$type</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="190" package="Default">
        <name>loadReverseRelations</name>
        <type>function</type>
        <docblock line="181">
          <description><![CDATA[Loads relations from $contentId. Optionally, loads only those with $type.]]></description>
          <long-description><![CDATA[<p>Only loads relations against published versions.</p>]]></long-description>
          <tag line="181" name="param" description="Destination Content ID" type="mixed" variable="$destinationContentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="181" name="param" description="{@see \ezp\Content\Relation::COMMON, \ezp\Content\Relation::EMBED, \ezp\Content\Relation::LINK, \ezp\Content\Relation::ATTRIBUTE}" type="int|null" variable="$type">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="181" name="return" description="" type="\ezp\Persistence\Content\Relation[]">
            <type by_reference="false">\ezp\Persistence\Content\Relation[]</type>
          </tag>
        </docblock>
        <argument line="190">
          <name>$destinationContentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="190">
          <name>$type</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="202" package="Default">
        <name>publish</name>
        <type>function</type>
        <docblock line="192">
          <description><![CDATA[Performs the publishing operations required to set the version identified by $updateStruct->versionNo and
$updateStruct->id as the published one.]]></description>
          <long-description><![CDATA[<p>The UpdateStruct will also contain an array of Content name indexed by Locale.</p>]]></long-description>
          <tag line="192" name="param" description="An UpdateStruct with id, versionNo and name array" type="\ezp\Persistence\Content\UpdateStruct" variable="$updateStruct">
            <type by_reference="false">\ezp\Persistence\Content\UpdateStruct</type>
          </tag>
          <tag line="192" name="return" description="The published Content" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$updateStruct</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Persistence/Content/Version.php" hash="bdbe00b6ae8c33ba9aee720616f3de1e">
    <parse_markers>
      <critical line="56" code="50019">No short description for property $modified</critical>
      <critical line="68" code="50019">No short description for property $created</critical>
      <critical line="87" code="50019">No short description for property $initialLanguageId</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Version.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content" line="17" package="Default">
      <name>Version</name>
      <full_name>\ezp\Persistence\Content\Version</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[Struct containing properties for a Version entity.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="ezp\Persistence\Content" line="23" package="Default">
        <name>STATUS_DRAFT</name>
        <value><![CDATA[0]]></value>
        <docblock line="19">
          <description><![CDATA[Version status constants]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="24">
        <name>STATUS_PUBLISHED</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="25">
        <name>STATUS_PENDING</name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="26">
        <name>STATUS_ARCHIVED</name>
        <value><![CDATA[3]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="27">
        <name>STATUS_REJECTED</name>
        <value><![CDATA[4]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="28">
        <name>STATUS_INTERNAL_DRAFT</name>
        <value><![CDATA[5]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="29">
        <name>STATUS_REPEAT</name>
        <value><![CDATA[6]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Content" line="30">
        <name>STATUS_QUEUED</name>
        <value><![CDATA[7]]></value>
      </constant>
      <property final="false" static="false" visibility="public" line="37" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[Version ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="44" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="39">
          <description><![CDATA[Name in the different available translations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="54" package="Default">
        <name>$versionNo</name>
        <default><![CDATA[]]></default>
        <docblock line="46">
          <description><![CDATA[Version number.]]></description>
          <long-description><![CDATA[<p>In contrast to {@link $id}, this is the version number, which only
increments in scope of a single Content object.</p>]]></long-description>
          <tag line="46" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="59" package="Default">
        <name>$modified</name>
        <default><![CDATA[]]></default>
        <docblock line="56">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="66" package="Default">
        <name>$creatorId</name>
        <default><![CDATA[]]></default>
        <docblock line="61">
          <description><![CDATA[Creator user ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="71" package="Default">
        <name>$created</name>
        <default><![CDATA[]]></default>
        <docblock line="68">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="78" package="Default">
        <name>$status</name>
        <default><![CDATA[]]></default>
        <docblock line="73">
          <description><![CDATA[One of Version::STATUS_DRAFT, Version::STATUS_PUBLISHED, Version::STATUS_ARCHIVED]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="var" description="Constant." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="85" package="Default">
        <name>$contentId</name>
        <default><![CDATA[]]></default>
        <docblock line="80">
          <description><![CDATA[Content ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="92" package="Default">
        <name>$initialLanguageId</name>
        <default><![CDATA[]]></default>
        <docblock line="87">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="87" name="todo" description=": Document"/>
          <tag line="87" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="101" package="Default">
        <name>$languageIds</name>
        <default><![CDATA[array()]]></default>
        <docblock line="94">
          <description><![CDATA[List of languages (id's) in this version]]></description>
          <long-description><![CDATA[<p>Reflects which languages fields exists in for this version.</p>]]></long-description>
          <tag line="94" name="var" description="" type="\mixed[]">
            <type by_reference="false">\mixed[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="111" package="Default">
        <name>$fields</name>
        <default><![CDATA[array()]]></default>
        <docblock line="103">
          <description><![CDATA[Loaded content fields in this version.]]></description>
          <long-description><![CDATA[<p>Contains all fields for all languages of this version. Fields which are
not translatable wil only be contained once.</p>]]></long-description>
          <tag line="103" name="var" description="" type="\ezp\Persistence\Content\array(Field)">
            <type by_reference="false">\ezp\Persistence\Content\array(Field)</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Language/CreateStruct.php" hash="2d5d213b148631ec297fc1af75779c2a">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Language/CreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Language" line="17" package="Default">
      <name>CreateStruct</name>
      <full_name>\ezp\Persistence\Content\Language\CreateStruct</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[Struct containing accessible properties when creating Language entities.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="24" package="Default">
        <name>$locale</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Language Code (eg: eng-GB)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="31" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[Human readable language name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="38" package="Default">
        <name>$isEnabled</name>
        <default><![CDATA[true]]></default>
        <docblock line="33">
          <description><![CDATA[Indicates if language is enabled or not]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Language/Handler.php" hash="59c1d7e86d649f06691913b41c1062b7">
    <parse_markers>
      <error line="19" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in create()</error>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in update()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Language/Handler.php</error>
    </parse_markers>
    <namespace-alias name="Language">ezp\Persistence\Content\Language</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Language\CreateStruct</namespace-alias>
    <interface namespace="ezp\Persistence\Content\Language" line="17" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Content\Language\Handler</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Language Handler interface]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Language" line="25" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Create a new language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="param" description="" type="\ezp\Persistence\Content\Language\CreateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\Language\CreateStruct</type>
          </tag>
          <tag line="19" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Language" line="32" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Update language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="\ezp\Persistence\Content\Language" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Language" line="41" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Get language by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="34" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="34" name="throws" description="If language could not be found by $id" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Language" line="50" package="Default">
        <name>loadAll</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Get all languages]]></description>
          <long-description><![CDATA[<p>Return list of languages where key of hash is locale.</p>]]></long-description>
          <tag line="43" name="return" description="" type="\ezp\Persistence\Content\Language[]">
            <type by_reference="false">\ezp\Persistence\Content\Language[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Language" line="59" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Delete a language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="todo" description="Might throw an exception if the language is still associated with some content / types / (...) ?"/>
          <tag line="52" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Persistence/Content/Section.php" hash="0bfbd553fb993dd244c358a7c8356f85">
    <parse_markers>
      <critical line="14" code="50005">No short description for class Section</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Section.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content" line="16" package="Default">
      <name>Section</name>
      <full_name>\ezp\Persistence\Content\Section</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[Id of the section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[Unique identifier of the section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="37" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[Name of the section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/RestrictedVersion.php" hash="76833fe496f703ce2b6c1ce1efe540c5">
    <parse_markers>
      <critical line="46" code="50019">No short description for property $modified</critical>
      <critical line="58" code="50019">No short description for property $created</critical>
      <critical line="77" code="50019">No short description for property $initialLanguageId</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/RestrictedVersion.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content" line="20" package="Default">
      <name>RestrictedVersion</name>
      <full_name>\ezp\Persistence\Content\RestrictedVersion</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[Struct containing properties for a Version entity without its fields.]]></description>
        <long-description><![CDATA[<p>The omission of fields is so that this struct can be used for batch
operations where full set of field data would be unnecessary.</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="27" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="22">
          <description><![CDATA[Version ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="34" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="29">
          <description><![CDATA[Name in the different available translations]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="44" package="Default">
        <name>$versionNo</name>
        <default><![CDATA[]]></default>
        <docblock line="36">
          <description><![CDATA[Version number.]]></description>
          <long-description><![CDATA[<p>In contrast to {@link $id}, this is the version number, which only
increments in scope of a single Content object.</p>]]></long-description>
          <tag line="36" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="49" package="Default">
        <name>$modified</name>
        <default><![CDATA[]]></default>
        <docblock line="46">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="56" package="Default">
        <name>$creatorId</name>
        <default><![CDATA[]]></default>
        <docblock line="51">
          <description><![CDATA[Creator user ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="61" package="Default">
        <name>$created</name>
        <default><![CDATA[]]></default>
        <docblock line="58">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="68" package="Default">
        <name>$status</name>
        <default><![CDATA[]]></default>
        <docblock line="63">
          <description><![CDATA[One of Version::STATUS_DRAFT, Version::STATUS_PUBLISHED, Version::STATUS_ARCHIVED]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="var" description="Constant." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="75" package="Default">
        <name>$contentId</name>
        <default><![CDATA[]]></default>
        <docblock line="70">
          <description><![CDATA[Content ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="82" package="Default">
        <name>$initialLanguageId</name>
        <default><![CDATA[]]></default>
        <docblock line="77">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="todo" description=": Document"/>
          <tag line="77" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="91" package="Default">
        <name>$languageIds</name>
        <default><![CDATA[array()]]></default>
        <docblock line="84">
          <description><![CDATA[List of languages (id's) in this version]]></description>
          <long-description><![CDATA[<p>Reflects which languages fields exists in for this version.</p>]]></long-description>
          <tag line="84" name="var" description="" type="\mixed[]">
            <type by_reference="false">\mixed[]</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Location/UpdateStruct.php" hash="3a511acb2e4130228035d1fa113e76c8">
    <parse_markers>
      <error line="13" code="50000">No DocBlock was found for UpdateStruct</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Location/UpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Location" line="13">
      <name>UpdateStruct</name>
      <full_name>\ezp\Persistence\Content\Location\UpdateStruct</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$priority</name>
        <default><![CDATA[0]]></default>
        <docblock line="15">
          <description><![CDATA[Location priority]]></description>
          <long-description><![CDATA[<p>Position of the Location among its siblings when sorted using priority
sort order.</p>]]></long-description>
          <tag line="15" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="32" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[Remote ID.]]></description>
          <long-description><![CDATA[<p>A universally unique identifier.</p>]]></long-description>
          <tag line="25" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="41" package="Default">
        <name>$sortField</name>
        <default><![CDATA[]]></default>
        <docblock line="34">
          <description><![CDATA[Specifies which property the child locations should be sorted on.]]></description>
          <long-description><![CDATA[<p>Valid values are found at {@link Location::SORT_FIELD_*}</p>]]></long-description>
          <tag line="34" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$sortOrder</name>
        <default><![CDATA[]]></default>
        <docblock line="43">
          <description><![CDATA[Specifies whether the sort order should be ascending or descending.]]></description>
          <long-description><![CDATA[<p>Valid values are {@link Location::SORT_ORDER_*}</p>]]></long-description>
          <tag line="43" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Location/CreateStruct.php" hash="b991dea7de6599229ea69ffc99bce180">
    <parse_markers>
      <error line="13" code="50000">No DocBlock was found for CreateStruct</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Location/CreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Location" line="13">
      <name>CreateStruct</name>
      <full_name>\ezp\Persistence\Content\Location\CreateStruct</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$priority</name>
        <default><![CDATA[0]]></default>
        <docblock line="15">
          <description><![CDATA[Location priority]]></description>
          <long-description><![CDATA[<p>Position of the Location among its siblings when sorted using priority
sort order.</p>]]></long-description>
          <tag line="15" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$hidden</name>
        <default><![CDATA[false]]></default>
        <docblock line="25">
          <description><![CDATA[Indicates that the Location entity has been explicitly marked as hidden.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="38" package="Default">
        <name>$invisible</name>
        <default><![CDATA[false]]></default>
        <docblock line="32">
          <description><![CDATA[Indicates that the Location is implicitly marked as hidden by a parent
location.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="47" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[Remote ID.]]></description>
          <long-description><![CDATA[<p>A universally unique identifier.</p>]]></long-description>
          <tag line="40" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="54" package="Default">
        <name>$contentId</name>
        <default><![CDATA[]]></default>
        <docblock line="49">
          <description><![CDATA[ID of the corresponding {@link Content}.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="var" description="Content ID." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="62" package="Default">
        <name>$contentVersion</name>
        <default><![CDATA[]]></default>
        <docblock line="56">
          <description><![CDATA[version of the corresponding {@link Content}.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="todo" description="Rename to $contentVersionNo?"/>
          <tag line="56" name="var" description="Content version." type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="71" package="Default">
        <name>$pathIdentificationString</name>
        <default><![CDATA[]]></default>
        <docblock line="64">
          <description><![CDATA[Legacy format of the url alias.]]></description>
          <long-description><![CDATA[<p>This field might be removed in a later version.</p>]]></long-description>
          <tag line="64" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="83" package="Default">
        <name>$mainLocationId</name>
        <default><![CDATA[true]]></default>
        <docblock line="73">
          <description><![CDATA[Identifier of the main location.]]></description>
          <long-description><![CDATA[<p>If the content object in this location has multiple locations,
$mainLocationId will point to the main one.
This is allowed to be set to true, this will mean this should become main location
(@todo Find a better way to deal with being able to create the main location)</p>]]></long-description>
          <tag line="73" name="var" description="" type="mixed|true">
            <type by_reference="false">mixed</type>
            <type by_reference="false">true</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="92" package="Default">
        <name>$sortField</name>
        <default><![CDATA[]]></default>
        <docblock line="85">
          <description><![CDATA[Specifies which property the child locations should be sorted on.]]></description>
          <long-description><![CDATA[<p>Valid values are found at {@link Location::SORT_FIELD_*}</p>]]></long-description>
          <tag line="85" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="101" package="Default">
        <name>$sortOrder</name>
        <default><![CDATA[]]></default>
        <docblock line="94">
          <description><![CDATA[Specifies whether the sort order should be ascending or descending.]]></description>
          <long-description><![CDATA[<p>Valid values are {@link Location::SORT_ORDER_*}</p>]]></long-description>
          <tag line="94" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="107" package="Default">
        <name>$parentId</name>
        <default><![CDATA[]]></default>
        <docblock line="103">
          <description><![CDATA[Parent location's Id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="103" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Location/Trash/Handler.php" hash="6f49b141ac74bf4e0293c99afac5dbb9">
    <parse_markers>
      <error line="43" code="50014">Name of argument $trashedId does not match with the DocBlock's name $locationId in untrashLocation()</error>
      <notice line="43" code="50013">Parameter $locationId could not be found in untrashLocation()</notice>
      <error line="59" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criterion in listTrashed()</error>
      <error line="59" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $sort in listTrashed()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Location/Trash/Handler.php</error>
    </parse_markers>
    <namespace-alias name="Location">ezp\Persistence\Content\Location</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Location\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Location\UpdateStruct</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <interface namespace="ezp\Persistence\Content\Location\Trash" line="20" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Content\Location\Trash\Handler</full_name>
      <extends/>
      <docblock line="16">
        <description><![CDATA[The Trash Handler interface defines operations on Location elements in the storage engine.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location\Trash" line="30" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[Loads the data for the trashed location identified by $id.]]></description>
          <long-description><![CDATA[<p>$id is the same as original location (which has been previously trashed)</p>]]></long-description>
          <tag line="22" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="22" name="return" description="" type="\ezp\Persistence\Content\Location\Trashed">
            <type by_reference="false">\ezp\Persistence\Content\Location\Trashed</type>
          </tag>
          <tag line="22" name="throws" description="" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location\Trash" line="41" package="Default">
        <name>trashSubtree</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Sends a subtree to the trash]]></description>
          <long-description><![CDATA[<p>Moves all locations in the subtree to the Trash. The associated content
objects are left untouched.</p>]]></long-description>
          <tag line="32" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="32" name="return" description="" type="\ezp\Persistence\Content\Location\Trashed">
            <type by_reference="false">\ezp\Persistence\Content\Location\Trashed</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location\Trash" line="57" package="Default">
        <name>untrashLocation</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Returns a trashed location to normal state.]]></description>
          <long-description><![CDATA[<p>Recreates the originally trashed location in the new position.
If this is not possible (because the old location does not exist any more),
a ParentNotFound exception is thrown.</p>

<p>Returns newly restored location Id.</p>]]></long-description>
          <tag line="43" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="43" name="param" description="" type="mixed" variable="$newParentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="43" name="return" description="Newly restored location id" type="int">
            <type by_reference="false">int</type>
          </tag>
          <tag line="43" name="throws" description="" type="\ezp\Content\Location\Exception\ParentNotFound">
            <type by_reference="false">\ezp\Content\Location\Exception\ParentNotFound</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$trashedId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="57">
          <name>$newParentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location\Trash" line="70" package="Default">
        <name>listTrashed</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Returns an array of all trashed locations satisfying the $criterion (if provided),
sorted with SortClause objects contained in $sort (if any).]]></description>
          <long-description><![CDATA[<p>If no criterion is provided (null), no filter is applied</p>]]></long-description>
          <tag line="59" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="59" name="param" description="Offset to start listing from, 0 by default" type="\ezp\Persistence\Content\Location\Trash\$offset" variable="$offset">
            <type by_reference="false">\ezp\Persistence\Content\Location\Trash\$offset</type>
          </tag>
          <tag line="59" name="param" description="Limit for the listing. Null by default (no limit)" type="\ezp\Persistence\Content\Location\Trash\$limit" variable="$limit">
            <type by_reference="false">\ezp\Persistence\Content\Location\Trash\$limit</type>
          </tag>
          <tag line="59" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause[]" variable="$sort">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause[]</type>
          </tag>
          <tag line="59" name="return" description="" type="\ezp\Persistence\Content\Location\Trashed[]">
            <type by_reference="false">\ezp\Persistence\Content\Location\Trashed[]</type>
          </tag>
        </docblock>
        <argument line="70">
          <name>$criterion</name>
          <default><![CDATA[null]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="70">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="70">
          <name>$limit</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="70">
          <name>$sort</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location\Trash" line="76" package="Default">
        <name>emptyTrash</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Empties the trash
Everything contained in the trash must be removed]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location\Trash" line="84" package="Default">
        <name>emptyOne</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Removes a trashed location identified by $trashedLocationId from trash
Associated content has to be deleted]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="param" description="" type="int" variable="$trashedId">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$trashedId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Persistence/Content/Location/Trashed.php" hash="ff9af387c41e4a14ec3996647b7e8447">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Location/Trashed.php</error>
    </parse_markers>
    <namespace-alias name="Location">ezp\Persistence\Content\Location</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Location" line="18" package="Default">
      <name>Trashed</name>
      <full_name>\ezp\Persistence\Content\Location\Trashed</full_name>
      <extends>\ezp\Persistence\Content\Location</extends>
      <docblock line="15">
        <description><![CDATA[Struct containing accessible properties on TrashedLocation entities.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Location/Handler.php" hash="c29c34dfcb9ebcb78c8c08c37ba1f968">
    <parse_markers>
      <error line="97" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in update()</error>
      <error line="106" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in create()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Location/Handler.php</error>
    </parse_markers>
    <namespace-alias name="Location">ezp\Persistence\Content\Location</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Location\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Location\UpdateStruct</namespace-alias>
    <interface namespace="ezp\Persistence\Content\Location" line="19" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Content\Location\Handler</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[The Location Handler interface defines operations on Location elements in the storage engine.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location" line="28" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Loads the data for the location identified by $locationId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="int" variable="$locationId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="21" name="return" description="" type="\ezp\Persistence\Content\Location">
            <type by_reference="false">\ezp\Persistence\Content\Location</type>
          </tag>
          <tag line="21" name="throws" description="" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location" line="43" package="Default">
        <name>copySubtree</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Copy location object identified by $sourceId, into destination identified by $destinationParentId.]]></description>
          <long-description><![CDATA[<p>Performs a deep copy of the location identified by $sourceId and all of
its child locations, copying the most recent published content object
for each location to a new content object without any additional version
information. Relations are not copied. URLs are not touched at all.</p>]]></long-description>
          <tag line="30" name="param" description="" type="mixed" variable="$sourceId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="30" name="param" description="" type="mixed" variable="$destinationParentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="30" name="return" description="the newly created Location." type="\ezp\Persistence\Content\Location">
            <type by_reference="false">\ezp\Persistence\Content\Location</type>
          </tag>
          <tag line="30" name="throws" description="If $sourceId or $destinationParentId are invalid" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$sourceId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="43">
          <name>$destinationParentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location" line="56" package="Default">
        <name>move</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Moves location identified by $sourceId into new parent identified by $destinationParentId.]]></description>
          <long-description><![CDATA[<p>Performs a full move of the location identified by $sourceId to a new
destination, identified by $destinationParentId. Relations do not need
to be updated, since they refer to Content. URLs are not touched.</p>]]></long-description>
          <tag line="45" name="param" description="" type="mixed" variable="$sourceId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="45" name="param" description="" type="mixed" variable="$destinationParentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="45" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$sourceId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="56">
          <name>$destinationParentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location" line="68" package="Default">
        <name>markSubtreeModified</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Marks the given nodes and all ancestors as modified]]></description>
          <long-description><![CDATA[<p>Optionally a time stamp with the modification date may be specified,
otherwise the current time is used.</p>]]></long-description>
          <tag line="58" name="param" description="" type="int|string" variable="$locationId">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="param" description="" type="int" variable="$timeStamp">
            <type by_reference="false">int</type>
          </tag>
          <tag line="58" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="68">
          <name>$timeStamp</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location" line="75" package="Default">
        <name>hide</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Sets a location to be hidden, and it self + all children to invisible.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="param" description="Location ID" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location" line="83" package="Default">
        <name>unHide</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Sets a location to be unhidden, and self + children to visible unless a parent is hidding the tree.]]></description>
          <long-description><![CDATA[<p>If not make sure only children down to first hidden node is marked visible.</p>]]></long-description>
          <tag line="77" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location" line="95" package="Default">
        <name>swap</name>
        <type>function</type>
        <docblock line="85">
          <description><![CDATA[Swaps the content object being pointed to by a location object.]]></description>
          <long-description><![CDATA[<p>Make the location identified by $locationId1 refer to the Content
referred to by $locationId2 and vice versa.</p>]]></long-description>
          <tag line="85" name="param" description="" type="mixed" variable="$locationId1">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="85" name="param" description="" type="mixed" variable="$locationId2">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="85" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$locationId1</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="95">
          <name>$locationId2</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location" line="104" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="97">
          <description><![CDATA[Updates an existing location.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="param" description="" type="\ezp\Persistence\Content\Location\UpdateStruct" variable="$location">
            <type by_reference="false">\ezp\Persistence\Content\Location\UpdateStruct</type>
          </tag>
          <tag line="97" name="param" description="" type="int" variable="$locationId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="97" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
        <argument line="104">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location" line="112" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="106">
          <description><![CDATA[Creates a new location rooted at $location->parentId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="param" description="" type="\ezp\Persistence\Content\Location\CreateStruct" variable="$location">
            <type by_reference="false">\ezp\Persistence\Content\Location\CreateStruct</type>
          </tag>
          <tag line="106" name="return" description="" type="\ezp\Persistence\Content\Location">
            <type by_reference="false">\ezp\Persistence\Content\Location</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location" line="126" package="Default">
        <name>removeSubtree</name>
        <type>function</type>
        <docblock line="114">
          <description><![CDATA[Removes all Locations under and including $locationId.]]></description>
          <long-description><![CDATA[<p>Performs a recursive delete on the location identified by $locationId,
including all of its child locations. Content which is not referred to
by any other location is automatically removed. Content which looses its
main Location will get the first of its other Locations assigned as the
new main Location.</p>]]></long-description>
          <tag line="114" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="114" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Location" line="140" package="Default">
        <name>setSectionForSubtree</name>
        <type>function</type>
        <docblock line="128">
          <description><![CDATA[Set section on all content objects in the subtree.]]></description>
          <long-description><![CDATA[<p>Only main locations will be updated</p>]]></long-description>
          <tag line="128" name="todo" description="This can be confusing (regarding permissions and main/multi location).&#10;So method is for the time being not in PublicAPI so people can instead&#10;write scripts using their own logic against the assignSectionToContent() api."/>
          <tag line="128" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="128" name="param" description="" type="mixed" variable="$sectionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="128" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="140">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Persistence/Content/UrlAlias.php" hash="2b74b8df6e347a378d44652a82984214">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/UrlAlias.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence" line="17" package="Default">
      <name>UrlAlias</name>
      <full_name>\ezp\Persistence\UrlAlias</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="12">
        <description><![CDATA[UrlAlias models one url alias path element separated by '/' in urls.]]></description>
        <long-description><![CDATA[<p>This class models the legacy structure used for url aliases.</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$action</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[The action of the url alias path element.]]></description>
          <long-description><![CDATA[<p>The action consists of a encoded values as action-type:id.</p>

<p>Example:</p>

<pre><code>eznode:2
</code></pre>

<p>This action would point to Location with id=2.</p>

<p>Action-type can be either 'nop:', 'eznode:' or 'ezmodule:'.</p>]]></long-description>
          <tag line="19" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="44" package="Default">
        <name>$action_type</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[Specifies the action type of the url alias path element.]]></description>
          <long-description><![CDATA[<p>Value can be one of 'nop', 'eznode' or 'ezmodule'.</p>]]></long-description>
          <tag line="37" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="53" package="Default">
        <name>$alias_redirects</name>
        <default><![CDATA[]]></default>
        <docblock line="46">
          <description><![CDATA[Whether an alias should redirect to its destination.]]></description>
          <long-description><![CDATA[<p>Read: HTTP 302 redirection.</p>]]></long-description>
          <tag line="46" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="60" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="55">
          <description><![CDATA[Id of url alias element.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="67" package="Default">
        <name>$is_alias</name>
        <default><![CDATA[]]></default>
        <docblock line="62">
          <description><![CDATA[Flag signifying a custom made pointer.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="74" package="Default">
        <name>$is_original</name>
        <default><![CDATA[]]></default>
        <docblock line="69">
          <description><![CDATA[Flag signifying pointer to a live existing entity.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="83" package="Default">
        <name>$lang_mask</name>
        <default><![CDATA[]]></default>
        <docblock line="76">
          <description><![CDATA[Lanuage mask of url alias entry.]]></description>
          <long-description><![CDATA[<p>Contains represented languages encoded into integer bit field.</p>]]></long-description>
          <tag line="76" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="92" package="Default">
        <name>$link</name>
        <default><![CDATA[]]></default>
        <docblock line="85">
          <description><![CDATA[Pointer to other url alias element.]]></description>
          <long-description><![CDATA[<p>Used to dereference history chain of url alias elements.</p>]]></long-description>
          <tag line="85" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="99" package="Default">
        <name>$parent</name>
        <default><![CDATA[]]></default>
        <docblock line="94">
          <description><![CDATA[Specifies the parent of this url alias element.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="106" package="Default">
        <name>$text</name>
        <default><![CDATA[]]></default>
        <docblock line="101">
          <description><![CDATA[The actual text of the url alias element.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="101" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="113" package="Default">
        <name>$text_md5</name>
        <default><![CDATA[]]></default>
        <docblock line="108">
          <description><![CDATA[MD5 hash of lowercase {@link $text}.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Field.php" hash="694ba11253cfd4f56fa023466514e8d5">
    <parse_markers>
      <critical line="46" code="50019">No short description for property $language</critical>
      <critical line="51" code="50019">No short description for property $versionNo</critical>
      <error line="57" code="50010">No DocBlock was found for method __clone()</error>
      <critical line="14" code="50005">No short description for class Field</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Field.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content" line="16" package="Default">
      <name>Field</name>
      <full_name>\ezp\Persistence\Content\Field</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[Field ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="30" package="Default">
        <name>$fieldDefinitionId</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[Corresponding field definition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="37" package="Default">
        <name>$type</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[Data type name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="44" package="Default">
        <name>$value</name>
        <default><![CDATA[]]></default>
        <docblock line="39">
          <description><![CDATA[Value of the field]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="\ezp\Persistence\Content\FieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="49" package="Default">
        <name>$language</name>
        <default><![CDATA[]]></default>
        <docblock line="46">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="todo" description="What is supposed to be stored here? Object or languageCode?"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="55" package="Default">
        <name>$versionNo</name>
        <default><![CDATA[]]></default>
        <docblock line="51">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="var" description="Null if not created yet" type="int|null">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="51" name="todo" description="Normally we would use a create struct here"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content" line="57">
        <name>__clone</name>
        <type>function</type>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Type/UpdateStruct.php" hash="dff695291fd94d619ede8685921d976f">
    <parse_markers>
      <critical line="117" code="50019">No short description for property $defaultAlwaysAvailable</critical>
      <critical line="13" code="50005">No short description for class UpdateStruct</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Type/UpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Type" line="16" package="Default">
      <name>UpdateStruct</name>
      <full_name>\ezp\Persistence\Content\Type\UpdateStruct</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="13">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="28" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="18">
          <description><![CDATA[Human readable name of the content type]]></description>
          <long-description><![CDATA[<p>The structure of this field is:</p>

<pre><code>array( 'eng' => '<name_eng>', 'de' => '<name_de>' );
</code></pre>]]></long-description>
          <tag line="18" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="40" package="Default">
        <name>$description</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Human readable description of the content type]]></description>
          <long-description><![CDATA[<p>The structure of this field is:</p>

<pre><code>array( 'eng' => '<description_eng>', 'de' => '<description_de>' );
</code></pre>]]></long-description>
          <tag line="30" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="47" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="42">
          <description><![CDATA[String identifier of a type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="54" package="Default">
        <name>$modified</name>
        <default><![CDATA[]]></default>
        <docblock line="49">
          <description><![CDATA[Modification date (timestamp)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="62" package="Default">
        <name>$modifierId</name>
        <default><![CDATA[]]></default>
        <docblock line="56">
          <description><![CDATA[Modifier user id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="69" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="64">
          <description><![CDATA[Unique remote ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="76" package="Default">
        <name>$urlAliasSchema</name>
        <default><![CDATA[]]></default>
        <docblock line="71">
          <description><![CDATA[URL alias schema]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="83" package="Default">
        <name>$nameSchema</name>
        <default><![CDATA[]]></default>
        <docblock line="78">
          <description><![CDATA[Name schema]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="90" package="Default">
        <name>$isContainer</name>
        <default><![CDATA[]]></default>
        <docblock line="85">
          <description><![CDATA[Determines if the type is a container]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="97" package="Default">
        <name>$initialLanguageId</name>
        <default><![CDATA[]]></default>
        <docblock line="92">
          <description><![CDATA[Initial language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="106" package="Default">
        <name>$sortField</name>
        <default><![CDATA[]]></default>
        <docblock line="99">
          <description><![CDATA[Specifies which property the child locations should be sorted on by default when created]]></description>
          <long-description><![CDATA[<p>Valid values are found at {@link Location::SORT_FIELD_*}</p>]]></long-description>
          <tag line="99" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="115" package="Default">
        <name>$sortOrder</name>
        <default><![CDATA[]]></default>
        <docblock line="108">
          <description><![CDATA[Specifies whether the sort order should be ascending or descending by default when created]]></description>
          <long-description><![CDATA[<p>Valid values are {@link Location::SORT_ORDER_*}</p>]]></long-description>
          <tag line="108" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="122" package="Default">
        <name>$defaultAlwaysAvailable</name>
        <default><![CDATA[]]></default>
        <docblock line="117">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="117" name="todo" description=": Document."/>
          <tag line="117" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Type/CreateStruct.php" hash="20140c5b7d31adfa8b22a5ad28d8fbad">
    <parse_markers>
      <critical line="153" code="50019">No short description for property $defaultAlwaysAvailable</critical>
      <critical line="14" code="50005">No short description for class CreateStruct</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Type/CreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <namespace-alias name="Location">ezp\Persistence\Content\Location</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Type" line="17" package="Default">
      <name>CreateStruct</name>
      <full_name>\ezp\Persistence\Content\Type\CreateStruct</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="14">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="29" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Human readable name of the content type]]></description>
          <long-description><![CDATA[<p>The structure of this field is:</p>

<pre><code>array( 'eng' => '<name_eng>', 'de' => '<name_de>' );
</code></pre>]]></long-description>
          <tag line="19" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$status</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Version (state) to create.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="48" package="Default">
        <name>$description</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Human readable description of the content type]]></description>
          <long-description><![CDATA[<p>The structure of this field is:</p>

<pre><code>array( 'eng' => '<description_eng>', 'de' => '<description_de>' );
</code></pre>]]></long-description>
          <tag line="38" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="55" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="50">
          <description><![CDATA[String identifier of a type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="62" package="Default">
        <name>$created</name>
        <default><![CDATA[]]></default>
        <docblock line="57">
          <description><![CDATA[Creation date (timestamp)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="69" package="Default">
        <name>$modified</name>
        <default><![CDATA[]]></default>
        <docblock line="64">
          <description><![CDATA[Modification date (timestamp)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="76" package="Default">
        <name>$creatorId</name>
        <default><![CDATA[]]></default>
        <docblock line="71">
          <description><![CDATA[Creator user id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="84" package="Default">
        <name>$modifierId</name>
        <default><![CDATA[]]></default>
        <docblock line="78">
          <description><![CDATA[Modifier user id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="91" package="Default">
        <name>$remoteId</name>
        <default><![CDATA[]]></default>
        <docblock line="86">
          <description><![CDATA[Unique remote ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="98" package="Default">
        <name>$urlAliasSchema</name>
        <default><![CDATA[]]></default>
        <docblock line="93">
          <description><![CDATA[URL alias schema]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="105" package="Default">
        <name>$nameSchema</name>
        <default><![CDATA[]]></default>
        <docblock line="100">
          <description><![CDATA[Name schema]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="100" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="112" package="Default">
        <name>$isContainer</name>
        <default><![CDATA[]]></default>
        <docblock line="107">
          <description><![CDATA[Determines if the type is a container]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="107" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="119" package="Default">
        <name>$initialLanguageId</name>
        <default><![CDATA[]]></default>
        <docblock line="114">
          <description><![CDATA[Initial language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="114" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="128" package="Default">
        <name>$sortField</name>
        <default><![CDATA[Location::SORT_FIELD_PUBLISHED]]></default>
        <docblock line="121">
          <description><![CDATA[Specifies which property the child locations should be sorted on by default when created]]></description>
          <long-description><![CDATA[<p>Valid values are found at {@link Location::SORT_FIELD_*}</p>]]></long-description>
          <tag line="121" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="137" package="Default">
        <name>$sortOrder</name>
        <default><![CDATA[Location::SORT_ORDER_DESC]]></default>
        <docblock line="130">
          <description><![CDATA[Specifies whether the sort order should be ascending or descending by default when created]]></description>
          <long-description><![CDATA[<p>Valid values are {@link Location::SORT_ORDER_*}</p>]]></long-description>
          <tag line="130" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="144" package="Default">
        <name>$groupIds</name>
        <default><![CDATA[array()]]></default>
        <docblock line="139">
          <description><![CDATA[Contains an array of type group IDs]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="139" name="var" description="" type="\mixed[]">
            <type by_reference="false">\mixed[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="151" package="Default">
        <name>$fieldDefinitions</name>
        <default><![CDATA[array()]]></default>
        <docblock line="146">
          <description><![CDATA[Content fields in this type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="146" name="var" description="" type="\ezp\Persistence\Content\Type\FieldDefinition[]">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="158" package="Default">
        <name>$defaultAlwaysAvailable</name>
        <default><![CDATA[false]]></default>
        <docblock line="153">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="153" name="todo" description=": Document."/>
          <tag line="153" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="165" package="Default">
        <name>__clone</name>
        <type>function</type>
        <docblock line="160">
          <description><![CDATA[Performs a deep cloning.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="160" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Type/FieldDefinition.php" hash="255ce181cf8b93fbd814dc3a2ff43f3e">
    <parse_markers>
      <critical line="108" code="50019">No short description for property $isSearchable</critical>
      <error line="115" code="50015">Argument $properties is missing from the Docblock of __construct()</error>
      <critical line="15" code="50005">No short description for class FieldDefinition</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Type/FieldDefinition.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <namespace-alias name="FieldTypeConstraints">ezp\Persistence\Content\FieldTypeConstraints</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Type" line="19" package="Default">
      <name>FieldDefinition</name>
      <full_name>\ezp\Persistence\Content\Type\FieldDefinition</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="15">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="15" name="todo" description="Do we need a FieldDefitinitionCreateStruct?"/>
        <tag line="15" name="todo" description="What about the &quot;serialized_data_text&quot; field in legacy storage?"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="26" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[Primary key]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="33" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="28">
          <description><![CDATA[Name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="40" package="Default">
        <name>$description</name>
        <default><![CDATA[]]></default>
        <docblock line="35">
          <description><![CDATA[Description]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="47" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="42">
          <description><![CDATA[Readable string identifier of a field definition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="54" package="Default">
        <name>$fieldGroup</name>
        <default><![CDATA[]]></default>
        <docblock line="49">
          <description><![CDATA[Field group name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="61" package="Default">
        <name>$position</name>
        <default><![CDATA[]]></default>
        <docblock line="56">
          <description><![CDATA[Position]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="68" package="Default">
        <name>$fieldType</name>
        <default><![CDATA[]]></default>
        <docblock line="63">
          <description><![CDATA[String identifier of the field type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="75" package="Default">
        <name>$isTranslatable</name>
        <default><![CDATA[]]></default>
        <docblock line="70">
          <description><![CDATA[If the field type is translatable]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="82" package="Default">
        <name>$isRequired</name>
        <default><![CDATA[]]></default>
        <docblock line="77">
          <description><![CDATA[Is the field required]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="89" package="Default">
        <name>$isInfoCollector</name>
        <default><![CDATA[]]></default>
        <docblock line="84">
          <description><![CDATA[Just a flag]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="99" package="Default">
        <name>$fieldTypeConstraints</name>
        <default><![CDATA[]]></default>
        <docblock line="91">
          <description><![CDATA[A map of field type constraints.]]></description>
          <long-description><![CDATA[<p>2 constraints are available (as keys):
  - validators
  - fieldSettings</p>]]></long-description>
          <tag line="91" name="var" description="" type="\ezp\Persistence\Content\FieldTypeConstraints">
            <type by_reference="false">\ezp\Persistence\Content\FieldTypeConstraints</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="106" package="Default">
        <name>$defaultValue</name>
        <default><![CDATA[]]></default>
        <docblock line="101">
          <description><![CDATA[Default value of the field]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="101" name="var" description="" type="\ezp\Persistence\Content\FieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="113" package="Default">
        <name>$isSearchable</name>
        <default><![CDATA[]]></default>
        <docblock line="108">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="todo" description=": Document"/>
          <tag line="108" name="var" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="118" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="115">
          <description><![CDATA[Constructor]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
        <argument line="118">
          <name>$properties</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Type/Group/UpdateStruct.php" hash="4345e8f321ec49ffce5128af105dc4e4">
    <parse_markers>
      <critical line="13" code="50005">No short description for class UpdateStruct</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Type/Group/UpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Type\Group" line="15" package="Default">
      <name>UpdateStruct</name>
      <full_name>\ezp\Persistence\Content\Type\Group\UpdateStruct</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="13">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="22" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="17">
          <description><![CDATA[Primary key]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[Name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$description</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Description]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="43" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Readable string identifier of a group]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$modified</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[Modified date (timestamp)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="58" package="Default">
        <name>$modifierId</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[Modifier user id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Type/Group/CreateStruct.php" hash="42931167603ac89d00510f40cccf2e4d">
    <parse_markers>
      <critical line="13" code="50005">No short description for class CreateStruct</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Type/Group/CreateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Type\Group" line="15" package="Default">
      <name>CreateStruct</name>
      <full_name>\ezp\Persistence\Content\Type\Group\CreateStruct</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="13">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="22" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="17">
          <description><![CDATA[Name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" package="Default">
        <name>$description</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[Description]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Readable string identifier of a group]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="43" package="Default">
        <name>$created</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Created date (timestamp)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$modified</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[Modified date (timestamp)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="57" package="Default">
        <name>$creatorId</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[Creator user id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="65" package="Default">
        <name>$modifierId</name>
        <default><![CDATA[]]></default>
        <docblock line="59">
          <description><![CDATA[Modifier user id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Type/Group.php" hash="a9ae6b416a391669650991170a0ac509">
    <parse_markers>
      <critical line="13" code="50005">No short description for class Group</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Type/Group.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content\Type" line="15" package="Default">
      <name>Group</name>
      <full_name>\ezp\Persistence\Content\Type\Group</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="13">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="22" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="17">
          <description><![CDATA[Primary key]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[Name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$description</name>
        <default><![CDATA[array()]]></default>
        <docblock line="31">
          <description><![CDATA[Description]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="43" package="Default">
        <name>$identifier</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Readable string identifier of a group]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$created</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[Created date (timestamp)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="57" package="Default">
        <name>$modified</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[Modified date (timestamp)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="64" package="Default">
        <name>$creatorId</name>
        <default><![CDATA[]]></default>
        <docblock line="59">
          <description><![CDATA[Creator user id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="72" package="Default">
        <name>$modifierId</name>
        <default><![CDATA[]]></default>
        <docblock line="66">
          <description><![CDATA[Modifier user id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Content/Type/Handler.php" hash="581d18549ddc34c9fcc7abaf196904e6">
    <parse_markers>
      <error line="23" code="50012">No short description for method createGroup()</error>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $group in createGroup()</error>
      <error line="29" code="50012">No short description for method updateGroup()</error>
      <error line="29" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $group in updateGroup()</error>
      <error line="34" code="50012">No short description for method deleteGroup()</error>
      <error line="40" code="50012">No short description for method loadGroup()</error>
      <error line="46" code="50012">No short description for method loadAllGroups()</error>
      <error line="51" code="50012">No short description for method loadContentTypes()</error>
      <error line="77" code="50012">No short description for method create()</error>
      <error line="77" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in create()</error>
      <error line="83" code="50012">No short description for method update()</error>
      <error line="83" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in update()</error>
      <error line="90" code="50012">No short description for method delete()</error>
      <error line="144" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in addFieldDefinition()</error>
      <error line="175" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in updateFieldDefinition()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/Type/Handler.php</error>
    </parse_markers>
    <namespace-alias name="Type">ezp\Persistence\Content\Type</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Type\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Type\UpdateStruct</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="GroupCreateStruct">ezp\Persistence\Content\Type\Group\CreateStruct</namespace-alias>
    <namespace-alias name="GroupUpdateStruct">ezp\Persistence\Content\Type\Group\UpdateStruct</namespace-alias>
    <namespace-alias name="Group">ezp\Persistence\Content\Type\Group</namespace-alias>
    <interface namespace="ezp\Persistence\Content\Type" line="21" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Content\Type\Handler</full_name>
      <extends/>
      <docblock line="19">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="27" package="Default">
        <name>createGroup</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="\ezp\Persistence\Content\Type\Group\CreateStruct" variable="$group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group\CreateStruct</type>
          </tag>
          <tag line="23" name="return" description="" type="\ezp\Persistence\Content\Type\Group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>GroupCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="32" package="Default">
        <name>updateGroup</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="param" description="" type="\ezp\Persistence\Content\Type\Group\UpdateStruct" variable="$group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group\UpdateStruct</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>GroupUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="38" package="Default">
        <name>deleteGroup</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="34" name="todo" description="Throw exception if group is not found, also if group contains types"/>
        </docblock>
        <argument line="38">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="44" package="Default">
        <name>loadGroup</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="40" name="return" description="" type="\ezp\Persistence\Content\Type\Group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="49" package="Default">
        <name>loadAllGroups</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="return" description="" type="\ezp\Persistence\Content\Type\Group[]">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="56" package="Default">
        <name>loadContentTypes</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="51" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="51" name="return" description="" type="\ezp\Persistence\Content\Type[]">
            <type by_reference="false">\ezp\Persistence\Content\Type[]</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="56">
          <name>$status</name>
          <default><![CDATA[Type::STATUS_DEFINED]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="66" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Load a content type by id and status]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="58" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="58" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="58" name="throws" description="If type with provided status is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="66">
          <name>$status</name>
          <default><![CDATA[Type::STATUS_DEFINED]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="75" package="Default">
        <name>loadByIdentifier</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Load a (defined) content type by identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="68" name="throws" description="If defined type is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="81" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="" type="\ezp\Persistence\Content\Type\CreateStruct" variable="$contentType">
            <type by_reference="false">\ezp\Persistence\Content\Type\CreateStruct</type>
          </tag>
          <tag line="77" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="88" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="83">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="83" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="83" name="param" description="" type="\ezp\Persistence\Content\Type\UpdateStruct" variable="$contentType">
            <type by_reference="false">\ezp\Persistence\Content\Type\UpdateStruct</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="88">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="88">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="94" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="90" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="94">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="106" package="Default">
        <name>createDraft</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Creates a draft of existing defined content type]]></description>
          <long-description><![CDATA[<p>Updates modified date, sets $modifierId and status to Type::STATUS_DRAFT on the new returned draft.</p>]]></long-description>
          <tag line="96" name="param" description="" type="mixed" variable="$modifierId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="96" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="96" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="96" name="throws" description="If type with defined status is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$modifierId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="106">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="120" package="Default">
        <name>copy</name>
        <type>function</type>
        <docblock line="108">
          <description><![CDATA[Copy a Type incl fields and group-relations from a given status to a new Type with status {@link Type::STATUS_DRAFT}]]></description>
          <long-description><![CDATA[<p>New Content Type will have $userId as creator / modifier, created / modified should be updated, new remoteId created
and identifier should be appended with '_' + the new remoteId or another unique number.</p>]]></long-description>
          <tag line="108" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="108" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="108" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="108" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="108" name="throws" description="If user or type with provided status is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="120">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="120">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="131" package="Default">
        <name>unlink</name>
        <type>function</type>
        <docblock line="122">
          <description><![CDATA[Unlink a content type group from a content type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="122" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="122" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="122" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="122" name="throws" description="If group or type with provided status is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="122" name="throws" description="If type is not part of group or group is last on type (delete type instead)" type="\ezp\Base\Exception\BadRequest">
            <type by_reference="false">\ezp\Base\Exception\BadRequest</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="131">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="131">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="142" package="Default">
        <name>link</name>
        <type>function</type>
        <docblock line="133">
          <description><![CDATA[Link a content type group with a content type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="133" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="133" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="133" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="133" name="throws" description="If group or type with provided status is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="133" name="throws" description="If type is already part of group" type="\ezp\Base\Exception\BadRequest">
            <type by_reference="false">\ezp\Base\Exception\BadRequest</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="142">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="142">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="158" package="Default">
        <name>addFieldDefinition</name>
        <type>function</type>
        <docblock line="144">
          <description><![CDATA[Adds a new field definition to an existing Type.]]></description>
          <long-description><![CDATA[<p>This method creates a new version of the Type with the $fieldDefinition
added. It does not update existing content objects depending on the
field (default) values.</p>]]></long-description>
          <tag line="144" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="144" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="144" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="144" name="return" description="" type="\ezp\Persistence\Content\Type\FieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="144" name="throws" description="If type is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="144" name="todo" description="Add FieldDefintion\CreateStruct?"/>
        </docblock>
        <argument line="158">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="158">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="158">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="173" package="Default">
        <name>removeFieldDefinition</name>
        <type>function</type>
        <docblock line="160">
          <description><![CDATA[Removes a field definition from an existing Type.]]></description>
          <long-description><![CDATA[<p>This method creates a new version of the Type with the field definition
referred to by $fieldDefinitionId removed. It does not update existing
content objects depending on the field (default) values.</p>]]></long-description>
          <tag line="160" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="160" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="160" name="param" description="" type="mixed" variable="$fieldDefinitionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="160" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="160" name="throws" description="If field is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="173">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="173">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="173">
          <name>$fieldDefinitionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="190" package="Default">
        <name>updateFieldDefinition</name>
        <type>function</type>
        <docblock line="175">
          <description><![CDATA[This method updates the given $fieldDefinition on a Type.]]></description>
          <long-description><![CDATA[<p>This method creates a new version of the Type with the updated
$fieldDefinition. It does not update existing content objects depending
on the
field (default) values.</p>]]></long-description>
          <tag line="175" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="175" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="175" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="175" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="175" name="throws" description="If field is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="175" name="todo" description="Add FieldDefintion\UpdateStruct?"/>
        </docblock>
        <argument line="190">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="190">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="190">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Content\Type" line="206" package="Default">
        <name>publish</name>
        <type>function</type>
        <docblock line="192">
          <description><![CDATA[Update content objects]]></description>
          <long-description><![CDATA[<p>Updates content objects, depending on the changed field definitions.</p>

<p>A content type has a state which tells if its content objects yet have
been adapted.</p>

<p>Flags the content type as updated.</p>]]></long-description>
          <tag line="192" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="192" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="192" name="throws" description="If type with $contentTypeId and Type::STATUS_DRAFT is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="206">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Persistence/Content/FieldTypeConstraints.php" hash="35dc905d968e58827fcbd42751740424">
    <parse_markers>
      <error line="13" code="50000">No DocBlock was found for FieldTypeConstraints</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Content/FieldTypeConstraints.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Content" line="13">
      <name>FieldTypeConstraints</name>
      <full_name>\ezp\Persistence\Content\FieldTypeConstraints</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <property final="false" static="false" visibility="public" line="23" package="Default">
        <name>$validators</name>
        <default><![CDATA[]]></default>
        <docblock line="15">
          <description><![CDATA[Array of validators.]]></description>
          <long-description><![CDATA[<p>Key is the FQN fo the validator class.
Value is a hash like described in {@link \ezp\Content\FieldType\Validator::$constraints}</p>]]></long-description>
          <tag line="15" name="see" description="\ezp\Content\FieldType\Validator::$constraints" refers="\ezp\Content\FieldType\Validator::$constraints"/>
          <tag line="15" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="33" package="Default">
        <name>$fieldSettings</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[Collection of field settings as it is supported by dedicated field type,
and set in {@link \ezp\Content\Type\FieldDefinition}.]]></description>
          <long-description><![CDATA[<p>Collection is indexed by setting name.</p>]]></long-description>
          <tag line="25" name="see" description="\ezp\Content\FieldType::$fieldSettings" refers="\ezp\Content\FieldType::$fieldSettings"/>
          <tag line="25" name="var" description="" type="\ezp\Content\FieldType\FieldSettings">
            <type by_reference="false">\ezp\Content\FieldType\FieldSettings</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/ValueObject.php" hash="4db3e1451fdf48d86b100dc87d38d42f">
    <parse_markers>
      <critical line="14" code="50005">No short description for class ValueObject</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/ValueObject.php</error>
    </parse_markers>
    <namespace-alias name="PropertyNotFound">ezp\Base\Exception\PropertyNotFound</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence" line="16" package="Default">
      <name>ValueObject</name>
      <full_name>\ezp\Persistence\ValueObject</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="23" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Construct object optionally with set of properties]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="" type="array" variable="$properties">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$properties</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="37" package="Default">
        <name>__set</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Throws exception on all writes to undefined properties so typos are not silently accepted.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="throws" description="" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="29" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="29" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="29" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="37">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="49" package="Default">
        <name>__get</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Throws exception on all reads to undefined properties so typos are not silently accepted.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="throws" description="" type="\ezp\Base\Exception\PropertyNotFound">
            <type by_reference="false">\ezp\Base\Exception\PropertyNotFound</type>
          </tag>
          <tag line="42" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/User.php" hash="32b54186e7c208b5ba3c014e51a2b82a">
    <parse_markers>
      <critical line="12" code="50005">No short description for class User</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/User.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence" line="14" package="Default">
      <name>User</name>
      <full_name>\ezp\Persistence\User</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="12">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="21" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="16">
          <description><![CDATA[User ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="16" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="28" package="Default">
        <name>$login</name>
        <default><![CDATA[]]></default>
        <docblock line="23">
          <description><![CDATA[User login]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="35" package="Default">
        <name>$email</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[User E-Mail address]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="42" package="Default">
        <name>$passwordHash</name>
        <default><![CDATA[]]></default>
        <docblock line="37">
          <description><![CDATA[User password hash]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="49" package="Default">
        <name>$hashAlgorithm</name>
        <default><![CDATA[]]></default>
        <docblock line="44">
          <description><![CDATA[Hash algorithm used to has the password]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="58" package="Default">
        <name>$isEnabled</name>
        <default><![CDATA[false]]></default>
        <docblock line="51">
          <description><![CDATA[Flag to signal if user is enabled or not]]></description>
          <long-description><![CDATA[<p>User can not login if false</p>]]></long-description>
          <tag line="51" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="68" package="Default">
        <name>$maxLogin</name>
        <default><![CDATA[0]]></default>
        <docblock line="60">
          <description><![CDATA[Max number of time user is allowed to login]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="todo" description=": Not used in kernel, should probably be a number of login allowed before changing password.&#10;But new users gets 0 before they activate, admin has 10, and anonymous has 1000 in clean data."/>
          <tag line="60" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/User/Policy.php" hash="2d2e26df3f19d19d28a3d1a78ccd3a74">
    <parse_markers>
      <critical line="13" code="50005">No short description for class Policy</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/User/Policy.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\User" line="15" package="Default">
      <name>Policy</name>
      <full_name>\ezp\Persistence\User\Policy</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="13">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="22" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="17">
          <description><![CDATA[ID of the policy]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" package="Default">
        <name>$roleId</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[Foreign ID of the role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="38" package="Default">
        <name>$module</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Name of module, associated with the Policy]]></description>
          <long-description><![CDATA[<p>Eg: content</p>]]></long-description>
          <tag line="31" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="47" package="Default">
        <name>$function</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[Name of the module function Or all functions with '*']]></description>
          <long-description><![CDATA[<p>Eg: read</p>]]></long-description>
          <tag line="40" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="70" package="Default">
        <name>$limitations</name>
        <default><![CDATA[]]></default>
        <docblock line="49">
          <description><![CDATA[Array of policy limitations, which is just a random hash map.]]></description>
          <long-description><![CDATA[<p>The limitation array may look like:</p>

<pre><code> array(
     'Subtree' => array(
         '/1/2/',
         '/1/4/',
     ),
     'Foo' => array( 'Bar' ),
     …
 )
</code></pre>

<p>Where the keys are the limitation identifiers, and the respective values
are an array of limitation values</p>]]></long-description>
          <tag line="49" name="var" description="If string, then only the value '*' is allowed, meaning all limitations. Can not be a empty array as '*' should be used in this case." type="array|string">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/User/Role.php" hash="376fd4296156e6d4bf4a610f6d7972b3">
    <parse_markers>
      <critical line="13" code="50005">No short description for class Role</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/User/Role.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\User" line="15" package="Default">
      <name>Role</name>
      <full_name>\ezp\Persistence\User\Role</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="13">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="22" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="17">
          <description><![CDATA[ID of the user rule]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[Name of the role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$policies</name>
        <default><![CDATA[array()]]></default>
        <docblock line="31">
          <description><![CDATA[Policies associated with the role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="\ezp\Persistence\User\Policy[]">
            <type by_reference="false">\ezp\Persistence\User\Policy[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="47" package="Default">
        <name>$groupIds</name>
        <default><![CDATA[array()]]></default>
        <docblock line="38">
          <description><![CDATA[Contains an array of group IDs that has this role assigned.]]></description>
          <long-description><![CDATA[<p>In legacy storage engine, these are the contentobject_id's in ezuser_role.
These id's can by the nature of legacy engine both point to a user group and a user,
but the latter is deprecated.</p>]]></long-description>
          <tag line="38" name="var" description="In current implementation, id's are contentId's" type="\mixed[]">
            <type by_reference="false">\mixed[]</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/User/RoleUpdateStruct.php" hash="ea13d2e7ae40c036118e006ce9fdbaee">
    <parse_markers>
      <critical line="13" code="50005">No short description for class RoleUpdateStruct</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/User/RoleUpdateStruct.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\User" line="15" package="Default">
      <name>RoleUpdateStruct</name>
      <full_name>\ezp\Persistence\User\RoleUpdateStruct</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <docblock line="13">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="22" package="Default">
        <name>$id</name>
        <default><![CDATA[]]></default>
        <docblock line="17">
          <description><![CDATA[ID of the user rule]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" package="Default">
        <name>$name</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[Name of the role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/User/Handler.php" hash="efb483de563ea2f2d2d8ff596e5db251">
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in create()</error>
      <error line="52" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in update()</error>
      <error line="67" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in createRole()</error>
      <error line="94" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in updateRole()</error>
      <error line="108" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $policy in addPolicy()</error>
      <error line="119" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $policy in updatePolicy()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/User/Handler.php</error>
    </parse_markers>
    <namespace-alias name="User">ezp\Persistence\User</namespace-alias>
    <namespace-alias name="Role">ezp\Persistence\User\Role</namespace-alias>
    <namespace-alias name="RoleUpdateStruct">ezp\Persistence\User\RoleUpdateStruct</namespace-alias>
    <namespace-alias name="Policy">ezp\Persistence\User\Policy</namespace-alias>
    <interface namespace="ezp\Persistence\User" line="20" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\User\Handler</full_name>
      <extends/>
      <docblock line="16">
        <description><![CDATA[Storage Engine handler for user module]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="32" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Create a user]]></description>
          <long-description><![CDATA[<p>The User struct used to create the user will contain an ID which is used
to reference the user.</p>]]></long-description>
          <tag line="23" name="param" description="" type="\ezp\Persistence\User" variable="$user">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
          <tag line="23" name="return" description="" type="\ezp\Persistence\User">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="41" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Load user with user ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="34" name="return" description="" type="\ezp\Persistence\User">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
          <tag line="34" name="throws" description="If user is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="50" package="Default">
        <name>loadByLogin</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Load user(s) with user login / email.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="" type="string" variable="$login">
            <type by_reference="false">string</type>
          </tag>
          <tag line="43" name="param" description="Also match user email, caller must verify that $login is a valid email address." type="boolean" variable="$alsoMatchEmail">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="43" name="return" description="" type="\ezp\Persistence\User[]">
            <type by_reference="false">\ezp\Persistence\User[]</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$login</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="50">
          <name>$alsoMatchEmail</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="57" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Update the user information specified by the user struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="" type="\ezp\Persistence\User" variable="$user">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="65" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Delete user with the given ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="59" name="todo" description="Throw on missing user?"/>
        </docblock>
        <argument line="65">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="73" package="Default">
        <name>createRole</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Create new role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="param" description="" type="\ezp\Persistence\User\Role" variable="$role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
          <tag line="67" name="return" description="" type="\ezp\Persistence\User\Role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="82" package="Default">
        <name>loadRole</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Load a specified role by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="75" name="return" description="" type="\ezp\Persistence\User\Role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
          <tag line="75" name="throws" description="If role is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="92" package="Default">
        <name>loadRolesByGroupId</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[Load roles assigned to a user/group (not including inherited roles)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="param" description="In legacy storage engine this is the content object id a role is assigned to. By the nature of legacy storage engine, it is therefor possible to use $userId as well here." type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="84" name="return" description="" type="\ezp\Persistence\User\Role[]">
            <type by_reference="false">\ezp\Persistence\User\Role[]</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="99" package="Default">
        <name>updateRole</name>
        <type>function</type>
        <docblock line="94">
          <description><![CDATA[Update role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="param" description="" type="\ezp\Persistence\User\RoleUpdateStruct" variable="$role">
            <type by_reference="false">\ezp\Persistence\User\RoleUpdateStruct</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>RoleUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="106" package="Default">
        <name>deleteRole</name>
        <type>function</type>
        <docblock line="101">
          <description><![CDATA[Delete the specified role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="101" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="117" package="Default">
        <name>addPolicy</name>
        <type>function</type>
        <docblock line="108">
          <description><![CDATA[Adds a policy to a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="108" name="param" description="" type="\ezp\Persistence\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\Persistence\User\Policy</type>
          </tag>
          <tag line="108" name="return" description="" type="\ezp\Persistence\User\Policy">
            <type by_reference="false">\ezp\Persistence\User\Policy</type>
          </tag>
          <tag line="108" name="todo" description="Throw on invalid Role Id?"/>
          <tag line="108" name="throws" description="If $policy-&gt;limitation is empty (null, empty string/array..)" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="117">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="127" package="Default">
        <name>updatePolicy</name>
        <type>function</type>
        <docblock line="119">
          <description><![CDATA[Update a policy]]></description>
          <long-description><![CDATA[<p>Replaces limitations values with new values.</p>]]></long-description>
          <tag line="119" name="param" description="" type="\ezp\Persistence\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\Persistence\User\Policy</type>
          </tag>
          <tag line="119" name="throws" description="If $policy-&gt;limitation is empty (null, empty string/array..)" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="137" package="Default">
        <name>removePolicy</name>
        <type>function</type>
        <docblock line="129">
          <description><![CDATA[Removes a policy from a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="129" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="129" name="param" description="" type="mixed" variable="$policyId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="129" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="129" name="todo" description="Throw exception on missing role / policy?"/>
        </docblock>
        <argument line="137">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="137">
          <name>$policyId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="146" package="Default">
        <name>loadPoliciesByUserId</name>
        <type>function</type>
        <docblock line="139">
          <description><![CDATA[Returns the user policies associated with the user (including inherited policies from user groups)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="139" name="param" description="In legacy storage engine this is the content object id roles are assigned to in ezuser_role." type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="139" name="return" description="" type="\ezp\Persistence\User\Policy[]">
            <type by_reference="false">\ezp\Persistence\User\Policy[]</type>
          </tag>
        </docblock>
        <argument line="146">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="174" package="Default">
        <name>assignRole</name>
        <type>function</type>
        <docblock line="148">
          <description><![CDATA[Assign role to user group with given limitation]]></description>
          <long-description><![CDATA[<p>The limitation array may look like:</p>

<pre><code> array(
     'Subtree' => array(
         '/1/2/',
         '/1/4/',
     ),
     'Foo' => array( 'Bar' ),
     …
 )
</code></pre>

<p>Where the keys are the limitation identifiers, and the respective values
are an array of limitation values. The limitation parameter is optional.</p>]]></long-description>
          <tag line="148" name="todo" description="It has been discussed to not support assigning roles with limitations, as it is kind of flawed in eZ Publish&#10;Hence you would simplify the design and reduce future bugs by forcing use of policy limitations instead."/>
          <tag line="148" name="param" description="The group Id to assign the role to. In Legacy storage engine this is the content object id of the group to assign to. By the nature of legacy storage engine, it is therefor possible to use $userId as well here." type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="148" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="148" name="param" description="" type="array" variable="$limitation">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="174">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="174">
          <name>$limitation</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\User" line="184" package="Default">
        <name>unAssignRole</name>
        <type>function</type>
        <docblock line="176">
          <description><![CDATA[Un-assign a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="176" name="param" description="The group Id to un-assign the role from. In Legacy storage engine this is the content object id of the group to un-assign from. By the nature of legacy storage engine, it is therefor possible to use $userId as well here." type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="176" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="184">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="184">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/EzcDbHandler/Sqlite.php" hash="ed9ff4afb48f5e387131e0156478644c">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/EzcDbHandler/Sqlite.php</error>
    </parse_markers>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\EzcDbHandler" line="20" package="Default">
      <name>Sqlite</name>
      <full_name>\ezp\Persistence\Storage\Legacy\EzcDbHandler\Sqlite</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\EzcDbHandler</extends>
      <docblock line="14">
        <description><![CDATA[Wrapper class for the zeta components database handler, providing some
additional utility functions.]]></description>
        <long-description><![CDATA[<p>Functions as a full proxy to the zeta components database class.</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\EzcDbHandler" line="33" package="Default">
        <name>getAutoIncrementValue</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[Get auto increment value]]></description>
          <long-description><![CDATA[<p>Returns the value used for autoincrement tables. Usually this will just
be null. In case for sequence based RDBMS this method can return a
proper value for the given column.</p>]]></long-description>
          <tag line="22" name="param" description="" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="param" description="" type="string" variable="$column">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$table</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="33">
          <name>$column</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/EzcDbHandler/Pgsql.php" hash="14c46af8dd37cd7106c7f66786f0351e">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/EzcDbHandler/Pgsql.php</error>
    </parse_markers>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\EzcDbHandler" line="20" package="Default">
      <name>Pgsql</name>
      <full_name>\ezp\Persistence\Storage\Legacy\EzcDbHandler\Pgsql</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\EzcDbHandler</extends>
      <docblock line="14">
        <description><![CDATA[Wrapper class for the zeta components database handler, providing some
additional utility functions.]]></description>
        <long-description><![CDATA[<p>Functions as a full proxy to the zeta components database class.</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\EzcDbHandler" line="33" package="Default">
        <name>getAutoIncrementValue</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[Get auto increment value]]></description>
          <long-description><![CDATA[<p>Returns the value used for autoincrement tables. Usually this will just
be null. In case for sequence based RDBMS this method can return a
proper value for the given column.</p>]]></long-description>
          <tag line="22" name="param" description="" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="param" description="" type="string" variable="$column">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$table</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="33">
          <name>$column</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\EzcDbHandler" line="45" package="Default">
        <name>getSequenceName</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Return the name of the affected sequence]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="param" description="" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="param" description="" type="string" variable="$column">
            <type by_reference="false">string</type>
          </tag>
          <tag line="38" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$table</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="45">
          <name>$column</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldHandler.php" hash="77a9b151733dd638d453d8806d8d64cb">
    <parse_markers>
      <error line="54" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentGateway in __construct()</error>
      <error line="54" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $typeGateway in __construct()</error>
      <error line="54" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $mapper in __construct()</error>
      <error line="54" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageHandler in __construct()</error>
      <error line="118" code="50014">Name of argument $updateStruct does not match with the DocBlock's name $content in updateFields()</error>
      <error line="118" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $updateStruct in updateFields()</error>
      <notice line="118" code="50013">Parameter $content could not be found in updateFields()</notice>
      <error line="164" code="50014">Name of argument $contentId does not match with the DocBlock's name $content in deleteFields()</error>
      <notice line="164" code="50013">Parameter $content could not be found in deleteFields()</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldHandler.php</error>
    </parse_markers>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="Field">ezp\Persistence\Content\Field</namespace-alias>
    <namespace-alias name="Version">ezp\Persistence\Content\Version</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\UpdateStruct</namespace-alias>
    <namespace-alias name="FieldHandler">ezp\Persistence\Storage\Legacy\Content\FieldHandler</namespace-alias>
    <namespace-alias name="Mapper">ezp\Persistence\Storage\Legacy\Content\Mapper</namespace-alias>
    <namespace-alias name="TypeGateway">ezp\Persistence\Storage\Legacy\Content\Type\Gateway</namespace-alias>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Gateway</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content" line="24" package="Default">
      <name>FieldHandler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldHandler</full_name>
      <extends/>
      <docblock line="21">
        <description><![CDATA[Field Handler.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="31" package="Default">
        <name>$contentGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[Content Gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$typeGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Content Type Gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$mapper</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[Content Mapper]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Mapper</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" package="Default">
        <name>$storageHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="47">
          <description><![CDATA[Storage Handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageHandler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="62" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Creates a new Field Handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway" variable="$contentGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway</type>
          </tag>
          <tag line="54" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway" variable="$typeGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway</type>
          </tag>
          <tag line="54" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Mapper" variable="$mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Mapper</type>
          </tag>
          <tag line="54" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageHandler" variable="$storageHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageHandler</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$contentGateway</name>
          <default><![CDATA[]]></default>
          <type>Gateway</type>
        </argument>
        <argument line="64">
          <name>$typeGateway</name>
          <default><![CDATA[]]></default>
          <type>TypeGateway</type>
        </argument>
        <argument line="65">
          <name>$mapper</name>
          <default><![CDATA[]]></default>
          <type>Mapper</type>
        </argument>
        <argument line="66">
          <name>$storageHandler</name>
          <default><![CDATA[]]></default>
          <type>StorageHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="80" package="Default">
        <name>createNewFields</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[Creates new fields in the database from $content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="74" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="110" package="Default">
        <name>loadExternalFieldData</name>
        <type>function</type>
        <docblock line="104">
          <description><![CDATA[Performs external loads for the fields in $content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="104" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="124" package="Default">
        <name>updateFields</name>
        <type>function</type>
        <docblock line="118">
          <description><![CDATA[Updates the fields in $content in the database]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="118" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$updateStruct</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="170" package="Default">
        <name>deleteFields</name>
        <type>function</type>
        <docblock line="164">
          <description><![CDATA[Deletes the fields in $content from the database]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="164" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="164" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="170">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Gateway/EzcDatabase/QueryBuilder.php" hash="ee3f518a56d0214a70afb65d31bf18b4">
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dbHandler in __construct()</error>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $translations in createFindQuery()</error>
      <error line="14" code="50000">No DocBlock was found for QueryBuilder</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Gateway/EzcDatabase/QueryBuilder.php</error>
    </parse_markers>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase" line="14">
      <name>QueryBuilder</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase\QueryBuilder</full_name>
      <extends/>
      <property final="false" static="false" visibility="protected" line="21" package="Default">
        <name>$dbHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="16">
          <description><![CDATA[Database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="16" name="var" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase" line="28" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Creates a new query builder.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>ezcDbHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase" line="42" package="Default">
        <name>createFindQuery</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Creates a select query for content objects]]></description>
          <long-description><![CDATA[<p>Creates a select query with all necessary joins to fetch a complete
content object. Does not apply any WHERE conditions.</p>]]></long-description>
          <tag line="33" name="param" description="" type="\string[]" variable="$translations">
            <type by_reference="false">\string[]</type>
          </tag>
          <tag line="33" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase\ezcQuerySelect">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase\ezcQuerySelect</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Gateway/EzcDatabase.php" hash="d23b57032ca3e1895be52f35374dd904">
    <parse_markers>
      <error line="61" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $queryBuilder in __construct()</error>
      <error line="61" code="50014">Name of argument $languageHandler does not match with the DocBlock's name $languageMaskGenerator in __construct()</error>
      <error line="61" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $languageHandler in __construct()</error>
      <error line="61" code="50015">Argument $languageMaskGenerator is missing from the Docblock of __construct()</error>
      <error line="93" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in insertContentObject()</error>
      <error line="165" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fields in generateLanguageMask()</error>
      <error line="190" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fields in insertVersion()</error>
      <notice line="458" code="50013">Parameter $alwaysAvailable could not be found in updateField()</notice>
      <error line="516" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in updateNonTranslatableField()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Gateway/EzcDatabase.php</error>
    </parse_markers>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Gateway</namespace-alias>
    <namespace-alias name="QueryBuilder">ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase\QueryBuilder</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="Language">ezp\Persistence\Storage\Legacy\Content\Language</namespace-alias>
    <namespace-alias name="CachingHandler">ezp\Persistence\Storage\Legacy\Content\Language\CachingHandler</namespace-alias>
    <namespace-alias name="LanguageMaskGenerator">ezp\Persistence\Storage\Legacy\Content\Language\MaskGenerator</namespace-alias>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\UpdateStruct</namespace-alias>
    <namespace-alias name="Version">ezp\Persistence\Content\Version</namespace-alias>
    <namespace-alias name="Field">ezp\Persistence\Content\Field</namespace-alias>
    <namespace-alias name="ContentDo">ezp\Content</namespace-alias>
    <namespace-alias name="VersionDo">ezp\Content\Version</namespace-alias>
    <namespace-alias name="ezcQueryUpdate">ezcQueryUpdate</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="31" package="Default">
      <name>EzcDatabase</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Gateway</extends>
      <docblock line="28">
        <description><![CDATA[ezcDatabase based content gateway]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$dbHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Zeta Components database handler.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$queryBuilder</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[Query builder.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase\QueryBuilder">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase\QueryBuilder</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" package="Default">
        <name>$languageHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="47">
          <description><![CDATA[Caching language handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\CachingHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\CachingHandler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="59" package="Default">
        <name>$languageMaskGenerator</name>
        <default><![CDATA[]]></default>
        <docblock line="54">
          <description><![CDATA[Language mask generator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\MaskGenerator">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\MaskGenerator</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="68" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="61">
          <description><![CDATA[Creates a new gateway based on $db]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$db">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
          <tag line="61" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase\QueryBuilder" variable="$queryBuilder">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase\QueryBuilder</type>
          </tag>
          <tag line="61" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\MaskGenerator" variable="$languageMaskGenerator">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\MaskGenerator</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$db</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
        <argument line="70">
          <name>$queryBuilder</name>
          <default><![CDATA[]]></default>
          <type>QueryBuilder</type>
        </argument>
        <argument line="71">
          <name>$languageHandler</name>
          <default><![CDATA[]]></default>
          <type>CachingHandler</type>
        </argument>
        <argument line="72">
          <name>$languageMaskGenerator</name>
          <default><![CDATA[]]></default>
          <type>LanguageMaskGenerator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="85" package="Default">
        <name>getContext</name>
        <type>function</type>
        <docblock line="80">
          <description><![CDATA[Get context definition for external storage layers]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="99" package="Default">
        <name>insertContentObject</name>
        <type>function</type>
        <docblock line="93">
          <description><![CDATA[Inserts a new content object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="param" description="" type="\ezp\Persistence\Content\CreateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\CreateStruct</type>
          </tag>
          <tag line="93" name="return" description="ID" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="172" package="Default">
        <name>generateLanguageMask</name>
        <type>function</type>
        <docblock line="165">
          <description><![CDATA[Generates a language mask for $version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="165" name="param" description="" type="\ezp\Persistence\Content\Field[]" variable="$fields">
            <type by_reference="false">\ezp\Persistence\Content\Field[]</type>
          </tag>
          <tag line="165" name="param" description="" type="boolean" variable="$alwaysAvailable">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="165" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="172">
          <name>$fields</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="172">
          <name>$alwaysAvailable</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="198" package="Default">
        <name>insertVersion</name>
        <type>function</type>
        <docblock line="190">
          <description><![CDATA[Inserts a new version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="190" name="param" description="" type="\ezp\Persistence\Content\Version" variable="$version">
            <type by_reference="false">\ezp\Persistence\Content\Version</type>
          </tag>
          <tag line="190" name="param" description="" type="\ezp\Persistence\Content\Field[]" variable="$fields">
            <type by_reference="false">\ezp\Persistence\Content\Field[]</type>
          </tag>
          <tag line="190" name="param" description="" type="boolean" variable="$alwaysAvailable">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="190" name="return" description="ID" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="198">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type>Version</type>
        </argument>
        <argument line="198">
          <name>$fields</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="198">
          <name>$alwaysAvailable</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="256" package="Default">
        <name>updateContent</name>
        <type>function</type>
        <docblock line="250">
          <description><![CDATA[Updates an existing content in respect to $struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="250" name="param" description="" type="\ezp\Persistence\Content\UpdateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\UpdateStruct</type>
          </tag>
          <tag line="250" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="256">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="300" package="Default">
        <name>updateVersion</name>
        <type>function</type>
        <docblock line="294">
          <description><![CDATA[Updates an existing version in respect to $struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="294" name="param" description="" type="\ezp\Persistence\Content\UpdateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\UpdateStruct</type>
          </tag>
          <tag line="294" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="300">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="336" package="Default">
        <name>setStatus</name>
        <type>function</type>
        <docblock line="326">
          <description><![CDATA[Sets the status of the version identified by $contentId and $version to $status.]]></description>
          <long-description><![CDATA[<p>The $status can be one of STATUS_DRAFT, STATUS_PUBLISHED, STATUS_ARCHIVED</p>]]></long-description>
          <tag line="326" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="326" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="326" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="326" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="336">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="336">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="336">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="400" package="Default">
        <name>insertNewField</name>
        <type>function</type>
        <docblock line="389">
          <description><![CDATA[Inserts a new field.]]></description>
          <long-description><![CDATA[<p>Only used when a new content object is created. After that, field IDs
need to stay the same, only the version number changes.</p>]]></long-description>
          <tag line="389" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="389" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="389" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="389" name="return" description="ID" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="400">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
        <argument line="400">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="400">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="466" package="Default">
        <name>updateField</name>
        <type>function</type>
        <docblock line="458">
          <description><![CDATA[Updates an existing field]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="458" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="458" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="458" name="param" description="" type="boolean" variable="$alwaysAvailable">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="458" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="466">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="466">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="494" package="Default">
        <name>setFieldUpdateValues</name>
        <type>function</type>
        <docblock line="487">
          <description><![CDATA[Sets update fields for $value on $q]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="487" name="param" description="" type="\ezcQueryUpdate" variable="$q">
            <type by_reference="false">\ezcQueryUpdate</type>
          </tag>
          <tag line="487" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="487" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="494">
          <name>$q</name>
          <default><![CDATA[]]></default>
          <type>ezcQueryUpdate</type>
        </argument>
        <argument line="494">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="524" package="Default">
        <name>updateNonTranslatableField</name>
        <type>function</type>
        <docblock line="516">
          <description><![CDATA[Updates an existing, non-translatable field]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="516" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="516" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="516" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="516" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="525">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="526">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="527">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="562" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="552">
          <description><![CDATA[Load data for a content object]]></description>
          <long-description><![CDATA[<p>Returns an array with the relevant data.</p>]]></long-description>
          <tag line="552" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="552" name="param" description="" type="mixed" variable="$version">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="552" name="param" description="" type="\string[]" variable="$translations">
            <type by_reference="false">\string[]</type>
          </tag>
          <tag line="552" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="562">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="562">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="562">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="596" package="Default">
        <name>loadLatestPublishedData</name>
        <type>function</type>
        <docblock line="589">
          <description><![CDATA[Loads data for the latest published version of the content identified by
$contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="589" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="589" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="596">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="629" package="Default">
        <name>listVersions</name>
        <type>function</type>
        <docblock line="623">
          <description><![CDATA[Returns all version data for the given $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="623" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="623" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway\string[][]</type>
          </tag>
        </docblock>
        <argument line="629">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="698" package="Default">
        <name>getAllLocationIds</name>
        <type>function</type>
        <docblock line="692">
          <description><![CDATA[Returns all IDs for locations that refer to $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="692" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="692" name="return" description="" type="\int[]">
            <type by_reference="false">\int[]</type>
          </tag>
        </docblock>
        <argument line="698">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="724" package="Default">
        <name>getFieldIdsByType</name>
        <type>function</type>
        <docblock line="718">
          <description><![CDATA[Returns all field IDs of $contentId grouped by their type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="718" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="718" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway\int[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway\int[][]</type>
          </tag>
        </docblock>
        <argument line="724">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="760" package="Default">
        <name>deleteRelations</name>
        <type>function</type>
        <docblock line="754">
          <description><![CDATA[Deletes relations to and from $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="754" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="754" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="760">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="789" package="Default">
        <name>deleteField</name>
        <type>function</type>
        <docblock line="782">
          <description><![CDATA[Deletes the field with the given $fieldId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="782" name="param" description="" type="int" variable="$fieldId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="782" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="782" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="789">
          <name>$fieldId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="789">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="817" package="Default">
        <name>deleteFields</name>
        <type>function</type>
        <docblock line="811">
          <description><![CDATA[Deletes all fields of $contentId in all versions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="811" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="811" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="817">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="838" package="Default">
        <name>deleteVersions</name>
        <type>function</type>
        <docblock line="832">
          <description><![CDATA[Deletes all versions of $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="832" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="832" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="838">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="859" package="Default">
        <name>deleteNames</name>
        <type>function</type>
        <docblock line="853">
          <description><![CDATA[Deletes all names of $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="853" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="853" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="859">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="883" package="Default">
        <name>setName</name>
        <type>function</type>
        <docblock line="874">
          <description><![CDATA[Sets the name for Content $contentId in version $version to $name in $language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="874" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="874" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="874" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="874" name="param" description="" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
          <tag line="874" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="883">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="883">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="883">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="883">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Gateway" line="950" package="Default">
        <name>deleteContent</name>
        <type>function</type>
        <docblock line="944">
          <description><![CDATA[Deletes the actual content object referred to by $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="944" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="944" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="950">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/TransformationParser.php" hash="c277f409ca5d2586e20cce6407e467ca">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/TransformationParser.php</error>
    </parse_markers>
    <namespace-alias name="Storage">ezp\Persistence\Fields\Storage</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="36" package="Default">
      <name>TransformationParser</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\TransformationParser</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Parser for transformation specifications]]></description>
        <long-description><![CDATA[<p>The transformation specifications look like:</p>

<p>CF = CF...           : Map from one char to one or more chars  (map)
 CF - CF = CF...      : Map range of chars to one or more chars (replace)
 CF - CF +- xx        : Transpose several chars by value xx     (transpose)
 CF - CF % yy +- xx   : Transpose several chars by value xx, yy denotes skip value
                        yy equal to 1 is the same as 'transpose' (transpose-modulo)
 TI[,TI...]           :</p>

<p>CF = Character Format
 TI = Transform Identifier</p>

<p>Character formats:
 U+xxxx : Unicode value in hexadecimal
 xx: Ascii value in hexadecimal
 remove : Remove character from result, can only be used in destination
 keep : Keep character as it is, can only be used in destination
 "xxxx" : Multiple characters as a string, can only be used in destination, &#92; means \ and \" means "</p>]]></long-description>
      </docblock>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="38">
        <name>T_COMMENT</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="39">
        <name>T_WHITESPACE</name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="40">
        <name>T_SECTION</name>
        <value><![CDATA[10]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="41">
        <name>T_MAP</name>
        <value><![CDATA[11]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="42">
        <name>T_REPLACE</name>
        <value><![CDATA[12]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="43">
        <name>T_TRANSPOSE</name>
        <value><![CDATA[13]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="44">
        <name>T_TRANSPOSE_MODULO</name>
        <value><![CDATA[14]]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="54" package="Default">
        <name>$tokenSpecifications</name>
        <default><![CDATA[null]]></default>
        <docblock line="46">
          <description><![CDATA[Array of token specifications.]]></description>
          <long-description><![CDATA[<p>For readability reasons this array is created in the constructor to be
able to use temporary variables.</p>]]></long-description>
          <tag line="46" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="61" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Construct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="91" package="Default">
        <name>parse</name>
        <type>function</type>
        <docblock line="85">
          <description><![CDATA[Parse the specified transformation file into an AST]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="param" description="" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="85" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$file</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="102" package="Default">
        <name>parseString</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Parse the given string into an AST]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="96" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="144" package="Default">
        <name>tokenize</name>
        <type>function</type>
        <docblock line="136">
          <description><![CDATA[Tokenize transformation input file]]></description>
          <long-description><![CDATA[<p>Returns an array of tokens</p>]]></long-description>
          <tag line="136" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="136" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="185" package="Default">
        <name>filterValues</name>
        <type>function</type>
        <docblock line="179">
          <description><![CDATA[Filter out numeric array keys]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="179" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="179" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="185">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Utf8Converter.php" hash="6663fbc137331df69deff3309a207e02">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Utf8Converter.php</error>
    </parse_markers>
    <namespace-alias name="Storage">ezp\Persistence\Fields\Storage</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="20" package="Default">
      <name>Utf8Converter</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Utf8Converter</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Class for converting UTF-8 charecters to their decimal code points and vice
versa.]]></description>
        <long-description><![CDATA[<p>The code originates from the eZUTF8Codec class available in lib/ezi18n/classes/ezutf8codec.php</p>]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="28" package="Default">
        <name>toUTF8Character</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[Convert character code to UTF-8 character]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="param" description="" type="int" variable="$charCode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="22" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$charCode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="88" package="Default">
        <name>toUnicodeCodepoint</name>
        <type>function</type>
        <docblock line="82">
          <description><![CDATA[Convert a single UTF-8 character into its decimal code point]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="param" description="" type="string" variable="$char">
            <type by_reference="false">string</type>
          </tag>
          <tag line="82" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$char</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/SortClauseHandler/LocationDepth.php" hash="f0ac365dbb66292a6d3f7fe654838b74">
    <parse_markers>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in applySelect()</error>
      <error line="60" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in applyJoin()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/SortClauseHandler/LocationDepth.php</error>
    </parse_markers>
    <namespace-alias name="SortClauseHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler</namespace-alias>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Search\Gateway</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler" line="20" package="Default">
      <name>LocationDepth</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler\LocationDepth</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler</extends>
      <docblock line="17">
        <description><![CDATA[Content locator gateway implementation using the zeta database component.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler" line="28" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[Check if this sort clause handler accepts to handle the given sort clause.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause" variable="$sortClause">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause</type>
          </tag>
          <tag line="22" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$sortClause</name>
          <default><![CDATA[]]></default>
          <type>SortClause</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler" line="44" package="Default">
        <name>applySelect</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Apply selects to the query]]></description>
          <long-description><![CDATA[<p>Returns the name of the (aliased) column, which information should be
used for sorting.</p>]]></long-description>
          <tag line="33" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause" variable="$sortClause">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause</type>
          </tag>
          <tag line="33" name="param" description="" type="int" variable="$number">
            <type by_reference="false">int</type>
          </tag>
          <tag line="33" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="44">
          <name>$sortClause</name>
          <default><![CDATA[]]></default>
          <type>SortClause</type>
        </argument>
        <argument line="44">
          <name>$number</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler" line="68" package="Default">
        <name>applyJoin</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Applies joins to the query, required to fetch sort data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="60" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause" variable="$sortClause">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause</type>
          </tag>
          <tag line="60" name="param" description="" type="int" variable="$number">
            <type by_reference="false">int</type>
          </tag>
          <tag line="60" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="68">
          <name>$sortClause</name>
          <default><![CDATA[]]></default>
          <type>SortClause</type>
        </argument>
        <argument line="68">
          <name>$number</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/SortClauseHandler/LocationPriority.php" hash="31612b15412c50e86781bb8059c9bc51">
    <parse_markers>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in applySelect()</error>
      <error line="60" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in applyJoin()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/SortClauseHandler/LocationPriority.php</error>
    </parse_markers>
    <namespace-alias name="SortClauseHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler</namespace-alias>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Search\Gateway</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler" line="20" package="Default">
      <name>LocationPriority</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler\LocationPriority</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler</extends>
      <docblock line="17">
        <description><![CDATA[Content locator gateway implementation using the zeta database component.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler" line="28" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[Check if this sort clause handler accepts to handle the given sort clause.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause" variable="$sortClause">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause</type>
          </tag>
          <tag line="22" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$sortClause</name>
          <default><![CDATA[]]></default>
          <type>SortClause</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler" line="44" package="Default">
        <name>applySelect</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Apply selects to the query]]></description>
          <long-description><![CDATA[<p>Returns the name of the (aliased) column, which information should be
used for sorting.</p>]]></long-description>
          <tag line="33" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause" variable="$sortClause">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause</type>
          </tag>
          <tag line="33" name="param" description="" type="int" variable="$number">
            <type by_reference="false">int</type>
          </tag>
          <tag line="33" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="44">
          <name>$sortClause</name>
          <default><![CDATA[]]></default>
          <type>SortClause</type>
        </argument>
        <argument line="44">
          <name>$number</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler" line="68" package="Default">
        <name>applyJoin</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Applies joins to the query, required to fetch sort data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="60" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause" variable="$sortClause">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause</type>
          </tag>
          <tag line="60" name="param" description="" type="int" variable="$number">
            <type by_reference="false">int</type>
          </tag>
          <tag line="60" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="68">
          <name>$sortClause</name>
          <default><![CDATA[]]></default>
          <type>SortClause</type>
        </argument>
        <argument line="68">
          <name>$number</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/SortClauseHandler/LocationPathString.php" hash="f8ae15e8890ed50eb39bfcf055131a6b">
    <parse_markers>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in applySelect()</error>
      <error line="60" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in applyJoin()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/SortClauseHandler/LocationPathString.php</error>
    </parse_markers>
    <namespace-alias name="SortClauseHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler</namespace-alias>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Search\Gateway</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler" line="20" package="Default">
      <name>LocationPathString</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler\LocationPathString</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler</extends>
      <docblock line="17">
        <description><![CDATA[Content locator gateway implementation using the zeta database component.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler" line="28" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[Check if this sort clause handler accepts to handle the given sort clause.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause" variable="$sortClause">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause</type>
          </tag>
          <tag line="22" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$sortClause</name>
          <default><![CDATA[]]></default>
          <type>SortClause</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler" line="44" package="Default">
        <name>applySelect</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Apply selects to the query]]></description>
          <long-description><![CDATA[<p>Returns the name of the (aliased) column, which information should be
used for sorting.</p>]]></long-description>
          <tag line="33" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause" variable="$sortClause">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause</type>
          </tag>
          <tag line="33" name="param" description="" type="int" variable="$number">
            <type by_reference="false">int</type>
          </tag>
          <tag line="33" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="44">
          <name>$sortClause</name>
          <default><![CDATA[]]></default>
          <type>SortClause</type>
        </argument>
        <argument line="44">
          <name>$number</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler" line="68" package="Default">
        <name>applyJoin</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Applies joins to the query, required to fetch sort data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="60" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause" variable="$sortClause">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause</type>
          </tag>
          <tag line="60" name="param" description="" type="int" variable="$number">
            <type by_reference="false">int</type>
          </tag>
          <tag line="60" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="68">
          <name>$sortClause</name>
          <default><![CDATA[]]></default>
          <type>SortClause</type>
        </argument>
        <argument line="68">
          <name>$number</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/EzcDatabase.php" hash="e320d7bb38d4c0b51c34859a8d3c3b3c">
    <parse_markers>
      <error line="52" code="50015">Argument $criteriaConverter is missing from the Docblock of __construct()</error>
      <error line="52" code="50015">Argument $sortClauseConverter is missing from the Docblock of __construct()</error>
      <error line="52" code="50015">Argument $queryBuilder is missing from the Docblock of __construct()</error>
      <error line="71" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $sort in find()</error>
      <error line="71" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $translations in find()</error>
      <error line="112" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in getQueryCondition()</error>
      <error line="150" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in getContentIds()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/EzcDatabase.php</error>
    </parse_markers>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Search\Gateway</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="QueryBuilder">ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase\QueryBuilder</namespace-alias>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="Search">ezp\Persistence\Content\Search</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="22" package="Default">
      <name>EzcDatabase</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\EzcDatabase</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway</extends>
      <docblock line="19">
        <description><![CDATA[Content locator gateway implementation using the zeta handler component.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[Database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$criteriaConverter</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Criteria converter]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="43" package="Default">
        <name>$sortClauseConverter</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Sort clause converter]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseConverter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseConverter</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$queryBuilder</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[Content load query builder]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase\QueryBuilder">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway\EzcDatabase\QueryBuilder</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="58" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Construct from handler handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
          <tag line="52" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
        <argument line="60">
          <name>$criteriaConverter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="61">
          <name>$sortClauseConverter</name>
          <default><![CDATA[]]></default>
          <type>SortClauseConverter</type>
        </argument>
        <argument line="62">
          <name>$queryBuilder</name>
          <default><![CDATA[]]></default>
          <type>QueryBuilder</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="81" package="Default">
        <name>find</name>
        <type>function</type>
        <docblock line="71">
          <description><![CDATA[Returns a list of object satisfying the $criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="71" name="param" description="" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="71" name="param" description="" type="int|null" variable="$limit">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="71" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause[]" variable="$sort">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause[]</type>
          </tag>
          <tag line="71" name="param" description="" type="\string[]" variable="$translations">
            <type by_reference="false">\string[]</type>
          </tag>
          <tag line="71" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\mixed[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\mixed[][]</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="81">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="81">
          <name>$limit</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="81">
          <name>$sort</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
        <argument line="81">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="120" package="Default">
        <name>getQueryCondition</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Get query condition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="112" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="112" name="param" description="" type="mixed" variable="$translations">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="112" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="120">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="120">
          <name>$translations</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="160" package="Default">
        <name>getContentIds</name>
        <type>function</type>
        <docblock line="150">
          <description><![CDATA[Get sorted arrays of content IDs, which should be returned]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="150" name="param" description="ixed $query" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="150" name="param" description="" type="string" variable="$condition">
            <type by_reference="false">string</type>
          </tag>
          <tag line="150" name="param" description="" type="mixed" variable="$sort">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="150" name="param" description="" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="150" name="param" description="" type="int" variable="$limit">
            <type by_reference="false">int</type>
          </tag>
          <tag line="150" name="return" description="" type="\int[]">
            <type by_reference="false">\int[]</type>
          </tag>
        </docblock>
        <argument line="160">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="160">
          <name>$condition</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="160">
          <name>$sort</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="160">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="160">
          <name>$limit</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="203" package="Default">
        <name>loadContent</name>
        <type>function</type>
        <docblock line="196">
          <description><![CDATA[Load the actual content based on the provided IDs]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="196" name="param" description="" type="array" variable="$contentIds">
            <type by_reference="false">array</type>
          </tag>
          <tag line="196" name="param" description="" type="mixed" variable="$translations">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="196" name="return" description="" type="\mixed[]">
            <type by_reference="false">\mixed[]</type>
          </tag>
        </docblock>
        <argument line="203">
          <name>$contentIds</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="203">
          <name>$translations</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/SortClauseHandler.php" hash="b53df7721b604f342f33a7ffc2fe278b">
    <parse_markers>
      <error line="47" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in applySelect()</error>
      <error line="60" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in applyJoin()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/SortClauseHandler.php</error>
    </parse_markers>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Search\Gateway</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="20" package="Default">
      <name>SortClauseHandler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler</full_name>
      <extends/>
      <docblock line="17">
        <description><![CDATA[Handler for a single sort clause]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27" package="Default">
        <name>$dbHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="22">
          <description><![CDATA[Database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="var" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="34" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="29">
          <description><![CDATA[Creates a new criterion handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="45" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Check if this sort clause handler accepts to handle the given sort clause.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause" variable="$sortClause">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause</type>
          </tag>
          <tag line="39" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$sortClause</name>
          <default><![CDATA[]]></default>
          <type>SortClause</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="58" package="Default">
        <name>applySelect</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Apply selects to the query]]></description>
          <long-description><![CDATA[<p>Returns the name of the (aliased) column, which information should be
used for sorting.</p>]]></long-description>
          <tag line="47" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="47" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause" variable="$sortClause">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause</type>
          </tag>
          <tag line="47" name="param" description="" type="int" variable="$number">
            <type by_reference="false">int</type>
          </tag>
          <tag line="47" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="58">
          <name>$sortClause</name>
          <default><![CDATA[]]></default>
          <type>SortClause</type>
        </argument>
        <argument line="58">
          <name>$number</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="68" package="Default">
        <name>applyJoin</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[applies joins to the query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="60" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause" variable="$sortClause">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause</type>
          </tag>
          <tag line="60" name="param" description="" type="int" variable="$number">
            <type by_reference="false">int</type>
          </tag>
          <tag line="60" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="68">
          <name>$sortClause</name>
          <default><![CDATA[]]></default>
          <type>SortClause</type>
        </argument>
        <argument line="68">
          <name>$number</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="76" package="Default">
        <name>getSortColumnName</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Returns the quoted sort column name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="param" description="" type="int" variable="$number">
            <type by_reference="false">int</type>
          </tag>
          <tag line="70" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$number</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="87" package="Default">
        <name>getSortTableName</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[Returns the sort table name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="81" name="param" description="" type="int" variable="$number">
            <type by_reference="false">int</type>
          </tag>
          <tag line="81" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="87">
          <name>$number</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler.php" hash="8a7499484a940440a3e35301a4adaa7e">
    <parse_markers>
      <error line="60" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler.php</error>
    </parse_markers>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Search\Gateway</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="19" package="Default">
      <name>CriterionHandler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</full_name>
      <extends/>
      <docblock line="16">
        <description><![CDATA[Content locator gateway implementation using the zeta database component.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="27" package="Default">
        <name>$comparatorMap</name>
        <default><![CDATA[array(
        Criterion\Operator::EQ => "eq",
        Criterion\Operator::GT => "gt",
        Criterion\Operator::GTE => "gte",
        Criterion\Operator::LT => "lt",
        Criterion\Operator::LTE => "lte",
    )]]></default>
        <docblock line="21">
          <description><![CDATA[Map of criterion operators to the respective function names in the zeta
Database abstraction layer.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="40" package="Default">
        <name>$dbHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="35">
          <description><![CDATA[Database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="47" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Creates a new criterion handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="58" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="52" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="68" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="60" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="60" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="60" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="60" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="68">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="68">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/SortClauseConverter.php" hash="884b94ca12fbfcd6f4e95f1f85bdfd81">
    <parse_markers>
      <error line="46" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in applySelect()</error>
      <error line="72" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in applyJoin()</error>
      <error line="96" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in applyOrderBy()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/SortClauseConverter.php</error>
    </parse_markers>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Search\Gateway</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="19" package="Default">
      <name>SortClauseConverter</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseConverter</full_name>
      <extends/>
      <docblock line="16">
        <description><![CDATA[Converter manager for sort clauses]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[Sort cluase handlers]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\array(SortClauseHandler)">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\array(SortClauseHandler)</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="33" package="Default">
        <name>$sortColumns</name>
        <default><![CDATA[array()]]></default>
        <docblock line="28">
          <description><![CDATA[Sorting information for temporary sort columns]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="41" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Construct from an optional array of sort clause handlers]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="param" description="" type="array" variable="$handler">
            <type by_reference="false">array</type>
          </tag>
          <tag line="35" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$handler</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="53" package="Default">
        <name>applySelect</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Apply select parts of sort clauses to query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="46" name="param" description="" type="array" variable="$sortClauses">
            <type by_reference="false">array</type>
          </tag>
          <tag line="46" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="53">
          <name>$sortClauses</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="79" package="Default">
        <name>applyJoin</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Apply join parts of sort clauses to query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="72" name="param" description="" type="array" variable="$sortClauses">
            <type by_reference="false">array</type>
          </tag>
          <tag line="72" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="79">
          <name>$sortClauses</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="103" package="Default">
        <name>applyOrderBy</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Apply order by parts of sort clauses to query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="96" name="param" description="" type="array" variable="$sortClauses">
            <type by_reference="false">array</type>
          </tag>
          <tag line="96" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="103">
          <name>$sortClauses</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriteriaConverter.php" hash="d86ec356ccdc71974280c3179d51fd69">
    <parse_markers>
      <error line="38" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in convertCriteria()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriteriaConverter.php</error>
    </parse_markers>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Search\Gateway</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="18" package="Default">
      <name>CriteriaConverter</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[Content locator gateway implementation using the zeta database component.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[Criterion handlers]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\array(CriterionHandler)">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\array(CriterionHandler)</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="33" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Construct from an optional array of Criterion handlers]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="array" variable="$handler">
            <type by_reference="false">array</type>
          </tag>
          <tag line="27" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway" line="45" package="Default">
        <name>convertCriteria</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Generic converter of criteria into query fragments]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="38" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="38" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="45">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/ContentTypeGroupId.php" hash="3a7e20f5fa09ae1ce06ab502f7635713">
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/ContentTypeGroupId.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="19" package="Default">
      <name>ContentTypeGroupId</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\ContentTypeGroupId</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="16">
        <description><![CDATA[Content type group criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="27" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="40" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="32" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="40">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="40">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/LogicalAnd.php" hash="ccd99bcae2137d7f7d36c9c6e422b144">
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/LogicalAnd.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="19" package="Default">
      <name>LogicalAnd</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\LogicalAnd</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="16">
        <description><![CDATA[Logical and criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="27" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="40" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="32" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="40">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="40">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/FullText.php" hash="3155c2ae3f40a493125cade48051511b">
    <parse_markers>
      <error line="74" code="50014">Name of argument $dbHandler does not match with the DocBlock's name $configuration in __construct()</error>
      <error line="74" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dbHandler in __construct()</error>
      <error line="74" code="50015">Argument $processor is missing from the Docblock of __construct()</error>
      <error line="74" code="50015">Argument $configuration is missing from the Docblock of __construct()</error>
      <error line="115" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in getWordExpression()</error>
      <error line="152" code="50014">Name of argument $query does not match with the DocBlock's name $string in getWordIdSubquery()</error>
      <error line="152" code="50015">Argument $string is missing from the Docblock of getWordIdSubquery()</error>
      <error line="185" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/FullText.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="TransformationProcessor">ezp\Persistence\Storage\Legacy\Content\Search\TransformationProcessor</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="21" package="Default">
      <name>FullText</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\FullText</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="18">
        <description><![CDATA[Full text criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$configuration</name>
        <default><![CDATA[array(
        'searchThresholdValue' => 20,
        'enableWildcards' => true,
        'commands' => array(
            'apostrophe_normalize',
            'apostrophe_to_doublequote',
            'ascii_lowercase',
            'ascii_search_cleanup',
            'cyrillic_diacritical',
            'cyrillic_lowercase',
            'cyrillic_search_cleanup',
            'cyrillic_transliterate_ascii',
            'doublequote_normalize',
            'endline_search_normalize',
            'greek_diacritical',
            'greek_lowercase',
            'greek_normalize',
            'greek_transliterate_ascii',
            'hebrew_transliterate_ascii',
            'hyphen_normalize',
            'inverted_to_normal',
            'latin1_diacritical',
            'latin1_lowercase',
            'latin1_transliterate_ascii',
            'latin-exta_diacritical',
            'latin-exta_lowercase',
            'latin-exta_transliterate_ascii',
            'latin_lowercase',
            'latin_search_cleanup',
            'latin_search_decompose',
            'math_to_ascii',
            'punctuation_normalize',
            'space_normalize',
            'special_decompose',
            'specialwords_search_normalize',
            'tab_search_normalize',
        )
    )]]></default>
        <docblock line="23">
          <description><![CDATA[Full text search configuration options]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="72" package="Default">
        <name>$processor</name>
        <default><![CDATA[]]></default>
        <docblock line="67">
          <description><![CDATA[Transformation processor to normalize search strings]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\TransformationProcessor">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\TransformationProcessor</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="80" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[Construct from full text search configuration]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="param" description="" type="array" variable="$configuration">
            <type by_reference="false">array</type>
          </tag>
          <tag line="74" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
        <argument line="80">
          <name>$processor</name>
          <default><![CDATA[]]></default>
          <type>TransformationProcessor</type>
        </argument>
        <argument line="80">
          <name>$configuration</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="94" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="88">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="88" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="88" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="94">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="105" package="Default">
        <name>tokenizeString</name>
        <type>function</type>
        <docblock line="99">
          <description><![CDATA[Tokenize String]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="99" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="99" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="126" package="Default">
        <name>getWordExpression</name>
        <type>function</type>
        <docblock line="115">
          <description><![CDATA[Get single word query expression]]></description>
          <long-description><![CDATA[<p>Depending on the configuration of the full text search criterion
converter wildcards are either transformed into the repsective LIKE
queries, or everything is just compared using equal.</p>]]></long-description>
          <tag line="115" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="115" name="param" description="" type="string" variable="$token">
            <type by_reference="false">string</type>
          </tag>
          <tag line="115" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="126">
          <name>$token</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="158" package="Default">
        <name>getWordIdSubquery</name>
        <type>function</type>
        <docblock line="152">
          <description><![CDATA[Get subquery to select relevant word IDs]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="152" name="return" description="" type="\ezcQuerySelect">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
        </docblock>
        <argument line="158">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="158">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="193" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="185">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="185" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="185" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="185" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="185" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="193">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="193">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="193">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/RemoteId.php" hash="963954e0b2a8c5651a8de993300b9b30">
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/RemoteId.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="19" package="Default">
      <name>RemoteId</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\RemoteId</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="16">
        <description><![CDATA[Remote id criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="27" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="40" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="32" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="40">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="40">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/DateMetadata.php" hash="e36b47a09e7000994bd7629fa7fff274">
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/DateMetadata.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="19" package="Default">
      <name>DateMetadata</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\DateMetadata</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="16">
        <description><![CDATA[Date metadata criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="27" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="40" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="32" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="40">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="40">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/LogicalNot.php" hash="d08f2f52f3a97f026be2007fe818421e">
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/LogicalNot.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="19" package="Default">
      <name>LogicalNot</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\LogicalNot</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="16">
        <description><![CDATA[Logical not criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="27" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="40" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="32" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="40">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="40">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/ParentLocationId.php" hash="883d65c4aae5e374ee9ee97bce9dac42">
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/ParentLocationId.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="19" package="Default">
      <name>ParentLocationId</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\ParentLocationId</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="16">
        <description><![CDATA[Parent location id criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="27" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="40" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="32" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="40">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="40">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/ContentId.php" hash="8cd98a977d0f04423c45c43a2c567667">
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/ContentId.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="19" package="Default">
      <name>ContentId</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\ContentId</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="16">
        <description><![CDATA[Content ID criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="27" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="40" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="32" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="40">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="40">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/LocationId.php" hash="df2b2b2914ebdb23e445f055ce10a592">
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/LocationId.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="19" package="Default">
      <name>LocationId</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\LocationId</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="16">
        <description><![CDATA[Location id criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="27" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="40" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="32" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="40">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="40">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/Subtree.php" hash="781377b8994601eee98f3764dd33b232">
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/Subtree.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="19" package="Default">
      <name>Subtree</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\Subtree</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="16">
        <description><![CDATA[Subtree criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="27" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="40" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="32" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="40">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="40">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/ContentTypeId.php" hash="60e9e38cfaa0af00f91b299762c4f7f4">
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/ContentTypeId.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="19" package="Default">
      <name>ContentTypeId</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\ContentTypeId</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="16">
        <description><![CDATA[Content type criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="27" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="40" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="32" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="40">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="40">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/LogicalOr.php" hash="65a4b7d88d0b4ea49d1f4aefd513e6dc">
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/LogicalOr.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="19" package="Default">
      <name>LogicalOr</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\LogicalOr</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="16">
        <description><![CDATA[Logical or criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="27" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="40" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="32" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="40">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="40">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/SectionId.php" hash="6ac007d9883a6ab3d27d2f77a885c851">
    <parse_markers>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/SectionId.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="19" package="Default">
      <name>SectionId</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\SectionId</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="16">
        <description><![CDATA[Section criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="27" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="40" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="32" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="40">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="40">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/Field.php" hash="1fdc96444144d551b156b8e1a5d01a03">
    <parse_markers>
      <error line="40" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldConverterRegistry in __construct()</error>
      <error line="64" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $target in getFieldInformation()</error>
      <error line="118" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/Field.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="FieldIdentifierStruct">ezp\Persistence\Content\Query\Criterion\FieldIdentifierStruct</namespace-alias>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="Registry">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</namespace-alias>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="24" package="Default">
      <name>Field</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\Field</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="21">
        <description><![CDATA[Field criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="31" package="Default">
        <name>$dbHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[DB handler to fetch additional field information]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="\ezp\Persistence\Storage\Legacy\EzcDatabase">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDatabase</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$fieldConverterRegistry</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Field converter registry]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="47" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Construct from handler handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
          <tag line="40" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry" variable="$fieldConverterRegistry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</type>
          </tag>
          <tag line="40" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
        <argument line="47">
          <name>$fieldConverterRegistry</name>
          <default><![CDATA[]]></default>
          <type>Registry</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="59" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="53" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="74" package="Default">
        <name>getFieldInformation</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Returns relevant field information for the specified field]]></description>
          <long-description><![CDATA[<p>The returned information is returned as an array of the attribute
identifier and the sort column, which should be used.</p>]]></long-description>
          <tag line="64" name="caching" description=""/>
          <tag line="64" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion\FieldIdentifierStruct" variable="$target">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion\FieldIdentifierStruct</type>
          </tag>
          <tag line="64" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$target</name>
          <default><![CDATA[]]></default>
          <type>FieldIdentifierStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="126" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="118">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="118" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="118" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="118" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="126">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="126">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="126">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/Status.php" hash="374a5f67f3cca0f615a9766ecbd078d5">
    <parse_markers>
      <error line="43" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in handle()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway/CriterionHandler/Status.php</error>
    </parse_markers>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="CriteriaConverter">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="19" package="Default">
      <name>Status</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler\Status</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</extends>
      <docblock line="16">
        <description><![CDATA[Status criterion handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" package="Default">
        <name>$statusMap</name>
        <default><![CDATA[array(
        Criterion\Status::STATUS_DRAFT => 0,
        Criterion\Status::STATUS_PUBLISHED => 1,
        Criterion\Status::STATUS_ARCHIVED => 2,
    )]]></default>
        <docblock line="21">
          <description><![CDATA[Mapping of status constants to status flags used in the database]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="38" package="Default">
        <name>accept</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="32" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler" line="51" package="Default">
        <name>handle</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Check if this criterion handler accepts to handle the given criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriteriaConverter</type>
          </tag>
          <tag line="43" name="param" description="" type="\ezcQuerySelect" variable="$query">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
          <tag line="43" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="43" name="return" description="" type="\ezcQueryExpression">
            <type by_reference="false">\ezcQueryExpression</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>CriteriaConverter</type>
        </argument>
        <argument line="51">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="51">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/TransformationPcreCompiler.php" hash="13dc5f8b8f7798f406a6669f28ee9de6">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/TransformationPcreCompiler.php</error>
    </parse_markers>
    <namespace-alias name="Storage">ezp\Persistence\Fields\Storage</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="18" package="Default">
      <name>TransformationPcreCompiler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\TransformationPcreCompiler</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Compiles the AST of parsed transformation rules into a set of PCRE replace
regular expressions.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25" package="Default">
        <name>$converter</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[Class for converting UTF-8 characters]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Utf8Converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Utf8Converter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="33" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Construct from UTF8Converter]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Utf8Converter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Utf8Converter</type>
          </tag>
          <tag line="27" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>Utf8Converter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="48" package="Default">
        <name>compile</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Compile AST into a set of regular expressions]]></description>
          <long-description><![CDATA[<p>The returned array contains a set of regular expressions and their
replacement callbacks. The regular expressions can then be applied to
strings to executed the transformations.</p>]]></long-description>
          <tag line="38" name="param" description="" type="array" variable="$ast">
            <type by_reference="false">array</type>
          </tag>
          <tag line="38" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$ast</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="69" package="Default">
        <name>compileRule</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Compiles a single rule]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="param" description="" type="array" variable="$rule">
            <type by_reference="false">array</type>
          </tag>
          <tag line="63" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$rule</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="96" package="Default">
        <name>compileMap</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Compile map rule]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="" type="array" variable="$rule">
            <type by_reference="false">array</type>
          </tag>
          <tag line="90" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="96">
          <name>$rule</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="110" package="Default">
        <name>compileReplace</name>
        <type>function</type>
        <docblock line="104">
          <description><![CDATA[Compile replace rule]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="param" description="" type="array" variable="$rule">
            <type by_reference="false">array</type>
          </tag>
          <tag line="104" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$rule</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="127" package="Default">
        <name>compileTranspose</name>
        <type>function</type>
        <docblock line="121">
          <description><![CDATA[Compile transpose rule]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="121" name="param" description="" type="array" variable="$rule">
            <type by_reference="false">array</type>
          </tag>
          <tag line="121" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$rule</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="144" package="Default">
        <name>compileTransposeModulo</name>
        <type>function</type>
        <docblock line="138">
          <description><![CDATA[Compile transpose modulo rule]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="138" name="param" description="" type="array" variable="$rule">
            <type by_reference="false">array</type>
          </tag>
          <tag line="138" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="144">
          <name>$rule</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="172" package="Default">
        <name>getModuloCharRange</name>
        <type>function</type>
        <docblock line="160">
          <description><![CDATA[Get string with all characters defined by parameters]]></description>
          <long-description><![CDATA[<p>Returns a string containing all UTF-8 characters starting with the
specified $start character up to the $end character with the step size
defined in $modulo.</p>]]></long-description>
          <tag line="160" name="param" description="" type="string" variable="$start">
            <type by_reference="false">string</type>
          </tag>
          <tag line="160" name="param" description="" type="string" variable="$end">
            <type by_reference="false">string</type>
          </tag>
          <tag line="160" name="param" description="" type="string" variable="$modulo">
            <type by_reference="false">string</type>
          </tag>
          <tag line="160" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="172">
          <name>$start</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="172">
          <name>$end</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="172">
          <name>$modulo</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="195" package="Default">
        <name>getTransposeClosure</name>
        <type>function</type>
        <docblock line="187">
          <description><![CDATA[Return a closure which modifies the provided character by the given
value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="187" name="param" description="" type="string" variable="$operator">
            <type by_reference="false">string</type>
          </tag>
          <tag line="187" name="param" description="" type="string" variable="$value">
            <type by_reference="false">string</type>
          </tag>
          <tag line="187" name="return" description="" type="callback">
            <type by_reference="false">callback</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$operator</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="195">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="214" package="Default">
        <name>compileTargetCharacter</name>
        <type>function</type>
        <docblock line="207">
          <description><![CDATA[Compile target into a closure, which can be used by
preg_replace_callback]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="207" name="param" description="" type="string" variable="$char">
            <type by_reference="false">string</type>
          </tag>
          <tag line="207" name="return" description="" type="callback">
            <type by_reference="false">callback</type>
          </tag>
        </docblock>
        <argument line="214">
          <name>$char</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="261" package="Default">
        <name>compileCharacter</name>
        <type>function</type>
        <docblock line="251">
          <description><![CDATA[Compile a single source character definition into a plain UTF-8 character]]></description>
          <long-description><![CDATA[<p>Handles the two formats from the possible character definitions:
 - U+xxxx : Unicode value in hexadecimal
 - xx: Ascii value in hexadecimal</p>]]></long-description>
          <tag line="251" name="param" description="" type="string" variable="$char">
            <type by_reference="false">string</type>
          </tag>
          <tag line="251" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="261">
          <name>$char</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Handler.php" hash="06ca54c6d09b2717d384ca4baf28de36">
    <parse_markers>
      <error line="64" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $gateway in __construct()</error>
      <error line="64" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentMapper in __construct()</error>
      <error line="64" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldHandler in __construct()</error>
      <error line="78" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criterion in find()</error>
      <error line="78" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $sort in find()</error>
      <error line="139" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in indexContent()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Handler.php</error>
    </parse_markers>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="BaseSearchHandler">ezp\Persistence\Content\Search\Handler</namespace-alias>
    <namespace-alias name="Result">ezp\Persistence\Content\Search\Result</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="Exception">ezp\Persistence\Storage\Legacy\Exception</namespace-alias>
    <namespace-alias name="ContentMapper">ezp\Persistence\Storage\Legacy\Content\Mapper</namespace-alias>
    <namespace-alias name="FieldHandler">ezp\Persistence\Storage\Legacy\Content\FieldHandler</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="41" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Handler</full_name>
      <extends>\ezp\Persistence\Content\Search\Handler</extends>
      <docblock line="20">
        <description><![CDATA[The Content Search handler retrieves sets of of Content objects, based on a
set of criteria.]]></description>
        <long-description><![CDATA[<p>The basic idea of this class is to do the following:</p>

<p>1) The find methods retrieve a recursive set of filters, which define which
content objects to retrieve from the database. Those may be combined using
boolean opeartors.</p>

<p>2) This recursive criterion definition is visited into a query, which limits
the content retrieved from the database. We might not be able to create
sensible queries from all criterion definitions.</p>

<p>3) The query might be possible to optimize (remove empty statements),
reduce singular and and or constructs…</p>

<p>4) Additionally we might need a post-query filtering step, which filters
content objects based on criteria, which could not be convertedd in to
database statements.</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="48" package="Default">
        <name>$gateway</name>
        <default><![CDATA[]]></default>
        <docblock line="43">
          <description><![CDATA[Content locator gateway.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="55" package="Default">
        <name>$contentMapper</name>
        <default><![CDATA[]]></default>
        <docblock line="50">
          <description><![CDATA[Content mapper]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Mapper</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="62" package="Default">
        <name>$fieldHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="57">
          <description><![CDATA[FieldHandler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="var" description="" type="\ezp\Persistence\Storage\Legacy\FieldHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\FieldHandler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="71" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Creates a new content handler.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="64" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Gateway" variable="$gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Gateway</type>
          </tag>
          <tag line="64" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Mapper" variable="$contentMapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Mapper</type>
          </tag>
          <tag line="64" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldHandler" variable="$fieldHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldHandler</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$gateway</name>
          <default><![CDATA[]]></default>
          <type>Gateway</type>
        </argument>
        <argument line="71">
          <name>$contentMapper</name>
          <default><![CDATA[]]></default>
          <type>ContentMapper</type>
        </argument>
        <argument line="71">
          <name>$fieldHandler</name>
          <default><![CDATA[]]></default>
          <type>FieldHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="92" package="Default">
        <name>find</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Returns a list of object satisfying the $criterion.]]></description>
          <long-description><![CDATA[<p>Optionally a translation filter may be specified. If specified only the
translations with the listed language codes will be retrieved. If not,
all translations will be retrieved.</p>]]></long-description>
          <tag line="78" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="78" name="param" description="" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="78" name="param" description="" type="int|null" variable="$limit">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="78" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause[]" variable="$sort">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause[]</type>
          </tag>
          <tag line="78" name="param" description="" type="\string[]" variable="$translations">
            <type by_reference="false">\string[]</type>
          </tag>
          <tag line="78" name="return" description="" type="\ezp\Persistence\Content\Search\Result">
            <type by_reference="false">\ezp\Persistence\Content\Search\Result</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="92">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="92">
          <name>$limit</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="92">
          <name>$sort</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
        <argument line="92">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="125" package="Default">
        <name>findSingle</name>
        <type>function</type>
        <docblock line="110">
          <description><![CDATA[Returns a single Content object found.]]></description>
          <long-description><![CDATA[<p>Performs a {@link find()} query to find a single object. You need to
ensure, that your $criterion ensure that only a single object can be
retrieved.</p>

<p>Optionally a translation filter may be specified. If specified only the
translations with the listed language codes will be retrieved. If not,
all translations will be retrieved.</p>]]></long-description>
          <tag line="110" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="110" name="param" description="" type="\string[]" variable="$translations">
            <type by_reference="false">\string[]</type>
          </tag>
          <tag line="110" name="return" description="" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
        </docblock>
        <argument line="125">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="125">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="145" package="Default">
        <name>indexContent</name>
        <type>function</type>
        <docblock line="139">
          <description><![CDATA[Indexes a content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="139" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="139" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="145">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/TransformationProcessor.php" hash="98f86a0df2ec846410127f83821dc84c">
    <parse_markers>
      <error line="47" code="50015">Argument $parser is missing from the Docblock of __construct()</error>
      <error line="47" code="50015">Argument $compiler is missing from the Docblock of __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/TransformationProcessor.php</error>
    </parse_markers>
    <namespace-alias name="Storage">ezp\Persistence\Fields\Storage</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="17" package="Default">
      <name>TransformationProcessor</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\TransformationProcessor</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Class for processing a set of transformations on a string]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" package="Default">
        <name>$parser</name>
        <default><![CDATA[null]]></default>
        <docblock line="19">
          <description><![CDATA[Transformation parser]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\TransformationParser">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\TransformationParser</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="31" package="Default">
        <name>$compiler</name>
        <default><![CDATA[null]]></default>
        <docblock line="26">
          <description><![CDATA[Transformation compiler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\TransformationPcreCompiler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\TransformationPcreCompiler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$rules</name>
        <default><![CDATA[array()]]></default>
        <docblock line="33">
          <description><![CDATA[Parsed rules]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$compiledRules</name>
        <default><![CDATA[null]]></default>
        <docblock line="40">
          <description><![CDATA[Compiled rules, which can directly be applied to the input strings]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="52" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Construct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$parser</name>
          <default><![CDATA[]]></default>
          <type>TransformationParser</type>
        </argument>
        <argument line="52">
          <name>$compiler</name>
          <default><![CDATA[]]></default>
          <type>TransformationPcreCompiler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="64" package="Default">
        <name>loadRules</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Load rules from the given file]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="param" description="" type="string" variable="$file">
            <type by_reference="false">string</type>
          </tag>
          <tag line="58" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$file</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="83" package="Default">
        <name>transform</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Transform the given string]]></description>
          <long-description><![CDATA[<p>Transform the given string using the given rules. If no rules are
specified, all available rules will be used for the transformation.</p>]]></long-description>
          <tag line="73" name="param" description="" type="string" variable="$string">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="param" description="" type="array" variable="$ruleNames">
            <type by_reference="false">array</type>
          </tag>
          <tag line="73" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$string</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="83">
          <name>$ruleNames</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Search/Gateway.php" hash="128d37c7ee0752411be6101dad919d06">
    <parse_markers>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $sort in find()</error>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $translations in find()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Search/Gateway.php</error>
    </parse_markers>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="19" package="Default">
      <name>Gateway</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Search\Gateway</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[The Content Search Gateway provides the implementation for one database to
retrieve the desired content objects.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Search" line="31" package="Default">
        <name>find</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Returns a list of object satisfying the $criterion.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="21" name="param" description="" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="21" name="param" description="" type="int|null" variable="$limit">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause[]" variable="$sort">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause[]</type>
          </tag>
          <tag line="21" name="param" description="" type="\string[]" variable="$translations">
            <type by_reference="false">\string[]</type>
          </tag>
          <tag line="21" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\mixed[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\mixed[][]</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="31">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$limit</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$sort</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
        <argument line="31">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/StorageFieldValue.php" hash="4a0069f9a84309ffe651612f4134ed89">
    <parse_markers>
      <error line="15" code="50000">No DocBlock was found for StorageFieldValue</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/StorageFieldValue.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content" line="15">
      <name>StorageFieldValue</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <property final="false" static="false" visibility="public" line="22" package="Default">
        <name>$dataFloat</name>
        <default><![CDATA[]]></default>
        <docblock line="17">
          <description><![CDATA[Float data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" package="Default">
        <name>$dataInt</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[Integer data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$dataText</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Text data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="43" package="Default">
        <name>$sortKeyInt</name>
        <default><![CDATA[0]]></default>
        <docblock line="38">
          <description><![CDATA[Integer sort key.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$sortKeyString</name>
        <default><![CDATA['']]></default>
        <docblock line="45">
          <description><![CDATA[Text sort key.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/StorageRegistry.php" hash="8ab0a665c03c46b1df0c102afc111af0">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/StorageRegistry.php</error>
    </parse_markers>
    <namespace-alias name="Storage">ezp\Persistence\Fields\Storage</namespace-alias>
    <namespace-alias name="Exception">ezp\Persistence\Storage\Legacy\Exception</namespace-alias>
    <namespace-alias name="NullStorage">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\NullStorage</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content" line="19" package="Default">
      <name>StorageRegistry</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\StorageRegistry</full_name>
      <extends/>
      <docblock line="16">
        <description><![CDATA[Registry for external storages]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" package="Default">
        <name>$storageMap</name>
        <default><![CDATA[array()]]></default>
        <docblock line="21">
          <description><![CDATA[Map of storages]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="35" package="Default">
        <name>register</name>
        <type>function</type>
        <docblock line="28">
          <description><![CDATA[Register a storage]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="param" description="" type="string" variable="$typeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="28" name="param" description="" type="\ezp\Persistence\Fields\Storage" variable="$storage">
            <type by_reference="false">\ezp\Persistence\Fields\Storage</type>
          </tag>
          <tag line="28" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$typeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="35">
          <name>$storage</name>
          <default><![CDATA[]]></default>
          <type>Storage</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="46" package="Default">
        <name>getStorage</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Returns the storage for $typeName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="param" description="" type="string" variable="$typeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="40" name="return" description="" type="\ezp\Persistence\Fields\Storage">
            <type by_reference="false">\ezp\Persistence\Fields\Storage</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$typeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Section/Gateway/EzcDatabase.php" hash="0243f17301cc4f32e2490246cc8afed5">
    <parse_markers>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dbHandler in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Section/Gateway/EzcDatabase.php</error>
    </parse_markers>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Section\Gateway</namespace-alias>
    <namespace-alias name="Section">ezp\Persistence\Content\Section</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Section\Gateway" line="18" package="Default">
      <name>EzcDatabase</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Section\Gateway\EzcDatabase</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Section\Gateway</extends>
      <docblock line="15">
        <description><![CDATA[Section Handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25" package="Default">
        <name>$dbHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[Database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section\Gateway" line="32" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Creates a new EzcDatabase Section Gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section\Gateway" line="44" package="Default">
        <name>insertSection</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Inserts a new section with $name and $identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="return" description="The ID of the new section" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="44">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section\Gateway" line="76" package="Default">
        <name>updateSection</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Updates section with $id to have $name and $identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="68" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="68" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="76">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="76">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section\Gateway" line="104" package="Default">
        <name>loadSectionData</name>
        <type>function</type>
        <docblock line="98">
          <description><![CDATA[Loads data for section with $id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="98" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Section\Gateway\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Section\Gateway\string[][]</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section\Gateway" line="131" package="Default">
        <name>loadAllSectionData</name>
        <type>function</type>
        <docblock line="126">
          <description><![CDATA[Loads data for all sections]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="126" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Section\Gateway\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Section\Gateway\string[][]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section\Gateway" line="154" package="Default">
        <name>loadSectionDataByIdentifier</name>
        <type>function</type>
        <docblock line="148">
          <description><![CDATA[Loads data for section with $identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="148" name="param" description="" type="int" variable="$identifier">
            <type by_reference="false">int</type>
          </tag>
          <tag line="148" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Section\Gateway\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Section\Gateway\string[][]</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section\Gateway" line="182" package="Default">
        <name>countContentObjectsInSection</name>
        <type>function</type>
        <docblock line="176">
          <description><![CDATA[Counts the number of content objects assigned to section with $id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="176" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="176" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="182">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section\Gateway" line="213" package="Default">
        <name>deleteSection</name>
        <type>function</type>
        <docblock line="207">
          <description><![CDATA[Deletes the Section with $id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="207" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="207" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="213">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section\Gateway" line="236" package="Default">
        <name>assignSectionToContent</name>
        <type>function</type>
        <docblock line="229">
          <description><![CDATA[Inserts the assignment of $contentId to $sectionId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="229" name="param" description="" type="int" variable="$sectionId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="229" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="229" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="236">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="236">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Section/Handler.php" hash="80cf22160eb4c90d77c9e5bb58304565">
    <parse_markers>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $sectionGateway in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Section/Handler.php</error>
    </parse_markers>
    <namespace-alias name="BaseSectionHandler">ezp\Persistence\Content\Section\Handler</namespace-alias>
    <namespace-alias name="Section">ezp\Persistence\Content\Section</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="18" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Section\Handler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Content\Section\Handler</extends>
      <docblock line="15">
        <description><![CDATA[Section Handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25" package="Default">
        <name>$sectionGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[Section Gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Section\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Section\Gateway</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="32" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Creates a new Section Handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Section\Gateway" variable="$sectionGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Section\Gateway</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$sectionGateway</name>
          <default><![CDATA[]]></default>
          <type>Gateway</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="44" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Creat a new section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="37" name="return" description="" type="\ezp\Persistence\Content\Section">
            <type by_reference="false">\ezp\Persistence\Content\Section</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="44">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="64" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Update name and identifier of a section]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="56" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="56" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="56" name="return" description="" type="\ezp\Persistence\Content\Section">
            <type by_reference="false">\ezp\Persistence\Content\Section</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="64">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="64">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="83" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Get section data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="76" name="return" description="" type="\ezp\Persistence\Content\Section">
            <type by_reference="false">\ezp\Persistence\Content\Section</type>
          </tag>
          <tag line="76" name="throws" description="If section is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="99" package="Default">
        <name>loadAll</name>
        <type>function</type>
        <docblock line="94">
          <description><![CDATA[Get all section data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="return" description="" type="\ezp\Persistence\Content\Section[]">
            <type by_reference="false">\ezp\Persistence\Content\Section[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="112" package="Default">
        <name>loadByIdentifier</name>
        <type>function</type>
        <docblock line="105">
          <description><![CDATA[Get section data by identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="105" name="return" description="" type="\ezp\Persistence\Content\Section">
            <type by_reference="false">\ezp\Persistence\Content\Section</type>
          </tag>
          <tag line="105" name="throws" description="If section is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="129" package="Default">
        <name>createSectionFromArray</name>
        <type>function</type>
        <docblock line="123">
          <description><![CDATA[Creates a Section from the given $data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="123" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="123" name="return" description="" type="\ezp\Persistence\Content\Section">
            <type by_reference="false">\ezp\Persistence\Content\Section</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="149" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="140">
          <description><![CDATA[Delete a section]]></description>
          <long-description><![CDATA[<p>Might throw an exception if the section is still associated with some
content objects. Make sure that no content objects are associated with
the section any more <em>before</em> calling this method.</p>]]></long-description>
          <tag line="140" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="149">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="168" package="Default">
        <name>assign</name>
        <type>function</type>
        <docblock line="162">
          <description><![CDATA[Assign section to single content object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="162" name="param" description="" type="mixed" variable="$sectionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="162" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="168">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="179" package="Default">
        <name>assignmentsCount</name>
        <type>function</type>
        <docblock line="173">
          <description><![CDATA[Number of content assignments a Section has]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="param" description="" type="mixed" variable="$sectionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="173" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="179">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Section/Gateway.php" hash="aef5b1eeffe27608888af15a173c8075">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Section/Gateway.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="15" package="Default">
      <name>Gateway</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Section\Gateway</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Section Handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="24" package="Default">
        <name>insertSection</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Inserts a new section with $name and $identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="17" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="17" name="return" description="The ID of the new section" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="24">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="34" package="Default">
        <name>updateSection</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Updates section with $id to have $name and $identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="26" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="26" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="34">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="34">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="42" package="Default">
        <name>loadSectionData</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Loads data for section with $id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="36" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Section\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Section\string[][]</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="49" package="Default">
        <name>loadAllSectionData</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Loads data for all sections]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Section\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Section\string[][]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="57" package="Default">
        <name>loadSectionDataByIdentifier</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Loads data for section with $identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="51" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Section\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Section\string[][]</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="65" package="Default">
        <name>countContentObjectsInSection</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Counts the number of content objects assigned to section with $id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="59" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="73" package="Default">
        <name>deleteSection</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Deletes the Section with $id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="67" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Section" line="82" package="Default">
        <name>assignSectionToContent</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Inserts the assignment of $contentId to $sectionId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="" type="int" variable="$sectionId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="75" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="75" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="82">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/StorageFieldDefinition.php" hash="2413027d56de3e73103bdfdb34fbdc71">
    <parse_markers>
      <error line="15" code="50000">No DocBlock was found for StorageFieldDefinition</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/StorageFieldDefinition.php</error>
    </parse_markers>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content" line="15">
      <name>StorageFieldDefinition</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</full_name>
      <extends>\ezp\Persistence\ValueObject</extends>
      <property final="false" static="false" visibility="public" line="22" package="Default">
        <name>$dataFloat1</name>
        <default><![CDATA[]]></default>
        <docblock line="17">
          <description><![CDATA[Data float 1]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="29" package="Default">
        <name>$dataFloat2</name>
        <default><![CDATA[]]></default>
        <docblock line="24">
          <description><![CDATA[Data float 2]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="36" package="Default">
        <name>$dataFloat3</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[Data float 3]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="43" package="Default">
        <name>$dataFloat4</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[Data float 4]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="50" package="Default">
        <name>$dataInt1</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[Data int 1]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="57" package="Default">
        <name>$dataInt2</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[Data int 2]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="64" package="Default">
        <name>$dataInt3</name>
        <default><![CDATA[]]></default>
        <docblock line="59">
          <description><![CDATA[Data int 3]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="71" package="Default">
        <name>$dataInt4</name>
        <default><![CDATA[]]></default>
        <docblock line="66">
          <description><![CDATA[Data int 4]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="var" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="78" package="Default">
        <name>$dataText1</name>
        <default><![CDATA[]]></default>
        <docblock line="73">
          <description><![CDATA[Data text 1]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="85" package="Default">
        <name>$dataText2</name>
        <default><![CDATA[]]></default>
        <docblock line="80">
          <description><![CDATA[Data text 2]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="92" package="Default">
        <name>$dataText3</name>
        <default><![CDATA[]]></default>
        <docblock line="87">
          <description><![CDATA[Data text 3]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="87" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="99" package="Default">
        <name>$dataText4</name>
        <default><![CDATA[]]></default>
        <docblock line="94">
          <description><![CDATA[Data text 4]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="106" package="Default">
        <name>$dataText5</name>
        <default><![CDATA[]]></default>
        <docblock line="101">
          <description><![CDATA[Data text 5]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="101" name="var" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="113" package="Default">
        <name>$serializedDataText</name>
        <default><![CDATA[]]></default>
        <docblock line="108">
          <description><![CDATA[Data text I18n]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="var" description="" type="\string[]">
            <type by_reference="false">\string[]</type>
          </tag>
        </docblock>
      </property>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/StorageHandler.php" hash="c14cad246f1cfd0101120febda24bc4a">
    <parse_markers>
      <error line="72" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $ids in deleteFieldData()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/StorageHandler.php</error>
    </parse_markers>
    <namespace-alias name="Field">ezp\Persistence\Content\Field</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content" line="17" package="Default">
      <name>StorageHandler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\StorageHandler</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Handler for external storages]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" package="Default">
        <name>$storageRegistry</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Storage registry]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageRegistry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageRegistry</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="31" package="Default">
        <name>$context</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[Array with database context]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="39" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Creates a new storage handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageRegistry" variable="$storageRegistry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageRegistry</type>
          </tag>
          <tag line="33" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$storageRegistry</name>
          <default><![CDATA[]]></default>
          <type>StorageRegistry</type>
        </argument>
        <argument line="39">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="51" package="Default">
        <name>storeFieldData</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Stores data from $field in its corresponding external storage]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="45" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="63" package="Default">
        <name>getFieldData</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Fetches external data for $field from its corresponding external storage]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="57" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="79" package="Default">
        <name>deleteFieldData</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Deletes data for field $ids from external storage of $fieldType]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="param" description="" type="string" variable="$fieldType">
            <type by_reference="false">string</type>
          </tag>
          <tag line="72" name="param" description="" type="\mixed[]" variable="$ids">
            <type by_reference="false">\mixed[]</type>
          </tag>
          <tag line="72" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$fieldType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="79">
          <name>$ids</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Handler.php" hash="d070629713181f4ba6876913ea6cdcb0">
    <parse_markers>
      <error line="55" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentGateway in __construct()</error>
      <error line="55" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $locationGateway in __construct()</error>
      <error line="55" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $mapper in __construct()</error>
      <error line="55" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldHandler in __construct()</error>
      <error line="77" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in create()</error>
      <error line="128" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $updateStruct in publish()</error>
      <error line="291" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in update()</error>
      <error line="388" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $relation in addRelation()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Handler.php</error>
    </parse_markers>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Gateway</namespace-alias>
    <namespace-alias name="Mapper">ezp\Persistence\Storage\Legacy\Content\Mapper</namespace-alias>
    <namespace-alias name="LocationGateway">ezp\Persistence\Storage\Legacy\Content\Location\Gateway</namespace-alias>
    <namespace-alias name="BaseContentHandler">ezp\Persistence\Content\Handler</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\UpdateStruct</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="RestrictedVersion">ezp\Persistence\Content\RestrictedVersion</namespace-alias>
    <namespace-alias name="RelationCreateStruct">ezp\Persistence\Content\Relation\CreateStruct</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content" line="25" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Handler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Content\Handler</extends>
      <docblock line="22">
        <description><![CDATA[The Content Handler stores Content and ContentType objects.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="32" package="Default">
        <name>$contentGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[Content gateway.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" package="Default">
        <name>$locationGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="34">
          <description><![CDATA[Location gateway.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="46" package="Default">
        <name>$mapper</name>
        <default><![CDATA[]]></default>
        <docblock line="41">
          <description><![CDATA[Mapper.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Mapper</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="53" package="Default">
        <name>$fieldHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="48">
          <description><![CDATA[FieldHandler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="var" description="" type="\ezp\Persistence\Storage\Legacy\FieldHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\FieldHandler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="64" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Creates a new content handler.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway" variable="$contentGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway</type>
          </tag>
          <tag line="55" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Gateway" variable="$locationGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Gateway</type>
          </tag>
          <tag line="55" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Mapper" variable="$mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Mapper</type>
          </tag>
          <tag line="55" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldHandler" variable="$fieldHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldHandler</type>
          </tag>
          <tag line="55" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway" variable="$contentGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$contentGateway</name>
          <default><![CDATA[]]></default>
          <type>Gateway</type>
        </argument>
        <argument line="66">
          <name>$locationGateway</name>
          <default><![CDATA[]]></default>
          <type>LocationGateway</type>
        </argument>
        <argument line="67">
          <name>$mapper</name>
          <default><![CDATA[]]></default>
          <type>Mapper</type>
        </argument>
        <argument line="68">
          <name>$fieldHandler</name>
          <default><![CDATA[]]></default>
          <type>FieldHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="88" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Creates a new Content entity in the storage engine.]]></description>
          <long-description><![CDATA[<p>The values contained inside the $content will form the basis of stored
entity.</p>

<p>Will contain always a complete list of fields.</p>]]></long-description>
          <tag line="77" name="param" description="Content creation struct." type="\ezp\Persistence\Content\CreateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\CreateStruct</type>
          </tag>
          <tag line="77" name="return" description="Content value object" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="143" package="Default">
        <name>publish</name>
        <type>function</type>
        <docblock line="128">
          <description><![CDATA[Performs the publishing operations required to set the version identified by $updateStruct->versionNo and
$updateStruct->id as the published one.]]></description>
          <long-description><![CDATA[<p>The UpdateStruct will also contain an array of Content name indexed by Locale.</p>

<p>The publish procedure will:
- Create location nodes based on the node assignments
- Create the entry in the ezcontentobject_name table
- Updates the content object using the provided update struct
- Updates the node assignments</p>]]></long-description>
          <tag line="128" name="param" description="An UpdateStruct with id, versionNo and name array" type="\ezp\Persistence\Content\UpdateStruct" variable="$updateStruct">
            <type by_reference="false">\ezp\Persistence\Content\UpdateStruct</type>
          </tag>
          <tag line="128" name="return" description="The published Content" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$updateStruct</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="178" package="Default">
        <name>createDraftFromVersion</name>
        <type>function</type>
        <docblock line="164">
          <description><![CDATA[Creates a new draft version from $contentId in $version.]]></description>
          <long-description><![CDATA[<p>Copies all fields from $contentId in $srcVersion and creates a new
version of the referred Content from it.</p>

<p>Note: When creating a new draft in the old admin interface there will
also be an entry in the <code>eznode_assignment</code> created for the draft. This
is ignored in this implementation.</p>]]></long-description>
          <tag line="164" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="164" name="param" description="" type="int|bool" variable="$srcVersion">
            <type by_reference="false">int</type>
            <type by_reference="false">bool</type>
          </tag>
          <tag line="164" name="return" description="" type="\ezp\Persistence\Content\Version">
            <type by_reference="false">\ezp\Persistence\Content\Version</type>
          </tag>
        </docblock>
        <argument line="178">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="178">
          <name>$srcVersion</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="226" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="210">
          <description><![CDATA[Returns the raw data of a content object identified by $id, in a struct.]]></description>
          <long-description><![CDATA[<p>A version to load must be specified. If you want to load the current
version of a content object use SearchHandler::findSingle() with the
ContentId criterion.</p>

<p>Optionally a translation filter may be specified. If specified only the
translations with the listed language codes will be retrieved. If not,
all translations will be retrieved.</p>]]></long-description>
          <tag line="210" name="param" description="" type="int|string" variable="$id">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="210" name="param" description="" type="int|string" variable="$version">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="210" name="param" description="" type="\string[]" variable="$translations">
            <type by_reference="false">\string[]</type>
          </tag>
          <tag line="210" name="return" description="Content value object" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
        </docblock>
        <argument line="226">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="226">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="226">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="255" package="Default">
        <name>setStatus</name>
        <type>function</type>
        <docblock line="243">
          <description><![CDATA[Sets the state of object identified by $contentId and $version to $state.]]></description>
          <long-description><![CDATA[<p>The $status can be one of STATUS_DRAFT, STATUS_PUBLISHED, STATUS_ARCHIVED</p>]]></long-description>
          <tag line="243" name="todo" description="Is this supposed to be constants from Content or Version? They differ.."/>
          <tag line="243" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="243" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="243" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="243" name="see" description="\ezp\Content" refers="\ezp\Content"/>
          <tag line="243" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="255">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="255">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="255">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="271" package="Default">
        <name>setObjectState</name>
        <type>function</type>
        <docblock line="260">
          <description><![CDATA[Sets the object-state of object identified by $contentId and $stateGroup to $state.]]></description>
          <long-description><![CDATA[<p>The $state is the id of the state within one group.</p>]]></long-description>
          <tag line="260" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="260" name="param" description="" type="mixed" variable="$stateGroup">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="260" name="param" description="" type="mixed" variable="$state">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="260" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="260" name="see" description="\ezp\Content" refers="\ezp\Content"/>
        </docblock>
        <argument line="271">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="271">
          <name>$stateGroup</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="271">
          <name>$state</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="286" package="Default">
        <name>getObjectState</name>
        <type>function</type>
        <docblock line="276">
          <description><![CDATA[Gets the object-state of object identified by $contentId and $stateGroup to $state.]]></description>
          <long-description><![CDATA[<p>The $state is the id of the state within one group.</p>]]></long-description>
          <tag line="276" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="276" name="param" description="" type="mixed" variable="$stateGroup">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="276" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="276" name="see" description="\ezp\Content" refers="\ezp\Content"/>
        </docblock>
        <argument line="286">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="286">
          <name>$stateGroup</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="297" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="291">
          <description><![CDATA[Updates a content object entity with data and identifier $content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="291" name="param" description="" type="\ezp\Persistence\Content\UpdateStruct" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content\UpdateStruct</type>
          </tag>
          <tag line="291" name="return" description="" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
        </docblock>
        <argument line="297">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="323" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="314">
          <description><![CDATA[Deletes all versions and fields, all locations (subtree), and all relations.]]></description>
          <long-description><![CDATA[<p>Removes the relations, but not the related objects. Alle subtrees of the
assigned nodes of this content objects are removed (recursivley).</p>]]></long-description>
          <tag line="314" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="314" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="323">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="344" package="Default">
        <name>listVersions</name>
        <type>function</type>
        <docblock line="338">
          <description><![CDATA[Return the versions for $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="338" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="338" name="return" description="" type="\ezp\Persistence\Content\RestrictedVersion[]">
            <type by_reference="false">\ezp\Persistence\Content\RestrictedVersion[]</type>
          </tag>
        </docblock>
        <argument line="344">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="361" package="Default">
        <name>copy</name>
        <type>function</type>
        <docblock line="350">
          <description><![CDATA[Copy Content with Fields and Versions from $contentId in $version.]]></description>
          <long-description><![CDATA[<p>Copies all fields from $contentId in $version (or all versions if false)
to a new object which is returned. Version numbers are maintained.</p>]]></long-description>
          <tag line="350" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="350" name="param" description="Copy all versions if left false" type="int|false" variable="$version">
            <type by_reference="false">int</type>
            <type by_reference="false">false</type>
          </tag>
          <tag line="350" name="return" description="" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="350" name="throws" description="If content or version is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="361">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="361">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="372" package="Default">
        <name>createCopy</name>
        <type>function</type>
        <docblock line="366">
          <description><![CDATA[Creates a copy of the latest published version of $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="366" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="366" name="return" description="" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
        </docblock>
        <argument line="372">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="397" package="Default">
        <name>addRelation</name>
        <type>function</type>
        <docblock line="388">
          <description><![CDATA[Creates a relation between $sourceContentId in $sourceContentVersionNo
and $destinationContentId with a specific $type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="388" name="todo" description="Should the existence verifications happen here or is this supposed to be handled at a higher level?"/>
          <tag line="388" name="param" description="" type="\ezp\Persistence\Content\Relation\CreateStruct" variable="$relation">
            <type by_reference="false">\ezp\Persistence\Content\Relation\CreateStruct</type>
          </tag>
          <tag line="388" name="return" description="" type="\ezp\Persistence\Content\Relation">
            <type by_reference="false">\ezp\Persistence\Content\Relation</type>
          </tag>
        </docblock>
        <argument line="397">
          <name>$relation</name>
          <default><![CDATA[]]></default>
          <type>RelationCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="409" package="Default">
        <name>removeRelation</name>
        <type>function</type>
        <docblock line="402">
          <description><![CDATA[Removes a relation by relation Id.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="402" name="todo" description="Should the existence verifications happen here or is this supposed to be handled at a higher level?"/>
          <tag line="402" name="param" description="" type="mixed" variable="$relationId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="409">
          <name>$relationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="422" package="Default">
        <name>loadRelations</name>
        <type>function</type>
        <docblock line="414">
          <description><![CDATA[Loads relations from $sourceContentId. Optionally, loads only those with $type and $sourceContentVersionNo.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="414" name="param" description="Source Content ID" type="mixed" variable="$sourceContentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="414" name="param" description="Source Content Version, null if not specified" type="mixed|null" variable="$sourceContentVersionNo">
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="414" name="param" description="{@see \ezp\Content\Relation::COMMON, \ezp\Content\Relation::EMBED, \ezp\Content\Relation::LINK, \ezp\Content\Relation::ATTRIBUTE}" type="int|null" variable="$type">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="414" name="return" description="" type="\ezp\Persistence\Content\Relation[]">
            <type by_reference="false">\ezp\Persistence\Content\Relation[]</type>
          </tag>
        </docblock>
        <argument line="422">
          <name>$sourceContentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="422">
          <name>$sourceContentVersionNo</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="422">
          <name>$type</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="436" package="Default">
        <name>loadReverseRelations</name>
        <type>function</type>
        <docblock line="427">
          <description><![CDATA[Loads relations from $contentId. Optionally, loads only those with $type.]]></description>
          <long-description><![CDATA[<p>Only loads relations against published versions.</p>]]></long-description>
          <tag line="427" name="param" description="Destination Content ID" type="mixed" variable="$destinationContentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="427" name="param" description="{@see \ezp\Content\Relation::COMMON, \ezp\Content\Relation::EMBED, \ezp\Content\Relation::LINK, \ezp\Content\Relation::ATTRIBUTE}" type="int|null" variable="$type">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="427" name="return" description="" type="\ezp\Persistence\Content\Relation[]">
            <type by_reference="false">\ezp\Persistence\Content\Relation[]</type>
          </tag>
        </docblock>
        <argument line="436">
          <name>$destinationContentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="436">
          <name>$type</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Mapper.php" hash="29a83c90b57cffc4faffd54cf50115bf">
    <parse_markers>
      <error line="40" code="50014">Name of argument $locationMapper does not match with the DocBlock's name $converterRegistry in __construct()</error>
      <error line="40" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $locationMapper in __construct()</error>
      <error line="40" code="50015">Argument $converterRegistry is missing from the Docblock of __construct()</error>
      <error line="51" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in createContentFromCreateStruct()</error>
      <error line="75" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in createLocationCreateStruct()</error>
      <error line="321" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $rows in extractVersionListFromRows()</error>
      <error line="361" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in createCreateStructFromContent()</error>
      <critical line="21" code="50005">No short description for class Mapper</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Mapper.php</error>
    </parse_markers>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\CreateStruct</namespace-alias>
    <namespace-alias name="Field">ezp\Persistence\Content\Field</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="Version">ezp\Persistence\Content\Version</namespace-alias>
    <namespace-alias name="RestrictedVersion">ezp\Persistence\Content\RestrictedVersion</namespace-alias>
    <namespace-alias name="LocationMapper">ezp\Persistence\Storage\Legacy\Content\Location\Mapper</namespace-alias>
    <namespace-alias name="Registry">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content" line="24" package="Default">
      <name>Mapper</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Mapper</full_name>
      <extends/>
      <docblock line="21">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="31" package="Default">
        <name>$converterRegistry</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[FieldValue converter registry]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$locationMapper</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Location mapper]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="\ezp\Persistence\Storage\Persistence\Converter\Location\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Persistence\Converter\Location\Mapper</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="45" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Creates a new mapper.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry" variable="$converterRegistry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$locationMapper</name>
          <default><![CDATA[]]></default>
          <type>LocationMapper</type>
        </argument>
        <argument line="45">
          <name>$converterRegistry</name>
          <default><![CDATA[]]></default>
          <type>Registry</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="57" package="Default">
        <name>createContentFromCreateStruct</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Creates a Content from the given $struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="" type="\ezp\Persistence\Content\CreateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\CreateStruct</type>
          </tag>
          <tag line="51" name="return" description="" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="81" package="Default">
        <name>createLocationCreateStruct</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Creates a Location\CreateStruct for the given $content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="75" name="return" description="" type="\ezp\Persistence\Content\Location\CreateStruct">
            <type by_reference="false">\ezp\Persistence\Content\Location\CreateStruct</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="100" package="Default">
        <name>createVersionForContent</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Creates a new version for the given $content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="92" name="param" description="" type="int" variable="$versionNo">
            <type by_reference="false">int</type>
          </tag>
          <tag line="92" name="return" description="" type="\ezp\Persistence\Content\Version">
            <type by_reference="false">\ezp\Persistence\Content\Version</type>
          </tag>
          <tag line="92" name="todo" description=": created, modified, initial_language_id, status, user_id?"/>
        </docblock>
        <argument line="100">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
        <argument line="100">
          <name>$versionNo</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="123" package="Default">
        <name>convertToStorageValue</name>
        <type>function</type>
        <docblock line="117">
          <description><![CDATA[Converts value of $field to storage value]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="117" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="117" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="146" package="Default">
        <name>extractContentFromRows</name>
        <type>function</type>
        <docblock line="136">
          <description><![CDATA[Extracts Content objects (and nested) from database result $rows]]></description>
          <long-description><![CDATA[<p>Expects database rows to be indexed by keys of the format</p>

<pre><code> "$tableName_$columnName"
</code></pre>]]></long-description>
          <tag line="136" name="param" description="" type="array" variable="$rows">
            <type by_reference="false">array</type>
          </tag>
          <tag line="136" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\array(Content)">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\array(Content)</type>
          </tag>
        </docblock>
        <argument line="146">
          <name>$rows</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content" line="222" package="Default">
        <name>extractContentFromRow</name>
        <type>function</type>
        <docblock line="216">
          <description><![CDATA[Extracts a Content object from $row]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="216" name="param" description="" type="array" variable="$row">
            <type by_reference="false">array</type>
          </tag>
          <tag line="216" name="return" description="" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
        </docblock>
        <argument line="222">
          <name>$row</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content" line="247" package="Default">
        <name>extractVersionFromRow</name>
        <type>function</type>
        <docblock line="241">
          <description><![CDATA[Extracts a Version from the given $row]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="241" name="param" description="" type="array" variable="$row">
            <type by_reference="false">array</type>
          </tag>
          <tag line="241" name="return" description="" type="\ezp\Persistence\Content\Version">
            <type by_reference="false">\ezp\Persistence\Content\Version</type>
          </tag>
        </docblock>
        <argument line="247">
          <name>$row</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content" line="263" package="Default">
        <name>mapCommonVersionFields</name>
        <type>function</type>
        <docblock line="256">
          <description><![CDATA[Maps fields from $row to $version]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="256" name="param" description="" type="array" variable="$row">
            <type by_reference="false">array</type>
          </tag>
          <tag line="256" name="param" description="" type="\ezp\Persistence\Content\Version|\ezp\Persistence\Content\RestrictedVersion" variable="$version">
            <type by_reference="false">\ezp\Persistence\Content\Version</type>
            <type by_reference="false">\ezp\Persistence\Content\RestrictedVersion</type>
          </tag>
          <tag line="256" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="263">
          <name>$row</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="263">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content" line="280" package="Default">
        <name>extractFieldFromRow</name>
        <type>function</type>
        <docblock line="274">
          <description><![CDATA[Extracts a Field from $row]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="274" name="param" description="" type="array" variable="$row">
            <type by_reference="false">array</type>
          </tag>
          <tag line="274" name="return" description="" type="\ezp\Persistence\Content\Field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
        </docblock>
        <argument line="280">
          <name>$row</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content" line="303" package="Default">
        <name>extractFieldValueFromRow</name>
        <type>function</type>
        <docblock line="294">
          <description><![CDATA[Extracts a FieldValue of $type from $row]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="294" name="param" description="" type="array" variable="$row">
            <type by_reference="false">array</type>
          </tag>
          <tag line="294" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="294" name="return" description="" type="\ezp\Persistence\Content\FieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="294" name="throws" description="if the necessary converter for $type could not be found." type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Exception\NotFound">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="303">
          <name>$row</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="303">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="327" package="Default">
        <name>extractVersionListFromRows</name>
        <type>function</type>
        <docblock line="321">
          <description><![CDATA[Extracts a list of RestrictedVersion objects from $rows]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="321" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\string[][]" variable="$rows">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\string[][]</type>
          </tag>
          <tag line="321" name="return" description="" type="\ezp\Persistence\Content\RestrictedVersion[]">
            <type by_reference="false">\ezp\Persistence\Content\RestrictedVersion[]</type>
          </tag>
        </docblock>
        <argument line="327">
          <name>$rows</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="367" package="Default">
        <name>createCreateStructFromContent</name>
        <type>function</type>
        <docblock line="361">
          <description><![CDATA[Creates CreateStruct from $content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="361" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="361" name="return" description="" type="\ezp\Persistence\Content\CreateStruct">
            <type by_reference="false">\ezp\Persistence\Content\CreateStruct</type>
          </tag>
        </docblock>
        <argument line="367">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Language/MaskGenerator.php" hash="f0ce28114b3f8fa3e1b84566a68558d4">
    <parse_markers>
      <error line="24" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $languageLookup in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Language/MaskGenerator.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="15" package="Default">
      <name>MaskGenerator</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Language\MaskGenerator</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Language MaskGenerator]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="22" package="Default">
        <name>$languageLookup</name>
        <default><![CDATA[]]></default>
        <docblock line="17">
          <description><![CDATA[Language lookup]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\Lookup">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\Lookup</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="29" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Creates a new Language MaskGenerator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\Lookup" variable="$languageLookup">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\Lookup</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$languageLookup</name>
          <default><![CDATA[]]></default>
          <type>Lookup</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="40" package="Default">
        <name>generateLanguageMask</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Generates a language mask from the keys of $languages]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="" type="array" variable="$languages">
            <type by_reference="false">array</type>
          </tag>
          <tag line="34" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$languages</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="64" package="Default">
        <name>generateLanguageIndicator</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Generates a language indicator from $locale and $alwaysAvailable]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="" type="string" variable="$locale">
            <type by_reference="false">string</type>
          </tag>
          <tag line="57" name="param" description="" type="boolean" variable="$alwaysAvailable">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="57" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$locale</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="64">
          <name>$alwaysAvailable</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="77" package="Default">
        <name>isLanguageAlwaysAvailable</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Checks if $language is always available in $languages;]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="param" description="" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
          <tag line="70" name="param" description="" type="array" variable="$languages">
            <type by_reference="false">array</type>
          </tag>
          <tag line="70" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="77">
          <name>$languages</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Language/CachingHandler.php" hash="4dad99201a60514c5ff666ed7905953f">
    <parse_markers>
      <error line="41" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $innerHandler in __construct()</error>
      <error line="41" code="50015">Argument $languageCache is missing from the Docblock of __construct()</error>
      <error line="98" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in create()</error>
      <error line="112" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $language in update()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Language/CachingHandler.php</error>
    </parse_markers>
    <namespace-alias name="Language">ezp\Persistence\Content\Language</namespace-alias>
    <namespace-alias name="BaseLanguageHandler">ezp\Persistence\Content\Language\Handler</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Language\CreateStruct</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="18" package="Default">
      <name>CachingHandler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Language\CachingHandler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Content\Language\Handler</extends>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Language\Lookup</extends>
      <docblock line="15">
        <description><![CDATA[Language Handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25" package="Default">
        <name>$innerHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[Inner Language handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="32" package="Default">
        <name>$languageCache</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[Language cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\Cache">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\Cache</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" package="Default">
        <name>$isCacheInitialized</name>
        <default><![CDATA[false]]></default>
        <docblock line="34">
          <description><![CDATA[If the cache has already been initialized]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="var" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="46" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[Creates a caching handler around $innerHandler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="param" description="" type="\ezp\Persistence\Content\Language\Handler" variable="$innerHandler">
            <type by_reference="false">\ezp\Persistence\Content\Language\Handler</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$innerHandler</name>
          <default><![CDATA[]]></default>
          <type>BaseLanguageHandler</type>
        </argument>
        <argument line="46">
          <name>$languageCache</name>
          <default><![CDATA[]]></default>
          <type>Cache</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="57" package="Default">
        <name>initializeCache</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Initializes the cache if necessary]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="78" package="Default">
        <name>getById</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Returns the Language with $id from the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="70" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="70" name="throws" description="if the Language could not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="78">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="92" package="Default">
        <name>getByLocale</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[Returns the Language with $locale from the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="param" description="" type="string" variable="$locale">
            <type by_reference="false">string</type>
          </tag>
          <tag line="84" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="84" name="throws" description="if the Language could not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$locale</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="104" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="98">
          <description><![CDATA[Create a new language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="param" description="" type="\ezp\Persistence\Content\Language\CreateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\Language\CreateStruct</type>
          </tag>
          <tag line="98" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="117" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Update language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="param" description="" type="\ezp\Persistence\Content\Language" variable="$language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="131" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="124">
          <description><![CDATA[Get language by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="124" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="124" name="throws" description="If language could not be found by $id" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="142" package="Default">
        <name>loadAll</name>
        <type>function</type>
        <docblock line="137">
          <description><![CDATA[Get all languages]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="137" name="return" description="" type="\ezp\Persistence\Content\Language[]">
            <type by_reference="false">\ezp\Persistence\Content\Language[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="153" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="148">
          <description><![CDATA[Delete a language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="148" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="153">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Language/Gateway/EzcDatabase.php" hash="82fecd9f6449ef4269fa133bc92629be">
    <parse_markers>
      <error line="28" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dbHandler in __construct()</error>
      <error line="73" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in setCommonLanguageColumns()</error>
      <error line="73" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $language in setCommonLanguageColumns()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Language/Gateway/EzcDatabase.php</error>
    </parse_markers>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Language\Gateway</namespace-alias>
    <namespace-alias name="Language">ezp\Persistence\Content\Language</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="ezcQuery">ezcQuery</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Language\Gateway" line="19" package="Default">
      <name>EzcDatabase</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Language\Gateway\EzcDatabase</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Language\Gateway</extends>
      <docblock line="16">
        <description><![CDATA[ezcDatabase based Language Gateway]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" package="Default">
        <name>$dbHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[Database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language\Gateway" line="33" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="28">
          <description><![CDATA[Creates a new EzcDatabase Section Gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language\Gateway" line="44" package="Default">
        <name>insertLanguage</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Inserts the given $language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="param" description="" type="\ezp\Persistence\Content\Language" variable="$language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="38" name="return" description="ID of the new language" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Language\Gateway" line="80" package="Default">
        <name>setCommonLanguageColumns</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Sets columns in $query from $language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="param" description="" type="\ezcQuery" variable="$query">
            <type by_reference="false">\ezcQuery</type>
          </tag>
          <tag line="73" name="param" description="" type="\ezp\Persistence\Content\Language" variable="$language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="73" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuery</type>
        </argument>
        <argument line="80">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language\Gateway" line="104" package="Default">
        <name>updateLanguage</name>
        <type>function</type>
        <docblock line="98">
          <description><![CDATA[Updates the data of the given $language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="param" description="" type="\ezp\Persistence\Content\Language" variable="$language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="98" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language\Gateway" line="128" package="Default">
        <name>loadLanguageData</name>
        <type>function</type>
        <docblock line="122">
          <description><![CDATA[Loads data for the Language with $id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="122" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="122" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\Gateway\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\Gateway\string[][]</type>
          </tag>
        </docblock>
        <argument line="128">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Language\Gateway" line="149" package="Default">
        <name>createFindQuery</name>
        <type>function</type>
        <docblock line="144">
          <description><![CDATA[Creates a Language find query]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="144" name="return" description="" type="\ezcQuerySelect">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language\Gateway" line="168" package="Default">
        <name>loadAllLanguagesData</name>
        <type>function</type>
        <docblock line="163">
          <description><![CDATA[Loads the data for all languages]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="163" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\Gateway\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\Gateway\string[][]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language\Gateway" line="184" package="Default">
        <name>deleteLanguage</name>
        <type>function</type>
        <docblock line="178">
          <description><![CDATA[Deletes the language with $id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="178" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="178" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="184">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Language/Lookup.php" hash="37189ac7c5ef6a3f3533b3c262020190">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Language/Lookup.php</error>
    </parse_markers>
    <interface namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="15" package="Default">
      <name>Lookup</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Language\Lookup</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Language Lookup interface]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="25" package="Default">
        <name>getById</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Returns the Language with $id from the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="17" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="17" name="throws" description="if the Language could not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="35" package="Default">
        <name>getByLocale</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Returns the Language with $locale from the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="string" variable="$locale">
            <type by_reference="false">string</type>
          </tag>
          <tag line="27" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="27" name="throws" description="if the Language could not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$locale</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </interface>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Language/Cache.php" hash="4fa422a5654bf27d668e6abc5d03f5c0">
    <parse_markers>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $language in store()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Language/Cache.php</error>
    </parse_markers>
    <namespace-alias name="Language">ezp\Persistence\Content\Language</namespace-alias>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="17" package="Default">
      <name>Cache</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Language\Cache</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Language Cache]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" package="Default">
        <name>$mapById</name>
        <default><![CDATA[array()]]></default>
        <docblock line="19">
          <description><![CDATA[Maps IDs to Language objects]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="\ezp\Content\Language[]">
            <type by_reference="false">\ezp\Content\Language[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="31" package="Default">
        <name>$mapByLocale</name>
        <default><![CDATA[array()]]></default>
        <docblock line="26">
          <description><![CDATA[Maps locales to Language objects]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="\ezp\Content\Language[]">
            <type by_reference="false">\ezp\Content\Language[]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="39" package="Default">
        <name>store</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Stores the $language into the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Content\Language" variable="$language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="33" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="51" package="Default">
        <name>remove</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Removes the language with $id from the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="45" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="71" package="Default">
        <name>getById</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Returns the Language with $id from the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="63" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="63" name="throws" description="if the Language could not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="88" package="Default">
        <name>getByLocale</name>
        <type>function</type>
        <docblock line="80">
          <description><![CDATA[Returns the Language with $locale from the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="param" description="" type="string" variable="$locale">
            <type by_reference="false">string</type>
          </tag>
          <tag line="80" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="80" name="throws" description="if the Language could not be found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$locale</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="102" package="Default">
        <name>getAll</name>
        <type>function</type>
        <docblock line="97">
          <description><![CDATA[Returns all languages in the cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="return" description="" type="\ezp\Persistence\Content\Language[]">
            <type by_reference="false">\ezp\Persistence\Content\Language[]</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Language/Handler.php" hash="edfe61e4cc3d94545513b4b9c3b042fa">
    <parse_markers>
      <error line="35" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $languageGateway in __construct()</error>
      <error line="35" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $languageMapper in __construct()</error>
      <error line="47" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in create()</error>
      <error line="62" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $language in update()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Language/Handler.php</error>
    </parse_markers>
    <namespace-alias name="Language">ezp\Persistence\Content\Language</namespace-alias>
    <namespace-alias name="BaseLanguageHandler">ezp\Persistence\Content\Language\Handler</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Language\CreateStruct</namespace-alias>
    <namespace-alias name="Exception">ezp\Base\Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="19" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Language\Handler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Content\Language\Handler</extends>
      <docblock line="16">
        <description><![CDATA[Language Handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" package="Default">
        <name>$languageGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[Language Gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="33" package="Default">
        <name>$languageMapper</name>
        <default><![CDATA[]]></default>
        <docblock line="28">
          <description><![CDATA[Language Mapper]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\Mapper</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="41" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Creates a new Language Handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\Gateway" variable="$languageGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\Gateway</type>
          </tag>
          <tag line="35" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\Mapper" variable="$languageMapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\Mapper</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$languageGateway</name>
          <default><![CDATA[]]></default>
          <type>Gateway</type>
        </argument>
        <argument line="41">
          <name>$languageMapper</name>
          <default><![CDATA[]]></default>
          <type>Mapper</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="53" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Create a new language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="" type="\ezp\Persistence\Content\Language\CreateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\Language\CreateStruct</type>
          </tag>
          <tag line="47" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="67" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Update language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="param" description="" type="\ezp\Persistence\Content\Language" variable="$language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="79" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Get language by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="72" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="72" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="72" name="throws" description="If language could not be found by $id" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="96" package="Default">
        <name>loadAll</name>
        <type>function</type>
        <docblock line="91">
          <description><![CDATA[Get all languages]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="return" description="" type="\ezp\Persistence\Content\Language[]">
            <type by_reference="false">\ezp\Persistence\Content\Language[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="110" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Delete a language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="todo" description="Might throw an exception if the language is still associated with&#10;some content / types / (...) ?"/>
          <tag line="102" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Language/Mapper.php" hash="3db28c8888f7c2bbba42a70f33c50210">
    <parse_markers>
      <error line="19" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in createLanguageFromCreateStruct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Language/Mapper.php</error>
    </parse_markers>
    <namespace-alias name="Language">ezp\Persistence\Content\Language</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Language\CreateStruct</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="17" package="Default">
      <name>Mapper</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Language\Mapper</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Language Mapper]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="25" package="Default">
        <name>createLanguageFromCreateStruct</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Creates a Language from $struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="param" description="" type="\ezp\Persistence\Content\Language\CreateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\Language\CreateStruct</type>
          </tag>
          <tag line="19" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="42" package="Default">
        <name>extractLanguagesFromRows</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Extracts Language objects from $rows]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="" type="array" variable="$rows">
            <type by_reference="false">array</type>
          </tag>
          <tag line="36" name="return" description="" type="\ezp\Persistence\Content\Language[]">
            <type by_reference="false">\ezp\Persistence\Content\Language[]</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$rows</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Language/Gateway.php" hash="85cc40d1d9bc00b3ad300ec1b80aedf9">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Language/Gateway.php</error>
    </parse_markers>
    <namespace-alias name="Language">ezp\Persistence\Content\Language</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="16" package="Default">
      <name>Gateway</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Language\Gateway</full_name>
      <extends/>
      <docblock line="13">
        <description><![CDATA[Language Handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="24" package="Default">
        <name>insertLanguage</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Inserts the given $language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="" type="\ezp\Persistence\Content\Language" variable="$language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="18" name="return" description="ID of the new language" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="32" package="Default">
        <name>updateLanguage</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Updates the data of the given $language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="\ezp\Persistence\Content\Language" variable="$language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="26" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="40" package="Default">
        <name>loadLanguageData</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Loads data for the Language with $id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="34" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\string[][]</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="47" package="Default">
        <name>loadAllLanguagesData</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Loads the data for all languages]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\string[][]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Language" line="55" package="Default">
        <name>deleteLanguage</name>
        <type>function</type>
        <docblock line="49">
          <description><![CDATA[Deletes the language with $id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="49" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Location/Gateway/EzcDatabase.php" hash="a290677a1a8b0047ef3d459a9b793725">
    <parse_markers>
      <error line="405" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $createStruct in create()</error>
      <error line="405" code="50015">Argument $published is missing from the Docblock of create()</error>
      <error line="651" code="50014">Name of argument $versionNo does not match with the DocBlock's name $versionId in getMainNodeId()</error>
      <notice line="651" code="50013">Parameter $versionId could not be found in getMainNodeId()</notice>
      <error line="693" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in update()</error>
      <error line="748" code="50014">Name of argument $pathString does not match with the DocBlock's name $locationId in trashSubtree()</error>
      <notice line="748" code="50013">Parameter $locationId could not be found in trashSubtree()</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Location/Gateway/EzcDatabase.php</error>
    </parse_markers>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Location\Gateway</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="Location">ezp\Persistence\Content\Location</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Location\UpdateStruct</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Location\CreateStruct</namespace-alias>
    <namespace-alias name="SortClause">ezp\Persistence\Content\Query\SortClause</namespace-alias>
    <namespace-alias name="Query">ezp\Content\Query</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="23" package="Default">
      <name>EzcDatabase</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Location\Gateway\EzcDatabase</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Location\Gateway</extends>
      <docblock line="20">
        <description><![CDATA[Location gateway implementation using the zeta database component.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[Database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="38" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Construct from database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
          <tag line="32" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="53" package="Default">
        <name>getBasicNodeData</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Returns an array with basic node data]]></description>
          <long-description><![CDATA[<p>We might want to cache this, since this method is used by about every
method in the location handler.</p>]]></long-description>
          <tag line="43" name="optimze" description=""/>
          <tag line="43" name="param" description="" type="mixed" variable="$nodeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="43" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$nodeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="82" package="Default">
        <name>getSubtreeContent</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Find all content in the given subtree]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="param" description="" type="mixed" variable="$sourceId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="76" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$sourceId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="115" package="Default">
        <name>moveSubtreeNodes</name>
        <type>function</type>
        <docblock line="104">
          <description><![CDATA[Update path strings to move nodes in the ezcontentobject_tree table]]></description>
          <long-description><![CDATA[<p>This query can likely be optimized to use some more advanced string
operations, which then depend on the respective database.</p>]]></long-description>
          <tag line="104" name="optimize" description=""/>
          <tag line="104" name="param" description="" type="string" variable="$fromPathString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="104" name="param" description="" type="string" variable="$toPathString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="104" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$fromPathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="115">
          <name>$toPathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="166" package="Default">
        <name>updateSubtreeModificationTime</name>
        <type>function</type>
        <docblock line="160">
          <description><![CDATA[Updated subtree modification time for all nodes on path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="160" name="param" description="" type="string" variable="$pathString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="160" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$pathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="190" package="Default">
        <name>hideSubtree</name>
        <type>function</type>
        <docblock line="185">
          <description><![CDATA[Sets a location to be hidden, and it self + all children to invisible.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="185" name="param" description="" type="string" variable="$pathString">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="190">
          <name>$pathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="233" package="Default">
        <name>unHideSubtree</name>
        <type>function</type>
        <docblock line="227">
          <description><![CDATA[Sets a location to be unhidden, and self + children to visible unless a parent is hidding the tree.]]></description>
          <long-description><![CDATA[<p>If not make sure only children down to first hidden node is marked visible.</p>]]></long-description>
          <tag line="227" name="param" description="" type="string" variable="$pathString">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="233">
          <name>$pathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="352" package="Default">
        <name>swap</name>
        <type>function</type>
        <docblock line="342">
          <description><![CDATA[Swaps the content object being pointed to by a location object.]]></description>
          <long-description><![CDATA[<p>Make the location identified by $locationId1 refer to the Content
referred to by $locationId2 and vice versa.</p>]]></long-description>
          <tag line="342" name="param" description="" type="mixed" variable="$locationId1">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="342" name="param" description="" type="mixed" variable="$locationId2">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="342" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="352">
          <name>$locationId1</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="352">
          <name>$locationId2</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="412" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="405">
          <description><![CDATA[Creates a new location in given $parentNode]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="405" name="param" description="" type="\ezp\Persistence\Content\Location\CreateStruct" variable="$createStruct">
            <type by_reference="false">\ezp\Persistence\Content\Location\CreateStruct</type>
          </tag>
          <tag line="405" name="param" description="" type="array" variable="$parentNode">
            <type by_reference="false">array</type>
          </tag>
          <tag line="405" name="return" description="" type="\ezp\Persistence\Content\Location">
            <type by_reference="false">\ezp\Persistence\Content\Location</type>
          </tag>
        </docblock>
        <argument line="412">
          <name>$createStruct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
        <argument line="412">
          <name>$parentNode</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="412">
          <name>$published</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="499" package="Default">
        <name>createNodeAssignment</name>
        <type>function</type>
        <docblock line="491">
          <description><![CDATA[Create an entry in the node assignment table]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="491" name="param" description="" type="\ezp\Persistence\Content\Location\CreateStruct" variable="$createStruct">
            <type by_reference="false">\ezp\Persistence\Content\Location\CreateStruct</type>
          </tag>
          <tag line="491" name="param" description="" type="mixed" variable="$parentNodeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="491" name="param" description="" type="int" variable="$type">
            <type by_reference="false">int</type>
          </tag>
          <tag line="491" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="499">
          <name>$createStruct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
        <argument line="499">
          <name>$parentNodeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="499">
          <name>$type</name>
          <default><![CDATA[self::NODE_ASSIGNMENT_OP_CODE_CREATE_NOP]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="552" package="Default">
        <name>updateNodeAssignment</name>
        <type>function</type>
        <docblock line="543">
          <description><![CDATA[Update node assignement table]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="543" name="param" description="" type="int" variable="$contentObjectId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="543" name="param" description="" type="int" variable="$oldParent">
            <type by_reference="false">int</type>
          </tag>
          <tag line="543" name="param" description="" type="int" variable="$newParent">
            <type by_reference="false">int</type>
          </tag>
          <tag line="543" name="param" description="" type="int" variable="$opcode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="543" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="552">
          <name>$contentObjectId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="552">
          <name>$oldParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="552">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="552">
          <name>$opcode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="589" package="Default">
        <name>createLocationsFromNodeAssignments</name>
        <type>function</type>
        <docblock line="580">
          <description><![CDATA[Create locations from node assignments]]></description>
          <long-description><![CDATA[<p>Convert existing node assignments into real locations.</p>]]></long-description>
          <tag line="580" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="580" name="param" description="" type="mixed" variable="$versionNo">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="580" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="589">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="589">
          <name>$versionNo</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="657" package="Default">
        <name>getMainNodeId</name>
        <type>function</type>
        <docblock line="651">
          <description><![CDATA[Searches for the main nodeId of $contentId in $versionId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="651" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="651" name="param" description="" type="int" variable="$versionId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="651" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="657">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="657">
          <name>$versionNo</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="700" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="693">
          <description><![CDATA[Updates an existing location.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="693" name="param" description="" type="\ezp\Persistence\Content\Location\UpdateStruct" variable="$location">
            <type by_reference="false">\ezp\Persistence\Content\Location\UpdateStruct</type>
          </tag>
          <tag line="693" name="param" description="" type="int" variable="$locationId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="693" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="700">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
        <argument line="700">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="743" package="Default">
        <name>removeSubtree</name>
        <type>function</type>
        <docblock line="731">
          <description><![CDATA[Removes all Locations under and includin $locationId.]]></description>
          <long-description><![CDATA[<p>Performs a recursive delete on the location identified by $locationId,
including all of its child locations. Content which is not referred to
by any other location is automatically removed. Content which looses its
main Location will get the first of its other Locations assigned as the
new main Location.</p>]]></long-description>
          <tag line="731" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="731" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="743">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="757" package="Default">
        <name>trashSubtree</name>
        <type>function</type>
        <docblock line="748">
          <description><![CDATA[Sends a subtree to the trash]]></description>
          <long-description><![CDATA[<p>Moves all locations in the subtree to the Trash. The associated content
objects are left untouched.</p>]]></long-description>
          <tag line="748" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="748" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="757">
          <name>$pathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="812" package="Default">
        <name>untrashLocation</name>
        <type>function</type>
        <docblock line="800">
          <description><![CDATA[Returns a trashed location to normal state.]]></description>
          <long-description><![CDATA[<p>Recreates the originally trashed location in the new position. If no new
position has been specified, it will be tried to re-create the location
at the old position. If this is not possible ( because the old location
does not exist any more) and exception is thrown.</p>]]></long-description>
          <tag line="800" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="800" name="param" description="" type="mixed" variable="$newParentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="800" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="812">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="812">
          <name>$newParentId</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="877" package="Default">
        <name>loadTrashByLocation</name>
        <type>function</type>
        <docblock line="871">
          <description><![CDATA[Load trash data specified by location ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="871" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="871" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="877">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="908" package="Default">
        <name>listTrashed</name>
        <type>function</type>
        <docblock line="900">
          <description><![CDATA[List trashed items]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="900" name="param" description="" type="int" variable="$offset">
            <type by_reference="false">int</type>
          </tag>
          <tag line="900" name="param" description="" type="int" variable="$limit">
            <type by_reference="false">int</type>
          </tag>
          <tag line="900" name="param" description="" type="array" variable="$sort">
            <type by_reference="false">array</type>
          </tag>
          <tag line="900" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="908">
          <name>$offset</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="908">
          <name>$limit</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="908">
          <name>$sort</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Gateway" line="966" package="Default">
        <name>setSectionForSubtree</name>
        <type>function</type>
        <docblock line="959">
          <description><![CDATA[Set section on all content objects in the subtree]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="959" name="param" description="" type="mixed" variable="$pathString">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="959" name="param" description="" type="mixed" variable="$sectionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="959" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="966">
          <name>$pathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="966">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Location/Trash/Handler.php" hash="c7415721a6c798a2a94401fe7cd5a008">
    <parse_markers>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $locationGateway in __construct()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $locationMapper in __construct()</error>
      <error line="81" code="50014">Name of argument $trashedId does not match with the DocBlock's name $locationId in untrashLocation()</error>
      <notice line="81" code="50013">Parameter $locationId could not be found in untrashLocation()</notice>
      <error line="100" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $criterion in listTrashed()</error>
      <error line="100" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $sort in listTrashed()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Location/Trash/Handler.php</error>
    </parse_markers>
    <namespace-alias name="Trash">ezp\Persistence\Content\Location\Trash</namespace-alias>
    <namespace-alias name="Trashed">ezp\Persistence\Content\Location\Trashed</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Location\Trash\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Location\Trash\UpdateStruct</namespace-alias>
    <namespace-alias name="BaseTrashHandler">ezp\Persistence\Content\Location\Trash\Handler</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="LocationGateway">ezp\Persistence\Storage\Legacy\Content\Location\Gateway</namespace-alias>
    <namespace-alias name="LocationMapper">ezp\Persistence\Storage\Legacy\Content\Location\Mapper</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Trash" line="23" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Location\Trash\Handler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Content\Location\Trash\Handler</extends>
      <docblock line="20">
        <description><![CDATA[The Location Handler interface defines operations on Location elements in the storage engine.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$locationGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[Gaateway for handling location data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$locationMapper</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[Mapper for handling location data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Mapper</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Trash" line="46" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Construct from userGateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Gateway" variable="$locationGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Gateway</type>
          </tag>
          <tag line="39" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Mapper" variable="$locationMapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Mapper</type>
          </tag>
          <tag line="39" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$locationGateway</name>
          <default><![CDATA[]]></default>
          <type>LocationGateway</type>
        </argument>
        <argument line="46">
          <name>$locationMapper</name>
          <default><![CDATA[]]></default>
          <type>LocationMapper</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Trash" line="59" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Loads the data for the trashed location identified by $id.]]></description>
          <long-description><![CDATA[<p>$id is the same as original location (which has been previously trashed)</p>]]></long-description>
          <tag line="52" name="param" description="" type="int" variable="$id">
            <type by_reference="false">int</type>
          </tag>
          <tag line="52" name="return" description="" type="\ezp\Persistence\Content\Location\Trashed">
            <type by_reference="false">\ezp\Persistence\Content\Location\Trashed</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Trash" line="74" package="Default">
        <name>trashSubtree</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Sends a subtree to the trash]]></description>
          <long-description><![CDATA[<p>Moves all locations in the subtree to the Trash. The associated content
objects are left untouched.</p>]]></long-description>
          <tag line="65" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="65" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Trash" line="95" package="Default">
        <name>untrashLocation</name>
        <type>function</type>
        <docblock line="81">
          <description><![CDATA[Returns a trashed location to normal state.]]></description>
          <long-description><![CDATA[<p>Recreates the originally trashed location in the new position.
If this is not possible (because the old location does not exist any more),
a ParentNotFound exception is thrown.</p>

<p>Returns newly restored location Id.</p>]]></long-description>
          <tag line="81" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="81" name="param" description="" type="mixed" variable="$newParentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="81" name="return" description="Newly restored location id" type="int">
            <type by_reference="false">int</type>
          </tag>
          <tag line="81" name="throws" description="" type="\ezp\Content\Location\Exception\ParentNotFound">
            <type by_reference="false">\ezp\Content\Location\Exception\ParentNotFound</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$trashedId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="95">
          <name>$newParentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Trash" line="111" package="Default">
        <name>listTrashed</name>
        <type>function</type>
        <docblock line="100">
          <description><![CDATA[Returns an array of all trashed locations satisfying the $criterion (if provided),
sorted with SortClause objects contained in $sort (if any).]]></description>
          <long-description><![CDATA[<p>If no criterion is provided (null), no filter is applied</p>]]></long-description>
          <tag line="100" name="param" description="" type="\ezp\Persistence\Content\Query\Criterion" variable="$criterion">
            <type by_reference="false">\ezp\Persistence\Content\Query\Criterion</type>
          </tag>
          <tag line="100" name="param" description="Offset to start listing from, 0 by default" type="\ezp\Persistence\Storage\Legacy\Content\Location\Trash\$offset" variable="$offset">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Trash\$offset</type>
          </tag>
          <tag line="100" name="param" description="Limit for the listing. Null by default (no limit)" type="\ezp\Persistence\Storage\Legacy\Content\Location\Trash\$limit" variable="$limit">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Trash\$limit</type>
          </tag>
          <tag line="100" name="param" description="" type="\ezp\Persistence\Content\Query\SortClause[]" variable="$sort">
            <type by_reference="false">\ezp\Persistence\Content\Query\SortClause[]</type>
          </tag>
          <tag line="100" name="return" description="" type="\ezp\Persistence\Content\Location\Trashed[]">
            <type by_reference="false">\ezp\Persistence\Content\Location\Trashed[]</type>
          </tag>
        </docblock>
        <argument line="111">
          <name>$criterion</name>
          <default><![CDATA[null]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="111">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="111">
          <name>$limit</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="111">
          <name>$sort</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Trash" line="129" package="Default">
        <name>emptyTrash</name>
        <type>function</type>
        <docblock line="125">
          <description><![CDATA[Empties the trash
Everything contained in the trash must be removed]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location\Trash" line="140" package="Default">
        <name>emptyOne</name>
        <type>function</type>
        <docblock line="134">
          <description><![CDATA[Removes a trashed location identified by $trashedLocationId from trash
Associated content has to be deleted]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="134" name="param" description="" type="int" variable="$trashedId">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$trashedId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Location/Handler.php" hash="ff52561a27e1e3bd6c2cab7b549da807">
    <parse_markers>
      <error line="54" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $locationGateway in __construct()</error>
      <error line="54" code="50015">Argument $locationMapper is missing from the Docblock of __construct()</error>
      <error line="54" code="50015">Argument $contentHandler is missing from the Docblock of __construct()</error>
      <error line="54" code="50015">Argument $contentMapper is missing from the Docblock of __construct()</error>
      <error line="224" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in update()</error>
      <error line="236" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $locationStruct in create()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Location/Handler.php</error>
    </parse_markers>
    <namespace-alias name="Location">ezp\Persistence\Content\Location</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Location\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Location\UpdateStruct</namespace-alias>
    <namespace-alias name="BaseLocationHandler">ezp\Persistence\Content\Location\Handler</namespace-alias>
    <namespace-alias name="ContentHandler">ezp\Persistence\Storage\Legacy\Content\Handler</namespace-alias>
    <namespace-alias name="ContentMapper">ezp\Persistence\Storage\Legacy\Content\Mapper</namespace-alias>
    <namespace-alias name="LocationGateway">ezp\Persistence\Storage\Legacy\Content\Location\Gateway</namespace-alias>
    <namespace-alias name="LocationMapper">ezp\Persistence\Storage\Legacy\Content\Location\Mapper</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="24" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Location\Handler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Content\Location\Handler</extends>
      <docblock line="21">
        <description><![CDATA[The Location Handler interface defines operations on Location elements in the storage engine.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="31" package="Default">
        <name>$locationGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[Gaateway for handling location data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$locationMapper</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[Location locationMapper]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Mapper</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="45" package="Default">
        <name>$contentHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="40">
          <description><![CDATA[Content handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="52" package="Default">
        <name>$contentMapper</name>
        <default><![CDATA[]]></default>
        <docblock line="47">
          <description><![CDATA[Content locationMapper]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Mapper</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="60" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Construct from userGateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Gateway" variable="$locationGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Gateway</type>
          </tag>
          <tag line="54" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$locationGateway</name>
          <default><![CDATA[]]></default>
          <type>LocationGateway</type>
        </argument>
        <argument line="62">
          <name>$locationMapper</name>
          <default><![CDATA[]]></default>
          <type>LocationMapper</type>
        </argument>
        <argument line="63">
          <name>$contentHandler</name>
          <default><![CDATA[]]></default>
          <type>ContentHandler</type>
        </argument>
        <argument line="64">
          <name>$contentMapper</name>
          <default><![CDATA[]]></default>
          <type>ContentMapper</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="79" package="Default">
        <name>getParentPathString</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Return parent path string for a path string]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="param" description="" type="string" variable="$pathString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$pathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="90" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[Loads the data for the location identified by $locationId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="param" description="" type="int" variable="$locationId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="84" name="return" description="" type="\ezp\Persistence\Content\Location">
            <type by_reference="false">\ezp\Persistence\Content\Location</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="108" package="Default">
        <name>copySubtree</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Copy location object identified by $sourceId, into destination identified by $destinationParentId.]]></description>
          <long-description><![CDATA[<p>Performs a deep copy of the location identified by $sourceId and all of
its child locations, copying the most recent published content object
for each location to a new content object without any additional version
information. Relations are not copied. URLs are not touched at all.</p>]]></long-description>
          <tag line="96" name="param" description="" type="mixed" variable="$sourceId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="96" name="param" description="" type="mixed" variable="$destinationParentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="96" name="return" description="the newly created Location." type="\ezp\Persistence\Content\Location">
            <type by_reference="false">\ezp\Persistence\Content\Location</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$sourceId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="108">
          <name>$destinationParentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="149" package="Default">
        <name>move</name>
        <type>function</type>
        <docblock line="138">
          <description><![CDATA[Moves location identified by $sourceId into new parent identified by $destinationParentId.]]></description>
          <long-description><![CDATA[<p>Performs a full move of the location identified by $sourceId to a new
destination, identified by $destinationParentId. Relations do not need
to be updated, since they refer to Content. URLs are not touched.</p>]]></long-description>
          <tag line="138" name="param" description="" type="mixed" variable="$sourceId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="138" name="param" description="" type="mixed" variable="$destinationParentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="138" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="149">
          <name>$sourceId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="149">
          <name>$destinationParentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="177" package="Default">
        <name>markSubtreeModified</name>
        <type>function</type>
        <docblock line="167">
          <description><![CDATA[Marks the given nodes and all ancestors as modified]]></description>
          <long-description><![CDATA[<p>Optionally a time stamp with the modification date may be specified,
otherwise the current time is used.</p>]]></long-description>
          <tag line="167" name="param" description="" type="int|string" variable="$locationId">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="167" name="param" description="" type="int" variable="$timeStamp">
            <type by_reference="false">int</type>
          </tag>
          <tag line="167" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="177">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="177">
          <name>$timeStamp</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="189" package="Default">
        <name>hide</name>
        <type>function</type>
        <docblock line="184">
          <description><![CDATA[Sets a location to be hidden, and it self + all children to invisible.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="184" name="param" description="Location ID" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="189">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="202" package="Default">
        <name>unHide</name>
        <type>function</type>
        <docblock line="196">
          <description><![CDATA[Sets a location to be unhidden, and self + children to visible unless a parent is hidding the tree.]]></description>
          <long-description><![CDATA[<p>If not make sure only children down to first hidden node is marked visible.</p>]]></long-description>
          <tag line="196" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="202">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="219" package="Default">
        <name>swap</name>
        <type>function</type>
        <docblock line="209">
          <description><![CDATA[Swaps the content object being pointed to by a location object.]]></description>
          <long-description><![CDATA[<p>Make the location identified by $locationId1 refer to the Content
referred to by $locationId2 and vice versa.</p>]]></long-description>
          <tag line="209" name="param" description="" type="mixed" variable="$locationId1">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="209" name="param" description="" type="mixed" variable="$locationId2">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="209" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="219">
          <name>$locationId1</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="219">
          <name>$locationId2</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="231" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="224">
          <description><![CDATA[Updates an existing location.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="224" name="param" description="" type="\ezp\Persistence\Content\Location\UpdateStruct" variable="$location">
            <type by_reference="false">\ezp\Persistence\Content\Location\UpdateStruct</type>
          </tag>
          <tag line="224" name="param" description="" type="int" variable="$locationId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="224" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="231">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
        <argument line="231">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="242" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="236">
          <description><![CDATA[Creates a new location rooted at $location->parentId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="236" name="param" description="" type="\ezp\Persistence\Content\Location\CreateStruct" variable="$locationStruct">
            <type by_reference="false">\ezp\Persistence\Content\Location\CreateStruct</type>
          </tag>
          <tag line="236" name="return" description="" type="\ezp\Persistence\Content\Location">
            <type by_reference="false">\ezp\Persistence\Content\Location</type>
          </tag>
        </docblock>
        <argument line="242">
          <name>$locationStruct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="263" package="Default">
        <name>removeSubtree</name>
        <type>function</type>
        <docblock line="251">
          <description><![CDATA[Removes all Locations under and includin $locationId.]]></description>
          <long-description><![CDATA[<p>Performs a recursive delete on the location identified by $locationId,
including all of its child locations. Content which is not referred to
by any other location is automatically removed. Content which looses its
main Location will get the first of its other Locations assigned as the
new main Location.</p>]]></long-description>
          <tag line="251" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="251" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="263">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="277" package="Default">
        <name>trashSubtree</name>
        <type>function</type>
        <docblock line="268">
          <description><![CDATA[Sends a subtree to the trash]]></description>
          <long-description><![CDATA[<p>Moves all locations in the subtree to the Trash. The associated content
objects are left untouched.</p>]]></long-description>
          <tag line="268" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="268" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="277">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="296" package="Default">
        <name>untrashLocation</name>
        <type>function</type>
        <docblock line="284">
          <description><![CDATA[Returns a trashed location to normal state.]]></description>
          <long-description><![CDATA[<p>Recreates the originally trashed location in the new position. If no new
position has been specified, it will be tried to re-create the location
at the old position. If this is not possible ( because the old location
does not exist any more) and exception is thrown.</p>]]></long-description>
          <tag line="284" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="284" name="param" description="" type="mixed" variable="$newParentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="284" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="296">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="296">
          <name>$newParentId</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="308" package="Default">
        <name>setSectionForSubtree</name>
        <type>function</type>
        <docblock line="301">
          <description><![CDATA[Set section on all content objects in the subtree]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="301" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="301" name="param" description="" type="mixed" variable="$sectionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="301" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="308">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="308">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Location/Mapper.php" hash="03171bbff9e1ec61c752c390ed403c1a">
    <parse_markers>
      <error line="18" code="50014">Name of argument $data does not match with the DocBlock's name $rows in createLocationFromRow()</error>
      <notice line="18" code="50013">Parameter $rows could not be found in createLocationFromRow()</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Location/Mapper.php</error>
    </parse_markers>
    <namespace-alias name="Location">ezp\Persistence\Content\Location</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="16" package="Default">
      <name>Mapper</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Location\Mapper</full_name>
      <extends/>
      <docblock line="13">
        <description><![CDATA[Mapper for Location objects]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="30" package="Default">
        <name>createLocationFromRow</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Creates a Location from a $data row]]></description>
          <long-description><![CDATA[<p>$prefix can be used to define a table prefix for the location table.</p>

<p>Optionally pass a Location object, which will be filled with the values.</p>]]></long-description>
          <tag line="18" name="param" description="" type="array" variable="$rows">
            <type by_reference="false">array</type>
          </tag>
          <tag line="18" name="param" description="" type="string" variable="$prefix">
            <type by_reference="false">string</type>
          </tag>
          <tag line="18" name="param" description="" type="\ezp\Persistence\Content\Location" variable="$location">
            <type by_reference="false">\ezp\Persistence\Content\Location</type>
          </tag>
          <tag line="18" name="return" description="" type="\ezp\Persistence\Content\Location">
            <type by_reference="false">\ezp\Persistence\Content\Location</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="30">
          <name>$prefix</name>
          <default><![CDATA['']]></default>
          <type/>
        </argument>
        <argument line="30">
          <name>$location</name>
          <default><![CDATA[null]]></default>
          <type>Location</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Location/Gateway.php" hash="34175a4f1fa35d52c43327e4bcaa5a7a">
    <parse_markers>
      <error line="124" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $createStruct in create()</error>
      <error line="143" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $location in update()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Location/Gateway.php</error>
    </parse_markers>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Location\UpdateStruct</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Location\CreateStruct</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="18" package="Default">
      <name>Gateway</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Location\Gateway</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[Base class for location gateways.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="23" package="Default">
        <name>NODE_ASSIGNMENT_OP_CODE_NOP</name>
        <value><![CDATA[0]]></value>
        <docblock line="20">
          <description><![CDATA[Constants for node assignment op codes]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="24">
        <name>NODE_ASSIGNMENT_OP_CODE_EXECUTE</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="25">
        <name>NODE_ASSIGNMENT_OP_CODE_CREATE_NOP</name>
        <value><![CDATA[2]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="26">
        <name>NODE_ASSIGNMENT_OP_CODE_CREATE</name>
        <value><![CDATA[3]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="27">
        <name>NODE_ASSIGNMENT_OP_CODE_MOVE_NOP</name>
        <value><![CDATA[4]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="28">
        <name>NODE_ASSIGNMENT_OP_CODE_MOVE</name>
        <value><![CDATA[5]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="29">
        <name>NODE_ASSIGNMENT_OP_CODE_REMOVE_NOP</name>
        <value><![CDATA[6]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="30">
        <name>NODE_ASSIGNMENT_OP_CODE_REMOVE</name>
        <value><![CDATA[7]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="31">
        <name>NODE_ASSIGNMENT_OP_CODE_SET_NOP</name>
        <value><![CDATA[8]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="32">
        <name>NODE_ASSIGNMENT_OP_CODE_SET</name>
        <value><![CDATA[9]]></value>
      </constant>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="44" package="Default">
        <name>getBasicNodeData</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Returns an array with basic node data]]></description>
          <long-description><![CDATA[<p>We might want to cache this, since this method is used by about every
method in the location handler.</p>]]></long-description>
          <tag line="34" name="optimze" description=""/>
          <tag line="34" name="param" description="" type="mixed" variable="$nodeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="34" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$nodeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="52" package="Default">
        <name>getSubtreeContent</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Find all content in the given subtree]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="" type="mixed" variable="$sourceId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="46" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$sourceId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="65" package="Default">
        <name>moveSubtreeNodes</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Update path strings to move nodes in the ezcontentobject_tree table]]></description>
          <long-description><![CDATA[<p>This query can likely be optimized to use some more advanced string
operations, which then depend on the respective database.</p>]]></long-description>
          <tag line="54" name="optimize" description=""/>
          <tag line="54" name="param" description="" type="string" variable="$fromPathString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="param" description="" type="string" variable="$toPathString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$fromPathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="65">
          <name>$toPathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="73" package="Default">
        <name>updateSubtreeModificationTime</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Updated subtree modification time for all nodes on path]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="param" description="" type="string" variable="$pathString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="67" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$pathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="84" package="Default">
        <name>updateNodeAssignment</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Update node assignement table]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="" type="int" variable="$contentObjectId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="75" name="param" description="" type="int" variable="$oldParent">
            <type by_reference="false">int</type>
          </tag>
          <tag line="75" name="param" description="" type="int" variable="$newParent">
            <type by_reference="false">int</type>
          </tag>
          <tag line="75" name="param" description="" type="int" variable="$opcode">
            <type by_reference="false">int</type>
          </tag>
          <tag line="75" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$contentObjectId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="84">
          <name>$oldParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="84">
          <name>$newParent</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="84">
          <name>$opcode</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="95" package="Default">
        <name>createLocationsFromNodeAssignments</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[Create locations from node assignments]]></description>
          <long-description><![CDATA[<p>Convert existing node assignments into real locations.</p>]]></long-description>
          <tag line="86" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="86" name="param" description="" type="mixed" variable="$versionNo">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="86" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="95">
          <name>$versionNo</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="102" package="Default">
        <name>hideSubtree</name>
        <type>function</type>
        <docblock line="97">
          <description><![CDATA[Sets a location to be hidden, and it self + all children to invisible.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="param" description="" type="string" variable="$pathString">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$pathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="110" package="Default">
        <name>unHideSubtree</name>
        <type>function</type>
        <docblock line="104">
          <description><![CDATA[Sets a location to be unhidden, and self + children to visible unless a parent is hidding the tree.]]></description>
          <long-description><![CDATA[<p>If not make sure only children down to first hidden node is marked visible.</p>]]></long-description>
          <tag line="104" name="param" description="" type="string" variable="$pathString">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$pathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="122" package="Default">
        <name>swap</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Swaps the content object being pointed to by a location object.]]></description>
          <long-description><![CDATA[<p>Make the location identified by $locationId1 refer to the Content
referred to by $locationId2 and vice versa.</p>]]></long-description>
          <tag line="112" name="param" description="" type="mixed" variable="$locationId1">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="112" name="param" description="" type="mixed" variable="$locationId2">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="112" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="122">
          <name>$locationId1</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="122">
          <name>$locationId2</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="131" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="124">
          <description><![CDATA[Creates a new location in given $parentNode]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="param" description="" type="\ezp\Persistence\Content\Location\CreateStruct" variable="$createStruct">
            <type by_reference="false">\ezp\Persistence\Content\Location\CreateStruct</type>
          </tag>
          <tag line="124" name="param" description="" type="array" variable="$parentNode">
            <type by_reference="false">array</type>
          </tag>
          <tag line="124" name="return" description="" type="\ezp\Persistence\Content\Location">
            <type by_reference="false">\ezp\Persistence\Content\Location</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$createStruct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
        <argument line="131">
          <name>$parentNode</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="141" package="Default">
        <name>createNodeAssignment</name>
        <type>function</type>
        <docblock line="133">
          <description><![CDATA[Create an entry in the node assignment table]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="133" name="param" description="" type="\ezp\Persistence\Content\Location\CreateStruct" variable="$createStruct">
            <type by_reference="false">\ezp\Persistence\Content\Location\CreateStruct</type>
          </tag>
          <tag line="133" name="param" description="" type="mixed" variable="$parentNodeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="133" name="param" description="" type="int" variable="$type">
            <type by_reference="false">int</type>
          </tag>
          <tag line="133" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="141">
          <name>$createStruct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
        <argument line="141">
          <name>$parentNodeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="141">
          <name>$type</name>
          <default><![CDATA[self::NODE_ASSIGNMENT_OP_CODE_CREATE_NOP]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="150" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="143">
          <description><![CDATA[Updates an existing location.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="143" name="param" description="" type="\ezp\Persistence\Content\Location\UpdateStruct" variable="$location">
            <type by_reference="false">\ezp\Persistence\Content\Location\UpdateStruct</type>
          </tag>
          <tag line="143" name="param" description="" type="int" variable="$locationId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="143" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="150">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
        <argument line="150">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="164" package="Default">
        <name>removeSubtree</name>
        <type>function</type>
        <docblock line="152">
          <description><![CDATA[Removes all Locations under and includin $locationId.]]></description>
          <long-description><![CDATA[<p>Performs a recursive delete on the location identified by $locationId,
including all of its child locations. Content which is not referred to
by any other location is automatically removed. Content which looses its
main Location will get the first of its other Locations assigned as the
new main Location.</p>]]></long-description>
          <tag line="152" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="152" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="164">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="175" package="Default">
        <name>trashSubtree</name>
        <type>function</type>
        <docblock line="166">
          <description><![CDATA[Sends a subtree to the trash]]></description>
          <long-description><![CDATA[<p>Moves all locations in the subtree to the Trash. The associated content
objects are left untouched.</p>]]></long-description>
          <tag line="166" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="166" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="175">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="189" package="Default">
        <name>untrashLocation</name>
        <type>function</type>
        <docblock line="177">
          <description><![CDATA[Returns a trashed location to normal state.]]></description>
          <long-description><![CDATA[<p>Recreates the originally trashed location in the new position. If no new
position has been specified, it will be tried to re-create the location
at the old position. If this is not possible ( because the old location
does not exist any more) and exception is thrown.</p>]]></long-description>
          <tag line="177" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="177" name="param" description="" type="mixed" variable="$newParentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="177" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="189">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="189">
          <name>$newParentId</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="197" package="Default">
        <name>loadTrashByLocation</name>
        <type>function</type>
        <docblock line="191">
          <description><![CDATA[Load trash data specified by location ID]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="191" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="191" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="197">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Location" line="206" package="Default">
        <name>setSectionForSubtree</name>
        <type>function</type>
        <docblock line="199">
          <description><![CDATA[Set section on all content objects in the subtree]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="199" name="param" description="" type="mixed" variable="$pathString">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="199" name="param" description="" type="mixed" variable="$sectionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="199" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="206">
          <name>$pathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="206">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter.php" hash="87c9c2c5c200ba8a25f21a28c70e7e66">
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="31" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="31" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="47" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="47" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter.php</error>
    </parse_markers>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <interface namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue" line="21" package="Default">
      <name>Converter</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</full_name>
      <extends/>
      <docblock line="18">
        <description><![CDATA[Converter for field values in legacy storage]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue" line="29" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="23" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$storageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="29">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue" line="37" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="31" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="37">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue" line="45" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="39" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="45">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue" line="53" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="47" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="53">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue" line="64" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="55" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/TextBlock.php" hash="20feeb3ef598d1db5584a72d4a4eeb04">
    <parse_markers>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="46" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="46" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="57" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="57" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="19" code="50000">No DocBlock was found for TextBlock</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/TextBlock.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="TextBlockValue">ezp\Content\FieldType\TextBlock\Value</namespace-alias>
    <namespace-alias name="FieldSettings">ezp\Content\FieldType\FieldSettings</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="19">
      <name>TextBlock</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\TextBlock</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="27" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$storageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="27">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="39" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="39">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="52" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="46" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="52">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="63" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="57" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="63">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="82" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="73" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Author.php" hash="ba73e385acf293e4d0fba855b82c23f7">
    <parse_markers>
      <error line="22" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="22" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="44" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="44" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="55" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="55" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="80" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $authorValue in generateXmlString()</error>
      <error line="20" code="50000">No DocBlock was found for Author</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Author.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="AuthorValue">ezp\Content\FieldType\Author\Value</namespace-alias>
    <namespace-alias name="AuthorItem">ezp\Content\FieldType\Author\Author</namespace-alias>
    <namespace-alias name="DOMDocument">DOMDocument</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="20">
      <name>Author</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Author</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="28" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="22" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$storageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="28">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="39" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="39">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="50" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="44" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="50">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="61" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="55" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="61">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="75" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="66" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="86" package="Default">
        <name>generateXmlString</name>
        <type>function</type>
        <docblock line="80">
          <description><![CDATA[Generates XML string from $authorValue to be stored in storage engine]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="param" description="" type="\ezp\Content\FieldType\Author\Value" variable="$authorValue">
            <type by_reference="false">\ezp\Content\FieldType\Author\Value</type>
          </tag>
          <tag line="80" name="return" description="The generated XML string" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$authorValue</name>
          <default><![CDATA[]]></default>
          <type>AuthorValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="115" package="Default">
        <name>restoreValueFromXmlString</name>
        <type>function</type>
        <docblock line="109">
          <description><![CDATA[Restores an author Value object from $xmlString]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="109" name="param" description="XML String stored in storage engine" type="string" variable="$xmlString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="109" name="return" description="" type="\ezp\Content\FieldType\Author\Value">
            <type by_reference="false">\ezp\Content\FieldType\Author\Value</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$xmlString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Registry.php" hash="ffb824bef1ecd4eed62668313835a8b7">
    <parse_markers>
      <error line="24" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $converter in register()</error>
      <error line="15" code="50000">No DocBlock was found for Registry</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Registry.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="NotFound">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Exception\NotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="15">
      <name>Registry</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</full_name>
      <extends/>
      <property final="false" static="false" visibility="protected" line="22" package="Default">
        <name>$converterMap</name>
        <default><![CDATA[array()]]></default>
        <docblock line="17">
          <description><![CDATA[Map of converters.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="31" package="Default">
        <name>register</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Register $converter for $typeName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="param" description="" type="string" variable="$typeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="24" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" variable="$converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</type>
          </tag>
          <tag line="24" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$typeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="31">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>Converter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="43" package="Default">
        <name>getConverter</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Returns converter for $typeName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="" type="string" variable="$typeName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="36" name="throws" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Exception\NotFound">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Exception\NotFound</type>
          </tag>
          <tag line="36" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$typeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/KeywordStorage.php" hash="974949f8d9306766fa1cd9e10c085caa">
    <parse_markers>
      <error line="21" code="50012">No short description for method storeFieldData()</error>
      <error line="21" code="50015">Argument $field is missing from the Docblock of storeFieldData()</error>
      <error line="21" code="50015">Argument $context is missing from the Docblock of storeFieldData()</error>
      <error line="122" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in getFieldData()</error>
      <error line="163" code="50012">No short description for method deleteFieldData()</error>
      <error line="182" code="50012">No short description for method copyFieldData()</error>
      <error line="182" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in copyFieldData()</error>
      <error line="190" code="50012">No short description for method getIndexData()</error>
      <error line="190" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in getIndexData()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/KeywordStorage.php</error>
    </parse_markers>
    <namespace-alias name="Storage">ezp\Persistence\Fields\Storage</namespace-alias>
    <namespace-alias name="Field">ezp\Persistence\Content\Field</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="PDO">PDO</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="19" package="Default">
      <name>KeywordStorage</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\KeywordStorage</full_name>
      <extends/>
      <extends>\ezp\Persistence\Fields\Storage</extends>
      <docblock line="16">
        <description><![CDATA[Converter for Keyword field type external storage]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="24" package="Default">
        <name>storeFieldData</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="see" description="\ezp\Persistence\Fields\Storage" refers="\ezp\Persistence\Fields\Storage"/>
        </docblock>
        <argument line="24">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="24">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="132" package="Default">
        <name>getFieldData</name>
        <type>function</type>
        <docblock line="122">
          <description><![CDATA[Populates $field value property based on the external data.]]></description>
          <long-description><![CDATA[<p>$field->value is a {@link ezp\Persistence\Content\FieldValue} object.
This value holds the data as a {@link ezp\Content\FieldType\Value} based object,
according to the field type (e.g. for TextLine, it will be a {@link ezp\Content\FieldType\TextLine\Value} object).</p>]]></long-description>
          <tag line="122" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="122" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="122" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="132">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="132">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="168" package="Default">
        <name>deleteFieldData</name>
        <type>function</type>
        <docblock line="163">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="163" name="param" description="" type="array" variable="$fieldId">
            <type by_reference="false">array</type>
          </tag>
          <tag line="163" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="163" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="168">
          <name>$fieldId</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="168">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="177" package="Default">
        <name>hasFieldData</name>
        <type>function</type>
        <docblock line="172">
          <description><![CDATA[Checks if field type has external data to deal with]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="172" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="186" package="Default">
        <name>copyFieldData</name>
        <type>function</type>
        <docblock line="182">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="182" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="182" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="186">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="186">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="194" package="Default">
        <name>getIndexData</name>
        <type>function</type>
        <docblock line="190">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="190" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="190" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="194">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="194">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/BinaryFileStorage.php" hash="76dc08ec28a4a83587d2a39a22f7aae5">
    <parse_markers>
      <error line="19" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in storeFieldData()</error>
      <error line="92" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in getFieldData()</error>
      <error line="107" code="50012">No short description for method deleteFieldData()</error>
      <error line="127" code="50012">No short description for method copyFieldData()</error>
      <error line="127" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in copyFieldData()</error>
      <error line="136" code="50012">No short description for method getIndexData()</error>
      <error line="136" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in getIndexData()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/BinaryFileStorage.php</error>
    </parse_markers>
    <namespace-alias name="Storage">ezp\Persistence\Fields\Storage</namespace-alias>
    <namespace-alias name="Field">ezp\Persistence\Content\Field</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="17" package="Default">
      <name>BinaryFileStorage</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\BinaryFileStorage</full_name>
      <extends/>
      <extends>\ezp\Persistence\Fields\Storage</extends>
      <docblock line="14">
        <description><![CDATA[Description of BinaryFileStorage]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="57" package="Default">
        <name>storeFieldData</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Allows custom field types to store data in an external source (e.g. another DB table).]]></description>
          <long-description><![CDATA[<p>Stores value for $field in an external data source.
The whole {@link ezp\Persistence\Content\Field} ValueObject is passed and its value
is accessible through the {@link ezp\Persistence\Content\FieldValue} 'value' property.
This value holds the data filled by the user as a {@link ezp\Content\FieldType\Value} based object,
according to the field type (e.g. for TextLine, it will be a {@link ezp\Content\FieldType\TextLine\Value} object).</p>

<p>$field->id = unique ID from the attribute tables (needs to be generated by
database back end on create, before the external data source may be
called from storing).</p>

<p>The context array provides some context for the field handler about the
currently used storage engine.
The array should at least define 2 keys :
  - identifier (connection identifier)
  - connection (the connection handler)
For example, using Legacy storage engine, $context will be:
  - identifier = 'LegacyStorage'
  - connection = {@link \ezp\Persistence\Storage\Legacy\EzcDbHandler} object handler (for DB connection),
                 to be used accordingly to
The context array provides some context for the field handler about the
currently used storage engine.
The array should at least define 2 keys :
  - identifier (connection identifier)
  - connection (the connection handler)
For example, using Legacy storage engine, $context will be:
  - identifier = 'LegacyStorage'
  - connection = {@link \ezp\Persistence\Storage\Legacy\EzcDbHandler} object handler (for DB connection),
                 to be used accordingly to
                 {@link http://incubator.apache.org/zetacomponents/documentation/trunk/Database/tutorial.html ezcDatabase} usage</p>]]></long-description>
          <tag line="19" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="19" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="19" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="19" name="todo" description="Check if it's insert or update query"/>
        </docblock>
        <argument line="57">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="57">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="102" package="Default">
        <name>getFieldData</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Populates $field value property based on the external data.]]></description>
          <long-description><![CDATA[<p>$field->value is a {@link ezp\Persistence\Content\FieldValue} object.
This value holds the data as a {@link ezp\Content\FieldType\Value} based object,
according to the field type (e.g. for TextLine, it will be a {@link ezp\Content\FieldType\TextLine\Value} object).</p>]]></long-description>
          <tag line="92" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="92" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="92" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="102">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="112" package="Default">
        <name>deleteFieldData</name>
        <type>function</type>
        <docblock line="107">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="107" name="param" description="" type="array" variable="$fieldId">
            <type by_reference="false">array</type>
          </tag>
          <tag line="107" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="107" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$fieldId</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="112">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="122" package="Default">
        <name>hasFieldData</name>
        <type>function</type>
        <docblock line="117">
          <description><![CDATA[Checks if field type has external data to deal with]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="117" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="131" package="Default">
        <name>copyFieldData</name>
        <type>function</type>
        <docblock line="127">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="127" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="127" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="131">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="140" package="Default">
        <name>getIndexData</name>
        <type>function</type>
        <docblock line="136">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="136" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="136" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="140">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="140">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/DateAndTime.php" hash="96f60d59f106961b0d67217535fbc8a3">
    <parse_markers>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="42" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="42" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="57" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="57" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="76" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="76" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="129" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dateInterval in generateDateIntervalXML()</error>
      <error line="25" code="50000">No DocBlock was found for DateAndTime</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/DateAndTime.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="DateAndTimeType">ezp\Content\FieldType\DateAndTime\Type</namespace-alias>
    <namespace-alias name="DateAndTimeValue">ezp\Content\FieldType\DateAndTime\Value</namespace-alias>
    <namespace-alias name="FieldSettings">ezp\Content\FieldType\FieldSettings</namespace-alias>
    <namespace-alias name="InvalidArgumentType">ezp\Base\Exception\InvalidArgumentType</namespace-alias>
    <namespace-alias name="DateTime">DateTime</namespace-alias>
    <namespace-alias name="DateInterval">DateInterval</namespace-alias>
    <namespace-alias name="DOMDocument">DOMDocument</namespace-alias>
    <namespace-alias name="SimpleXMLElement">SimpleXMLElement</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="25">
      <name>DateAndTime</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\DateAndTime</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="33" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="27" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$storageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="33">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="48" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="42" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="48">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="63" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="57" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="63">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="82" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="76">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="76" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="76" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="82">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="124" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="115">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="115" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="135" package="Default">
        <name>generateDateIntervalXML</name>
        <type>function</type>
        <docblock line="129">
          <description><![CDATA[Generates the internal XML structure for $dateInterval, used for date adjustment]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="129" name="param" description="" type="\DateInterval" variable="$dateInterval">
            <type by_reference="false">\DateInterval</type>
          </tag>
          <tag line="129" name="return" description="The generated XML string" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="135">
          <name>$dateInterval</name>
          <default><![CDATA[]]></default>
          <type>DateInterval</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="181" package="Default">
        <name>getDateIntervalFromXML</name>
        <type>function</type>
        <docblock line="175">
          <description><![CDATA[Generates a DateInterval object from $xmlText]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="175" name="param" description="" type="string" variable="$xmlText">
            <type by_reference="false">string</type>
          </tag>
          <tag line="175" name="return" description="" type="\DateInterval">
            <type by_reference="false">\DateInterval</type>
          </tag>
        </docblock>
        <argument line="181">
          <name>$xmlText</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Media.php" hash="32271b93d4f114ed75968b81a4840e20">
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="35" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="35" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="46" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="46" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="62" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="62" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="19" code="50000">No DocBlock was found for Media</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Media.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="MediaValue">ezp\Content\FieldType\Media\Value</namespace-alias>
    <namespace-alias name="FieldSettings">ezp\Content\FieldType\FieldSettings</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="19">
      <name>Media</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Media</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="21">
        <name>FILESIZE_VALIDATOR_FQN</name>
        <value><![CDATA['ezp\\Content\\FieldType\\BinaryFile\\FileSizeValidator']]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="30" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Converts data from $value to $storageFieldValue.]]></description>
          <long-description><![CDATA[<p>Nothing has to be stored for eZMedia, as everything has to be stored in an external table.</p>]]></long-description>
          <tag line="23" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="23" name="param" description="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" type="" variable="$storageFieldValue"/>
        </docblock>
        <argument line="30">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="30">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="41" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="35" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="41">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="52" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="46" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="52">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="68" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="62" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="68">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="91" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="82">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="82" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Float.php" hash="c5791aaa60f7ae7aed8cae6bd689e9a9">
    <parse_markers>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="51" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="51" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="74" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="74" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="19" code="50000">No DocBlock was found for Float</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Float.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="FloatValue">ezp\Content\FieldType\Float\Value</namespace-alias>
    <namespace-alias name="FieldSettings">ezp\Content\FieldType\FieldSettings</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="19">
      <name>Float</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Float</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="21">
        <name>FLOAT_VALIDATOR_FQN</name>
        <value><![CDATA['ezp\\Content\\FieldType\\Float\\FloatValueValidator']]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="23">
        <name>NO_MIN_MAX_VALUE</name>
        <value><![CDATA[0]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="24">
        <name>HAS_MIN_VALUE</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="25">
        <name>HAS_MAX_VALUE</name>
        <value><![CDATA[2]]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="33" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="27" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$storageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="33">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="45" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="39" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="45">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="57" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="51" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="57">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="80" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="74" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="80">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="117" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="108">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="108" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="133" package="Default">
        <name>getStorageDefValidatorState</name>
        <type>function</type>
        <docblock line="122">
          <description><![CDATA[Returns validator state for storage definition.]]></description>
          <long-description><![CDATA[<p>Validator state is a bitfield value composed of:
  - {@link self::NO_MIN_MAX_VALUE}
  - {@link self::HAS_MAX_VALUE}
  - {@link self::HAS_MIN_VALUE}</p>]]></long-description>
          <tag line="122" name="param" description="Minimum int value, or null if not set" type="int|null" variable="$minValue">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="122" name="param" description="Maximum int value, or null if not set" type="int|null" variable="$maxValue">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="122" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="133">
          <name>$minValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="133">
          <name>$maxValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Selection.php" hash="fd8e1f621c7b5adeb1555dcfabe070ee">
    <parse_markers>
      <error line="22" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="22" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="42" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="42" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="62" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="62" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="96" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="96" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="20" code="50000">No DocBlock was found for Selection</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Selection.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="FieldSettings">ezp\Content\FieldType\FieldSettings</namespace-alias>
    <namespace-alias name="SelectionValue">ezp\Content\FieldType\Selection\Value</namespace-alias>
    <namespace-alias name="DOMDocument">DOMDocument</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="20">
      <name>Selection</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Selection</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="28" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="22">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="22" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$storageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="28">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="48" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="42" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="48">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="68" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="62" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="68">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="102" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="96">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="96" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="96" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="102">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="128" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="119">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="119" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Exception/NotFound.php" hash="a7c49f4716446eaa3deba31bd420fc99">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Exception/NotFound.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Exception" line="16" package="Default">
      <name>NotFound</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Exception\NotFound</full_name>
      <extends>\InvalidArgumentException</extends>
      <docblock line="13">
        <description><![CDATA[Exception thrown if no converter for a type was found]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Exception" line="23" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Creates a new exception for $typeName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="" type="mixed" variable="$typeName">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$typeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Checkbox.php" hash="6b6c21b5eb17e930492768bf6795b271">
    <parse_markers>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="45" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="45" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="56" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="56" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="19" code="50000">No DocBlock was found for Checkbox</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Checkbox.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="CheckboxValue">ezp\Content\FieldType\Checkbox\Value</namespace-alias>
    <namespace-alias name="FieldSettings">ezp\Content\FieldType\FieldSettings</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="19">
      <name>Checkbox</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Checkbox</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="27" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="21" name="param" description="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" type="" variable="$storageFieldValue"/>
        </docblock>
        <argument line="27">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="27">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="39" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="39">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="51" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="45" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="51">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="62" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="56">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="56" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="56" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="62">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="82" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="73" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/UrlStorage.php" hash="a5eaee09e3ce017a91878d8282f6e6bc">
    <parse_markers>
      <error line="24" code="50012">No short description for method storeFieldData()</error>
      <error line="24" code="50015">Argument $field is missing from the Docblock of storeFieldData()</error>
      <error line="24" code="50015">Argument $context is missing from the Docblock of storeFieldData()</error>
      <error line="41" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in getFieldData()</error>
      <error line="58" code="50012">No short description for method deleteFieldData()</error>
      <error line="77" code="50012">No short description for method copyFieldData()</error>
      <error line="77" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in copyFieldData()</error>
      <error line="85" code="50012">No short description for method getIndexData()</error>
      <error line="85" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in getIndexData()</error>
      <error line="93" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dbHandler in fetchById()</error>
      <error line="120" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dbHandler in fetchByLink()</error>
      <error line="147" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in insert()</error>
      <error line="147" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dbHandler in insert()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/UrlStorage.php</error>
    </parse_markers>
    <namespace-alias name="Storage">ezp\Persistence\Fields\Storage</namespace-alias>
    <namespace-alias name="Field">ezp\Persistence\Content\Field</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="UrlValue">ezp\Content\FieldType\Url\Value</namespace-alias>
    <namespace-alias name="ContentType">ezp\Io\ContentType</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="20" package="Default">
      <name>UrlStorage</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\UrlStorage</full_name>
      <extends/>
      <extends>\ezp\Persistence\Fields\Storage</extends>
      <docblock line="17">
        <description><![CDATA[Converter for Url field type external storage]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="22">
        <name>URL_TABLE</name>
        <value><![CDATA["ezurl"]]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="27" package="Default">
        <name>storeFieldData</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="see" description="\ezp\Persistence\Fields\Storage" refers="\ezp\Persistence\Fields\Storage"/>
        </docblock>
        <argument line="27">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="27">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="51" package="Default">
        <name>getFieldData</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[Populates $field value property based on the external data.]]></description>
          <long-description><![CDATA[<p>$field->value is a {@link ezp\Persistence\Content\FieldValue} object.
This value holds the data as a {@link ezp\Content\FieldType\Value} based object,
according to the field type (e.g. for TextLine, it will be a {@link ezp\Content\FieldType\TextLine\Value} object).</p>]]></long-description>
          <tag line="41" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="41" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="41" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="51">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="63" package="Default">
        <name>deleteFieldData</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="param" description="" type="array" variable="$fieldId">
            <type by_reference="false">array</type>
          </tag>
          <tag line="58" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="58" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$fieldId</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="63">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="72" package="Default">
        <name>hasFieldData</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[Checks if field type has external data to deal with]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="81" package="Default">
        <name>copyFieldData</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="77" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="77" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="81">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="89" package="Default">
        <name>getIndexData</name>
        <type>function</type>
        <docblock line="85">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="85" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="89">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="89">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="100" package="Default">
        <name>fetchById</name>
        <type>function</type>
        <docblock line="93">
          <description><![CDATA[Fetches a row in ezurl table referenced by its $id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="93" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
          <tag line="93" name="return" description="Hash with columns as keys or null if no entry can be found" type="null|array">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="100">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="127" package="Default">
        <name>fetchByLink</name>
        <type>function</type>
        <docblock line="120">
          <description><![CDATA[Fetches a row in ezurl table referenced by $link]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="120" name="param" description="" type="string" variable="$link">
            <type by_reference="false">string</type>
          </tag>
          <tag line="120" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
          <tag line="120" name="return" description="Hash with columns as keys or null if no entry can be found" type="null|array">
            <type by_reference="false">null</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$link</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="127">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="154" package="Default">
        <name>insert</name>
        <type>function</type>
        <docblock line="147">
          <description><![CDATA[Inserts a new entry in ezurl table with $field value data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="147" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="147" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
          <tag line="147" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="154">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Url.php" hash="871d9a9ff191eb9ea7bf22357febf178">
    <parse_markers>
      <error line="20" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="20" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="31" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="31" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="44" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="44" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="54" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="54" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="18" code="50000">No DocBlock was found for Url</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Url.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="UrlValue">ezp\Content\FieldType\Url\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="18">
      <name>Url</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Url</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="26" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="20" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$storageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="26">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="37" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="31" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="37">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="50" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="44" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="50">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="60" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="54" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="60">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="60">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="73" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="64">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="64" name="return" description="" type="false">
            <type by_reference="false">false</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/MediaStorage.php" hash="872cba469007ac75106e15999bf0ab97">
    <parse_markers>
      <error line="24" code="50012">No short description for method storeFieldData()</error>
      <error line="24" code="50015">Argument $field is missing from the Docblock of storeFieldData()</error>
      <error line="24" code="50015">Argument $context is missing from the Docblock of storeFieldData()</error>
      <error line="36" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in getFieldData()</error>
      <error line="69" code="50012">No short description for method deleteFieldData()</error>
      <error line="89" code="50012">No short description for method copyFieldData()</error>
      <error line="89" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in copyFieldData()</error>
      <error line="98" code="50012">No short description for method getIndexData()</error>
      <error line="98" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in getIndexData()</error>
      <error line="107" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dbHandler in fetch()</error>
      <error line="135" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in insert()</error>
      <error line="135" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dbHandler in insert()</error>
      <error line="194" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $field in update()</error>
      <error line="194" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dbHandler in update()</error>
      <error line="250" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $dbHandler in mediaExists()</error>
      <notice line="250" code="50017">The type for the @param tag in mediaExists() is "type"; isn't this an IDE default?</notice>
      <notice line="250" code="50017">The type for the @param tag in mediaExists() is "type"; isn't this an IDE default?</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/MediaStorage.php</error>
    </parse_markers>
    <namespace-alias name="Storage">ezp\Persistence\Fields\Storage</namespace-alias>
    <namespace-alias name="Field">ezp\Persistence\Content\Field</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="MediaValue">ezp\Content\FieldType\Media\Value</namespace-alias>
    <namespace-alias name="ContentType">ezp\Io\ContentType</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="20" package="Default">
      <name>MediaStorage</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\MediaStorage</full_name>
      <extends/>
      <extends>\ezp\Persistence\Fields\Storage</extends>
      <docblock line="17">
        <description><![CDATA[Converter for Media field type external storage]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="22">
        <name>MEDIA_TABLE</name>
        <value><![CDATA['ezmedia']]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="27" package="Default">
        <name>storeFieldData</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="see" description="\ezp\Persistence\Fields\Storage" refers="\ezp\Persistence\Fields\Storage"/>
        </docblock>
        <argument line="27">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="27">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="46" package="Default">
        <name>getFieldData</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Populates $field value property based on the external data.]]></description>
          <long-description><![CDATA[<p>$field->value is a {@link ezp\Persistence\Content\FieldValue} object.
This value holds the data as a {@link ezp\Content\FieldType\Value} based object,
according to the field type (e.g. for TextLine, it will be a {@link ezp\Content\FieldType\TextLine\Value} object).</p>]]></long-description>
          <tag line="36" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="36" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="36" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="46">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="74" package="Default">
        <name>deleteFieldData</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="param" description="" type="array" variable="$fieldId">
            <type by_reference="false">array</type>
          </tag>
          <tag line="69" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
          <tag line="69" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$fieldId</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="74">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="84" package="Default">
        <name>hasFieldData</name>
        <type>function</type>
        <docblock line="79">
          <description><![CDATA[Checks if field type has external data to deal with]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="93" package="Default">
        <name>copyFieldData</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="89" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="93">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="102" package="Default">
        <name>getIndexData</name>
        <type>function</type>
        <docblock line="98">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="98" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="98" name="param" description="" type="array" variable="$context">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="102">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="115" package="Default">
        <name>fetch</name>
        <type>function</type>
        <docblock line="107">
          <description><![CDATA[Fetches a row in ezmedia table referenced by $fieldId and $versionNo]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="107" name="param" description="" type="" variable="$fieldId"/>
          <tag line="107" name="param" description="" type="" variable="$versionNo"/>
          <tag line="107" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
          <tag line="107" name="return" description="Hash with columns as keys or void if no entry can be found" type="void|array">
            <type by_reference="false">void</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$fieldId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="115">
          <name>$versionNo</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="115">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="142" package="Default">
        <name>insert</name>
        <type>function</type>
        <docblock line="135">
          <description><![CDATA[Inserts a new entry in ezmedia table with $field value data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="135" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="135" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
          <tag line="135" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="142">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="201" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="194">
          <description><![CDATA[Updates an existing entry in ezmedia table with $field value data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="194" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="194" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
          <tag line="194" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="201">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="258" package="Default">
        <name>mediaExists</name>
        <type>function</type>
        <docblock line="250">
          <description><![CDATA[Checks if an entry exists in ezmedia table with $fieldId and $version as keys]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="250" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\type" variable="$fieldId">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\type</type>
          </tag>
          <tag line="250" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\type" variable="$version">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\type</type>
          </tag>
          <tag line="250" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$dbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
          <tag line="250" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="258">
          <name>$fieldId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="258">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="258">
          <name>$dbHandler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/XmlText.php" hash="31b92b881773867c055803808b84ff75">
    <parse_markers>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="32" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="43" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in toStorageFieldDefinition()</error>
      <error line="43" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDefinition in toStorageFieldDefinition()</error>
      <error line="55" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDefinition in toFieldDefinition()</error>
      <error line="55" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in toFieldDefinition()</error>
      <error line="19" code="50000">No DocBlock was found for XmlText</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/XmlText.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="XmlTextValue">ezp\Content\FieldType\XmlText\Value</namespace-alias>
    <namespace-alias name="FieldSettings">ezp\Content\FieldType\FieldSettings</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="19">
      <name>XmlText</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\XmlText</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="27" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$storageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="27">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="38" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="32">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="32" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="38">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="49" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Converts field definition data from $fieldDefinition into $storageFieldDefinition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="43" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDefinition">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="49">
          <name>$storageDefinition</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="61" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Converts field definition data from $storageDefinition into $fieldDefinition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDefinition">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="55" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$storageDefinition</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="61">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="81" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="72">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="72" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/TextLine.php" hash="171afdc3177d2ccbb1c1b74151623822">
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="37" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="37" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="50" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="50" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="70" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="70" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="19" code="50000">No DocBlock was found for TextLine</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/TextLine.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="TextLineValue">ezp\Content\FieldType\TextLine\Value</namespace-alias>
    <namespace-alias name="FieldSettings">ezp\Content\FieldType\FieldSettings</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="19">
      <name>TextLine</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\TextLine</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="21">
        <name>STRING_LENGTH_VALIDATOR_FQN</name>
        <value><![CDATA['ezp\\Content\\FieldType\\TextLine\\StringLengthValidator']]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="29" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="23" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$storageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="29">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="43" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="37" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="43">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="56" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="50">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="50" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="50" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="56">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="76" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="70">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="70" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="70" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="76">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="76">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="97" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="88">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="88" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Integer.php" hash="822e565ad3a32b38d61588ec8ffcf739">
    <parse_markers>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="51" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="51" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="74" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="74" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="19" code="50000">No DocBlock was found for Integer</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Integer.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="IntegerValue">ezp\Content\FieldType\Integer\Value</namespace-alias>
    <namespace-alias name="FieldSettings">ezp\Content\FieldType\FieldSettings</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="19">
      <name>Integer</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Integer</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="21">
        <name>INTEGER_VALIDATOR_FQN</name>
        <value><![CDATA['ezp\\Content\\FieldType\\Integer\\IntegerValueValidator']]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="23">
        <name>NO_MIN_MAX_VALUE</name>
        <value><![CDATA[0]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="24">
        <name>HAS_MIN_VALUE</name>
        <value><![CDATA[1]]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="25">
        <name>HAS_MAX_VALUE</name>
        <value><![CDATA[2]]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="33" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="27" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$storageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="33">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="45" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="39" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="45">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="57" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="51" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="57">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="80" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="74" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="80">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="119" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="110">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="110" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="135" package="Default">
        <name>getStorageDefValidatorState</name>
        <type>function</type>
        <docblock line="124">
          <description><![CDATA[Returns validator state for storage definition.]]></description>
          <long-description><![CDATA[<p>Validator state is a bitfield value composed of:
  - {@link self::NO_MIN_MAX_VALUE}
  - {@link self::HAS_MAX_VALUE}
  - {@link self::HAS_MIN_VALUE}</p>]]></long-description>
          <tag line="124" name="param" description="Minimum int value, or null if not set" type="int|null" variable="$minValue">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="124" name="param" description="Maximum int value, or null if not set" type="int|null" variable="$maxValue">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="124" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="135">
          <name>$minValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="135">
          <name>$maxValue</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/NullStorage.php" hash="32fbc01eef004ea08d29b196dbe32137">
    <parse_markers>
      <error line="19" code="50012">No short description for method storeFieldData()</error>
      <error line="19" code="50015">Argument $field is missing from the Docblock of storeFieldData()</error>
      <error line="19" code="50015">Argument $context is missing from the Docblock of storeFieldData()</error>
      <error line="27" code="50012">No short description for method getFieldData()</error>
      <error line="27" code="50015">Argument $field is missing from the Docblock of getFieldData()</error>
      <error line="27" code="50015">Argument $context is missing from the Docblock of getFieldData()</error>
      <error line="35" code="50012">No short description for method deleteFieldData()</error>
      <error line="35" code="50015">Argument $fieldId is missing from the Docblock of deleteFieldData()</error>
      <error line="35" code="50015">Argument $context is missing from the Docblock of deleteFieldData()</error>
      <error line="44" code="50012">No short description for method hasFieldData()</error>
      <error line="53" code="50012">No short description for method copyFieldData()</error>
      <error line="53" code="50015">Argument $field is missing from the Docblock of copyFieldData()</error>
      <error line="53" code="50015">Argument $context is missing from the Docblock of copyFieldData()</error>
      <error line="61" code="50012">No short description for method getIndexData()</error>
      <error line="61" code="50015">Argument $field is missing from the Docblock of getIndexData()</error>
      <error line="61" code="50015">Argument $context is missing from the Docblock of getIndexData()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/NullStorage.php</error>
    </parse_markers>
    <namespace-alias name="Storage">ezp\Persistence\Fields\Storage</namespace-alias>
    <namespace-alias name="Field">ezp\Persistence\Content\Field</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="17" package="Default">
      <name>NullStorage</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\NullStorage</full_name>
      <extends/>
      <extends>\ezp\Persistence\Fields\Storage</extends>
      <docblock line="14">
        <description><![CDATA[Description of NullStorage]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="22" package="Default">
        <name>storeFieldData</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="see" description="\ezp\Persistence\Fields\Storage::storeFieldData()" refers="\ezp\Persistence\Fields\Storage::storeFieldData()"/>
        </docblock>
        <argument line="22">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="22">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="30" package="Default">
        <name>getFieldData</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="see" description="\ezp\Persistence\Fields\Storage::getFieldData()" refers="\ezp\Persistence\Fields\Storage::getFieldData()"/>
        </docblock>
        <argument line="30">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="30">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="39" package="Default">
        <name>deleteFieldData</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="see" description="\ezp\Persistence\Fields\Storage::deleteFieldData()" refers="\ezp\Persistence\Fields\Storage::deleteFieldData()"/>
          <tag line="35" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$fieldId</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="39">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="48" package="Default">
        <name>hasFieldData</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="see" description="\ezp\Persistence\Fields\Storage::hasFieldData()" refers="\ezp\Persistence\Fields\Storage::hasFieldData()"/>
          <tag line="44" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="56" package="Default">
        <name>copyFieldData</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="see" description="\ezp\Persistence\Fields\Storage::copyFieldData()" refers="\ezp\Persistence\Fields\Storage::copyFieldData()"/>
        </docblock>
        <argument line="56">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="56">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="64" package="Default">
        <name>getIndexData</name>
        <type>function</type>
        <docblock line="61">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="61" name="see" description="\ezp\Persistence\Fields\Storage::getIndexData()" refers="\ezp\Persistence\Fields\Storage::getIndexData()"/>
        </docblock>
        <argument line="64">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="64">
          <name>$context</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Country.php" hash="2791177adfcfd009901bb966885b2958">
    <parse_markers>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="23" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="44" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="44" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="55" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="55" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="75" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="75" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="21" code="50000">No DocBlock was found for Country</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Country.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="InvalidValue">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Exception\InvalidValue</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="FieldSettings">ezp\Content\FieldType\FieldSettings</namespace-alias>
    <namespace-alias name="CountryValue">ezp\Content\FieldType\Country\Value</namespace-alias>
    <namespace-alias name="DOMDocument">DOMDocument</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="21">
      <name>Country</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Country</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="30" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="23" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$storageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="23" name="throws" description="if a value cannot be converted" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Exception\InvalidValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Exception\InvalidValue</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="30">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="50" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="44" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="50">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="61" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="55" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="61">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="81" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="75" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="81">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="100" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="91">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="91" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Keyword.php" hash="c77bb929395f6a04a99db2a3566a5645">
    <parse_markers>
      <error line="20" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="20" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="30" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="30" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="41" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="41" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="51" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="51" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="18" code="50000">No DocBlock was found for Keyword</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Keyword.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="KeywordValue">ezp\Content\FieldType\Keyword\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="18">
      <name>Keyword</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Keyword</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="26" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="20" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$storageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="26">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="36" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="30" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="36">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="47" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="41" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="47">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="57" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="51" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="57">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="70" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="61">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="61" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/BinaryFile.php" hash="a317157990ff58ebcecdbd7108f6ee97">
    <parse_markers>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="21" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="33" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="44" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="44" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="58" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="58" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="17" code="50000">No DocBlock was found for BinaryFile</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/BinaryFile.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="17">
      <name>BinaryFile</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\BinaryFile</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <constant namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="19">
        <name>FILESIZE_VALIDATOR_FQN</name>
        <value><![CDATA['ezp\\Content\\FieldType\\BinaryFile\\FileSizeValidator']]></value>
      </constant>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="28" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="21">
          <description><![CDATA[Converts data from $value to $storageFieldValue.]]></description>
          <long-description><![CDATA[<p>Nothing has to be stored for eZBinaryFile, as everything has to be stored in an external table.</p>]]></long-description>
          <tag line="21" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="21" name="param" description="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" type="" variable="$storageFieldValue"/>
        </docblock>
        <argument line="28">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="28">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="39" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="33" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="39">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="50" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="44" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="50">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="64" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="58" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="64">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="83" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="74" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Rating.php" hash="5ffefb061ab94121f31d71db3303ba56">
    <parse_markers>
      <error line="20" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toStorageValue()</error>
      <error line="20" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldValue in toStorageValue()</error>
      <error line="31" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $value in toFieldValue()</error>
      <error line="31" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldValue in toFieldValue()</error>
      <error line="42" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="42" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toStorageFieldDefinition()</error>
      <error line="52" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageDef in toFieldDefinition()</error>
      <error line="52" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="18" code="50000">No DocBlock was found for Rating</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/FieldValue/Converter/Rating.php</error>
    </parse_markers>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="RatingValue">ezp\Content\FieldType\Rating\Value</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="18">
      <name>Rating</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Rating</full_name>
      <extends/>
      <extends>\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</extends>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="26" package="Default">
        <name>toStorageValue</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Converts data from $value to $storageFieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
          <tag line="20" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$storageFieldValue">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
        <argument line="26">
          <name>$storageFieldValue</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="37" package="Default">
        <name>toFieldValue</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[Converts data from $value to $fieldValue]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="31" name="param" description="" type="\ezp\Persistence\Content\FieldValue" variable="$fieldValue">
            <type by_reference="false">\ezp\Persistence\Content\FieldValue</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="37">
          <name>$fieldValue</name>
          <default><![CDATA[]]></default>
          <type>FieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="48" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Converts field definition data in $fieldDef into $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="42" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="48">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="58" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Converts field definition data in $storageDef into $fieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="52" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$storageDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="58">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter" line="71" package="Default">
        <name>getIndexColumn</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Returns the name of the index column in the attribute table]]></description>
          <long-description><![CDATA[<p>Returns the name of the index column the datatype uses, which is either
"sort_key_int" or "sort_key_string". This column is then used for
filtering and sorting for this type.</p>]]></long-description>
          <tag line="62" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Gateway.php" hash="330ee89fc20647a12c1b5fcc07d567a5">
    <parse_markers>
      <error line="31" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in insertContentObject()</error>
      <error line="39" code="50014">Name of argument $version does not match with the DocBlock's name $version; in insertVersion()</error>
      <error line="39" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fields in insertVersion()</error>
      <notice line="39" code="50013">Parameter $version; could not be found in insertVersion()</notice>
      <error line="99" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in updateNonTranslatableField()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Gateway.php</error>
    </parse_markers>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\UpdateStruct</namespace-alias>
    <namespace-alias name="Version">ezp\Persistence\Content\Version</namespace-alias>
    <namespace-alias name="Field">ezp\Persistence\Content\Field</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Storage\Legacy\Content" line="22" package="Default">
      <name>Gateway</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Gateway</full_name>
      <extends/>
      <docblock line="19">
        <description><![CDATA[Base class for contentg gateways]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="29" package="Default">
        <name>getContext</name>
        <type>function</type>
        <docblock line="24">
          <description><![CDATA[Get context definition for external storage layers]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="24" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="37" package="Default">
        <name>insertContentObject</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[Inserts a new content object.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="param" description="" type="\ezp\Persistence\Content\CreateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\CreateStruct</type>
          </tag>
          <tag line="31" name="return" description="ID" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="47" package="Default">
        <name>insertVersion</name>
        <type>function</type>
        <docblock line="39">
          <description><![CDATA[Inserts a new version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="param" description="" type="\ezp\Persistence\Content\Version" variable="$version;">
            <type by_reference="false">\ezp\Persistence\Content\Version</type>
          </tag>
          <tag line="39" name="param" description="" type="\ezp\Persistence\Content\Field[]" variable="$fields">
            <type by_reference="false">\ezp\Persistence\Content\Field[]</type>
          </tag>
          <tag line="39" name="param" description="" type="boolean" variable="$alwaysAvailable">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="39" name="return" description="ID" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type>Version</type>
        </argument>
        <argument line="47">
          <name>$fields</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="47">
          <name>$alwaysAvailable</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="55" package="Default">
        <name>updateContent</name>
        <type>function</type>
        <docblock line="49">
          <description><![CDATA[Updates the content object in respect to $struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="param" description="" type="\ezp\Persistence\Content\UpdateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\UpdateStruct</type>
          </tag>
          <tag line="49" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="63" package="Default">
        <name>updateVersion</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[Updates the version of a Content object in respect to $struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="param" description="" type="\ezp\Persistence\Content\UpdateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\UpdateStruct</type>
          </tag>
          <tag line="57" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="75" package="Default">
        <name>setStatus</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Sets the state of object identified by $contentId and $version to $state.]]></description>
          <long-description><![CDATA[<p>The $status can be one of STATUS_DRAFT, STATUS_PUBLISHED, STATUS_ARCHIVED</p>]]></long-description>
          <tag line="65" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="65" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="65" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="65" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="75">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="75">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="88" package="Default">
        <name>insertNewField</name>
        <type>function</type>
        <docblock line="77">
          <description><![CDATA[Inserts a new field.]]></description>
          <long-description><![CDATA[<p>Only used when a new content object is created. After that, field IDs
need to stay the same, only the version number changes.</p>]]></long-description>
          <tag line="77" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="77" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="77" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="77" name="return" description="ID" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
        <argument line="88">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="88">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="97" package="Default">
        <name>updateField</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Updates an existing field]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="90" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="90" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="97">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="107" package="Default">
        <name>updateNonTranslatableField</name>
        <type>function</type>
        <docblock line="99">
          <description><![CDATA[Updates an existing, non-translatable field]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="99" name="param" description="" type="\ezp\Persistence\Content\Field" variable="$field">
            <type by_reference="false">\ezp\Persistence\Content\Field</type>
          </tag>
          <tag line="99" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue" variable="$value">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</type>
          </tag>
          <tag line="99" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="99" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$field</name>
          <default><![CDATA[]]></default>
          <type>Field</type>
        </argument>
        <argument line="109">
          <name>$value</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldValue</type>
        </argument>
        <argument line="110">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="122" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Load data for a content object]]></description>
          <long-description><![CDATA[<p>Returns an array with the relevant data.</p>]]></long-description>
          <tag line="112" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="112" name="param" description="" type="mixed" variable="$version">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="112" name="param" description="" type="\string[]" variable="$translations">
            <type by_reference="false">\string[]</type>
          </tag>
          <tag line="112" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="122">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="122">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="122">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="130" package="Default">
        <name>listVersions</name>
        <type>function</type>
        <docblock line="124">
          <description><![CDATA[Returns all version data for the given $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="124" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="124" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\string[][]</type>
          </tag>
        </docblock>
        <argument line="130">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="138" package="Default">
        <name>getAllLocationIds</name>
        <type>function</type>
        <docblock line="132">
          <description><![CDATA[Returns all IDs for locations that refer to $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="132" name="return" description="" type="\int[]">
            <type by_reference="false">\int[]</type>
          </tag>
        </docblock>
        <argument line="138">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="146" package="Default">
        <name>getFieldIdsByType</name>
        <type>function</type>
        <docblock line="140">
          <description><![CDATA[Returns all field IDs of $contentId grouped by their type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="140" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="140" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\int[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\int[][]</type>
          </tag>
        </docblock>
        <argument line="146">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="154" package="Default">
        <name>deleteRelations</name>
        <type>function</type>
        <docblock line="148">
          <description><![CDATA[Deletes relations to and from $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="148" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="148" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="163" package="Default">
        <name>deleteField</name>
        <type>function</type>
        <docblock line="156">
          <description><![CDATA[Deletes the field with the given $fieldId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="156" name="param" description="" type="int" variable="$fieldId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="156" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="156" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="163">
          <name>$fieldId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="163">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="171" package="Default">
        <name>deleteFields</name>
        <type>function</type>
        <docblock line="165">
          <description><![CDATA[Deletes all fields of $contentId in all versions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="165" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="165" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="171">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="179" package="Default">
        <name>deleteVersions</name>
        <type>function</type>
        <docblock line="173">
          <description><![CDATA[Deletes all versions of $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="173" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="179">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="187" package="Default">
        <name>deleteNames</name>
        <type>function</type>
        <docblock line="181">
          <description><![CDATA[Deletes all names of $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="181" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="181" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="198" package="Default">
        <name>setName</name>
        <type>function</type>
        <docblock line="189">
          <description><![CDATA[Sets the content object name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="189" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="189" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="189" name="param" description="" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="189" name="param" description="" type="string" variable="$language">
            <type by_reference="false">string</type>
          </tag>
          <tag line="189" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="198">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="198">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="198">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="198">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="206" package="Default">
        <name>deleteContent</name>
        <type>function</type>
        <docblock line="200">
          <description><![CDATA[Deletes the actual content object referred to by $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="200" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="200" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="206">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content" line="215" package="Default">
        <name>loadLatestPublishedData</name>
        <type>function</type>
        <docblock line="208">
          <description><![CDATA[Loads data for the latest published version of the content identified by
$contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="208" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="208" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="215">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Type/ContentUpdater/Action/RemoveField.php" hash="d68578756c67e150b6bc857b502160da">
    <parse_markers>
      <error line="28" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentGateway in __construct()</error>
      <error line="28" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Type/ContentUpdater/Action/RemoveField.php</error>
    </parse_markers>
    <namespace-alias name="Action">ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action</namespace-alias>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="ContentGateway">ezp\Persistence\Storage\Legacy\Content\Gateway</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action" line="19" package="Default">
      <name>RemoveField</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action\RemoveField</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action</extends>
      <docblock line="16">
        <description><![CDATA[Action to remove a field from content objects]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" package="Default">
        <name>$fieldDefinition</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[Field definition of the field to add]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action" line="34" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="28">
          <description><![CDATA[Creates a new action]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway" variable="$contentGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway</type>
          </tag>
          <tag line="28" name="param" description="\ezp\Persistence\Content\Type\FieldDefinition" type="" variable="$fieldDef"/>
        </docblock>
        <argument line="35">
          <name>$contentGateway</name>
          <default><![CDATA[]]></default>
          <type>ContentGateway</type>
        </argument>
        <argument line="36">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action" line="48" package="Default">
        <name>apply</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[Applies the action to the given $content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="41" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="41" name="todo" description="Handle external field data."/>
        </docblock>
        <argument line="48">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Type/ContentUpdater/Action/AddField.php" hash="5f20db4c13ebef91782a15a1cb16efaa">
    <parse_markers>
      <error line="37" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentGateway in __construct()</error>
      <error line="37" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in __construct()</error>
      <error line="37" code="50015">Argument $converter is missing from the Docblock of __construct()</error>
      <error line="79" code="50012">No short description for method createField()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Type/ContentUpdater/Action/AddField.php</error>
    </parse_markers>
    <namespace-alias name="Action">ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action</namespace-alias>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="Converter">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</namespace-alias>
    <namespace-alias name="StorageFieldValue">ezp\Persistence\Storage\Legacy\Content\StorageFieldValue</namespace-alias>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Gateway</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action" line="21" package="Default">
      <name>AddField</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action\AddField</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action</extends>
      <docblock line="18">
        <description><![CDATA[Action to add a field to content objects]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$fieldDefinition</name>
        <default><![CDATA[]]></default>
        <docblock line="23">
          <description><![CDATA[Field definition of the field to add]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$fieldValueConverter</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[Field value converter]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action" line="43" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Creates a new action]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway" variable="$contentGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway</type>
          </tag>
          <tag line="37" name="param" description="\ezp\Persistence\Content\Type\FieldDefinition" type="" variable="$fieldDef"/>
        </docblock>
        <argument line="44">
          <name>$contentGateway</name>
          <default><![CDATA[]]></default>
          <type>Gateway</type>
        </argument>
        <argument line="45">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="46">
          <name>$converter</name>
          <default><![CDATA[]]></default>
          <type>Converter</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action" line="60" package="Default">
        <name>apply</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[Applies the action to the given $content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="53" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="53" name="todo" description="Handle external field data"/>
        </docblock>
        <argument line="60">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action" line="85" package="Default">
        <name>createField</name>
        <type>function</type>
        <docblock line="79">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="79" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Type/ContentUpdater/Action.php" hash="ca1fb9ee2dff09e984957660b3445d52">
    <parse_markers>
      <error line="26" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentGateway in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Type/ContentUpdater/Action.php</error>
    </parse_markers>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="ContentGateway">ezp\Persistence\Storage\Legacy\Content\Gatway</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater" line="17" package="Default">
      <name>Action</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action</full_name>
      <extends/>
      <docblock line="14">
        <description><![CDATA[Updater action base class]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" package="Default">
        <name>$contentGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="19">
          <description><![CDATA[Content gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater" line="31" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Creates a new action]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway" variable="$contentGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$contentGateway</name>
          <default><![CDATA[]]></default>
          <type>ContentGateway</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater" line="42" package="Default">
        <name>apply</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Applies the action to the given $content]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="36" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Type/Gateway/EzcDatabase.php" hash="e322d0869559a4ebcda482817121743b">
    <markers>
      <fixme line="708">Actually not needed</fixme>
      <fixme line="748">Actually not needed</fixme>
    </markers>
    <parse_markers>
      <error line="99" code="50015">Argument $languageMaskGenerator is missing from the Docblock of __construct()</error>
      <error line="110" code="50015">Argument $group is missing from the Docblock of insertGroup()</error>
      <error line="147" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $group in updateGroup()</error>
      <error line="269" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $languages in insertTypeNameData()</error>
      <error line="310" code="50014">Name of argument $type does not match with the DocBlock's name $createStruct in insertType()</error>
      <notice line="310" code="50013">Parameter $createStruct could not be found in insertType()</notice>
      <error line="344" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $q in setCommonTypeColumns()</error>
      <error line="344" code="50014">Name of argument $type does not match with the DocBlock's name $typeStruct in setCommonTypeColumns()</error>
      <notice line="344" code="50013">Parameter $typeStruct could not be found in setCommonTypeColumns()</notice>
      <error line="561" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in insertFieldDefinition()</error>
      <error line="561" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldDef in insertFieldDefinition()</error>
      <error line="597" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $q in setCommonFieldColumns()</error>
      <error line="597" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in setCommonFieldColumns()</error>
      <error line="597" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldDef in setCommonFieldColumns()</error>
      <error line="720" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in updateFieldDefinition()</error>
      <error line="720" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldDef in updateFieldDefinition()</error>
      <error line="786" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $updateStruct in updateType()</error>
      <error line="849" code="50014">Name of argument $status does not match with the DocBlock's name $version in loadTypeDataByIdentifier()</error>
      <notice line="849" code="50013">Parameter $version could not be found in loadTypeDataByIdentifier()</notice>
      <error line="983" code="50015">Argument $status is missing from the Docblock of deleteFieldDefinitionsForType()</error>
      <error line="1010" code="50015">Argument $status is missing from the Docblock of deleteType()</error>
      <error line="1039" code="50015">Argument $status is missing from the Docblock of deleteGroupAssignementsForType()</error>
      <error line="1199" code="50014">Name of argument $q does not match with the DocBlock's name $tableName in selectColumns()</error>
      <error line="1199" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $q in selectColumns()</error>
      <error line="1199" code="50015">Argument $tableName is missing from the Docblock of selectColumns()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Type/Gateway/EzcDatabase.php</error>
    </parse_markers>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Type\Gateway</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="Language">ezp\Persistence\Storage\Legacy\Content\Language</namespace-alias>
    <namespace-alias name="MaskGenerator">ezp\Persistence\Storage\Legacy\Content\Language\MaskGenerator</namespace-alias>
    <namespace-alias name="Type">ezp\Persistence\Content\Type</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Type\UpdateStruct</namespace-alias>
    <namespace-alias name="Group">ezp\Persistence\Content\Type\Group</namespace-alias>
    <namespace-alias name="GroupUpdateStruct">ezp\Persistence\Content\Type\Group\UpdateStruct</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="ezcQuery">ezcQuery</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="27" package="Default">
      <name>EzcDatabase</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Type\Gateway\EzcDatabase</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Type\Gateway</extends>
      <docblock line="24">
        <description><![CDATA[Zeta Component Database based content type gateway.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="34" package="Default">
        <name>$columns</name>
        <default><![CDATA[array(
        'ezcontentclass' => array(
            'id',
            'always_available',
            'contentobject_name',
            'created',
            'creator_id',
            'modified',
            'modifier_id',
            'identifier',
            'initial_language_id',
            'is_container',
            'language_mask',
            'remote_id',
            'serialized_description_list',
            'serialized_name_list',
            'sort_field',
            'sort_order',
            'url_alias_name',
            'version',
        ),
        'ezcontentclass_attribute' => array(
            'id',
            'can_translate',
            'category',
            'contentclass_id',
            'data_float1',
            'data_float2',
            'data_float3',
            'data_float4',
            'data_int1',
            'data_int2',
            'data_int3',
            'data_int4',
            'data_text1',
            'data_text2',
            'data_text3',
            'data_text4',
            'data_text5',
            'data_type_string',
            'identifier',
            'is_information_collector',
            'is_required',
            'is_searchable',
            'placement',
            'serialized_data_text',
            'serialized_description_list',
            'serialized_name_list',
        ),
    )]]></default>
        <docblock line="29">
          <description><![CDATA[Columns of database tables.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="29" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="90" package="Default">
        <name>$dbHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="85">
          <description><![CDATA[Zeta Components database handler.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="85" name="var" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="97" package="Default">
        <name>$languageMaskGenerator</name>
        <default><![CDATA[]]></default>
        <docblock line="92">
          <description><![CDATA[Language mask generator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\MaskGenerator">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\MaskGenerator</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="104" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="99">
          <description><![CDATA[Creates a new gateway based on $db]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="99" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$db">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$db</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
        <argument line="104">
          <name>$languageMaskGenerator</name>
          <default><![CDATA[]]></default>
          <type>MaskGenerator</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="115" package="Default">
        <name>insertGroup</name>
        <type>function</type>
        <docblock line="110">
          <description><![CDATA[Inserts the given $group.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="return" description="Group ID" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="115">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>Group</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="153" package="Default">
        <name>updateGroup</name>
        <type>function</type>
        <docblock line="147">
          <description><![CDATA[Updates a group with data in $group.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="147" name="param" description="" type="\ezp\Persistence\Content\Type\Group\UpdateStruct" variable="$group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group\UpdateStruct</type>
          </tag>
          <tag line="147" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="153">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>GroupUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="184" package="Default">
        <name>countTypesInGroup</name>
        <type>function</type>
        <docblock line="178">
          <description><![CDATA[Returns the number of types in a certain group.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="178" name="param" description="" type="int" variable="$groupId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="178" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="184">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="216" package="Default">
        <name>countGroupsForType</name>
        <type>function</type>
        <docblock line="209">
          <description><![CDATA[Returns the number of Groups the type is assigned to.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="209" name="param" description="" type="int" variable="$typeId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="209" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="209" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="216">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="216">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="255" package="Default">
        <name>deleteGroup</name>
        <type>function</type>
        <docblock line="249">
          <description><![CDATA[Deletes the Group with the given $groupId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="249" name="param" description="" type="int" variable="$groupId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="249" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="255">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="277" package="Default">
        <name>insertTypeNameData</name>
        <type>function</type>
        <docblock line="269">
          <description><![CDATA[Inserts data into contentclass_name.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="269" name="param" description="" type="int" variable="$typeId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="269" name="param" description="" type="int" variable="$typeStatus">
            <type by_reference="false">int</type>
          </tag>
          <tag line="269" name="param" description="" type="\string[]" variable="$languages">
            <type by_reference="false">\string[]</type>
          </tag>
          <tag line="269" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="277">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="277">
          <name>$typeStatus</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="277">
          <name>$languages</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="316" package="Default">
        <name>insertType</name>
        <type>function</type>
        <docblock line="310">
          <description><![CDATA[Inserts a new conten type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="310" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$createStruct">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="310" name="return" description="Type ID" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="316">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="351" package="Default">
        <name>setCommonTypeColumns</name>
        <type>function</type>
        <docblock line="344">
          <description><![CDATA[Set common columns for insert/update of a Type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="344" name="param" description="" type="\ezcQuery" variable="$q">
            <type by_reference="false">\ezcQuery</type>
          </tag>
          <tag line="344" name="param" description="" type="mixed" variable="$typeStruct">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="344" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="351">
          <name>$q</name>
          <default><![CDATA[]]></default>
          <type>ezcQuery</type>
        </argument>
        <argument line="351">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="410" package="Default">
        <name>insertGroupAssignement</name>
        <type>function</type>
        <docblock line="402">
          <description><![CDATA[Insert assignement of $typeId to $groupId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="402" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="402" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="402" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="402" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="410">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="410">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="410">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="444" package="Default">
        <name>deleteGroupAssignement</name>
        <type>function</type>
        <docblock line="436">
          <description><![CDATA[Deletes a group assignements for a Type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="436" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="436" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="436" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="436" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="444">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="444">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="444">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="475" package="Default">
        <name>loadGroupData</name>
        <type>function</type>
        <docblock line="469">
          <description><![CDATA[Loads data about Group with $groupId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="469" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="469" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway\string[][]</type>
          </tag>
        </docblock>
        <argument line="475">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="495" package="Default">
        <name>loadAllGroupsData</name>
        <type>function</type>
        <docblock line="490">
          <description><![CDATA[Returns an array with data about all Group objects.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="490" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway\string[][]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="510" package="Default">
        <name>createGroupLoadQuery</name>
        <type>function</type>
        <docblock line="505">
          <description><![CDATA[Creates the basic query to load Group data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="505" name="return" description="" type="\ezcQuerySelect">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="533" package="Default">
        <name>loadTypesDataForGroup</name>
        <type>function</type>
        <docblock line="526">
          <description><![CDATA[Loads data for all Types in $status in $groupId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="526" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="526" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="526" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway\string[][]</type>
          </tag>
        </docblock>
        <argument line="533">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="533">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="570" package="Default">
        <name>insertFieldDefinition</name>
        <type>function</type>
        <docblock line="561">
          <description><![CDATA[Inserts a $fieldDefinition for $typeId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="561" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="561" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="561" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="561" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageFieldDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="561" name="return" description="Field definition ID" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="571">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="571">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="571">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="572">
          <name>$storageFieldDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="605" package="Default">
        <name>setCommonFieldColumns</name>
        <type>function</type>
        <docblock line="597">
          <description><![CDATA[Set common columns for insert/update of FieldDefinition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="597" name="param" description="" type="\ezcQuery" variable="$q">
            <type by_reference="false">\ezcQuery</type>
          </tag>
          <tag line="597" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="597" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageFieldDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="597" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="606">
          <name>$q</name>
          <default><![CDATA[]]></default>
          <type>ezcQuery</type>
        </argument>
        <argument line="606">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="607">
          <name>$storageFieldDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="693" package="Default">
        <name>deleteFieldDefinition</name>
        <type>function</type>
        <docblock line="685">
          <description><![CDATA[Deletes a field definition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="685" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="685" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="685" name="param" description="" type="mixed" variable="$fieldDefinitionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="685" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="693">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="693">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="693">
          <name>$fieldDefinitionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="730" package="Default">
        <name>updateFieldDefinition</name>
        <type>function</type>
        <docblock line="720">
          <description><![CDATA[Updates a $fieldDefinition for $typeId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="720" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="720" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="720" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="720" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageFieldDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="720" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="720" name="todo" description="Handle StorageFieldDefinition"/>
        </docblock>
        <argument line="731">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="731">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="731">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="732">
          <name>$storageFieldDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="767" package="Default">
        <name>deleteTypeNameData</name>
        <type>function</type>
        <docblock line="760">
          <description><![CDATA[Deletes all name data for $typeId in $version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="760" name="param" description="" type="int" variable="$typeId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="760" name="param" description="" type="int" variable="$typeStatus">
            <type by_reference="false">int</type>
          </tag>
          <tag line="760" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="767">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="767">
          <name>$typeStatus</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="794" package="Default">
        <name>updateType</name>
        <type>function</type>
        <docblock line="786">
          <description><![CDATA[Update a type with $updateStruct.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="786" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="786" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="786" name="param" description="" type="\ezp\Persistence\Content\Type\UpdateStruct" variable="$updateStruct">
            <type by_reference="false">\ezp\Persistence\Content\Type\UpdateStruct</type>
          </tag>
          <tag line="786" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="794">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="794">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="794">
          <name>$updateStruct</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="828" package="Default">
        <name>loadTypeData</name>
        <type>function</type>
        <docblock line="821">
          <description><![CDATA[Loads an array with data about $typeId in $status.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="821" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="821" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="821" name="return" description="Data rows." type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway\array(int=&gt;array(string=&gt;mixed))">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway\array(int=&gt;array(string=&gt;mixed))</type>
          </tag>
        </docblock>
        <argument line="828">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="828">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="857" package="Default">
        <name>loadTypeDataByIdentifier</name>
        <type>function</type>
        <docblock line="849">
          <description><![CDATA[Loads an array with data about the type referred to by $identifier in
$version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="849" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="849" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="849" name="return" description="Data rows." type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway\array(int=&gt;array(string=&gt;mixed))">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway\array(int=&gt;array(string=&gt;mixed))</type>
          </tag>
        </docblock>
        <argument line="857">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="857">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="883" package="Default">
        <name>getLoadTypeQuery</name>
        <type>function</type>
        <docblock line="878">
          <description><![CDATA[Returns a basic query to retrieve Type data.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="878" name="return" description="" type="\ezcQuerySelect">
            <type by_reference="false">\ezcQuerySelect</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="958" package="Default">
        <name>countInstancesOfType</name>
        <type>function</type>
        <docblock line="951">
          <description><![CDATA[Counts the number of instances that exists of the identified type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="951" name="param" description="" type="int" variable="$typeId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="951" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="951" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="958">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="958">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="989" package="Default">
        <name>deleteFieldDefinitionsForType</name>
        <type>function</type>
        <docblock line="983">
          <description><![CDATA[Deletes all field definitions of a Type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="983" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="983" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="989">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="989">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="1018" package="Default">
        <name>deleteType</name>
        <type>function</type>
        <docblock line="1010">
          <description><![CDATA[Deletes a the Type.]]></description>
          <long-description><![CDATA[<p>Does no delete the field definitions!</p>]]></long-description>
          <tag line="1010" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1010" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="1018">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1018">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="1045" package="Default">
        <name>deleteGroupAssignementsForType</name>
        <type>function</type>
        <docblock line="1039">
          <description><![CDATA[Deletes all group assignements for a Type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1039" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1039" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="1045">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1045">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="1075" package="Default">
        <name>publishTypeAndFields</name>
        <type>function</type>
        <docblock line="1066">
          <description><![CDATA[Publishes the Type with $typeId from $sourceVersion to $targetVersion,
including its fields]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1066" name="param" description="" type="int" variable="$typeId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="1066" name="param" description="" type="int" variable="$sourceVersion">
            <type by_reference="false">int</type>
          </tag>
          <tag line="1066" name="param" description="" type="int" variable="$targetVersion">
            <type by_reference="false">int</type>
          </tag>
          <tag line="1066" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="1075">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1075">
          <name>$sourceVersion</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1075">
          <name>$targetVersion</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="1174" package="Default">
        <name>isFieldTranslatable</name>
        <type>function</type>
        <docblock line="1166">
          <description><![CDATA[Returns if the field identified by $fieldDefinitionId and $status is
translatable]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1166" name="param" description="" type="mixed" variable="$fieldDefinitionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1166" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="1166" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="1174">
          <name>$fieldDefinitionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="1174">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Gateway" line="1205" package="Default">
        <name>selectColumns</name>
        <type>function</type>
        <docblock line="1199">
          <description><![CDATA[Creates an array of select columns for $tableName.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="1199" name="param" description="" type="string" variable="$tableName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1199" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1205">
          <name>$q</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="1205">
          <name>$tableName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Type/Update/Handler/DeferredLegacy.php" hash="568f16d3a25fe0c45c181c4477b769d8">
    <parse_markers>
      <error line="27" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeGateway in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Type/Update/Handler/DeferredLegacy.php</error>
    </parse_markers>
    <namespace-alias name="Handler">ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler</namespace-alias>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Type\Gateway</namespace-alias>
    <namespace-alias name="ContentUpdater">ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler" line="18" package="Default">
      <name>DeferredLegacy</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler\DeferredLegacy</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler</extends>
      <docblock line="15">
        <description><![CDATA[DeferredLegacy based type update handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25" package="Default">
        <name>$contentTypeGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[ezp\Persistence\Storage\Legacy\Content\Type\Gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler" line="32" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Creates a new content type update handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway" variable="$contentTypeGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$contentTypeGateway</name>
          <default><![CDATA[]]></default>
          <type>Gateway</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler" line="44" package="Default">
        <name>updateContentObjects</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Updates existing content objects from $fromType to $toType]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$fromType">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="37" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$toType">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="37" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$fromType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="44">
          <name>$toType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler" line="54" package="Default">
        <name>deleteOldType</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[Deletes $fromType and all of its field definitions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$fromType">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="48" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$fromType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler" line="65" package="Default">
        <name>publishNewType</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[Publishes $toType to $newStatus]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="58" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$toType">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="58" name="param" description="" type="int" variable="$newStatus">
            <type by_reference="false">int</type>
          </tag>
          <tag line="58" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$toType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="65">
          <name>$newStatus</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Type/Update/Handler/EzcDatabase.php" hash="eb55266a1a6762209059549381b52288">
    <parse_markers>
      <error line="34" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeGateway in __construct()</error>
      <error line="34" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentUpdater in __construct()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Type/Update/Handler/EzcDatabase.php</error>
    </parse_markers>
    <namespace-alias name="Handler">ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler</namespace-alias>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\Content\Type\Gateway</namespace-alias>
    <namespace-alias name="ContentUpdater">ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler" line="18" package="Default">
      <name>EzcDatabase</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler\EzcDatabase</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler</extends>
      <docblock line="15">
        <description><![CDATA[EzcDatabase based type update handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25" package="Default">
        <name>$contentTypeGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[ezp\Persistence\Storage\Legacy\Content\Type\Gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="32" package="Default">
        <name>$contentUpdater</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[Content updater]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler" line="40" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Creates a new content type update handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway" variable="$contentTypeGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway</type>
          </tag>
          <tag line="34" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater" variable="$contentUpdater">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$contentTypeGateway</name>
          <default><![CDATA[]]></default>
          <type>Gateway</type>
        </argument>
        <argument line="40">
          <name>$contentUpdater</name>
          <default><![CDATA[]]></default>
          <type>ContentUpdater</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler" line="53" package="Default">
        <name>updateContentObjects</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Updates existing content objects from $fromType to $toType]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$fromType">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="46" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$toType">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="46" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$fromType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="53">
          <name>$toType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler" line="65" package="Default">
        <name>deleteOldType</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Deletes $fromType and all of its field definitions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$fromType">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="59" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="65">
          <name>$fromType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler" line="82" package="Default">
        <name>publishNewType</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Publishes $toType to $newStatus]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$toType">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="75" name="param" description="" type="int" variable="$newStatus">
            <type by_reference="false">int</type>
          </tag>
          <tag line="75" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$toType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="82">
          <name>$newStatus</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Type/Update/Handler.php" hash="4f06daa70b1c15fc67f76bed3d34289d">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Type/Update/Handler.php</error>
    </parse_markers>
    <class final="false" abstract="true" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update" line="15" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[Base class for update handlers]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update" line="24" package="Default">
        <name>updateContentObjects</name>
        <type>function</type>
        <docblock line="17">
          <description><![CDATA[Updates existing content objects from $fromType to $toType]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="17" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$fromType">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="17" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$toType">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="17" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$fromType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="24">
          <name>$toType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update" line="32" package="Default">
        <name>deleteOldType</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Deletes $fromType and all of its field definitions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$fromType">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="26" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$fromType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type\Update" line="41" package="Default">
        <name>publishNewType</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Publishes $toType to $newStatus]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$toType">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="34" name="param" description="" type="int" variable="$newStatus">
            <type by_reference="false">int</type>
          </tag>
          <tag line="34" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$toType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="41">
          <name>$newStatus</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Type/Handler.php" hash="8ac3db72460ef63903275435695a7956">
    <markers>
      <fixme line="263">Return true only if deletion happened</fixme>
      <fixme line="329">What is to be returned?</fixme>
      <fixme line="344">What is to be returned?</fixme>
      <fixme line="386">Return true only if deletion happened</fixme>
    </markers>
    <parse_markers>
      <critical line="27" code="50019">No short description for property $contentTypeGateway</critical>
      <error line="46" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentTypeGateway in __construct()</error>
      <error line="46" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $mapper in __construct()</error>
      <error line="46" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $updateHandler in __construct()</error>
      <error line="63" code="50012">No short description for method createGroup()</error>
      <error line="63" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $createStruct in createGroup()</error>
      <error line="80" code="50012">No short description for method updateGroup()</error>
      <error line="80" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in updateGroup()</error>
      <error line="92" code="50012">No short description for method deleteGroup()</error>
      <error line="106" code="50012">No short description for method loadGroup()</error>
      <error line="118" code="50012">No short description for method loadAllGroups()</error>
      <error line="127" code="50012">No short description for method loadContentTypes()</error>
      <error line="138" code="50012">No short description for method load()</error>
      <error line="186" code="50012">No short description for method create()</error>
      <error line="186" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $createStruct in create()</error>
      <error line="222" code="50012">No short description for method update()</error>
      <error line="222" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in update()</error>
      <error line="239" code="50012">No short description for method delete()</error>
      <error line="239" code="50015">Argument $status is missing from the Docblock of delete()</error>
      <error line="289" code="50012">No short description for method copy()</error>
      <error line="333" code="50015">Argument $status is missing from the Docblock of link()</error>
      <error line="348" code="50014">Name of argument $status does not match with the DocBlock's name $fieldDefinition in addFieldDefinition()</error>
      <error line="348" code="50015">Argument $fieldDefinition is missing from the Docblock of addFieldDefinition()</error>
      <error line="370" code="50014">Name of argument $status does not match with the DocBlock's name $fieldDefinitionId in removeFieldDefinition()</error>
      <error line="370" code="50015">Argument $fieldDefinitionId is missing from the Docblock of removeFieldDefinition()</error>
      <error line="390" code="50014">Name of argument $status does not match with the DocBlock's name $fieldDefinition in updateFieldDefinition()</error>
      <error line="390" code="50015">Argument $fieldDefinition is missing from the Docblock of updateFieldDefinition()</error>
      <critical line="23" code="50005">No short description for class Handler</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Type/Handler.php</error>
    </parse_markers>
    <namespace-alias name="Type">ezp\Persistence\Content\Type</namespace-alias>
    <namespace-alias name="BaseContentTypeHandler">ezp\Persistence\Content\Type\Handler</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Type\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Type\UpdateStruct</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="Group">ezp\Persistence\Content\Type\Group</namespace-alias>
    <namespace-alias name="GroupCreateStruct">ezp\Persistence\Content\Type\Group\CreateStruct</namespace-alias>
    <namespace-alias name="GroupUpdateStruct">ezp\Persistence\Content\Type\Group\UpdateStruct</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="UpdateHandler">ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler</namespace-alias>
    <namespace-alias name="Exception">ezp\Persistence\Storage\Legacy\Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="25" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Type\Handler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Content\Type\Handler</extends>
      <docblock line="23">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$contentTypeGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$mapper</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[Mappper for Type objects.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Mapper</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="44" package="Default">
        <name>$updateHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="39">
          <description><![CDATA[Content Type update handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="53" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Creates a new content type handler.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway" variable="$contentTypeGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway</type>
          </tag>
          <tag line="46" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Mapper" variable="$mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Mapper</type>
          </tag>
          <tag line="46" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler" variable="$updateHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler</type>
          </tag>
        </docblock>
        <argument line="54">
          <name>$contentTypeGateway</name>
          <default><![CDATA[]]></default>
          <type>Gateway</type>
        </argument>
        <argument line="55">
          <name>$mapper</name>
          <default><![CDATA[]]></default>
          <type>Mapper</type>
        </argument>
        <argument line="56">
          <name>$updateHandler</name>
          <default><![CDATA[]]></default>
          <type>UpdateHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="67" package="Default">
        <name>createGroup</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="param" description="" type="\ezp\Persistence\Content\Type\Group\CreateStruct" variable="$createStruct">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group\CreateStruct</type>
          </tag>
          <tag line="63" name="return" description="" type="\ezp\Persistence\Content\Type\Group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group</type>
          </tag>
        </docblock>
        <argument line="67">
          <name>$createStruct</name>
          <default><![CDATA[]]></default>
          <type>GroupCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="84" package="Default">
        <name>updateGroup</name>
        <type>function</type>
        <docblock line="80">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="param" description="" type="\ezp\Persistence\Content\Type\Group\UpdateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group\UpdateStruct</type>
          </tag>
          <tag line="80" name="return" description="" type="\ezp\Persistence\Content\Type\Group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>GroupUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="97" package="Default">
        <name>deleteGroup</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="92" name="throws" description="if a non-empty group is to be deleted." type="\ezp\Persistence\Storage\Legacy\Exception\GroupNotEmpty">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Exception\GroupNotEmpty</type>
          </tag>
        </docblock>
        <argument line="97">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="110" package="Default">
        <name>loadGroup</name>
        <type>function</type>
        <docblock line="106">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="106" name="param" description="" type="int" variable="$groupId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="106" name="return" description="" type="\ezp\Persistence\Content\Type\Group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group</type>
          </tag>
        </docblock>
        <argument line="110">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="121" package="Default">
        <name>loadAllGroups</name>
        <type>function</type>
        <docblock line="118">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="return" description="" type="\ezp\Persistence\Content\Type\Group[]">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="132" package="Default">
        <name>loadContentTypes</name>
        <type>function</type>
        <docblock line="127">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="127" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="127" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="127" name="return" description="" type="\ezp\Persistence\Content\Type[]">
            <type by_reference="false">\ezp\Persistence\Content\Type[]</type>
          </tag>
        </docblock>
        <argument line="132">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="132">
          <name>$status</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="143" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="138">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="138" name="param" description="" type="int" variable="$contentTypeId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="138" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="138" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
        </docblock>
        <argument line="143">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="143">
          <name>$status</name>
          <default><![CDATA[Type::STATUS_DEFINED]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="158" package="Default">
        <name>loadByIdentifier</name>
        <type>function</type>
        <docblock line="151">
          <description><![CDATA[Load a (defined) content type by identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="151" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="151" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="151" name="throws" description="If defined type is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="158">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="174" package="Default">
        <name>loadFromRows</name>
        <type>function</type>
        <docblock line="166">
          <description><![CDATA[Loads a single Type from $rows]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="166" name="param" description="" type="array" variable="$rows">
            <type by_reference="false">array</type>
          </tag>
          <tag line="166" name="param" description="" type="mixed" variable="$typeIdentifier">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="166" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="166" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$rows</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="174">
          <name>$typeIdentifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="174">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="190" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="186">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="186" name="param" description="" type="\ezp\Persistence\Content\Type\CreateStruct" variable="$createStruct">
            <type by_reference="false">\ezp\Persistence\Content\Type\CreateStruct</type>
          </tag>
          <tag line="186" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
        </docblock>
        <argument line="190">
          <name>$createStruct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="229" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="222">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="222" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="222" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="222" name="param" description="" type="\ezp\Persistence\Content\Type\UpdateStruct" variable="$contentType">
            <type by_reference="false">\ezp\Persistence\Content\Type\UpdateStruct</type>
          </tag>
          <tag line="222" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="222" name="todo" description="Maintain contentclass_name"/>
        </docblock>
        <argument line="229">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="229">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="229">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="243" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="239">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="239" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="239" name="todo" description="Maintain contentclass_name"/>
        </docblock>
        <argument line="243">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="243">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="277" package="Default">
        <name>createDraft</name>
        <type>function</type>
        <docblock line="267">
          <description><![CDATA[Creates a draft of existing defined content type]]></description>
          <long-description><![CDATA[<p>Updates modified date, sets $modifierId and status to Type::STATUS_DRAFT on the new returned draft.</p>]]></long-description>
          <tag line="267" name="param" description="" type="mixed" variable="$modifierId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="267" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="267" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="267" name="throws" description="If type with defined status is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="277">
          <name>$modifierId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="277">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="295" package="Default">
        <name>copy</name>
        <type>function</type>
        <docblock line="289">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="289" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="289" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="289" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="289" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
        </docblock>
        <argument line="295">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="295">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="295">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="314" package="Default">
        <name>unlink</name>
        <type>function</type>
        <docblock line="307">
          <description><![CDATA[Unlink a content type group from a content type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="307" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="307" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="307" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="314">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="314">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="314">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="339" package="Default">
        <name>link</name>
        <type>function</type>
        <docblock line="333">
          <description><![CDATA[Link a content type group with a content type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="333" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="333" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="339">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="339">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="339">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="359" package="Default">
        <name>addFieldDefinition</name>
        <type>function</type>
        <docblock line="348">
          <description><![CDATA[Adds a new field definition to an existing Type.]]></description>
          <long-description><![CDATA[<p>This method creates a new status of the Type with the $fieldDefinition
added. It does not update existing content objects depending on the
field (default) values.</p>]]></long-description>
          <tag line="348" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="348" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="348" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="359">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="359">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="359">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="381" package="Default">
        <name>removeFieldDefinition</name>
        <type>function</type>
        <docblock line="370">
          <description><![CDATA[Removes a field definition from an existing Type.]]></description>
          <long-description><![CDATA[<p>This method creates a new status of the Type with the field definition
referred to by $fieldDefinitionId removed. It does not update existing
content objects depending on the field (default) values.</p>]]></long-description>
          <tag line="370" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="370" name="param" description="" type="mixed" variable="$fieldDefinitionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="370" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="381">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="381">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="381">
          <name>$fieldDefinitionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="402" package="Default">
        <name>updateFieldDefinition</name>
        <type>function</type>
        <docblock line="390">
          <description><![CDATA[This method updates the given $fieldDefinition on a Type.]]></description>
          <long-description><![CDATA[<p>This method creates a new status of the Type with the updated
$fieldDefinition. It does not update existing content objects depending
on the
field (default) values.</p>]]></long-description>
          <tag line="390" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="390" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="390" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="402">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="402">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="402">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="426" package="Default">
        <name>publish</name>
        <type>function</type>
        <docblock line="413">
          <description><![CDATA[Update content objects]]></description>
          <long-description><![CDATA[<p>Updates content objects, depending on the changed field definitions.</p>

<p>A content type has a state which tells if its content objects yet have
been adapted.</p>

<p>Flags the content type as updated.</p>]]></long-description>
          <tag line="413" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="413" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="426">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Type/Mapper.php" hash="25f87c722bce2f2061079beb3ddef84d">
    <parse_markers>
      <error line="44" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in createGroupFromCreateStruct()</error>
      <error line="226" code="50014">Name of argument $createStruct does not match with the DocBlock's name $type in createTypeFromCreateStruct()</error>
      <error line="226" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $createStruct in createTypeFromCreateStruct()</error>
      <notice line="226" code="50013">Parameter $type could not be found in createTypeFromCreateStruct()</notice>
      <notice line="226" code="50013">Parameter $struct could not be found in createTypeFromCreateStruct()</notice>
      <error line="291" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toStorageFieldDefinition()</error>
      <error line="291" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldDef in toStorageFieldDefinition()</error>
      <error line="310" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldDef in toFieldDefinition()</error>
      <error line="310" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in toFieldDefinition()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Type/Mapper.php</error>
    </parse_markers>
    <namespace-alias name="Type">ezp\Persistence\Content\Type</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Type\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Type\UpdateStruct</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="Group">ezp\Persistence\Content\Type\Group</namespace-alias>
    <namespace-alias name="GroupCreateStruct">ezp\Persistence\Content\Type\Group\CreateStruct</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <namespace-alias name="ConverterRegistry">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="25" package="Default">
      <name>Mapper</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Type\Mapper</full_name>
      <extends/>
      <docblock line="20">
        <description><![CDATA[Mapper for Content Type Handler.]]></description>
        <long-description><![CDATA[<p>Performs mapping of Type objects.</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="32" package="Default">
        <name>$converterRegistry</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[Converter registry]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="\ezp\Persistence\Legacy\Content\FieldValue\Converter\Registry">
            <type by_reference="false">\ezp\Persistence\Legacy\Content\FieldValue\Converter\Registry</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="39" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Creates a new content type mapper]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry" variable="$converterRegistry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</type>
          </tag>
        </docblock>
        <argument line="39">
          <name>$converterRegistry</name>
          <default><![CDATA[]]></default>
          <type>ConverterRegistry</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="51" package="Default">
        <name>createGroupFromCreateStruct</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Creates a Group from its create struct.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="" type="\ezp\Persistence\Content\Type\Group\CreateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group\CreateStruct</type>
          </tag>
          <tag line="44" name="return" description="" type="\ezp\Persistence\Content\Type\Group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group</type>
          </tag>
          <tag line="44" name="todo" description="$description is not supported by database, yet"/>
        </docblock>
        <argument line="51">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>GroupCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="75" package="Default">
        <name>extractGroupsFromRows</name>
        <type>function</type>
        <docblock line="69">
          <description><![CDATA[Extracts Group objects from theb given $rows.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="69" name="param" description="" type="array" variable="$rows">
            <type by_reference="false">array</type>
          </tag>
          <tag line="69" name="return" description="" type="\ezp\Persistence\Content\Type\Group[]">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group[]</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$rows</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="101" package="Default">
        <name>extractTypesFromRows</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Extracts types and related data from the given $rows.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="param" description="" type="array" variable="$rows">
            <type by_reference="false">array</type>
          </tag>
          <tag line="95" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\array(Type)">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\array(Type)</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$rows</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="139" package="Default">
        <name>extractTypeFromRow</name>
        <type>function</type>
        <docblock line="133">
          <description><![CDATA[Creates a Type from the data in $row.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="133" name="param" description="" type="array" variable="$row">
            <type by_reference="false">array</type>
          </tag>
          <tag line="133" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$row</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="174" package="Default">
        <name>extractFieldFromRow</name>
        <type>function</type>
        <docblock line="167">
          <description><![CDATA[Creates a FieldDefinition from the data in $row.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="167" name="param" description="" type="array" variable="$row">
            <type by_reference="false">array</type>
          </tag>
          <tag line="167" name="return" description="" type="\ezp\Persistence\Content\Type\FieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="167" name="todo" description="Handle field definition conversion."/>
        </docblock>
        <argument line="174">
          <name>$row</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="204" package="Default">
        <name>extractStorageFieldFromRow</name>
        <type>function</type>
        <docblock line="198">
          <description><![CDATA[Extracts a StorageFieldDefinition from $row]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="198" name="param" description="" type="array" variable="$row">
            <type by_reference="false">array</type>
          </tag>
          <tag line="198" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
        </docblock>
        <argument line="204">
          <name>$row</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="233" package="Default">
        <name>createTypeFromCreateStruct</name>
        <type>function</type>
        <docblock line="226">
          <description><![CDATA[Maps properties from $struct to $type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="226" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="226" name="param" description="" type="\ezp\Persistence\Content\Type\CreateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\Type\CreateStruct</type>
          </tag>
          <tag line="226" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="233">
          <name>$createStruct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="265" package="Default">
        <name>createCreateStructFromType</name>
        <type>function</type>
        <docblock line="259">
          <description><![CDATA[Creates a create struct from an existing $type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="259" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="259" name="return" description="" type="\ezp\Persistence\Content\Type\CreateStruct">
            <type by_reference="false">\ezp\Persistence\Content\Type\CreateStruct</type>
          </tag>
        </docblock>
        <argument line="265">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="298" package="Default">
        <name>toStorageFieldDefinition</name>
        <type>function</type>
        <docblock line="291">
          <description><![CDATA[Maps $fieldDef to the legacy storage specific StorageFieldDefinition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="291" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="291" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageFieldDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="291" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="299">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="299">
          <name>$storageFieldDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="317" package="Default">
        <name>toFieldDefinition</name>
        <type>function</type>
        <docblock line="310">
          <description><![CDATA[Maps a FieldDefinition from the given $storageFieldDef]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="310" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageFieldDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="310" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="310" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="318">
          <name>$storageFieldDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
        <argument line="318">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Type/ContentUpdater.php" hash="9f863e02f1ba894574a41654a5e1b789">
    <parse_markers>
      <error line="46" code="50014">Name of argument $searchHandler does not match with the DocBlock's name $contentTypeGateway in __construct()</error>
      <error line="46" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $searchHandler in __construct()</error>
      <error line="46" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentGateway in __construct()</error>
      <error line="46" code="50015">Argument $converterRegistry is missing from the Docblock of __construct()</error>
      <notice line="46" code="50013">Parameter $contentTypeGateway could not be found in __construct()</notice>
      <error line="62" code="50014">Name of argument $fromType does not match with the DocBlock's name $contentTypeId in determineActions()</error>
      <error line="62" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fromType in determineActions()</error>
      <error line="62" code="50015">Argument $toType is missing from the Docblock of determineActions()</error>
      <notice line="62" code="50013">Parameter $contentTypeId could not be found in determineActions()</notice>
      <error line="97" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $type in hasFieldDefinition()</error>
      <error line="97" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDef in hasFieldDefinition()</error>
      <error line="116" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $actions in applyUpdates()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Type/ContentUpdater.php</error>
    </parse_markers>
    <namespace-alias name="Content">ezp\Persistence\Storage\Legacy\Content</namespace-alias>
    <namespace-alias name="SearchHandler">ezp\Persistence\Storage\Legacy\Content\Search\Handler</namespace-alias>
    <namespace-alias name="ContentGateway">ezp\Persistence\Storage\Legacy\Content\Gateway</namespace-alias>
    <namespace-alias name="Registry">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</namespace-alias>
    <namespace-alias name="ContentUpdater">ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater</namespace-alias>
    <namespace-alias name="Type">ezp\Persistence\Content\Type</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="23" package="Default">
      <name>ContentUpdater</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater</full_name>
      <extends/>
      <docblock line="20">
        <description><![CDATA[Class to update content objects to a new type version]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$contentGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[Content gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="param" description="\ezp\Persistence\Storage\Legacy\Content\Gateway" type="" variable=""/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$converterRegistry</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[FieldValue converter registry]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="44" package="Default">
        <name>$searchHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="39">
          <description><![CDATA[Search handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Handler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="52" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Creates a new content updater]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway" variable="$contentTypeGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway</type>
          </tag>
          <tag line="46" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway" variable="$contentGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$searchHandler</name>
          <default><![CDATA[]]></default>
          <type>SearchHandler</type>
        </argument>
        <argument line="54">
          <name>$contentGateway</name>
          <default><![CDATA[]]></default>
          <type>ContentGateway</type>
        </argument>
        <argument line="55">
          <name>$converterRegistry</name>
          <default><![CDATA[]]></default>
          <type>Registry</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="68" package="Default">
        <name>determineActions</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Determines the neccessary update actions]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="62" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action[]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action[]</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$fromType</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
        <argument line="68">
          <name>$toType</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="104" package="Default">
        <name>hasFieldDefinition</name>
        <type>function</type>
        <docblock line="97">
          <description><![CDATA[hasFieldDefinition]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="97" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type" variable="$type">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type</type>
          </tag>
          <tag line="97" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\FieldDefinition" variable="$fieldDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="97" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="104">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
        <argument line="104">
          <name>$fieldDef</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="123" package="Default">
        <name>applyUpdates</name>
        <type>function</type>
        <docblock line="116">
          <description><![CDATA[Applies all given updates]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="116" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="116" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action[]" variable="$actions">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\ContentUpdater\Action[]</type>
          </tag>
          <tag line="116" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="123">
          <name>$actions</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="141" package="Default">
        <name>loadContentObjects</name>
        <type>function</type>
        <docblock line="135">
          <description><![CDATA[Returns all content objects of $contentTypeId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="135" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="135" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content[]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content[]</type>
          </tag>
        </docblock>
        <argument line="141">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Content/Type/Gateway.php" hash="3db7e7ecbe4204b2e7dfbf96199ef7bd">
    <parse_markers>
      <error line="23" code="50015">Argument $group is missing from the Docblock of insertGroup()</error>
      <error line="30" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $group in updateGroup()</error>
      <error line="87" code="50014">Name of argument $type does not match with the DocBlock's name $createStruct in insertType()</error>
      <notice line="87" code="50013">Parameter $createStruct could not be found in insertType()</notice>
      <error line="115" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in insertFieldDefinition()</error>
      <error line="115" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldDef in insertFieldDefinition()</error>
      <error line="139" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in updateFieldDefinition()</error>
      <error line="139" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $storageFieldDef in updateFieldDefinition()</error>
      <error line="153" code="50014">Name of argument $typeId does not match with the DocBlock's name $type in updateType()</error>
      <error line="153" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $updateStruct in updateType()</error>
      <notice line="153" code="50013">Parameter $type could not be found in updateType()</notice>
      <error line="191" code="50015">Argument $version is missing from the Docblock of deleteFieldDefinitionsForType()</error>
      <error line="199" code="50015">Argument $version is missing from the Docblock of deleteType()</error>
      <error line="209" code="50015">Argument $version is missing from the Docblock of deleteGroupAssignementsForType()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Content/Type/Gateway.php</error>
    </parse_markers>
    <namespace-alias name="Type">ezp\Persistence\Content\Type</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Type\UpdateStruct</namespace-alias>
    <namespace-alias name="Group">ezp\Persistence\Content\Type\Group</namespace-alias>
    <namespace-alias name="GroupUpdateStruct">ezp\Persistence\Content\Type\Group\UpdateStruct</namespace-alias>
    <namespace-alias name="StorageFieldDefinition">ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="21" package="Default">
      <name>Gateway</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Content\Type\Gateway</full_name>
      <extends/>
      <docblock line="18">
        <description><![CDATA[Base class for content type gateways.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="28" package="Default">
        <name>insertGroup</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Inserts the given $group.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="return" description="Group ID" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="28">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>Group</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="36" package="Default">
        <name>updateGroup</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Updates a group with data in $group.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="param" description="" type="\ezp\Persistence\Content\Type\Group\UpdateStruct" variable="$group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group\UpdateStruct</type>
          </tag>
          <tag line="30" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>GroupUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="44" package="Default">
        <name>countTypesInGroup</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Returns the number of types in a certain group.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="param" description="" type="int" variable="$groupId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="38" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="53" package="Default">
        <name>countGroupsForType</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Returns the number of Groups the type is assigned to.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="" type="int" variable="$typeId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="46" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="46" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="53">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="61" package="Default">
        <name>deleteGroup</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Deletes the Group with the given $groupId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="" type="int" variable="$groupId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="55" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="69" package="Default">
        <name>loadGroupData</name>
        <type>function</type>
        <docblock line="63">
          <description><![CDATA[Returns an array with data about the Group with $groupId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="63" name="param" description="" type="int" variable="$groupId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="63" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="76" package="Default">
        <name>loadAllGroupsData</name>
        <type>function</type>
        <docblock line="71">
          <description><![CDATA[Returns an array with data about all Group objects.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="71" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="85" package="Default">
        <name>loadTypesDataForGroup</name>
        <type>function</type>
        <docblock line="78">
          <description><![CDATA[Loads data for all Types in $status in $groupId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="78" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="78" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="78" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\string[][]</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="85">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="93" package="Default">
        <name>insertType</name>
        <type>function</type>
        <docblock line="87">
          <description><![CDATA[Inserts a new conten type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="87" name="param" description="" type="\ezp\Persistence\Content\Type" variable="$createStruct">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="87" name="return" description="Type ID" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="93">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type>Type</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="103" package="Default">
        <name>insertGroupAssignement</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Insert assignement of $typeId to $groupId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="95" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="95" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="95" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="103">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="103">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="113" package="Default">
        <name>deleteGroupAssignement</name>
        <type>function</type>
        <docblock line="105">
          <description><![CDATA[Deletes a group assignements for a Type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="105" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="105" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="105" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="105" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="113">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="113">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="113">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="124" package="Default">
        <name>insertFieldDefinition</name>
        <type>function</type>
        <docblock line="115">
          <description><![CDATA[Inserts a $fieldDefinition for $typeId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="115" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="115" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="115" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="115" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageFieldDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="115" name="return" description="Field definition ID" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="125">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="125">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="125">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="126">
          <name>$storageFieldDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="137" package="Default">
        <name>deleteFieldDefinition</name>
        <type>function</type>
        <docblock line="129">
          <description><![CDATA[Deletes a field definition.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="129" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="129" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="129" name="param" description="" type="mixed" variable="$fieldDefinitionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="129" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="137">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="137">
          <name>$fieldDefinitionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="148" package="Default">
        <name>updateFieldDefinition</name>
        <type>function</type>
        <docblock line="139">
          <description><![CDATA[Updates a $fieldDefinition for $typeId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="139" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="139" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="139" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="139" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition" variable="$storageFieldDef">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageFieldDefinition</type>
          </tag>
          <tag line="139" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="149">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="149">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="149">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
        <argument line="150">
          <name>$storageFieldDef</name>
          <default><![CDATA[]]></default>
          <type>StorageFieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="161" package="Default">
        <name>updateType</name>
        <type>function</type>
        <docblock line="153">
          <description><![CDATA[Update a type with $updateStruct.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="153" name="param" description="" type="mixed" variable="$type">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="153" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="153" name="param" description="" type="\ezp\Persistence\Content\Type\UpdateStruct" variable="$updateStruct">
            <type by_reference="false">\ezp\Persistence\Content\Type\UpdateStruct</type>
          </tag>
          <tag line="153" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="161">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="161">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="161">
          <name>$updateStruct</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="170" package="Default">
        <name>loadTypeData</name>
        <type>function</type>
        <docblock line="163">
          <description><![CDATA[Loads an array with data about $typeId in $version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="163" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="163" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="163" name="return" description="Data rows." type="\ezp\Persistence\Storage\Legacy\Content\Type\array(int=&gt;array(string=&gt;mixed))">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\array(int=&gt;array(string=&gt;mixed))</type>
          </tag>
        </docblock>
        <argument line="170">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="170">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="180" package="Default">
        <name>loadTypeDataByIdentifier</name>
        <type>function</type>
        <docblock line="172">
          <description><![CDATA[Loads an array with data about the type referred to by $identifier in
$version.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="172" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="172" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="172" name="return" description="Data rows." type="\ezp\Persistence\Storage\Legacy\Content\Type\array(int=&gt;array(string=&gt;mixed))">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\array(int=&gt;array(string=&gt;mixed))</type>
          </tag>
        </docblock>
        <argument line="180">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="180">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="189" package="Default">
        <name>countInstancesOfType</name>
        <type>function</type>
        <docblock line="182">
          <description><![CDATA[Counts the number of instances that exists of the identified type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="182" name="param" description="" type="int" variable="$typeId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="182" name="param" description="" type="int" variable="$version">
            <type by_reference="false">int</type>
          </tag>
          <tag line="182" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="189">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="189">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="197" package="Default">
        <name>deleteFieldDefinitionsForType</name>
        <type>function</type>
        <docblock line="191">
          <description><![CDATA[Deletes all field definitions of a Type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="191" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="191" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="197">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="197">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="207" package="Default">
        <name>deleteType</name>
        <type>function</type>
        <docblock line="199">
          <description><![CDATA[Deletes a the Type.]]></description>
          <long-description><![CDATA[<p>Does no delete the field definitions!</p>]]></long-description>
          <tag line="199" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="199" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="207">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="207">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="215" package="Default">
        <name>deleteGroupAssignementsForType</name>
        <type>function</type>
        <docblock line="209">
          <description><![CDATA[Deletes all group assignements for a Type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="209" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="209" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="215">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="215">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="226" package="Default">
        <name>publishTypeAndFields</name>
        <type>function</type>
        <docblock line="217">
          <description><![CDATA[Publishes the Type with $typeId from $sourceVersion to $targetVersion,
including its fields]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="217" name="param" description="" type="int" variable="$typeId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="217" name="param" description="" type="int" variable="$sourceVersion">
            <type by_reference="false">int</type>
          </tag>
          <tag line="217" name="param" description="" type="int" variable="$targetVersion">
            <type by_reference="false">int</type>
          </tag>
          <tag line="217" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="226">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="226">
          <name>$sourceVersion</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="226">
          <name>$targetVersion</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Content\Type" line="236" package="Default">
        <name>isFieldTranslatable</name>
        <type>function</type>
        <docblock line="228">
          <description><![CDATA[Returns if the field identified by $fieldDefinitionId and $status is
translateable]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="228" name="param" description="" type="mixed" variable="$fieldDefinitionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="228" name="param" description="" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="228" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="236">
          <name>$fieldDefinitionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="236">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/User/Gateway/EzcDatabase.php" hash="a41f925e16b013a7c15bc0d4b6669174">
    <parse_markers>
      <error line="38" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in createUser()</error>
      <error line="140" code="50014">Name of argument $login does not match with the DocBlock's name $userId in loadByLoginOrMail()</error>
      <error line="140" code="50015">Argument $email is missing from the Docblock of loadByLoginOrMail()</error>
      <notice line="140" code="50013">Parameter $userId could not be found in loadByLoginOrMail()</notice>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/User/Gateway/EzcDatabase.php</error>
    </parse_markers>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\User\Gateway</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="User">ezp\Persistence\User</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\User\Gateway" line="18" package="Default">
      <name>EzcDatabase</name>
      <full_name>\ezp\Persistence\Storage\Legacy\User\Gateway\EzcDatabase</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\User\Gateway</extends>
      <docblock line="15">
        <description><![CDATA[User gateway implementation using the zeta database component.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="25" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[Database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="var" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Gateway" line="33" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="27">
          <description><![CDATA[Construct from database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
          <tag line="27" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="33">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Gateway" line="44" package="Default">
        <name>createUser</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[Create user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="param" description="" type="\ezp\Persistence\Storage\Legacy\User\Gateway\user" variable="$user">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\User\Gateway\user</type>
          </tag>
          <tag line="38" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Gateway" line="88" package="Default">
        <name>deleteUser</name>
        <type>function</type>
        <docblock line="83">
          <description><![CDATA[Delete user with the given ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Gateway" line="108" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Load user with user ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="102" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="108">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Gateway" line="146" package="Default">
        <name>loadByLoginOrMail</name>
        <type>function</type>
        <docblock line="140">
          <description><![CDATA[Load user with user ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="140" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="140" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="146">
          <name>$login</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="146">
          <name>$email</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Gateway" line="194" package="Default">
        <name>updateUser</name>
        <type>function</type>
        <docblock line="189">
          <description><![CDATA[Update the user information specified by the user struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="189" name="param" description="" type="\ezp\Persistence\User" variable="$user">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
        </docblock>
        <argument line="194">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Gateway" line="244" package="Default">
        <name>assignRole</name>
        <type>function</type>
        <docblock line="237">
          <description><![CDATA[Assign role to user with given limitation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="237" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="237" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="237" name="param" description="" type="array" variable="$limitation">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="244">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="244">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="244">
          <name>$limitation</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Gateway" line="277" package="Default">
        <name>removeRole</name>
        <type>function</type>
        <docblock line="271">
          <description><![CDATA[Remove role from user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="271" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="271" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="277">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="277">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/User/Handler.php" hash="6bc43329e5b22ca0655b07634c6d1294">
    <parse_markers>
      <error line="46" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $userGateway in __construct()</error>
      <error line="46" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $roleGateway in __construct()</error>
      <error line="46" code="50015">Argument $mapper is missing from the Docblock of __construct()</error>
      <error line="60" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in create()</error>
      <error line="112" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in update()</error>
      <error line="132" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in createRole()</error>
      <error line="182" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in updateRole()</error>
      <error line="202" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $policy in addPolicy()</error>
      <error line="216" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $policy in updatePolicy()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/User/Handler.php</error>
    </parse_markers>
    <namespace-alias name="User">ezp\Persistence\User</namespace-alias>
    <namespace-alias name="BaseUserHandler">ezp\Persistence\User\Handler</namespace-alias>
    <namespace-alias name="Role">ezp\Persistence\User\Role</namespace-alias>
    <namespace-alias name="RoleUpdateStruct">ezp\Persistence\User\RoleUpdateStruct</namespace-alias>
    <namespace-alias name="Policy">ezp\Persistence\User\Policy</namespace-alias>
    <namespace-alias name="RoleGateway">ezp\Persistence\Storage\Legacy\User\Role\Gateway</namespace-alias>
    <namespace-alias name="RuntimeException">RuntimeException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\User" line="23" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\User\Handler</full_name>
      <extends/>
      <extends>\ezp\Persistence\User\Handler</extends>
      <docblock line="19">
        <description><![CDATA[Storage Engine handler for user module]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$userGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[Gaateway for storing user data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="\ezp\Persistence\Storage\Legacy\User\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\User\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="37" package="Default">
        <name>$roleGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[Gaateway for storing role data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="\ezp\Persistence\Storage\Legacy\User\Role\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\User\Role\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="44" package="Default">
        <name>$mapper</name>
        <default><![CDATA[]]></default>
        <docblock line="39">
          <description><![CDATA[Mapper for user related objects]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="39" name="var" description="" type="\ezp\Persistence\Storage\Legacy\User\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\User\Mapper</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="53" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="46">
          <description><![CDATA[Construct from userGateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="46" name="param" description="" type="\ezp\Persistence\Storage\Legacy\User\Gateway" variable="$userGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\User\Gateway</type>
          </tag>
          <tag line="46" name="param" description="" type="\ezp\Persistence\Storage\Legacy\User\Role\Gateway" variable="$roleGateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\User\Role\Gateway</type>
          </tag>
          <tag line="46" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="53">
          <name>$userGateway</name>
          <default><![CDATA[]]></default>
          <type>Gateway</type>
        </argument>
        <argument line="53">
          <name>$roleGateway</name>
          <default><![CDATA[]]></default>
          <type>RoleGateway</type>
        </argument>
        <argument line="53">
          <name>$mapper</name>
          <default><![CDATA[]]></default>
          <type>Mapper</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="69" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="60">
          <description><![CDATA[Create a user]]></description>
          <long-description><![CDATA[<p>The User struct used to create the user will contain an ID which is used
to reference the user.</p>]]></long-description>
          <tag line="60" name="param" description="" type="\ezp\Persistence\User" variable="$user">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
          <tag line="60" name="return" description="" type="\ezp\Persistence\User">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="81" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Load user with user ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="75" name="return" description="" type="\ezp\Persistence\User">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
        </docblock>
        <argument line="81">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="100" package="Default">
        <name>loadByLogin</name>
        <type>function</type>
        <docblock line="93">
          <description><![CDATA[Load user with user login / email.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="93" name="param" description="" type="string" variable="$login">
            <type by_reference="false">string</type>
          </tag>
          <tag line="93" name="param" description="Also match user email, caller must verify that $login is a valid email address." type="boolean" variable="$alsoMatchEmail">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="93" name="return" description="" type="\ezp\Persistence\User[]">
            <type by_reference="false">\ezp\Persistence\User[]</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$login</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="100">
          <name>$alsoMatchEmail</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="117" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[Update the user information specified by the user struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="param" description="" type="\ezp\Persistence\User" variable="$user">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="127" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="122">
          <description><![CDATA[Delete user with the given ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="122" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="127">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="138" package="Default">
        <name>createRole</name>
        <type>function</type>
        <docblock line="132">
          <description><![CDATA[Create new role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="param" description="" type="\ezp\Persistence\User\Role" variable="$role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
          <tag line="132" name="return" description="" type="\ezp\Persistence\User\Role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
        </docblock>
        <argument line="138">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="157" package="Default">
        <name>loadRole</name>
        <type>function</type>
        <docblock line="150">
          <description><![CDATA[Load a specified role by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="150" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="150" name="return" description="" type="\ezp\Persistence\User\Role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
          <tag line="150" name="throws" description="If role is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="157">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="175" package="Default">
        <name>loadRolesByGroupId</name>
        <type>function</type>
        <docblock line="169">
          <description><![CDATA[Load roles assigned to a user/group (not including inherited roles)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="169" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="169" name="return" description="" type="\ezp\Persistence\User\Role[]">
            <type by_reference="false">\ezp\Persistence\User\Role[]</type>
          </tag>
        </docblock>
        <argument line="175">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="187" package="Default">
        <name>updateRole</name>
        <type>function</type>
        <docblock line="182">
          <description><![CDATA[Update role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="182" name="param" description="" type="\ezp\Persistence\User\RoleUpdateStruct" variable="$role">
            <type by_reference="false">\ezp\Persistence\User\RoleUpdateStruct</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>RoleUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="197" package="Default">
        <name>deleteRole</name>
        <type>function</type>
        <docblock line="192">
          <description><![CDATA[Delete the specified role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="192" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="197">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="209" package="Default">
        <name>addPolicy</name>
        <type>function</type>
        <docblock line="202">
          <description><![CDATA[Adds a policy to a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="202" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="202" name="param" description="" type="\ezp\Persistence\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\Persistence\User\Policy</type>
          </tag>
          <tag line="202" name="return" description="" type="\ezp\Persistence\User\Policy">
            <type by_reference="false">\ezp\Persistence\User\Policy</type>
          </tag>
        </docblock>
        <argument line="209">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="209">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="223" package="Default">
        <name>updatePolicy</name>
        <type>function</type>
        <docblock line="216">
          <description><![CDATA[Update a policy]]></description>
          <long-description><![CDATA[<p>Replaces limitations values with new values.</p>]]></long-description>
          <tag line="216" name="param" description="" type="\ezp\Persistence\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\Persistence\User\Policy</type>
          </tag>
        </docblock>
        <argument line="223">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="236" package="Default">
        <name>removePolicy</name>
        <type>function</type>
        <docblock line="229">
          <description><![CDATA[Removes a policy from a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="229" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="229" name="param" description="" type="mixed" variable="$policyId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="229" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="236">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="236">
          <name>$policyId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="250" package="Default">
        <name>loadPoliciesByUserId</name>
        <type>function</type>
        <docblock line="244">
          <description><![CDATA[Returns the user policies associated with the user (including inherited policies from user groups)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="244" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="244" name="return" description="" type="\ezp\Persistence\User\Policy[]">
            <type by_reference="false">\ezp\Persistence\User\Policy[]</type>
          </tag>
        </docblock>
        <argument line="250">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="279" package="Default">
        <name>assignRole</name>
        <type>function</type>
        <docblock line="257">
          <description><![CDATA[Assign role to user group with given limitation]]></description>
          <long-description><![CDATA[<p>The limitation array may look like:</p>

<pre><code> array(
     'Subtree' => array(
         '/1/2/',
         '/1/4/',
     ),
     'Foo' => array( 'Bar' ),
     …
 )
</code></pre>

<p>Where the keys are the limitation identifiers, and the respective values
are an array of limitation values. The limitation parameter is optional.</p>]]></long-description>
          <tag line="257" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="257" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="257" name="param" description="" type="array" variable="$limitation">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="279">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="279">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="279">
          <name>$limitation</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="291" package="Default">
        <name>unAssignRole</name>
        <type>function</type>
        <docblock line="285">
          <description><![CDATA[Un-assign a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="285" name="param" description="The group / user Id to un-assign a role from" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="285" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="291">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="291">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/User/Mapper.php" hash="4c87772dd2ec500e988a4a35d5cdafcc">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/User/Mapper.php</error>
    </parse_markers>
    <namespace-alias name="User">ezp\Persistence\User</namespace-alias>
    <namespace-alias name="Role">ezp\Persistence\User\Role</namespace-alias>
    <namespace-alias name="RoleUpdateStruct">ezp\Persistence\User\RoleUpdateStruct</namespace-alias>
    <namespace-alias name="Policy">ezp\Persistence\User\Policy</namespace-alias>
    <namespace-alias name="RuntimeException">RuntimeException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\User" line="21" package="Default">
      <name>Mapper</name>
      <full_name>\ezp\Persistence\Storage\Legacy\User\Mapper</full_name>
      <extends/>
      <docblock line="17">
        <description><![CDATA[mapper for User realted objects]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="29" package="Default">
        <name>mapUser</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[Map user data into user object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="23" name="return" description="" type="\ezp\Persistence\User">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="49" package="Default">
        <name>mapPolicies</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Map policy data to an array of policies]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="43" name="return" description="" type="\ezp\Persistence\User\Policy">
            <type by_reference="false">\ezp\Persistence\User\Policy</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="92" package="Default">
        <name>mapRole</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[Map role data to a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="86" name="return" description="" type="\ezp\Persistence\User\Role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="120" package="Default">
        <name>mapRoles</name>
        <type>function</type>
        <docblock line="114">
          <description><![CDATA[Map data for a set of roles]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="114" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="114" name="return" description="" type="\ezp\Persistence\User\Role[]">
            <type by_reference="false">\ezp\Persistence\User\Role[]</type>
          </tag>
        </docblock>
        <argument line="120">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/User/Gateway.php" hash="0f9282051da5ce146799b0d3618f352f">
    <parse_markers>
      <error line="18" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in createUser()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/User/Gateway.php</error>
    </parse_markers>
    <namespace-alias name="User">ezp\Persistence\User</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Storage\Legacy\User" line="16" package="Default">
      <name>Gateway</name>
      <full_name>\ezp\Persistence\Storage\Legacy\User\Gateway</full_name>
      <extends/>
      <docblock line="13">
        <description><![CDATA[Base class for user gateways.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="24" package="Default">
        <name>createUser</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Create user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="" type="\ezp\Persistence\Storage\Legacy\User\user" variable="$user">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\User\user</type>
          </tag>
          <tag line="18" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="31" package="Default">
        <name>deleteUser</name>
        <type>function</type>
        <docblock line="26">
          <description><![CDATA[Delete user with the given ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="31">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="38" package="Default">
        <name>updateUser</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[Update the user information specified by the user struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="param" description="" type="\ezp\Persistence\User" variable="$user">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="47" package="Default">
        <name>assignRole</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Assign role to user with given limitation]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="40" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="40" name="param" description="" type="array" variable="$limitation">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="47">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="47">
          <name>$limitation</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User" line="55" package="Default">
        <name>removeRole</name>
        <type>function</type>
        <docblock line="49">
          <description><![CDATA[Remove role from user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="param" description="" type="mixed" variable="$contentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="49" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="55">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="55">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/User/Role/Gateway/EzcDatabase.php" hash="b2440cb12b435ca3c01ab0945fb8d7e8">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/User/Role/Gateway/EzcDatabase.php</error>
    </parse_markers>
    <namespace-alias name="Gateway">ezp\Persistence\Storage\Legacy\User\Role\Gateway</namespace-alias>
    <namespace-alias name="EzcDbHandler">ezp\Persistence\Storage\Legacy\EzcDbHandler</namespace-alias>
    <namespace-alias name="Policy">ezp\Persistence\User\Policy</namespace-alias>
    <namespace-alias name="RoleUpdateStruct">ezp\Persistence\User\RoleUpdateStruct</namespace-alias>
    <namespace-alias name="Role">ezp\Persistence\User\Role</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="20" package="Default">
      <name>EzcDatabase</name>
      <full_name>\ezp\Persistence\Storage\Legacy\User\Role\Gateway\EzcDatabase</full_name>
      <extends>\ezp\Persistence\Storage\Legacy\User\Role\Gateway</extends>
      <docblock line="17">
        <description><![CDATA[Base class for content type gateways.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <constant namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="32" package="Default">
        <name>GROUP_TYPE_ID</name>
        <value><![CDATA[3]]></value>
        <docblock line="29">
          <description><![CDATA[Internal type ID for user groups]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </constant>
      <property final="false" static="false" visibility="protected" line="27" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="22">
          <description><![CDATA[Database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="22" name="var" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="40" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="34">
          <description><![CDATA[Construct from database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="34" name="param" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
          <tag line="34" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>EzcDbHandler</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="51" package="Default">
        <name>createRole</name>
        <type>function</type>
        <docblock line="45">
          <description><![CDATA[Create new role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="param" description="" type="\ezp\Persistence\User\Role" variable="$role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
          <tag line="45" name="return" description="" type="\ezp\Persistence\User\Role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
        </docblock>
        <argument line="51">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="85" package="Default">
        <name>loadRole</name>
        <type>function</type>
        <docblock line="79">
          <description><![CDATA[Load a specified role by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="79" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="142" package="Default">
        <name>loadRolesForContentObjects</name>
        <type>function</type>
        <docblock line="136">
          <description><![CDATA[Load all roles associated with the given content objects]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="136" name="param" description="" type="array" variable="$contentIds">
            <type by_reference="false">array</type>
          </tag>
          <tag line="136" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="142">
          <name>$contentIds</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="208" package="Default">
        <name>loadPoliciesByUserId</name>
        <type>function</type>
        <docblock line="202">
          <description><![CDATA[Returns the user policies associated with the user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="202" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="202" name="return" description="" type="\ezp\Persistence\Storage\Legacy\User\Role\Gateway\UserPolicy[]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\User\Role\Gateway\UserPolicy[]</type>
          </tag>
        </docblock>
        <argument line="208">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="222" package="Default">
        <name>fetchUserGroups</name>
        <type>function</type>
        <docblock line="216">
          <description><![CDATA[Fetch all group IDs the user belongs to]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="216" name="param" description="" type="int" variable="$userId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="216" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="222">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="293" package="Default">
        <name>updateRole</name>
        <type>function</type>
        <docblock line="288">
          <description><![CDATA[Update role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="288" name="param" description="" type="\ezp\Persistence\User\RoleUpdateStruct" variable="$role">
            <type by_reference="false">\ezp\Persistence\User\RoleUpdateStruct</type>
          </tag>
        </docblock>
        <argument line="293">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>RoleUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="315" package="Default">
        <name>deleteRole</name>
        <type>function</type>
        <docblock line="310">
          <description><![CDATA[Delete the specified role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="310" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="315">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="336" package="Default">
        <name>addPolicy</name>
        <type>function</type>
        <docblock line="329">
          <description><![CDATA[Adds a policy to a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="329" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="329" name="param" description="" type="\ezp\Persistence\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\Persistence\User\Policy</type>
          </tag>
          <tag line="329" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="336">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="336">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="381" package="Default">
        <name>addPolicyLimitations</name>
        <type>function</type>
        <docblock line="374">
          <description><![CDATA[Add limitations to an existing policy]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="374" name="param" description="" type="int" variable="$policyId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="374" name="param" description="" type="array" variable="$limitations">
            <type by_reference="false">array</type>
          </tag>
          <tag line="374" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="381">
          <name>$policyId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="381">
          <name>$limitations</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="430" package="Default">
        <name>removePolicy</name>
        <type>function</type>
        <docblock line="424">
          <description><![CDATA[Removes a policy from a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="424" name="param" description="" type="mixed" variable="$policyId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="424" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="430">
          <name>$policyId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role\Gateway" line="452" package="Default">
        <name>removePolicyLimitations</name>
        <type>function</type>
        <docblock line="446">
          <description><![CDATA[Remove all limitations for a policy]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="446" name="param" description="" type="mixed" variable="$policyId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="446" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="452">
          <name>$policyId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/User/Role/Gateway.php" hash="f3a9ee77b82382a1ea5b0a04bbccf4c9">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/User/Role/Gateway.php</error>
    </parse_markers>
    <namespace-alias name="RoleUpdateStruct">ezp\Persistence\User\RoleUpdateStruct</namespace-alias>
    <namespace-alias name="Policy">ezp\Persistence\User\Policy</namespace-alias>
    <namespace-alias name="Role">ezp\Persistence\User\Role</namespace-alias>
    <class final="false" abstract="true" namespace="ezp\Persistence\Storage\Legacy\User\Role" line="18" package="Default">
      <name>Gateway</name>
      <full_name>\ezp\Persistence\Storage\Legacy\User\Role\Gateway</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[Base class for content type gateways.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role" line="26" package="Default">
        <name>createRole</name>
        <type>function</type>
        <docblock line="20">
          <description><![CDATA[Create new role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="20" name="param" description="" type="\ezp\Persistence\User\Role" variable="$role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
          <tag line="20" name="return" description="" type="\ezp\Persistence\User\Role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
        </docblock>
        <argument line="26">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role" line="34" package="Default">
        <name>loadRole</name>
        <type>function</type>
        <docblock line="28">
          <description><![CDATA[Load a specified role by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="28" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="34">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role" line="42" package="Default">
        <name>loadRolesForContentObjects</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Load all roles associated with the given content objects]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="param" description="" type="array" variable="$contentIds">
            <type by_reference="false">array</type>
          </tag>
          <tag line="36" name="return" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$contentIds</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role" line="50" package="Default">
        <name>loadPoliciesByUserId</name>
        <type>function</type>
        <docblock line="44">
          <description><![CDATA[Returns the user policies associated with the user]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="44" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="44" name="return" description="" type="\ezp\Persistence\Storage\Legacy\User\Role\UserPolicy[]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\User\Role\UserPolicy[]</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role" line="57" package="Default">
        <name>updateRole</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Update role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="param" description="" type="\ezp\Persistence\User\RoleUpdateStruct" variable="$role">
            <type by_reference="false">\ezp\Persistence\User\RoleUpdateStruct</type>
          </tag>
        </docblock>
        <argument line="57">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>RoleUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role" line="64" package="Default">
        <name>deleteRole</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[Delete the specified role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="64">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role" line="73" package="Default">
        <name>addPolicy</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[Adds a policy to a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="66" name="param" description="" type="\ezp\Persistence\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\Persistence\User\Policy</type>
          </tag>
          <tag line="66" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="73">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="73">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role" line="82" package="Default">
        <name>addPolicyLimitations</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[Add limitations to an existing policy]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="param" description="" type="int" variable="$policyId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="75" name="param" description="" type="array" variable="$limitations">
            <type by_reference="false">array</type>
          </tag>
          <tag line="75" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="82">
          <name>$policyId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="82">
          <name>$limitations</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role" line="90" package="Default">
        <name>removePolicy</name>
        <type>function</type>
        <docblock line="84">
          <description><![CDATA[Removes a policy from a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="84" name="param" description="" type="mixed" variable="$policyId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="84" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="90">
          <name>$policyId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\User\Role" line="98" package="Default">
        <name>removePolicyLimitations</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Removes a policy from a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="" type="mixed" variable="$policyId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="92" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="98">
          <name>$policyId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Exception/StorageNotFound.php" hash="84e50b8870d5cb9ba5d5700c227a8101">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Exception/StorageNotFound.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Exception" line="16" package="Default">
      <name>StorageNotFound</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Exception\StorageNotFound</full_name>
      <extends>\InvalidArgumentException</extends>
      <docblock line="13">
        <description><![CDATA[Exception thrown no storage for a type was found]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Exception" line="23" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Creates a new exception for $typeName]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="" type="mixed" variable="$typeName">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$typeName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Exception/TypeNotFound.php" hash="c7ddba000d6ae254c2be852e0f184430">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Exception/TypeNotFound.php</error>
    </parse_markers>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Exception" line="17" package="Default">
      <name>TypeNotFound</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Exception\TypeNotFound</full_name>
      <extends>\ezp\Base\Exception\NotFound</extends>
      <docblock line="14">
        <description><![CDATA[Exception thrown when a Type to be loaded is not found]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Exception" line="25" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Creates a new exception for $typeId in $status;]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="19" name="param" description="" type="mixed" variable="$status">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="25">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="25">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Exception/InvalidObjectCount.php" hash="8f001ccdd0837a8a43f53d6d20d4b034">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Exception/InvalidObjectCount.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Exception" line="16" package="Default">
      <name>InvalidObjectCount</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Exception\InvalidObjectCount</full_name>
      <extends>\RuntimeException</extends>
      <docblock line="13">
        <description><![CDATA[Exception thrown when a result had an invalid object count]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Exception/RemoveLastGroupFromType.php" hash="396f2b8f32e4239b66e4808866ee53c0">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Exception/RemoveLastGroupFromType.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Exception" line="16" package="Default">
      <name>RemoveLastGroupFromType</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Exception\RemoveLastGroupFromType</full_name>
      <extends>\InvalidArgumentException</extends>
      <docblock line="13">
        <description><![CDATA[Exception thrown when a Type is to be unlinked from its last Group.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Exception" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Creates a new exception for $typeId in $status;]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="18" name="param" description="" type="mixed" variable="$status">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="24">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Exception/TypeStillHasContent.php" hash="f81da69d79464a18def0b9e383826b4a">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Exception/TypeStillHasContent.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Exception" line="16" package="Default">
      <name>TypeStillHasContent</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Exception\TypeStillHasContent</full_name>
      <extends>\LogicException</extends>
      <docblock line="13">
        <description><![CDATA[Exception thrown when a Type is to be unlinked from its last Group.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Exception" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[Creates a new exception for $typeId in $status;]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="18" name="param" description="" type="mixed" variable="$status">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="24">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Exception/GroupNotEmpty.php" hash="46bfe64226824817f0c7ed180f534daf">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Exception/GroupNotEmpty.php</error>
    </parse_markers>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy\Exception" line="17" package="Default">
      <name>GroupNotEmpty</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Exception\GroupNotEmpty</full_name>
      <extends>\InvalidArgumentException</extends>
      <docblock line="13">
        <description><![CDATA[Exception thrown if a Content\Type\Group is to be deleted which is not
empty.]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy\Exception" line="24" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="19">
          <description><![CDATA[Creates a new exception for $groupId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="19" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Handler.php" hash="dd2bd7e8c99256c6bf0bc498ffb9b8a9">
    <parse_markers>
      <error line="289" code="50012">No short description for method contentHandler()</error>
      <error line="454" code="50012">No short description for method searchHandler()</error>
      <error line="506" code="50012">No short description for method contentTypeHandler()</error>
      <error line="569" code="50012">No short description for method contentLanguageHandler()</error>
      <error line="601" code="50012">No short description for method locationHandler()</error>
      <error line="646" code="50012">No short description for method userHandler()</error>
      <error line="662" code="50012">No short description for method sectionHandler()</error>
      <error line="676" code="50012">No short description for method trashHandler()</error>
      <error line="684" code="50012">No short description for method beginTransaction()</error>
      <error line="691" code="50012">No short description for method commit()</error>
      <error line="698" code="50012">No short description for method rollback()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Handler.php</error>
    </parse_markers>
    <namespace-alias name="HandlerInterface">ezp\Persistence\Handler</namespace-alias>
    <namespace-alias name="Content">ezp\Persistence\Storage\Legacy\Content</namespace-alias>
    <namespace-alias name="Type">ezp\Persistence\Storage\Legacy\Content\Type</namespace-alias>
    <namespace-alias name="ContentHandler">ezp\Persistence\Storage\Legacy\Content\Handler</namespace-alias>
    <namespace-alias name="ContentFieldHandler">ezp\Persistence\Storage\Legacy\Content\FieldHandler</namespace-alias>
    <namespace-alias name="TypeHandler">ezp\Persistence\Storage\Legacy\Content\Type\Handler</namespace-alias>
    <namespace-alias name="TypeMapper">ezp\Persistence\Storage\Legacy\Content\Type\Mapper</namespace-alias>
    <namespace-alias name="LanguageMapper">ezp\Persistence\Storage\Legacy\Content\Language\Mapper</namespace-alias>
    <namespace-alias name="LocationHandler">ezp\Persistence\Storage\Legacy\Content\Location\Handler</namespace-alias>
    <namespace-alias name="LocationMapper">ezp\Persistence\Storage\Legacy\Content\Location\Mapper</namespace-alias>
    <namespace-alias name="ContentMapper">ezp\Persistence\Storage\Legacy\Content\Mapper</namespace-alias>
    <namespace-alias name="StorageRegistry">ezp\Persistence\Storage\Legacy\Content\StorageRegistry</namespace-alias>
    <namespace-alias name="StorageHandler">ezp\Persistence\Storage\Legacy\Content\StorageHandler</namespace-alias>
    <namespace-alias name="TransformationProcessor">ezp\Persistence\Storage\Legacy\Content\Search\TransformationProcessor</namespace-alias>
    <namespace-alias name="TransformationParser">ezp\Persistence\Storage\Legacy\Content\Search\TransformationParser</namespace-alias>
    <namespace-alias name="TransformationPcreCompiler">ezp\Persistence\Storage\Legacy\Content\Search\TransformationPcreCompiler</namespace-alias>
    <namespace-alias name="Utf8Converter">ezp\Persistence\Storage\Legacy\Content\Search\Utf8Converter</namespace-alias>
    <namespace-alias name="CriterionHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\CriterionHandler</namespace-alias>
    <namespace-alias name="SortClauseHandler">ezp\Persistence\Storage\Legacy\Content\Search\Gateway\SortClauseHandler</namespace-alias>
    <namespace-alias name="Pgsql">ezp\Persistence\Storage\Legacy\EzcDbHandler\Pgsql</namespace-alias>
    <namespace-alias name="Sqlite">ezp\Persistence\Storage\Legacy\EzcDbHandler\Sqlite</namespace-alias>
    <namespace-alias name="User">ezp\Persistence\Storage\Legacy\User</namespace-alias>
    <namespace-alias name="UserMapper">ezp\Persistence\Storage\Legacy\User\Mapper</namespace-alias>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="ezcDbFactory">ezcDbFactory</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy" line="43" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Handler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Handler</extends>
      <docblock line="37">
        <description><![CDATA[The repository handler for the legacy storage engine]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="37" name="todo" description="If possible, the handler should not receive the DSN but the database&#10;connection instead, so that the implementation becomes fully testable."/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="50" package="Default">
        <name>$contentHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="45">
          <description><![CDATA[Content handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="45" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="57" package="Default">
        <name>$contentMapper</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[Content mapper]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Mapper</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="64" package="Default">
        <name>$fieldValueConverterRegistry</name>
        <default><![CDATA[]]></default>
        <docblock line="59">
          <description><![CDATA[Field value converter registry]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="71" package="Default">
        <name>$storageRegistry</name>
        <default><![CDATA[]]></default>
        <docblock line="66">
          <description><![CDATA[Storage registry]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="66" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageRegistry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageRegistry</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="78" package="Default">
        <name>$storageHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="73">
          <description><![CDATA[Storage registry]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageHandler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="85" package="Default">
        <name>$fieldHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="80">
          <description><![CDATA[Field handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldHandler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="92" package="Default">
        <name>$searchHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="87">
          <description><![CDATA[Search handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="87" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="99" package="Default">
        <name>$contentTypeHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="94">
          <description><![CDATA[Content type handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="94" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="106" package="Default">
        <name>$contentTypeGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="101">
          <description><![CDATA[Content Type gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="101" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="113" package="Default">
        <name>$typeUpdateHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="108">
          <description><![CDATA[Content Type update handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="120" package="Default">
        <name>$locationHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="115">
          <description><![CDATA[Location handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="115" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="127" package="Default">
        <name>$locationGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="122">
          <description><![CDATA[Location gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="122" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="134" package="Default">
        <name>$locationMapper</name>
        <default><![CDATA[]]></default>
        <docblock line="129">
          <description><![CDATA[Location mapper]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="129" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Mapper</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="141" package="Default">
        <name>$userHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="136">
          <description><![CDATA[User handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="136" name="var" description="" type="\ezp\Persistence\Storage\Legacy\User\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\User\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="148" package="Default">
        <name>$sectionHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="143">
          <description><![CDATA[Section handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="143" name="var" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="155" package="Default">
        <name>$contentGateway</name>
        <default><![CDATA[]]></default>
        <docblock line="150">
          <description><![CDATA[Content gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="150" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="162" package="Default">
        <name>$languageHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="157">
          <description><![CDATA[Language handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="157" name="var" description="" type="\ezp\Persistence\Content\Language\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Language\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="169" package="Default">
        <name>$languageCache</name>
        <default><![CDATA[]]></default>
        <docblock line="164">
          <description><![CDATA[Language cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="164" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\Cache">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\Cache</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="176" package="Default">
        <name>$languageMaskGenerator</name>
        <default><![CDATA[]]></default>
        <docblock line="171">
          <description><![CDATA[Language mask generator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="171" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\MaskGenerator">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\MaskGenerator</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="183" package="Default">
        <name>$configurator</name>
        <default><![CDATA[]]></default>
        <docblock line="178">
          <description><![CDATA[Configurator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="178" name="var" description="" type="\ezp\Persistence\Storage\Legacy\Configurator">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Configurator</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="255" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="185">
          <description><![CDATA[Creates a new repository handler.]]></description>
          <long-description><![CDATA[<p>The $config parameter expects an array of configuration values as
follows:</p>

<pre><code>array(
 'dsn' =>'<database_type>://<user>:<password>@<host>/<database_name>',
 'defer_type_update' => <true|false>,
 'external_storages' => array(
     '<type_name1>' => '<storage_class_1>',
     '<type_name2>' => '<storage_class_2>',
     // ...
 ),
 'field_converters' => array(
     '<type_name1>' => '<converter_class_1>',
     '<type_name2>' => '<converter_class_2>',
     // ...
 ),
 'transformation_rule_files' => array(
     '<full_file_path_1>',
     '<full_file_path_2>',
     // ...
 )
)
</code></pre>

<p>The DSN (data source name) defines which database to use. It's format is
defined by the Apache Zeta Components Database component. Examples are:</p>

<ul>
<li>mysql://root:secret@localhost/ezp
for the MySQL database "ezp" on localhost, which will be accessed
using user "root" with password "secret"</li>
<li>sqlite://:memory:
for a SQLite in memory database (used e.g. for unit tests)</li>
</ul>

<p>For further information on the database setup, please refer to
{@see http://incubator.apache.org/zetacomponents/documentation/trunk/Database/tutorial.html#handler-usage}</p>

<p>The flag 'defer_type_update' defines if content types should be
published immediatly (false), when the
{@link \ezp\Persistence\Content\Type\Handler::publish()} method is
called, or if a background process should be triggered (true), which is
then executed by the old eZ Publish core.</p>

<p>In 'external_storages' a mapping of field type names to classes is
expected. The referred class is instantiated and the resulting object is
used to store/restore/delete/… data in external storages (e.g. another
database or a web service). The classes must comply to the
{@link \ezp\Persistence\Fields\Storage} interface. Note that due to the
configuration mechanism and missing proper DI, the classes may not
expect any constructor parameters!</p>

<p>The 'field_converter' configuration array consists of another mapping of
field type names to classes. Each of the classes is instantiated and
used to convert content fields and content type field definitions to the
legacy storage engine. The given class names must derive the
{@link \ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter}
class. As for 'external_storage' classes, none of the classes may expect
parameters in its constructor, due to missing proper DI.</p>

<p>Through the 'transformation_rule_files' array, a list of files with
full text transformation rules is given. These files are read by an
instance of
{@link \ezp\Persistence\Storage\Legacy\Converter\Search\TransformationProcessor}
and then used for normalization in the full text search.</p>]]></long-description>
          <tag line="185" name="param" description="" type="array" variable="$config">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="255">
          <name>$config</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy" line="265" package="Default">
        <name>getDatabase</name>
        <type>function</type>
        <docblock line="260">
          <description><![CDATA[Returns the Zeta Database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="260" name="return" description="" type="\ezp\Persistence\Storage\Legacy\EzcDbHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\EzcDbHandler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="292" package="Default">
        <name>contentHandler</name>
        <type>function</type>
        <docblock line="289">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="289" name="return" description="" type="\ezp\Persistence\Content\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy" line="311" package="Default">
        <name>getContentMapper</name>
        <type>function</type>
        <docblock line="306">
          <description><![CDATA[Returns a content mapper]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="306" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Mapper</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy" line="328" package="Default">
        <name>getContentGateway</name>
        <type>function</type>
        <docblock line="323">
          <description><![CDATA[Returns a content gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="323" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Gateway</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy" line="347" package="Default">
        <name>getFieldHandler</name>
        <type>function</type>
        <docblock line="342">
          <description><![CDATA[Returns a field handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="342" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldHandler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy" line="366" package="Default">
        <name>getLanguageMaskGenerator</name>
        <type>function</type>
        <docblock line="361">
          <description><![CDATA[Returns a language mask generator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="361" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\MaskGenerator">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\MaskGenerator</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="382" package="Default">
        <name>getFieldValueConverterRegistry</name>
        <type>function</type>
        <docblock line="377">
          <description><![CDATA[Returns the field value converter registry]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="377" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="400" package="Default">
        <name>getStorageRegistry</name>
        <type>function</type>
        <docblock line="395">
          <description><![CDATA[Returns the storage registry]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="395" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\StorageRegistry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\StorageRegistry</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy" line="417" package="Default">
        <name>getStorageHandler</name>
        <type>function</type>
        <docblock line="412">
          <description><![CDATA[Returns a storage handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="412" name="return" description="" type="\ezp\Persistence\Storage\Legacy\StorageHandler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\StorageHandler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy" line="434" package="Default">
        <name>getTransformationProcessor</name>
        <type>function</type>
        <docblock line="429">
          <description><![CDATA[Get a transformation processor for full text search normalization]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="429" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\TransformationProcessor">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\TransformationProcessor</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="457" package="Default">
        <name>searchHandler</name>
        <type>function</type>
        <docblock line="454">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="454" name="return" description="" type="\ezp\Persistence\Content\Search\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Search\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="509" package="Default">
        <name>contentTypeHandler</name>
        <type>function</type>
        <docblock line="506">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="506" name="return" description="" type="\ezp\Persistence\Content\Type\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Type\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy" line="527" package="Default">
        <name>getTypeUpdateHandler</name>
        <type>function</type>
        <docblock line="522">
          <description><![CDATA[Returns a Content Type update handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="522" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Update\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy" line="557" package="Default">
        <name>getContentTypeGateway</name>
        <type>function</type>
        <docblock line="552">
          <description><![CDATA[Returns the content type gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="552" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Type\Gateway">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Type\Gateway</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="572" package="Default">
        <name>contentLanguageHandler</name>
        <type>function</type>
        <docblock line="569">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="569" name="return" description="" type="\ezp\Persistence\Content\Language\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Language\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy" line="592" package="Default">
        <name>getLanguageCache</name>
        <type>function</type>
        <docblock line="587">
          <description><![CDATA[Returns a Language cache]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="587" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Language\Cache">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Language\Cache</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="604" package="Default">
        <name>locationHandler</name>
        <type>function</type>
        <docblock line="601">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="601" name="return" description="" type="\ezp\Persistence\Content\Location\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Location\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy" line="623" package="Default">
        <name>getLocationGateway</name>
        <type>function</type>
        <docblock line="618">
          <description><![CDATA[Returns a location gateway]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="618" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Gateway\EzcDatabase">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Gateway\EzcDatabase</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\Legacy" line="637" package="Default">
        <name>getLocationMapper</name>
        <type>function</type>
        <docblock line="632">
          <description><![CDATA[Returns a location mapper]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="632" name="return" description="" type="\ezp\Persistence\Storage\Legacy\Content\Location\Mapper">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Location\Mapper</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="649" package="Default">
        <name>userHandler</name>
        <type>function</type>
        <docblock line="646">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="646" name="return" description="" type="\ezp\Persistence\User\Handler">
            <type by_reference="false">\ezp\Persistence\User\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="665" package="Default">
        <name>sectionHandler</name>
        <type>function</type>
        <docblock line="662">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="662" name="return" description="" type="\ezp\Persistence\Content\Section\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Section\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="679" package="Default">
        <name>trashHandler</name>
        <type>function</type>
        <docblock line="676">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="676" name="return" description="" type="\ezp\Persistence\Content\Location\Trash\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Location\Trash\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="686" package="Default">
        <name>beginTransaction</name>
        <type>function</type>
        <docblock line="684">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="693" package="Default">
        <name>commit</name>
        <type>function</type>
        <docblock line="691">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="700" package="Default">
        <name>rollback</name>
        <type>function</type>
        <docblock line="698">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/Configurator.php" hash="f36cd463c6123ff41111707131900833">
    <parse_markers>
      <error line="30" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $config in __construct()</error>
      <error line="65" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $registry in configureExternalStorages()</error>
      <error line="82" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $registry in configureFieldConverter()</error>
      <error line="99" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $processor in configureTransformationRules()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/Configurator.php</error>
    </parse_markers>
    <namespace-alias name="StorageRegistry">ezp\Persistence\Storage\Legacy\Content\StorageRegistry</namespace-alias>
    <namespace-alias name="Registry">ezp\Persistence\Storage\Legacy\Content\FieldValue\Converter\Registry</namespace-alias>
    <namespace-alias name="TransformationProcessor">ezp\Persistence\Storage\Legacy\Content\Search\TransformationProcessor</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy" line="18" package="Default">
      <name>Configurator</name>
      <full_name>\ezp\Persistence\Storage\Legacy\Configurator</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[Configurator for the Handler]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$config</name>
        <default><![CDATA[]]></default>
        <docblock line="20">
          <description><![CDATA[Configuration array]]></description>
          <long-description><![CDATA[<p>as described in
{@link \ezp\Persistence\Storage\Legacy\Handler}.</p>]]></long-description>
          <tag line="20" name="var" description="" type="\ezp\Persistence\Storage\Legacy\string[][]">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\string[][]</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="35" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="30">
          <description><![CDATA[Creates a new configurator]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="param" description="" type="\ezp\Persistence\Storage\Legacy\string[][]" variable="$config">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\string[][]</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$config</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="45" package="Default">
        <name>getDsn</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Returns the data source name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="59" package="Default">
        <name>shouldDeferTypeUpdates</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Returns if the updating of types should be deferred]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="71" package="Default">
        <name>configureExternalStorages</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[Configurs the storage registry]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="param" description="" type="\ezp\Persistence\Storage\Legacy\StorageRegistry" variable="$registry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\StorageRegistry</type>
          </tag>
          <tag line="65" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="71">
          <name>$registry</name>
          <default><![CDATA[]]></default>
          <type>StorageRegistry</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="88" package="Default">
        <name>configureFieldConverter</name>
        <type>function</type>
        <docblock line="82">
          <description><![CDATA[Configures the field value converter registry]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="param" description="" type="\ezp\Persistence\Storage\Legacy\FieldValue\Converter\Registry" variable="$registry">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\FieldValue\Converter\Registry</type>
          </tag>
          <tag line="82" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$registry</name>
          <default><![CDATA[]]></default>
          <type>Registry</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="105" package="Default">
        <name>configureTransformationRules</name>
        <type>function</type>
        <docblock line="99">
          <description><![CDATA[Configures the search transformation processor]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="99" name="param" description="" type="\ezp\Persistence\Storage\Legacy\Content\Search\TransformationProcessor" variable="$processor">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\Content\Search\TransformationProcessor</type>
          </tag>
          <tag line="99" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="105">
          <name>$processor</name>
          <default><![CDATA[]]></default>
          <type>TransformationProcessor</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/Legacy/EzcDbHandler.php" hash="030274a79f971714591aa468f8016e3a">
    <parse_markers>
      <error line="31" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $ezcDbHandler in __construct()</error>
      <error line="54" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $query in aliasedColumn()</error>
      <error line="102" code="50015">Argument $table is missing from the Docblock of getAutoIncrementValue()</error>
      <error line="102" code="50015">Argument $column is missing from the Docblock of getAutoIncrementValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/Legacy/EzcDbHandler.php</error>
    </parse_markers>
    <namespace-alias name="ezcDbHandlerWrapped">ezcDbHandler</namespace-alias>
    <namespace-alias name="ezcQuerySelect">ezcQuerySelect</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\Legacy" line="21" package="Default">
      <name>EzcDbHandler</name>
      <full_name>\ezp\Persistence\Storage\Legacy\EzcDbHandler</full_name>
      <extends/>
      <docblock line="15">
        <description><![CDATA[Wrapper class for the zeta components database handler, providing some
additional utility functions.]]></description>
        <long-description><![CDATA[<p>Functions as a full proxy to the zeta components database class.</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="29" package="Default">
        <name>$ezcDbHandler</name>
        <default><![CDATA[]]></default>
        <docblock line="23">
          <description><![CDATA[Aggregated zeta compoenents database handler, which is target of the
method dispatching.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="var" description="" type="\ezcDbHandler">
            <type by_reference="false">\ezcDbHandler</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="37" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[Construct from zeta components database handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="param" description="" type="\ezcDbHandler" variable="$ezcDbHandler">
            <type by_reference="false">\ezcDbHandler</type>
          </tag>
          <tag line="31" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$ezcDbHandler</name>
          <default><![CDATA[]]></default>
          <type>ezcDbHandlerWrapped</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="49" package="Default">
        <name>__call</name>
        <type>function</type>
        <docblock line="42">
          <description><![CDATA[Proxy methods to the aggregated DB handler]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="42" name="param" description="" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="42" name="param" description="" type="array" variable="$parameters">
            <type by_reference="false">array</type>
          </tag>
          <tag line="42" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$method</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="49">
          <name>$parameters</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="62" package="Default">
        <name>aliasedColumn</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Creates an alias for $tableName, $columnName in $query.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="" type="\ezp\Persistence\Storage\Legacy\ezcDbQuery" variable="$query">
            <type by_reference="false">\ezp\Persistence\Storage\Legacy\ezcDbQuery</type>
          </tag>
          <tag line="54" name="param" description="" type="string" variable="$columnName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="param" description="" type="string" variable="$tableName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="54" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$query</name>
          <default><![CDATA[]]></default>
          <type>ezcQuerySelect</type>
        </argument>
        <argument line="62">
          <name>$columnName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="62">
          <name>$tableName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="80" package="Default">
        <name>quoteColumn</name>
        <type>function</type>
        <docblock line="73">
          <description><![CDATA[Returns a qualified identifier for $columnName in $tableName.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="73" name="param" description="" type="string" variable="$columnName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="param" description="" type="string" variable="$tableName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="73" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$columnName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="80">
          <name>$tableName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="95" package="Default">
        <name>quoteTable</name>
        <type>function</type>
        <docblock line="89">
          <description><![CDATA[Returns a qualified identifier for $tableName.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="89" name="param" description="" type="string" variable="$tableName">
            <type by_reference="false">string</type>
          </tag>
          <tag line="89" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="95">
          <name>$tableName</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="111" package="Default">
        <name>getAutoIncrementValue</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[Get auto increment value]]></description>
          <long-description><![CDATA[<p>Returns the value used for autoincrement tables. Usually this will just
be null. In case for sequence based RDBMS this method can return a
proper value for the given column.</p>]]></long-description>
          <tag line="102" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="111">
          <name>$table</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="111">
          <name>$column</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\Legacy" line="123" package="Default">
        <name>getSequenceName</name>
        <type>function</type>
        <docblock line="116">
          <description><![CDATA[Return the name of the affected sequence]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="116" name="param" description="" type="string" variable="$table">
            <type by_reference="false">string</type>
          </tag>
          <tag line="116" name="param" description="" type="string" variable="$column">
            <type by_reference="false">string</type>
          </tag>
          <tag line="116" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="123">
          <name>$table</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="123">
          <name>$column</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/InMemory/Backend.php" hash="0dd6a65547faab2bd60cd0bb9ac1a9f6">
    <parse_markers>
      <critical line="31" code="50019">No short description for property $data</critical>
      <error line="433" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $item in joinToValue()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/InMemory/Backend.php</error>
    </parse_markers>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="Factory">ezp\Content\FieldType\Factory</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="FieldTypeConstraints">ezp\Persistence\Content\FieldTypeConstraints</namespace-alias>
    <namespace-alias name="ValueObject">ezp\Persistence\ValueObject</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\InMemory" line="28" package="Default">
      <name>Backend</name>
      <full_name>\ezp\Persistence\Storage\InMemory\Backend</full_name>
      <extends/>
      <docblock line="19">
        <description><![CDATA[The Storage Engine backend for in memory storage
Reads input from js files in provided directory and fills in memory db store.]]></description>
        <long-description><![CDATA[<p>The in memory db store and also json representation have a one to one mapping to defined value objects.
But only their plain properties, associations are not handled and all data is stored in separate "buckets" similar
to how it would be in a RDBMS servers.</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="34" package="Default">
        <name>$data</name>
        <default><![CDATA[array()]]></default>
        <docblock line="31">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="50" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="36">
          <description><![CDATA[Construct backend and assign data]]></description>
          <long-description><![CDATA[<p>Use:
    new Backend( json_decode( file_get_contents( <strong>DIR</strong> . '/data.json' ), true ) );</p>]]></long-description>
          <tag line="36" name="param" description="Data where key is type like &quot;Content&quot; or &quot;Content\\Type&quot; which then have to map to Value objects in ezp\Persistence\*, data is an array of hash values with same structure as the corresponding value object. Foreign keys: In some cases value objects does not contain these as they are internal, so this needs to be handled in InMemory handlers by assigning keys like &quot;_typeId&quot; on Type\FieldDefintion hash values for instance. These will be stored and can be matched with find(), but will not be returned as part of VO so purely internal." type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="50">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="66" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[Creates data in in memory store]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="55" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="55" name="param" description="" type="boolean" variable="$autoIncrement">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="55" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="55" name="throws" description="On invalid $type" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="55" name="throws" description="If $autoIncrement is false but $data does not include an id" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
          <tag line="55" name="throws" description="If provided id already exists (and if defined, data contain same status property value)" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
        </docblock>
        <argument line="66">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="66">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="66">
          <name>$autoIncrement</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="100" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="90">
          <description><![CDATA[Reads data from in memory store]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="90" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="param" description="" type="int|string" variable="$id">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="90" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="90" name="throws" description="On invalid $type" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="90" name="throws" description="If data does not exist" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="90" name="throws" description="If several items exists with same id" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
        </docblock>
        <argument line="100">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="100">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="148" package="Default">
        <name>find</name>
        <type>function</type>
        <docblock line="124">
          <description><![CDATA[Find data from in memory store for a specific type that matches $match (empty array will match all)]]></description>
          <long-description><![CDATA[<p>Note does not support joins, so only properties on $type is matched.</p>]]></long-description>
          <tag line="124" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="124" name="param" description="A multi level array with property =&gt; value to match against" type="array" variable="$match">
            <type by_reference="false">array</type>
          </tag>
          <tag line="124" name="param" description="Optional info on how to join in other objects to become part of a aggregate where $type is root. Format: array( '&lt;property&gt;' =&gt; array( 'type' =&gt; '&lt;foreign-type&gt;', 'match' =&gt; array( '&lt;foreign-key-property&gt;' =&gt; '&lt;key-property&gt;' ) ), ['sub' =&gt; &lt;$joinInfo&gt;] ) Example (joining Location when finding Content): array( 'locations' =&gt; array( 'type' =&gt; 'Content\\Location', 'match' =&gt; array( 'contentId' =&gt; 'id' ) ) ) Value of 'sub' follows exactly same format as $joinInfo allowing recursive joining." type="array" variable="$joinInfo">
            <type by_reference="false">array</type>
          </tag>
          <tag line="124" name="return" description="" type="\object[]">
            <type by_reference="false">\object[]</type>
          </tag>
          <tag line="124" name="uses" description="\ezp\Persistence\Storage\InMemory\rawFind()" refers="\ezp\Persistence\Storage\InMemory\rawFind()"/>
        </docblock>
        <argument line="148">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="148">
          <name>$match</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
        <argument line="148">
          <name>$joinInfo</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="167" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="157">
          <description><![CDATA[Updates data in in memory store]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="157" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="157" name="param" description="" type="int|string" variable="$id">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="157" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="157" name="param" description="Specifies if data should be merged with existing data or not" type="boolean" variable="$union">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="157" name="return" description="False if data does not exist and can not be updated" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="157" name="uses" description="\ezp\Persistence\Storage\InMemory\updateByMatch()" refers="\ezp\Persistence\Storage\InMemory\updateByMatch()"/>
        </docblock>
        <argument line="167">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="167">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="167">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="167">
          <name>$union</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="185" package="Default">
        <name>updateByMatch</name>
        <type>function</type>
        <docblock line="172">
          <description><![CDATA[Updates data in in memory store by match]]></description>
          <long-description><![CDATA[<p>Useful in cases where a specific state of an object should be updated,
Type with version=0 for instance.</p>]]></long-description>
          <tag line="172" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="172" name="param" description="A flat array with property =&gt; value to match against" type="array" variable="$match">
            <type by_reference="false">array</type>
          </tag>
          <tag line="172" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="172" name="param" description="Specifies if data should be merged with existing data or not" type="boolean" variable="$union">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="172" name="return" description="False if data does not exist and can not be updated" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="172" name="throws" description="On invalid $type" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="185">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="185">
          <name>$match</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="185">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="185">
          <name>$union</name>
          <default><![CDATA[true]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="216" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="208">
          <description><![CDATA[Deletes data in in memory store]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="208" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="208" name="param" description="" type="int|string" variable="$id">
            <type by_reference="false">int</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="208" name="throws" description="If data does not exist" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="208" name="uses" description="\ezp\Persistence\Storage\InMemory\deleteByMatch()" refers="\ezp\Persistence\Storage\InMemory\deleteByMatch()"/>
        </docblock>
        <argument line="216">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="216">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="232" package="Default">
        <name>deleteByMatch</name>
        <type>function</type>
        <docblock line="221">
          <description><![CDATA[Deletes data in in memory store]]></description>
          <long-description><![CDATA[<p>Useful in cases where a specific state of an object should be updated,
Type with version=0 for instance.</p>]]></long-description>
          <tag line="221" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="221" name="param" description="A flat array with property =&gt; value to match against" type="array" variable="$match">
            <type by_reference="false">array</type>
          </tag>
          <tag line="221" name="throws" description="On invalid $type" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="221" name="throws" description="If no data to delete have been found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="232">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="232">
          <name>$match</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="262" package="Default">
        <name>count</name>
        <type>function</type>
        <docblock line="251">
          <description><![CDATA[Find count of objects of a given type matching a simple $match (empty array will match all)]]></description>
          <long-description><![CDATA[<p>Note does not support joins, so only properties on $type is matched.</p>]]></long-description>
          <tag line="251" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="251" name="param" description="A flat array with property =&gt; value to match against" type="array" variable="$match">
            <type by_reference="false">array</type>
          </tag>
          <tag line="251" name="param" description="See {@link find()}" type="array" variable="$joinInfo">
            <type by_reference="false">array</type>
          </tag>
          <tag line="251" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
          <tag line="251" name="uses" description="\ezp\Persistence\Storage\InMemory\rawFind()" refers="\ezp\Persistence\Storage\InMemory\rawFind()"/>
        </docblock>
        <argument line="262">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="262">
          <name>$match</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
        <argument line="262">
          <name>$joinInfo</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\InMemory" line="279" package="Default">
        <name>rawFind</name>
        <type>function</type>
        <docblock line="267">
          <description><![CDATA[Find data from in memory store for a specific type that matches $match (empty array will match all)]]></description>
          <long-description><![CDATA[<p>Note does not support joins, so only properties on $type is matched.</p>]]></long-description>
          <tag line="267" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="267" name="param" description="A multi level array with property =&gt; value to match against" type="array" variable="$match">
            <type by_reference="false">array</type>
          </tag>
          <tag line="267" name="param" description="See {@link find()}" type="array" variable="$joinInfo">
            <type by_reference="false">array</type>
          </tag>
          <tag line="267" name="return" description="" type="\array[]">
            <type by_reference="false">\array[]</type>
          </tag>
          <tag line="267" name="throws" description="On invalid $type" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
          <tag line="267" name="throws" description="When there is a collision between match rules in $joinInfo and $match" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
        </docblock>
        <argument line="279">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="279">
          <name>$match</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
        <argument line="279">
          <name>$joinInfo</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\InMemory" line="314" package="Default">
        <name>match</name>
        <type>function</type>
        <docblock line="307">
          <description><![CDATA[Checks if a $item (a raw VO item) matches $match recursively]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="307" name="param" description="" type="array" variable="$item">
            <type by_reference="false">array</type>
          </tag>
          <tag line="307" name="param" description="" type="array" variable="$match">
            <type by_reference="false">array</type>
          </tag>
          <tag line="307" name="return" description="" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="314">
          <name>$item</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="314">
          <name>$match</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\InMemory" line="379" package="Default">
        <name>getNextId</name>
        <type>function</type>
        <docblock line="371">
          <description><![CDATA[Finds the max id number and that +1]]></description>
          <long-description><![CDATA[<p>Makes sure no id conflicts occur if data for some reason contains gaps in id numbers.</p>]]></long-description>
          <tag line="371" name="param" description="" type="" variable="$type"/>
          <tag line="371" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="379">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\InMemory" line="397" package="Default">
        <name>toValue</name>
        <type>function</type>
        <docblock line="389">
          <description><![CDATA[Creates Value object based on array value from Backend.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="389" name="param" description="" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="389" name="param" description="" type="array" variable="$data">
            <type by_reference="false">array</type>
          </tag>
          <tag line="389" name="param" description="See {@link find()}" type="array" variable="$joinInfo">
            <type by_reference="false">array</type>
          </tag>
          <tag line="389" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
        </docblock>
        <argument line="397">
          <name>$type</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="397">
          <name>$data</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="397">
          <name>$joinInfo</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\InMemory" line="440" package="Default">
        <name>joinToValue</name>
        <type>function</type>
        <docblock line="433">
          <description><![CDATA[Creates value objects on join properties]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="433" name="param" description="" type="\ezp\Persistence\ValueObject" variable="$item">
            <type by_reference="false">\ezp\Persistence\ValueObject</type>
          </tag>
          <tag line="433" name="param" description="See {@link find()}" type="array" variable="$joinInfo">
            <type by_reference="false">array</type>
          </tag>
          <tag line="433" name="return" description="" type="\ezp\Persistence\ValueObject">
            <type by_reference="false">\ezp\Persistence\ValueObject</type>
          </tag>
        </docblock>
        <argument line="440">
          <name>$item</name>
          <default><![CDATA[]]></default>
          <type>ValueObject</type>
        </argument>
        <argument line="440">
          <name>$joinInfo</name>
          <default><![CDATA[array()]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/InMemory/LanguageHandler.php" hash="a36e2f5945df2bfe4e9091024c3b50aa">
    <parse_markers>
      <critical line="21" code="50019">No short description for property $handler</critical>
      <critical line="26" code="50019">No short description for property $backend</critical>
      <error line="43" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in create()</error>
      <error line="54" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $struct in update()</error>
      <critical line="16" code="50005">No short description for class LanguageHandler</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/InMemory/LanguageHandler.php</error>
    </parse_markers>
    <namespace-alias name="LanguageHandlerInterface">ezp\Persistence\Content\Language\Handler</namespace-alias>
    <namespace-alias name="Language">ezp\Persistence\Content\Language</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Language\CreateStruct</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\InMemory" line="19" package="Default">
      <name>LanguageHandler</name>
      <full_name>\ezp\Persistence\Storage\InMemory\LanguageHandler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Content\Language\Handler</extends>
      <docblock line="16">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="16" name="see" description="\ezp\Persistence\Content\Section\Handler" refers="\ezp\Persistence\Content\Section\Handler"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="29" package="Default">
        <name>$backend</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="37" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[Setups current handler instance with reference to Handler object that created it.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="param" description="" type="\ezp\Persistence\Storage\InMemory\Handler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
          <tag line="31" name="param" description="The storage engine backend" type="\ezp\Persistence\Storage\InMemory\Backend" variable="$backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>Handler</type>
        </argument>
        <argument line="37">
          <name>$backend</name>
          <default><![CDATA[]]></default>
          <type>Backend</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="49" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Create a new language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="" type="\ezp\Persistence\Content\Language\CreateStruct" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\Language\CreateStruct</type>
          </tag>
          <tag line="43" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="59" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="54">
          <description><![CDATA[Update language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="54" name="param" description="" type="\ezp\Persistence\Content\Language" variable="$struct">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$struct</name>
          <default><![CDATA[]]></default>
          <type>Language</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="75" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Get language by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="68" name="return" description="" type="\ezp\Persistence\Content\Language">
            <type by_reference="false">\ezp\Persistence\Content\Language</type>
          </tag>
          <tag line="68" name="throws" description="If language could not be found by $id" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="75">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="85" package="Default">
        <name>loadAll</name>
        <type>function</type>
        <docblock line="80">
          <description><![CDATA[Get all languages]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="80" name="return" description="" type="\ezp\Persistence\Content\Language[]">
            <type by_reference="false">\ezp\Persistence\Content\Language[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="102" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="95">
          <description><![CDATA[Delete a language]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="95" name="todo" description="Might throw an exception if the language is still associated with some content / types / (...) ?"/>
          <tag line="95" name="param" description="" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/InMemory/UserHandler.php" hash="c24d66d76148818ed8282c9ba0b40142">
    <parse_markers>
      <critical line="30" code="50019">No short description for property $handler</critical>
      <critical line="35" code="50019">No short description for property $backend</critical>
      <error line="52" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in create()</error>
      <error line="104" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $user in update()</error>
      <error line="126" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in createRole()</error>
      <error line="198" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $role in updateRole()</error>
      <error line="220" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $policy in addPolicy()</error>
      <error line="238" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $policy in updatePolicy()</error>
      <error line="324" code="50012">No short description for method getPermissionsForObject()</error>
      <error line="324" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $content in getPermissionsForObject()</error>
      <error line="324" code="50014">Name of argument $typeId does not match with the DocBlock's name $policies in getPermissionsForObject()</error>
      <error line="324" code="50015">Argument $policies is missing from the Docblock of getPermissionsForObject()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/InMemory/UserHandler.php</error>
    </parse_markers>
    <namespace-alias name="UserHandlerInterface">ezp\Persistence\User\Handler</namespace-alias>
    <namespace-alias name="User">ezp\Persistence\User</namespace-alias>
    <namespace-alias name="Role">ezp\Persistence\User\Role</namespace-alias>
    <namespace-alias name="RoleUpdateStruct">ezp\Persistence\User\RoleUpdateStruct</namespace-alias>
    <namespace-alias name="Policy">ezp\Persistence\User\Policy</namespace-alias>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="InvalidArgumentValue">ezp\Base\Exception\InvalidArgumentValue</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="NotFoundWithType">ezp\Base\Exception\NotFoundWithType</namespace-alias>
    <namespace-alias name="Handler">ezp\Persistence\Storage\InMemory\Handler</namespace-alias>
    <namespace-alias name="Backend">ezp\Persistence\Storage\InMemory\Backend</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\InMemory" line="28" package="Default">
      <name>UserHandler</name>
      <full_name>\ezp\Persistence\Storage\InMemory\UserHandler</full_name>
      <extends/>
      <extends>\ezp\Persistence\User\Handler</extends>
      <docblock line="24">
        <description><![CDATA[Storage Engine handler for user module]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="33" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="38" package="Default">
        <name>$backend</name>
        <default><![CDATA[]]></default>
        <docblock line="35">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="46" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="40">
          <description><![CDATA[Setups current handler instance with reference to Handler object that created it.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="40" name="param" description="" type="\ezp\Persistence\Storage\InMemory\Handler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
          <tag line="40" name="param" description="The storage engine backend" type="\ezp\Persistence\Storage\InMemory\Backend" variable="$backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
        <argument line="46">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>Handler</type>
        </argument>
        <argument line="46">
          <name>$backend</name>
          <default><![CDATA[]]></default>
          <type>Backend</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="62" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="52">
          <description><![CDATA[Create a user]]></description>
          <long-description><![CDATA[<p>The User struct used to create the user will contain an ID which is used
to reference the user.</p>]]></long-description>
          <tag line="52" name="param" description="" type="\ezp\Persistence\User" variable="$user">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
          <tag line="52" name="return" description="" type="\ezp\Persistence\User">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
          <tag line="52" name="throws" description="If no id was provided or if it already exists" type="\ezp\Base\Exception\Logic">
            <type by_reference="false">\ezp\Base\Exception\Logic</type>
          </tag>
        </docblock>
        <argument line="62">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="74" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="68">
          <description><![CDATA[Load user with user ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="68" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="68" name="return" description="" type="\ezp\Persistence\User">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
        </docblock>
        <argument line="74">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="86" package="Default">
        <name>loadByLogin</name>
        <type>function</type>
        <docblock line="79">
          <description><![CDATA[Load user with user login / email.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="79" name="param" description="" type="string" variable="$login">
            <type by_reference="false">string</type>
          </tag>
          <tag line="79" name="param" description="Also match user email, caller must verify that $login is a valid email address." type="boolean" variable="$alsoMatchEmail">
            <type by_reference="false">boolean</type>
          </tag>
          <tag line="79" name="return" description="" type="\ezp\Persistence\User[]">
            <type by_reference="false">\ezp\Persistence\User[]</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$login</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="86">
          <name>$alsoMatchEmail</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="109" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="104">
          <description><![CDATA[Update the user information specified by the user struct]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="104" name="param" description="" type="\ezp\Persistence\User" variable="$user">
            <type by_reference="false">\ezp\Persistence\User</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$user</name>
          <default><![CDATA[]]></default>
          <type>User</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="121" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="115">
          <description><![CDATA[Delete user with the given ID.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="115" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="115" name="todo" description="Throw on missing user?"/>
        </docblock>
        <argument line="121">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="132" package="Default">
        <name>createRole</name>
        <type>function</type>
        <docblock line="126">
          <description><![CDATA[Create new role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="126" name="param" description="" type="\ezp\Persistence\User\Role" variable="$role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
          <tag line="126" name="return" description="" type="\ezp\Persistence\User\Role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
        </docblock>
        <argument line="132">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>Role</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="151" package="Default">
        <name>loadRole</name>
        <type>function</type>
        <docblock line="144">
          <description><![CDATA[Load a specified role by id]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="144" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="144" name="return" description="" type="\ezp\Persistence\User\Role">
            <type by_reference="false">\ezp\Persistence\User\Role</type>
          </tag>
          <tag line="144" name="throws" description="If role is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="151">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="177" package="Default">
        <name>loadRolesByGroupId</name>
        <type>function</type>
        <docblock line="169">
          <description><![CDATA[Load roles assigned to a user/group]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="169" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="169" name="return" description="" type="\ezp\Persistence\User\Role[]">
            <type by_reference="false">\ezp\Persistence\User\Role[]</type>
          </tag>
          <tag line="169" name="throws" description="If user (it's content object atm) is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="169" name="throws" description="If group is not of user_group Content Type" type="\ezp\Base\Exception\NotFoundWithType">
            <type by_reference="false">\ezp\Base\Exception\NotFoundWithType</type>
          </tag>
        </docblock>
        <argument line="177">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="203" package="Default">
        <name>updateRole</name>
        <type>function</type>
        <docblock line="198">
          <description><![CDATA[Update role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="198" name="param" description="" type="\ezp\Persistence\User\RoleUpdateStruct" variable="$role">
            <type by_reference="false">\ezp\Persistence\User\RoleUpdateStruct</type>
          </tag>
        </docblock>
        <argument line="203">
          <name>$role</name>
          <default><![CDATA[]]></default>
          <type>RoleUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="214" package="Default">
        <name>deleteRole</name>
        <type>function</type>
        <docblock line="209">
          <description><![CDATA[Delete the specified role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="209" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="214">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="229" package="Default">
        <name>addPolicy</name>
        <type>function</type>
        <docblock line="220">
          <description><![CDATA[Adds a policy to a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="220" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="220" name="param" description="" type="\ezp\Persistence\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\Persistence\User\Policy</type>
          </tag>
          <tag line="220" name="return" description="" type="\ezp\Persistence\User\Policy">
            <type by_reference="false">\ezp\Persistence\User\Policy</type>
          </tag>
          <tag line="220" name="todo" description="Throw on invalid Role Id?"/>
          <tag line="220" name="throws" description="If $policy-&gt;limitation is empty (null, empty string/array..)" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="229">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="229">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="246" package="Default">
        <name>updatePolicy</name>
        <type>function</type>
        <docblock line="238">
          <description><![CDATA[Update a policy]]></description>
          <long-description><![CDATA[<p>Replaces limitations values with new values.</p>]]></long-description>
          <tag line="238" name="param" description="" type="\ezp\Persistence\User\Policy" variable="$policy">
            <type by_reference="false">\ezp\Persistence\User\Policy</type>
          </tag>
          <tag line="238" name="throws" description="If $policy-&gt;limitation is empty (null, empty string/array..)" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="246">
          <name>$policy</name>
          <default><![CDATA[]]></default>
          <type>Policy</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="263" package="Default">
        <name>removePolicy</name>
        <type>function</type>
        <docblock line="255">
          <description><![CDATA[Removes a policy from a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="255" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="255" name="param" description="" type="mixed" variable="$policyId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="255" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="255" name="todo" description="Throw exception on missing role / policy?"/>
        </docblock>
        <argument line="263">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="263">
          <name>$policyId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="276" package="Default">
        <name>loadPoliciesByUserId</name>
        <type>function</type>
        <docblock line="268">
          <description><![CDATA[Returns the user policies associated with the user (including inherited policies from user groups)]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="268" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="268" name="return" description="" type="\ezp\Persistence\User\Policy[]">
            <type by_reference="false">\ezp\Persistence\User\Policy[]</type>
          </tag>
          <tag line="268" name="throws" description="If user (it's content object atm) is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="268" name="throws" description="If user is not of user Content Type" type="\ezp\Base\Exception\NotFoundWithType">
            <type by_reference="false">\ezp\Base\Exception\NotFoundWithType</type>
          </tag>
        </docblock>
        <argument line="276">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\InMemory" line="330" package="Default">
        <name>getPermissionsForObject</name>
        <type>function</type>
        <docblock line="324">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="324" name="throws" description="" type="\ezp\Base\Exception\NotFoundWithType">
            <type by_reference="false">\ezp\Base\Exception\NotFoundWithType</type>
          </tag>
          <tag line="324" name="param" description="" type="\ezp\Persistence\Content" variable="$content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="324" name="param" description="" type="array" variable="$policies">
            <type by_reference="false">array</type>
          </tag>
          <tag line="324" name="throws" description="If $content is not of user_group Content Type" type="\ezp\Base\Exception\NotFoundWithType">
            <type by_reference="false">\ezp\Base\Exception\NotFoundWithType</type>
          </tag>
        </docblock>
        <argument line="330">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
        <argument line="330">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="330">
          <name>$policies</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="385" package="Default">
        <name>assignRole</name>
        <type>function</type>
        <docblock line="358">
          <description><![CDATA[Assign role to user group with given limitation]]></description>
          <long-description><![CDATA[<p>The limitation array may look like:</p>

<pre><code> array(
     'Subtree' => array(
         '/1/2/',
         '/1/4/',
     ),
     'Foo' => array( 'Bar' ),
     …
 )
</code></pre>

<p>Where the keys are the limitation identifiers, and the respective values
are an array of limitation values. The limitation parameter is optional.</p>]]></long-description>
          <tag line="358" name="param" description="The group Id to assign the role to. In Legacy storage engine this is the content object id of the group to assign to. Assigning to a user is not supported, only un-assigning is supported for bc." type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="358" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="358" name="param" description="@todo Remove or implement" type="array" variable="$limitation">
            <type by_reference="false">array</type>
          </tag>
          <tag line="358" name="throws" description="If group or role is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="358" name="throws" description="If group is not of user_group Content Type" type="\ezp\Base\Exception\NotFoundWithType">
            <type by_reference="false">\ezp\Base\Exception\NotFoundWithType</type>
          </tag>
          <tag line="358" name="throws" description="If group is already assigned role" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="385">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="385">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="385">
          <name>$limitation</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="412" package="Default">
        <name>unAssignRole</name>
        <type>function</type>
        <docblock line="403">
          <description><![CDATA[Un-assign a role]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="403" name="param" description="The group / user Id to un-assign a role from" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="403" name="param" description="" type="mixed" variable="$roleId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="403" name="throws" description="If group or role is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="403" name="throws" description="If group is not of user[_group] Content Type" type="\ezp\Base\Exception\NotFoundWithType">
            <type by_reference="false">\ezp\Base\Exception\NotFoundWithType</type>
          </tag>
          <tag line="403" name="throws" description="If group does not contain role" type="\ezp\Base\Exception\InvalidArgumentValue">
            <type by_reference="false">\ezp\Base\Exception\InvalidArgumentValue</type>
          </tag>
        </docblock>
        <argument line="412">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="412">
          <name>$roleId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/InMemory/SearchHandler.php" hash="b8e5cf1b72c09736817fcb924100d135">
    <parse_markers>
      <critical line="52" code="50019">No short description for property $handler</critical>
      <critical line="57" code="50019">No short description for property $backend</critical>
      <error line="74" code="50012">No short description for method find()</error>
      <error line="74" code="50015">Argument $criterion is missing from the Docblock of find()</error>
      <error line="74" code="50015">Argument $offset is missing from the Docblock of find()</error>
      <error line="74" code="50015">Argument $limit is missing from the Docblock of find()</error>
      <error line="74" code="50015">Argument $sort is missing from the Docblock of find()</error>
      <error line="74" code="50015">Argument $translations is missing from the Docblock of find()</error>
      <error line="123" code="50012">No short description for method findSingle()</error>
      <error line="123" code="50015">Argument $criterion is missing from the Docblock of findSingle()</error>
      <error line="123" code="50015">Argument $translations is missing from the Docblock of findSingle()</error>
      <error line="135" code="50012">No short description for method indexContent()</error>
      <error line="135" code="50015">Argument $content is missing from the Docblock of indexContent()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/InMemory/SearchHandler.php</error>
    </parse_markers>
    <namespace-alias name="Content">ezp\Persistence\Content</namespace-alias>
    <namespace-alias name="SearchHandlerInterface">ezp\Persistence\Content\Search\Handler</namespace-alias>
    <namespace-alias name="Result">ezp\Persistence\Content\Search\Result</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ContentId">ezp\Persistence\Content\Query\Criterion\ContentId</namespace-alias>
    <namespace-alias name="ContentTypeId">ezp\Persistence\Content\Query\Criterion\ContentTypeId</namespace-alias>
    <namespace-alias name="LocationId">ezp\Persistence\Content\Query\Criterion\LocationId</namespace-alias>
    <namespace-alias name="RemoteId">ezp\Persistence\Content\Query\Criterion\RemoteId</namespace-alias>
    <namespace-alias name="SectionId">ezp\Persistence\Content\Query\Criterion\SectionId</namespace-alias>
    <namespace-alias name="UserMetadata">ezp\Persistence\Content\Query\Criterion\UserMetadata</namespace-alias>
    <namespace-alias name="ParentLocationId">ezp\Persistence\Content\Query\Criterion\ParentLocationId</namespace-alias>
    <namespace-alias name="LogicalAnd">ezp\Persistence\Content\Query\Criterion\LogicalAnd</namespace-alias>
    <namespace-alias name="Operator">ezp\Persistence\Content\Query\Criterion\Operator</namespace-alias>
    <namespace-alias name="Subtree">ezp\Persistence\Content\Query\Criterion\Subtree</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="Exception">Exception</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\InMemory" line="50" package="Default">
      <name>SearchHandler</name>
      <full_name>\ezp\Persistence\Storage\InMemory\SearchHandler</full_name>
      <extends>\ezp\Persistence\Content\Search\Handler</extends>
      <docblock line="29">
        <description><![CDATA[The Content Search handler retrieves sets of of Content objects, based on a
set of criteria.]]></description>
        <long-description><![CDATA[<p>The basic idea of this class is to do the following:</p>

<p>1) The find methods retrieve a recursive set of filters, which define which
content objects to retrieve from the database. Those may be combined using
boolean operators.</p>

<p>2) This recursive criterion definition is visited into a query, which limits
the content retrieved from the database. We might not be able to create
sensible queries from all criterion definitions.</p>

<p>3) The query might be possible to optimize (remove empty statements),
reduce singular and and or constructs…</p>

<p>4) Additionally we might need a post-query filtering step, which filters
content objects based on criteria, which could not be converted in to
database statements.</p>]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="55" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="52">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="52" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="60" package="Default">
        <name>$backend</name>
        <default><![CDATA[]]></default>
        <docblock line="57">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="68" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[Setups current handler instance with reference to Handler object that created it.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="62" name="param" description="" type="\ezp\Persistence\Storage\InMemory\Handler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
          <tag line="62" name="param" description="The storage engine backend" type="\ezp\Persistence\Storage\InMemory\Backend" variable="$backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>Handler</type>
        </argument>
        <argument line="68">
          <name>$backend</name>
          <default><![CDATA[]]></default>
          <type>Backend</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="77" package="Default">
        <name>find</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="see" description="\ezp\Persistence\Content\Search\Handler" refers="\ezp\Persistence\Content\Search\Handler"/>
        </docblock>
        <argument line="77">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="77">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="77">
          <name>$limit</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="77">
          <name>$sort</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
        <argument line="77">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="126" package="Default">
        <name>findSingle</name>
        <type>function</type>
        <docblock line="123">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="123" name="see" description="\ezp\Persistence\Content\Search\Handler" refers="\ezp\Persistence\Content\Search\Handler"/>
        </docblock>
        <argument line="126">
          <name>$criterion</name>
          <default><![CDATA[]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="126">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="138" package="Default">
        <name>indexContent</name>
        <type>function</type>
        <docblock line="135">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="135" name="see" description="\ezp\Persistence\Content\Search\Handler" refers="\ezp\Persistence\Content\Search\Handler"/>
        </docblock>
        <argument line="138">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>Content</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="ezp\Persistence\Storage\InMemory" line="150" package="Default">
        <name>generateMatchByCriteria</name>
        <type>function</type>
        <docblock line="143">
          <description><![CDATA[Generate match array for use with Backend based on criteria]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="143" name="param" description="" type="array" variable="$criteria">
            <type by_reference="false">array</type>
          </tag>
          <tag line="143" name="param" description="" type="array" variable="$match">
            <type by_reference="false">array</type>
          </tag>
          <tag line="143" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="150">
          <name>$criteria</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
        <argument line="150">
          <name>$match</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/InMemory/LocationHandler.php" hash="4bd3650f2f6854c6763d416b4abcb88f">
    <parse_markers>
      <critical line="27" code="50019">No short description for property $handler</critical>
      <critical line="32" code="50019">No short description for property $backend</critical>
      <error line="49" code="50012">No short description for method load()</error>
      <error line="49" code="50015">Argument $locationId is missing from the Docblock of load()</error>
      <error line="57" code="50012">No short description for method copySubtree()</error>
      <error line="57" code="50015">Argument $sourceId is missing from the Docblock of copySubtree()</error>
      <error line="57" code="50015">Argument $destinationParentId is missing from the Docblock of copySubtree()</error>
      <error line="86" code="50012">No short description for method move()</error>
      <error line="86" code="50015">Argument $sourceId is missing from the Docblock of move()</error>
      <error line="86" code="50015">Argument $destinationParentId is missing from the Docblock of move()</error>
      <error line="128" code="50012">No short description for method markSubtreeModified()</error>
      <error line="128" code="50015">Argument $locationId is missing from the Docblock of markSubtreeModified()</error>
      <error line="128" code="50015">Argument $timeStamp is missing from the Docblock of markSubtreeModified()</error>
      <error line="135" code="50012">No short description for method hide()</error>
      <error line="135" code="50015">Argument $id is missing from the Docblock of hide()</error>
      <error line="152" code="50012">No short description for method unHide()</error>
      <error line="152" code="50015">Argument $id is missing from the Docblock of unHide()</error>
      <error line="197" code="50012">No short description for method swap()</error>
      <error line="197" code="50015">Argument $locationId1 is missing from the Docblock of swap()</error>
      <error line="197" code="50015">Argument $locationId2 is missing from the Docblock of swap()</error>
      <error line="226" code="50012">No short description for method update()</error>
      <error line="226" code="50015">Argument $location is missing from the Docblock of update()</error>
      <error line="226" code="50015">Argument $locationId is missing from the Docblock of update()</error>
      <error line="238" code="50012">No short description for method create()</error>
      <error line="238" code="50015">Argument $locationStruct is missing from the Docblock of create()</error>
      <error line="276" code="50012">No short description for method removeSubtree()</error>
      <error line="276" code="50015">Argument $locationId is missing from the Docblock of removeSubtree()</error>
      <error line="296" code="50012">No short description for method setSectionForSubtree()</error>
      <error line="296" code="50015">Argument $locationId is missing from the Docblock of setSectionForSubtree()</error>
      <error line="296" code="50015">Argument $sectionId is missing from the Docblock of setSectionForSubtree()</error>
      <error line="320" code="50012">No short description for method storeUrlAliasPath()</error>
      <error line="320" code="50015">Argument $path is missing from the Docblock of storeUrlAliasPath()</error>
      <error line="320" code="50015">Argument $locationId is missing from the Docblock of storeUrlAliasPath()</error>
      <error line="320" code="50015">Argument $languageName is missing from the Docblock of storeUrlAliasPath()</error>
      <error line="320" code="50015">Argument $alwaysAvailable is missing from the Docblock of storeUrlAliasPath()</error>
      <error line="327" code="50012">No short description for method createCustomUrlAlias()</error>
      <error line="327" code="50015">Argument $alias is missing from the Docblock of createCustomUrlAlias()</error>
      <error line="327" code="50015">Argument $locationId is missing from the Docblock of createCustomUrlAlias()</error>
      <error line="327" code="50015">Argument $forwarding is missing from the Docblock of createCustomUrlAlias()</error>
      <error line="327" code="50015">Argument $languageName is missing from the Docblock of createCustomUrlAlias()</error>
      <error line="327" code="50015">Argument $alwaysAvailable is missing from the Docblock of createCustomUrlAlias()</error>
      <error line="334" code="50012">No short description for method createUrlHistoryEntry()</error>
      <error line="334" code="50015">Argument $historicUrl is missing from the Docblock of createUrlHistoryEntry()</error>
      <error line="334" code="50015">Argument $locationId is missing from the Docblock of createUrlHistoryEntry()</error>
      <error line="341" code="50012">No short description for method listUrlsForLocation()</error>
      <error line="341" code="50015">Argument $locationId is missing from the Docblock of listUrlsForLocation()</error>
      <error line="341" code="50015">Argument $urlType is missing from the Docblock of listUrlsForLocation()</error>
      <error line="348" code="50012">No short description for method removeUrlsForLocation()</error>
      <error line="348" code="50015">Argument $locationId is missing from the Docblock of removeUrlsForLocation()</error>
      <error line="348" code="50015">Argument $urlIdentifier is missing from the Docblock of removeUrlsForLocation()</error>
      <error line="355" code="50012">No short description for method getPath()</error>
      <error line="355" code="50015">Argument $locationId is missing from the Docblock of getPath()</error>
      <error line="355" code="50015">Argument $language is missing from the Docblock of getPath()</error>
      <error line="445" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $vo in getPathIdentificationString()</error>
      <critical line="18" code="50005">No short description for class LocationHandler</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/InMemory/LocationHandler.php</error>
    </parse_markers>
    <namespace-alias name="LocationHandlerInterface">ezp\Persistence\Content\Location\Handler</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Location\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Location\UpdateStruct</namespace-alias>
    <namespace-alias name="LocationValue">ezp\Persistence\Content\Location</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\InMemory" line="21" package="Default">
      <name>LocationHandler</name>
      <full_name>\ezp\Persistence\Storage\InMemory\LocationHandler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Content\Location\Handler</extends>
      <docblock line="18">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="18" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
      </docblock>
      <constant namespace="ezp\Persistence\Storage\InMemory" line="23">
        <name>CHARS_ACCENT</name>
        <value><![CDATA['ÀÁÂÃÄÅàáâãäåÒÓÔÕÖØòóôõöøÈÉÊËéèêëÇçÌÍÎÏìíîïÙÚÛÜùúûüÿÑñ']]></value>
      </constant>
      <constant namespace="ezp\Persistence\Storage\InMemory" line="25">
        <name>CHARS_NOACCENT</name>
        <value><![CDATA['AAAAAAaaaaaaOOOOOOooooooEEEEeeeeCcIIIIiiiiUUUUuuuuyNn']]></value>
      </constant>
      <property final="false" static="false" visibility="protected" line="30" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="27">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="27" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="35" package="Default">
        <name>$backend</name>
        <default><![CDATA[]]></default>
        <docblock line="32">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="32" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="43" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="37">
          <description><![CDATA[Setups current handler instance with reference to Handler object that created it.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="37" name="param" description="" type="\ezp\Persistence\Storage\InMemory\Handler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
          <tag line="37" name="param" description="The storage engine backend" type="\ezp\Persistence\Storage\InMemory\Backend" variable="$backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>Handler</type>
        </argument>
        <argument line="43">
          <name>$backend</name>
          <default><![CDATA[]]></default>
          <type>Backend</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="52" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="49">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="49" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="52">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="60" package="Default">
        <name>copySubtree</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="60">
          <name>$sourceId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="60">
          <name>$destinationParentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="89" package="Default">
        <name>move</name>
        <type>function</type>
        <docblock line="86">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="86" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="89">
          <name>$sourceId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="89">
          <name>$destinationParentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="131" package="Default">
        <name>markSubtreeModified</name>
        <type>function</type>
        <docblock line="128">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="128" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="131">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="131">
          <name>$timeStamp</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="138" package="Default">
        <name>hide</name>
        <type>function</type>
        <docblock line="135">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="135" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="138">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="155" package="Default">
        <name>unHide</name>
        <type>function</type>
        <docblock line="152">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="152" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="155">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="200" package="Default">
        <name>swap</name>
        <type>function</type>
        <docblock line="197">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="197" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="200">
          <name>$locationId1</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="200">
          <name>$locationId2</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="229" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="226">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="226" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="229">
          <name>$location</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
        <argument line="229">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="241" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="238">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="238" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="241">
          <name>$locationStruct</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="279" package="Default">
        <name>removeSubtree</name>
        <type>function</type>
        <docblock line="276">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="276" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="279">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="299" package="Default">
        <name>setSectionForSubtree</name>
        <type>function</type>
        <docblock line="296">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="296" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="299">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="299">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="323" package="Default">
        <name>storeUrlAliasPath</name>
        <type>function</type>
        <docblock line="320">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="320" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="323">
          <name>$path</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="323">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="323">
          <name>$languageName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="323">
          <name>$alwaysAvailable</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="330" package="Default">
        <name>createCustomUrlAlias</name>
        <type>function</type>
        <docblock line="327">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="327" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="330">
          <name>$alias</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="330">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="330">
          <name>$forwarding</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
        <argument line="330">
          <name>$languageName</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="330">
          <name>$alwaysAvailable</name>
          <default><![CDATA[false]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="337" package="Default">
        <name>createUrlHistoryEntry</name>
        <type>function</type>
        <docblock line="334">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="334" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="337">
          <name>$historicUrl</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="337">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="344" package="Default">
        <name>listUrlsForLocation</name>
        <type>function</type>
        <docblock line="341">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="341" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="344">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="344">
          <name>$urlType</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="351" package="Default">
        <name>removeUrlsForLocation</name>
        <type>function</type>
        <docblock line="348">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="348" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="351">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="351">
          <name>$urlIdentifier</name>
          <default><![CDATA[]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="358" package="Default">
        <name>getPath</name>
        <type>function</type>
        <docblock line="355">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="355" name="see" description="\ezp\Persistence\Content\Location\Handler" refers="\ezp\Persistence\Content\Location\Handler"/>
        </docblock>
        <argument line="358">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="358">
          <name>$language</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="370" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="362">
          <description><![CDATA[Removes a location from its $locationId (but not its descendants)
Content which looses its main Location will get the first
of its other Locations assigned as the new main Location.]]></description>
          <long-description><![CDATA[<p>If content has no location left, it's removed from backend</p>]]></long-description>
          <tag line="362" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="370">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="407" package="Default">
        <name>loadByParentId</name>
        <type>function</type>
        <docblock line="400">
          <description><![CDATA[Returns locations given a parent $locationId.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="400" name="todo" description="Requires approbation"/>
          <tag line="400" name="param" description="" type="mixed" variable="$locationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="400" name="return" description="" type="\ezp\Persistence\Content\Location[]">
            <type by_reference="false">\ezp\Persistence\Content\Location[]</type>
          </tag>
        </docblock>
        <argument line="407">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\InMemory" line="426" package="Default">
        <name>updateSubtreeModificationTime</name>
        <type>function</type>
        <docblock line="422">
          <description><![CDATA[Updates subtree modification time for all locations starting from $startPathString]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="422" name="param" description="" type="string" variable="$startPathString">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="426">
          <name>$startPathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\InMemory" line="440" package="Default">
        <name>getParentPathString</name>
        <type>function</type>
        <docblock line="435">
          <description><![CDATA[Returns parent path string for $pathString]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="435" name="param" description="" type="string" variable="$pathString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="435" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="440">
          <name>$pathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\InMemory" line="450" package="Default">
        <name>getPathIdentificationString</name>
        <type>function</type>
        <docblock line="445">
          <description><![CDATA[Returns pathIdentificationString for provided location value object]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="445" name="param" description="" type="\ezp\Persistence\Content\Location" variable="$vo">
            <type by_reference="false">\ezp\Persistence\Content\Location</type>
          </tag>
          <tag line="445" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="450">
          <name>$vo</name>
          <default><![CDATA[]]></default>
          <type>LocationValue</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\InMemory" line="473" package="Default">
        <name>getStrippedContentName</name>
        <type>function</type>
        <docblock line="466">
          <description><![CDATA[Returns stripped content name from location value
All downcase, special chars to underscores
e.g. my_content_name]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="466" name="param" description="" type="\ezp\Persistence\Content\Location" variable="$vo">
            <type by_reference="false">\ezp\Persistence\Content\Location</type>
          </tag>
          <tag line="466" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="473">
          <name>$vo</name>
          <default><![CDATA[]]></default>
          <type>LocationValue</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/InMemory/ContentHandler.php" hash="ae6a7ac09a074799be763a5f78d64405">
    <parse_markers>
      <critical line="31" code="50019">No short description for property $handler</critical>
      <critical line="36" code="50019">No short description for property $backend</critical>
      <error line="53" code="50012">No short description for method create()</error>
      <error line="53" code="50015">Argument $content is missing from the Docblock of create()</error>
      <error line="112" code="50012">No short description for method createDraftFromVersion()</error>
      <error line="112" code="50015">Argument $contentId is missing from the Docblock of createDraftFromVersion()</error>
      <error line="112" code="50015">Argument $srcVersion is missing from the Docblock of createDraftFromVersion()</error>
      <error line="260" code="50012">No short description for method load()</error>
      <error line="260" code="50015">Argument $id is missing from the Docblock of load()</error>
      <error line="260" code="50015">Argument $version is missing from the Docblock of load()</error>
      <error line="260" code="50015">Argument $translations is missing from the Docblock of load()</error>
      <error line="286" code="50012">No short description for method setStatus()</error>
      <error line="286" code="50015">Argument $contentId is missing from the Docblock of setStatus()</error>
      <error line="286" code="50015">Argument $status is missing from the Docblock of setStatus()</error>
      <error line="286" code="50015">Argument $version is missing from the Docblock of setStatus()</error>
      <error line="300" code="50012">No short description for method setObjectState()</error>
      <error line="300" code="50015">Argument $contentId is missing from the Docblock of setObjectState()</error>
      <error line="300" code="50015">Argument $stateGroup is missing from the Docblock of setObjectState()</error>
      <error line="300" code="50015">Argument $state is missing from the Docblock of setObjectState()</error>
      <error line="308" code="50012">No short description for method getObjectState()</error>
      <error line="308" code="50015">Argument $contentId is missing from the Docblock of getObjectState()</error>
      <error line="308" code="50015">Argument $stateGroup is missing from the Docblock of getObjectState()</error>
      <error line="316" code="50012">No short description for method update()</error>
      <error line="316" code="50015">Argument $content is missing from the Docblock of update()</error>
      <error line="351" code="50012">No short description for method delete()</error>
      <error line="351" code="50015">Argument $contentId is missing from the Docblock of delete()</error>
      <error line="383" code="50012">No short description for method trash()</error>
      <error line="383" code="50015">Argument $contentId is missing from the Docblock of trash()</error>
      <error line="391" code="50012">No short description for method untrash()</error>
      <error line="391" code="50015">Argument $contentId is missing from the Docblock of untrash()</error>
      <error line="399" code="50012">No short description for method listVersions()</error>
      <error line="399" code="50015">Argument $contentId is missing from the Docblock of listVersions()</error>
      <error line="424" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $relation in addRelation()</error>
      <error line="532" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $updateStruct in publish()</error>
      <critical line="26" code="50005">No short description for class ContentHandler</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/InMemory/ContentHandler.php</error>
    </parse_markers>
    <namespace-alias name="ContentHandlerInterface">ezp\Persistence\Content\Handler</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\UpdateStruct</namespace-alias>
    <namespace-alias name="RestrictedVersion">ezp\Persistence\Content\RestrictedVersion</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="ContentId">ezp\Persistence\Content\Query\Criterion\ContentId</namespace-alias>
    <namespace-alias name="Operator">ezp\Persistence\Content\Query\Criterion\Operator</namespace-alias>
    <namespace-alias name="FieldValue">ezp\Persistence\Content\FieldValue</namespace-alias>
    <namespace-alias name="Content">ezp\Content</namespace-alias>
    <namespace-alias name="Version">ezp\Content\Version</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="RuntimeException">RuntimeException</namespace-alias>
    <namespace-alias name="RelationCreateStruct">ezp\Persistence\Content\Relation\CreateStruct</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\InMemory" line="29" package="Default">
      <name>ContentHandler</name>
      <full_name>\ezp\Persistence\Storage\InMemory\ContentHandler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Content\Handler</extends>
      <docblock line="26">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="see" description="\ezp\Persistence\Content\Handler" refers="\ezp\Persistence\Content\Handler"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="34" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="31">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="39" package="Default">
        <name>$backend</name>
        <default><![CDATA[]]></default>
        <docblock line="36">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="36" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="47" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="41">
          <description><![CDATA[Setups current handler instance with reference to Handler object that created it.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="41" name="param" description="" type="\ezp\Persistence\Storage\InMemory\Handler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
          <tag line="41" name="param" description="The storage engine backend" type="\ezp\Persistence\Storage\InMemory\Backend" variable="$backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
        <argument line="47">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>Handler</type>
        </argument>
        <argument line="47">
          <name>$backend</name>
          <default><![CDATA[]]></default>
          <type>Backend</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="56" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="see" description="\ezp\Persistence\Content\Handler" refers="\ezp\Persistence\Content\Handler"/>
        </docblock>
        <argument line="56">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="115" package="Default">
        <name>createDraftFromVersion</name>
        <type>function</type>
        <docblock line="112">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="112" name="see" description="\ezp\Persistence\Content\Handler" refers="\ezp\Persistence\Content\Handler"/>
        </docblock>
        <argument line="115">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="115">
          <name>$srcVersion</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="175" package="Default">
        <name>copy</name>
        <type>function</type>
        <docblock line="163">
          <description><![CDATA[Copy Content with Fields and Versions from $contentId in $version.]]></description>
          <long-description><![CDATA[<p>Copies all fields from $contentId in $version (or all versions if false)
to a new object which is returned. Version numbers are maintained.</p>]]></long-description>
          <tag line="163" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="163" name="param" description="Copy all versions if left false" type="int|false" variable="$versionNo">
            <type by_reference="false">int</type>
            <type by_reference="false">false</type>
          </tag>
          <tag line="163" name="return" description="" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
          <tag line="163" name="throws" description="If content or version is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="163" name="todo" description="Language support"/>
        </docblock>
        <argument line="175">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="175">
          <name>$versionNo</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="263" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="260">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="260" name="see" description="\ezp\Persistence\Content\Handler" refers="\ezp\Persistence\Content\Handler"/>
        </docblock>
        <argument line="263">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="263">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="263">
          <name>$translations</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="289" package="Default">
        <name>setStatus</name>
        <type>function</type>
        <docblock line="286">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="286" name="see" description="\ezp\Persistence\Content\Handler" refers="\ezp\Persistence\Content\Handler"/>
        </docblock>
        <argument line="289">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="289">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="289">
          <name>$version</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="303" package="Default">
        <name>setObjectState</name>
        <type>function</type>
        <docblock line="300">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="300" name="see" description="\ezp\Persistence\Content\Handler" refers="\ezp\Persistence\Content\Handler"/>
        </docblock>
        <argument line="303">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="303">
          <name>$stateGroup</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="303">
          <name>$state</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="311" package="Default">
        <name>getObjectState</name>
        <type>function</type>
        <docblock line="308">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="308" name="see" description="\ezp\Persistence\Content\Handler" refers="\ezp\Persistence\Content\Handler"/>
        </docblock>
        <argument line="311">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="311">
          <name>$stateGroup</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="319" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="316">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="316" name="see" description="\ezp\Persistence\Content\Handler" refers="\ezp\Persistence\Content\Handler"/>
        </docblock>
        <argument line="319">
          <name>$content</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="354" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="351">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="351" name="see" description="\ezp\Persistence\Content\Handler" refers="\ezp\Persistence\Content\Handler"/>
        </docblock>
        <argument line="354">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="386" package="Default">
        <name>trash</name>
        <type>function</type>
        <docblock line="383">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="383" name="see" description="\ezp\Persistence\Content\Handler" refers="\ezp\Persistence\Content\Handler"/>
        </docblock>
        <argument line="386">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="394" package="Default">
        <name>untrash</name>
        <type>function</type>
        <docblock line="391">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="391" name="see" description="\ezp\Persistence\Content\Handler" refers="\ezp\Persistence\Content\Handler"/>
        </docblock>
        <argument line="394">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="403" package="Default">
        <name>listVersions</name>
        <type>function</type>
        <docblock line="399">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="399" name="see" description="\ezp\Persistence\Content\Handler" refers="\ezp\Persistence\Content\Handler"/>
          <tag line="399" name="throws" description="If no version found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="403">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="431" package="Default">
        <name>addRelation</name>
        <type>function</type>
        <docblock line="424">
          <description><![CDATA[Creates a relation between $sourceContentId in $sourceContentVersionNo
and $destinationContentId with a specific $type.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="424" name="param" description="" type="\ezp\Persistence\Content\Relation\CreateStruct" variable="$relation">
            <type by_reference="false">\ezp\Persistence\Content\Relation\CreateStruct</type>
          </tag>
          <tag line="424" name="return" description="" type="\ezp\Persistence\Content\Relation">
            <type by_reference="false">\ezp\Persistence\Content\Relation</type>
          </tag>
        </docblock>
        <argument line="431">
          <name>$relation</name>
          <default><![CDATA[]]></default>
          <type>RelationCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="463" package="Default">
        <name>removeRelation</name>
        <type>function</type>
        <docblock line="457">
          <description><![CDATA[Removes a relation by relation Id.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="457" name="param" description="" type="mixed" variable="$relationId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="457" name="throws" description="if relation to be removed is not found." type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="463">
          <name>$relationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="481" package="Default">
        <name>loadRelations</name>
        <type>function</type>
        <docblock line="473">
          <description><![CDATA[Loads relations from $sourceContentId. Optionally, loads only those with $type and $sourceContentVersionNo.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="473" name="param" description="Source Content ID" type="mixed" variable="$sourceContentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="473" name="param" description="Source Content Version, null if not specified" type="mixed|null" variable="$sourceContentVersionNo">
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="473" name="param" description="{@see \ezp\Content\Relation::COMMON, \ezp\Content\Relation::EMBED, \ezp\Content\Relation::LINK, \ezp\Content\Relation::ATTRIBUTE}" type="int|null" variable="$type">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="473" name="return" description="" type="\ezp\Persistence\Content\Relation[]">
            <type by_reference="false">\ezp\Persistence\Content\Relation[]</type>
          </tag>
        </docblock>
        <argument line="481">
          <name>$sourceContentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="481">
          <name>$sourceContentVersionNo</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="481">
          <name>$type</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="514" package="Default">
        <name>loadReverseRelations</name>
        <type>function</type>
        <docblock line="505">
          <description><![CDATA[Loads relations from $contentId. Optionally, loads only those with $type.]]></description>
          <long-description><![CDATA[<p>Only loads relations against published versions.</p>]]></long-description>
          <tag line="505" name="param" description="Destination Content ID" type="mixed" variable="$destinationContentId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="505" name="param" description="{@see \ezp\Content\Relation::COMMON, \ezp\Content\Relation::EMBED, \ezp\Content\Relation::LINK, \ezp\Content\Relation::ATTRIBUTE}" type="int|null" variable="$type">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="505" name="return" description="" type="\ezp\Persistence\Content\Relation[]">
            <type by_reference="false">\ezp\Persistence\Content\Relation[]</type>
          </tag>
        </docblock>
        <argument line="514">
          <name>$destinationContentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="514">
          <name>$type</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="540" package="Default">
        <name>publish</name>
        <type>function</type>
        <docblock line="532">
          <description><![CDATA[Performs the publishing operations required to set the version identified by $updateStruct->versionNo and
$updateStruct->id as the published one.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="532" name="param" description="An UpdateStruct with id and versionNo" type="\ezp\Persistence\Content\UpdateStruct" variable="$updateStruct">
            <type by_reference="false">\ezp\Persistence\Content\UpdateStruct</type>
          </tag>
          <tag line="532" name="return" description="The published Content" type="\ezp\Persistence\Content">
            <type by_reference="false">\ezp\Persistence\Content</type>
          </tag>
        </docblock>
        <argument line="540">
          <name>$updateStruct</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\InMemory" line="570" package="Default">
        <name>getLastVersionNumber</name>
        <type>function</type>
        <docblock line="564">
          <description><![CDATA[Returns last version number for content identified by $contentId]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="564" name="param" description="" type="int" variable="$contentId">
            <type by_reference="false">int</type>
          </tag>
          <tag line="564" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="570">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/InMemory/TrashHandler.php" hash="9eb4705e1f925ef451c5d4cdb8879b25">
    <parse_markers>
      <critical line="25" code="50019">No short description for property $handler</critical>
      <critical line="30" code="50019">No short description for property $backend</critical>
      <error line="47" code="50012">No short description for method load()</error>
      <error line="47" code="50015">Argument $id is missing from the Docblock of load()</error>
      <error line="55" code="50012">No short description for method trashSubtree()</error>
      <error line="55" code="50015">Argument $locationId is missing from the Docblock of trashSubtree()</error>
      <error line="75" code="50012">No short description for method trash()</error>
      <error line="75" code="50015">Argument $locationId is missing from the Docblock of trash()</error>
      <error line="102" code="50012">No short description for method untrashLocation()</error>
      <error line="102" code="50015">Argument $trashedId is missing from the Docblock of untrashLocation()</error>
      <error line="102" code="50015">Argument $newParentId is missing from the Docblock of untrashLocation()</error>
      <error line="131" code="50015">Argument $criterion is missing from the Docblock of listTrashed()</error>
      <error line="131" code="50015">Argument $offset is missing from the Docblock of listTrashed()</error>
      <error line="131" code="50015">Argument $limit is missing from the Docblock of listTrashed()</error>
      <error line="131" code="50015">Argument $sort is missing from the Docblock of listTrashed()</error>
      <error line="147" code="50012">No short description for method emptyTrash()</error>
      <error line="173" code="50012">No short description for method emptyOne()</error>
      <error line="173" code="50015">Argument $trashedId is missing from the Docblock of emptyOne()</error>
      <critical line="20" code="50005">No short description for class TrashHandler</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/InMemory/TrashHandler.php</error>
    </parse_markers>
    <namespace-alias name="TrashHandlerInterface">ezp\Persistence\Content\Location\Trash\Handler</namespace-alias>
    <namespace-alias name="TrashedValue">ezp\Persistence\Content\Location\Trashed</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Location\CreateStruct</namespace-alias>
    <namespace-alias name="LocationValue">ezp\Persistence\Content\Location</namespace-alias>
    <namespace-alias name="Criterion">ezp\Persistence\Content\Query\Criterion</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="ParentNotFound">ezp\Content\Location\Exception\ParentNotFound</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\InMemory" line="23" package="Default">
      <name>TrashHandler</name>
      <full_name>\ezp\Persistence\Storage\InMemory\TrashHandler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Content\Location\Trash\Handler</extends>
      <docblock line="20">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="20" name="see" description="\ezp\Persistence\Content\Location\Trash\Handler" refers="\ezp\Persistence\Content\Location\Trash\Handler"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="28" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="25">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="25" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="33" package="Default">
        <name>$backend</name>
        <default><![CDATA[]]></default>
        <docblock line="30">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="30" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="41" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Setups current handler instance with reference to Handler object that created it.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="35" name="param" description="" type="\ezp\Persistence\Storage\InMemory\Handler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
          <tag line="35" name="param" description="The storage engine backend" type="\ezp\Persistence\Storage\InMemory\Backend" variable="$backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>Handler</type>
        </argument>
        <argument line="41">
          <name>$backend</name>
          <default><![CDATA[]]></default>
          <type>Backend</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="50" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="47">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="47" name="see" description="\ezp\Persistence\Content\Location\Trash\Handler" refers="\ezp\Persistence\Content\Location\Trash\Handler"/>
        </docblock>
        <argument line="50">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="58" package="Default">
        <name>trashSubtree</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="see" description="\ezp\Persistence\Content\Location\Trash\Handler" refers="\ezp\Persistence\Content\Location\Trash\Handler"/>
        </docblock>
        <argument line="58">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\InMemory" line="78" package="Default">
        <name>trash</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="see" description="\ezp\Persistence\Content\Location\Trash\Handler" refers="\ezp\Persistence\Content\Location\Trash\Handler"/>
        </docblock>
        <argument line="78">
          <name>$locationId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="105" package="Default">
        <name>untrashLocation</name>
        <type>function</type>
        <docblock line="102">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="102" name="see" description="\ezp\Persistence\Content\Location\Trash\Handler" refers="\ezp\Persistence\Content\Location\Trash\Handler"/>
        </docblock>
        <argument line="105">
          <name>$trashedId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="105">
          <name>$newParentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="138" package="Default">
        <name>listTrashed</name>
        <type>function</type>
        <docblock line="131">
          <description><![CDATA[Limited implementation (no criterion/sort support).]]></description>
          <long-description><![CDATA[<p>Will return all trashed locations, regardless criterion filter or sort clauses provided.
Offset/Limit is however supported</p>]]></long-description>
          <tag line="131" name="see" description="\ezp\Persistence\Content\Location\Trash\Handler" refers="\ezp\Persistence\Content\Location\Trash\Handler"/>
        </docblock>
        <argument line="138">
          <name>$criterion</name>
          <default><![CDATA[null]]></default>
          <type>Criterion</type>
        </argument>
        <argument line="138">
          <name>$offset</name>
          <default><![CDATA[0]]></default>
          <type/>
        </argument>
        <argument line="138">
          <name>$limit</name>
          <default><![CDATA[null]]></default>
          <type/>
        </argument>
        <argument line="138">
          <name>$sort</name>
          <default><![CDATA[null]]></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="150" package="Default">
        <name>emptyTrash</name>
        <type>function</type>
        <docblock line="147">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="147" name="see" description="\ezp\Persistence\Content\Location\Trash\Handler" refers="\ezp\Persistence\Content\Location\Trash\Handler"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="176" package="Default">
        <name>emptyOne</name>
        <type>function</type>
        <docblock line="173">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="173" name="see" description="\ezp\Persistence\Content\Location\Trash\Handler" refers="\ezp\Persistence\Content\Location\Trash\Handler"/>
        </docblock>
        <argument line="176">
          <name>$trashedId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\InMemory" line="187" package="Default">
        <name>updateSubtreeModificationTime</name>
        <type>function</type>
        <docblock line="183">
          <description><![CDATA[Updates subtree modification time for all locations starting from $startPathString]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="183" name="param" description="" type="string" variable="$startPathString">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$startPathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="ezp\Persistence\Storage\InMemory" line="201" package="Default">
        <name>getParentPathString</name>
        <type>function</type>
        <docblock line="196">
          <description><![CDATA[Returns parent path string for $pathString]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="196" name="param" description="" type="string" variable="$pathString">
            <type by_reference="false">string</type>
          </tag>
          <tag line="196" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$pathString</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/InMemory/Handler.php" hash="fe35fa4fc2465c630457b493e7d55b09">
    <parse_markers>
      <error line="43" code="50012">No short description for method contentHandler()</error>
      <error line="51" code="50012">No short description for method searchHandler()</error>
      <error line="59" code="50012">No short description for method contentTypeHandler()</error>
      <error line="67" code="50012">No short description for method contentLanguageHandler()</error>
      <error line="75" code="50012">No short description for method locationHandler()</error>
      <error line="83" code="50012">No short description for method userHandler()</error>
      <error line="91" code="50012">No short description for method sectionHandler()</error>
      <error line="99" code="50012">No short description for method trashHandler()</error>
      <error line="107" code="50012">No short description for method beginTransaction()</error>
      <error line="114" code="50012">No short description for method commit()</error>
      <error line="121" code="50012">No short description for method rollback()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/InMemory/Handler.php</error>
    </parse_markers>
    <namespace-alias name="HandlerInterface">ezp\Persistence\Handler</namespace-alias>
    <namespace-alias name="MissingClass">ezp\Base\Exception\MissingClass</namespace-alias>
    <namespace-alias name="RuntimeException">RuntimeException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\InMemory" line="19" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Storage\InMemory\Handler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Handler</extends>
      <docblock line="15">
        <description><![CDATA[The main handler for in memory Storage Engine]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="26" package="Default">
        <name>$serviceHandlers</name>
        <default><![CDATA[array()]]></default>
        <docblock line="21">
          <description><![CDATA[Instances of handlers]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="\object[]">
            <type by_reference="false">\object[]</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="33" package="Default">
        <name>$backend</name>
        <default><![CDATA[]]></default>
        <docblock line="28">
          <description><![CDATA[Instance of in-memory backend that reads data from js files into memory and writes to memory]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="38" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="35">
          <description><![CDATA[Setup instance with an instance of Backend class]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="46" package="Default">
        <name>contentHandler</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="return" description="" type="\ezp\Persistence\Content\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="54" package="Default">
        <name>searchHandler</name>
        <type>function</type>
        <docblock line="51">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="51" name="return" description="" type="\ezp\Persistence\Content\Search\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Search\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="62" package="Default">
        <name>contentTypeHandler</name>
        <type>function</type>
        <docblock line="59">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="59" name="return" description="" type="\ezp\Persistence\Content\Type\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Type\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="70" package="Default">
        <name>contentLanguageHandler</name>
        <type>function</type>
        <docblock line="67">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="67" name="return" description="" type="\ezp\Persistence\Content\Language\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Language\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="78" package="Default">
        <name>locationHandler</name>
        <type>function</type>
        <docblock line="75">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="75" name="return" description="" type="\ezp\Persistence\Content\Location\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Location\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="86" package="Default">
        <name>userHandler</name>
        <type>function</type>
        <docblock line="83">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="83" name="return" description="" type="\ezp\Persistence\User\Handler">
            <type by_reference="false">\ezp\Persistence\User\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="94" package="Default">
        <name>sectionHandler</name>
        <type>function</type>
        <docblock line="91">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="91" name="return" description="" type="\ezp\Persistence\Content\Section\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Section\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="102" package="Default">
        <name>trashHandler</name>
        <type>function</type>
        <docblock line="99">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="99" name="return" description="" type="\ezp\Persistence\Content\Location\Trash\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Location\Trash\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="109" package="Default">
        <name>beginTransaction</name>
        <type>function</type>
        <docblock line="107">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="116" package="Default">
        <name>commit</name>
        <type>function</type>
        <docblock line="114">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="123" package="Default">
        <name>rollback</name>
        <type>function</type>
        <docblock line="121">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="ezp\Persistence\Storage\InMemory" line="135" package="Default">
        <name>serviceHandler</name>
        <type>function</type>
        <docblock line="128">
          <description><![CDATA[Get/create instance of service handler objects]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="128" name="param" description="" type="string" variable="$className">
            <type by_reference="false">string</type>
          </tag>
          <tag line="128" name="return" description="" type="object">
            <type by_reference="false">object</type>
          </tag>
          <tag line="128" name="throws" description="" type="\RuntimeException">
            <type by_reference="false">\RuntimeException</type>
          </tag>
        </docblock>
        <argument line="135">
          <name>$className</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/InMemory/ContentTypeHandler.php" hash="c92ab9ffd2a2ffd2375cfdd42c654c0c">
    <parse_markers>
      <critical line="33" code="50019">No short description for property $handler</critical>
      <critical line="38" code="50019">No short description for property $backend</critical>
      <error line="55" code="50012">No short description for method createGroup()</error>
      <error line="55" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $group in createGroup()</error>
      <error line="65" code="50012">No short description for method updateGroup()</error>
      <error line="65" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $group in updateGroup()</error>
      <error line="74" code="50012">No short description for method deleteGroup()</error>
      <error line="108" code="50012">No short description for method loadGroup()</error>
      <error line="117" code="50012">No short description for method loadAllGroups()</error>
      <error line="125" code="50012">No short description for method loadContentTypes()</error>
      <error line="197" code="50012">No short description for method create()</error>
      <error line="197" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in create()</error>
      <error line="216" code="50012">No short description for method update()</error>
      <error line="216" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $contentType in update()</error>
      <error line="231" code="50012">No short description for method delete()</error>
      <error line="371" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in addFieldDefinition()</error>
      <error line="424" code="50016">The type hint of the argument is incorrect for the type definition of the @param tag with argument $fieldDefinition in updateFieldDefinition()</error>
      <critical line="26" code="50005">No short description for class ContentTypeHandler</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/InMemory/ContentTypeHandler.php</error>
    </parse_markers>
    <namespace-alias name="ContentTypeHandlerInterface">ezp\Persistence\Content\Type\Handler</namespace-alias>
    <namespace-alias name="Type">ezp\Persistence\Content\Type</namespace-alias>
    <namespace-alias name="CreateStruct">ezp\Persistence\Content\Type\CreateStruct</namespace-alias>
    <namespace-alias name="UpdateStruct">ezp\Persistence\Content\Type\UpdateStruct</namespace-alias>
    <namespace-alias name="FieldDefinition">ezp\Persistence\Content\Type\FieldDefinition</namespace-alias>
    <namespace-alias name="GroupCreateStruct">ezp\Persistence\Content\Type\Group\CreateStruct</namespace-alias>
    <namespace-alias name="GroupUpdateStruct">ezp\Persistence\Content\Type\Group\UpdateStruct</namespace-alias>
    <namespace-alias name="Group">ezp\Persistence\Content\Type\Group</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="BadRequest">ezp\Base\Exception\BadRequest</namespace-alias>
    <namespace-alias name="Handler">ezp\Persistence\Storage\InMemory\Handler</namespace-alias>
    <namespace-alias name="Backend">ezp\Persistence\Storage\InMemory\Backend</namespace-alias>
    <namespace-alias name="RuntimeException">RuntimeException</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\InMemory" line="31" package="Default">
      <name>ContentTypeHandler</name>
      <full_name>\ezp\Persistence\Storage\InMemory\ContentTypeHandler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Content\Type\Handler</extends>
      <docblock line="26">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="26" name="see" description="\ezp\Persistence\Content\Type\Handler" refers="\ezp\Persistence\Content\Type\Handler"/>
        <tag line="26" name="todo" description="Validate $status arguments"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="36" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="33">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="41" package="Default">
        <name>$backend</name>
        <default><![CDATA[]]></default>
        <docblock line="38">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="49" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[Setups current handler instance with reference to Handler object that created it.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="param" description="" type="\ezp\Persistence\Storage\InMemory\Handler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
          <tag line="43" name="param" description="The storage engine backend" type="\ezp\Persistence\Storage\InMemory\Backend" variable="$backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
        <argument line="49">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>Handler</type>
        </argument>
        <argument line="49">
          <name>$backend</name>
          <default><![CDATA[]]></default>
          <type>Backend</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="59" package="Default">
        <name>createGroup</name>
        <type>function</type>
        <docblock line="55">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="55" name="param" description="" type="\ezp\Persistence\Content\Type\Group\CreateStruct" variable="$group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group\CreateStruct</type>
          </tag>
          <tag line="55" name="return" description="" type="\ezp\Persistence\Content\Type\Group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>GroupCreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="68" package="Default">
        <name>updateGroup</name>
        <type>function</type>
        <docblock line="65">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="65" name="param" description="" type="\ezp\Persistence\Content\Type\Group\UpdateStruct" variable="$group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group\UpdateStruct</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$group</name>
          <default><![CDATA[]]></default>
          <type>GroupUpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="78" package="Default">
        <name>deleteGroup</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="74" name="todo" description="Throw exception if group is not found, also if group contains types"/>
        </docblock>
        <argument line="78">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="112" package="Default">
        <name>loadGroup</name>
        <type>function</type>
        <docblock line="108">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="108" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="108" name="return" description="" type="\ezp\Persistence\Content\Type\Group">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="120" package="Default">
        <name>loadAllGroups</name>
        <type>function</type>
        <docblock line="117">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="117" name="return" description="" type="\ezp\Persistence\Content\Type\Group[]">
            <type by_reference="false">\ezp\Persistence\Content\Type\Group[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="130" package="Default">
        <name>loadContentTypes</name>
        <type>function</type>
        <docblock line="125">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="125" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="125" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="125" name="return" description="" type="\ezp\Persistence\Content\Type[]">
            <type by_reference="false">\ezp\Persistence\Content\Type[]</type>
          </tag>
        </docblock>
        <argument line="130">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="130">
          <name>$status</name>
          <default><![CDATA[Type::STATUS_DEFINED]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="152" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="144">
          <description><![CDATA[Load a content type by id and status]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="144" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="144" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="144" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="144" name="throws" description="If type with provided status is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="152">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="152">
          <name>$status</name>
          <default><![CDATA[Type::STATUS_DEFINED]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="178" package="Default">
        <name>loadByIdentifier</name>
        <type>function</type>
        <docblock line="171">
          <description><![CDATA[Load a (defined) content type by identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="171" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="171" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="171" name="throws" description="If defined type is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="178">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="201" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="197">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="197" name="param" description="" type="\ezp\Persistence\Content\Type\CreateStruct" variable="$contentType">
            <type by_reference="false">\ezp\Persistence\Content\Type\CreateStruct</type>
          </tag>
          <tag line="197" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>CreateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="221" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="216">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="216" name="param" description="" type="mixed" variable="$typeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="216" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="216" name="param" description="" type="\ezp\Persistence\Content\Type\UpdateStruct" variable="$contentType">
            <type by_reference="false">\ezp\Persistence\Content\Type\UpdateStruct</type>
          </tag>
        </docblock>
        <argument line="221">
          <name>$typeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="221">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="221">
          <name>$contentType</name>
          <default><![CDATA[]]></default>
          <type>UpdateStruct</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="235" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="231">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="231" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="231" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="235">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="235">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="257" package="Default">
        <name>createDraft</name>
        <type>function</type>
        <docblock line="247">
          <description><![CDATA[Creates a draft of existing defined content type]]></description>
          <long-description><![CDATA[<p>Updates modified date, sets $modifierId and status to Type::STATUS_DRAFT on the new returned draft.</p>]]></long-description>
          <tag line="247" name="param" description="" type="mixed" variable="$modifierId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="247" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="247" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="247" name="throws" description="If type with defined status is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="257">
          <name>$modifierId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="257">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="290" package="Default">
        <name>copy</name>
        <type>function</type>
        <docblock line="278">
          <description><![CDATA[Copy a Type incl fields and group-relations from a given status to a new Type with status {@link Type::STATUS_DRAFT}]]></description>
          <long-description><![CDATA[<p>New Content Type will have $userId as creator / modifier, created / modified should be updated, new remoteId
and identifier should be appended with '_' and new remoteId or another unique number.</p>]]></long-description>
          <tag line="278" name="param" description="" type="mixed" variable="$userId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="278" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="278" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="278" name="return" description="" type="\ezp\Persistence\Content\Type">
            <type by_reference="false">\ezp\Persistence\Content\Type</type>
          </tag>
          <tag line="278" name="throws" description="If user or type with provided status is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="290">
          <name>$userId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="290">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="290">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="316" package="Default">
        <name>unlink</name>
        <type>function</type>
        <docblock line="307">
          <description><![CDATA[Unlink a content type group from a content type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="307" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="307" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="307" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="307" name="throws" description="If group or type with provided status is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="307" name="throws" description="If type is not part of group or group is last on type (delete type instead)" type="\ezp\Base\Exception\BadRequest">
            <type by_reference="false">\ezp\Base\Exception\BadRequest</type>
          </tag>
        </docblock>
        <argument line="316">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="316">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="316">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="351" package="Default">
        <name>link</name>
        <type>function</type>
        <docblock line="342">
          <description><![CDATA[Link a content type group with a content type]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="342" name="param" description="" type="mixed" variable="$groupId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="342" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="342" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="342" name="throws" description="If group or type with provided status is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="342" name="throws" description="If type is already part of group" type="\ezp\Base\Exception\BadRequest">
            <type by_reference="false">\ezp\Base\Exception\BadRequest</type>
          </tag>
        </docblock>
        <argument line="351">
          <name>$groupId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="351">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="351">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="385" package="Default">
        <name>addFieldDefinition</name>
        <type>function</type>
        <docblock line="371">
          <description><![CDATA[Adds a new field definition to an existing Type.]]></description>
          <long-description><![CDATA[<p>This method creates a new version of the Type with the $fieldDefinition
added. It does not update existing content objects depending on the
field (default) values.</p>]]></long-description>
          <tag line="371" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="371" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="371" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="371" name="return" description="" type="\ezp\Persistence\Content\Type\FieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="371" name="throws" description="If type is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="371" name="todo" description="Add FieldDefintion\CreateStruct?"/>
        </docblock>
        <argument line="385">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="385">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="385">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="412" package="Default">
        <name>removeFieldDefinition</name>
        <type>function</type>
        <docblock line="398">
          <description><![CDATA[Removes a field definition from an existing Type.]]></description>
          <long-description><![CDATA[<p>This method creates a new version of the Type with the field definition
referred to by $fieldDefinitionId removed. It does not update existing
content objects depending on the field (default) values.</p>]]></long-description>
          <tag line="398" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="398" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="398" name="param" description="" type="mixed" variable="$fieldDefinitionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="398" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="398" name="throws" description="If field is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
          <tag line="398" name="todo" description="Add FieldDefintion\UpdateStruct?"/>
        </docblock>
        <argument line="412">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="412">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="412">
          <name>$fieldDefinitionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="438" package="Default">
        <name>updateFieldDefinition</name>
        <type>function</type>
        <docblock line="424">
          <description><![CDATA[This method updates the given $fieldDefinition on a Type.]]></description>
          <long-description><![CDATA[<p>This method creates a new version of the Type with the updated
$fieldDefinition. It does not update existing content objects depending
on the
field (default) values.</p>]]></long-description>
          <tag line="424" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="424" name="param" description="One of Type::STATUS_DEFINED|Type::STATUS_DRAFT|Type::STATUS_MODIFIED" type="int" variable="$status">
            <type by_reference="false">int</type>
          </tag>
          <tag line="424" name="param" description="" type="\ezp\Persistence\Content\Type\FieldDefinition" variable="$fieldDefinition">
            <type by_reference="false">\ezp\Persistence\Content\Type\FieldDefinition</type>
          </tag>
          <tag line="424" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="424" name="throws" description="If field is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="438">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="438">
          <name>$status</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="438">
          <name>$fieldDefinition</name>
          <default><![CDATA[]]></default>
          <type>FieldDefinition</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="468" package="Default">
        <name>publish</name>
        <type>function</type>
        <docblock line="454">
          <description><![CDATA[Update content objects]]></description>
          <long-description><![CDATA[<p>Updates content objects, depending on the changed field definitions.</p>

<p>A content type has a state which tells if its content objects yet have
been adapted.</p>

<p>Flags the content type as updated.</p>]]></long-description>
          <tag line="454" name="param" description="" type="mixed" variable="$contentTypeId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="454" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
          <tag line="454" name="throws" description="If type with $contentTypeId and Type::STATUS_DRAFT is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="468">
          <name>$contentTypeId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Storage/InMemory/SectionHandler.php" hash="891ac300f71f0badecdf4a5a734146af">
    <parse_markers>
      <critical line="21" code="50019">No short description for property $handler</critical>
      <critical line="26" code="50019">No short description for property $backend</critical>
      <error line="43" code="50012">No short description for method create()</error>
      <error line="43" code="50015">Argument $name is missing from the Docblock of create()</error>
      <error line="43" code="50015">Argument $identifier is missing from the Docblock of create()</error>
      <error line="57" code="50012">No short description for method update()</error>
      <error line="57" code="50015">Argument $id is missing from the Docblock of update()</error>
      <error line="57" code="50015">Argument $name is missing from the Docblock of update()</error>
      <error line="57" code="50015">Argument $identifier is missing from the Docblock of update()</error>
      <error line="74" code="50012">No short description for method load()</error>
      <error line="74" code="50015">Argument $id is missing from the Docblock of load()</error>
      <error line="110" code="50012">No short description for method delete()</error>
      <error line="110" code="50015">Argument $id is missing from the Docblock of delete()</error>
      <error line="118" code="50012">No short description for method assign()</error>
      <error line="118" code="50015">Argument $sectionId is missing from the Docblock of assign()</error>
      <error line="118" code="50015">Argument $contentId is missing from the Docblock of assign()</error>
      <critical line="16" code="50005">No short description for class SectionHandler</critical>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Storage/InMemory/SectionHandler.php</error>
    </parse_markers>
    <namespace-alias name="SectionHandlerInterface">ezp\Persistence\Content\Section\Handler</namespace-alias>
    <namespace-alias name="NotFound">ezp\Base\Exception\NotFound</namespace-alias>
    <namespace-alias name="Logic">ezp\Base\Exception\Logic</namespace-alias>
    <class final="false" abstract="false" namespace="ezp\Persistence\Storage\InMemory" line="19" package="Default">
      <name>SectionHandler</name>
      <full_name>\ezp\Persistence\Storage\InMemory\SectionHandler</full_name>
      <extends/>
      <extends>\ezp\Persistence\Content\Section\Handler</extends>
      <docblock line="16">
        <description><![CDATA[]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="16" name="see" description="\ezp\Persistence\Content\Section\Handler" refers="\ezp\Persistence\Content\Section\Handler"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="24" package="Default">
        <name>$handler</name>
        <default><![CDATA[]]></default>
        <docblock line="21">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="21" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="29" package="Default">
        <name>$backend</name>
        <default><![CDATA[]]></default>
        <docblock line="26">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="26" name="var" description="" type="\ezp\Persistence\Storage\InMemory\Backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="37" package="Default">
        <name>__construct</name>
        <type>function</type>
        <docblock line="31">
          <description><![CDATA[Setups current handler instance with reference to Handler object that created it.]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="31" name="param" description="" type="\ezp\Persistence\Storage\InMemory\Handler" variable="$handler">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Handler</type>
          </tag>
          <tag line="31" name="param" description="The storage engine backend" type="\ezp\Persistence\Storage\InMemory\Backend" variable="$backend">
            <type by_reference="false">\ezp\Persistence\Storage\InMemory\Backend</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$handler</name>
          <default><![CDATA[]]></default>
          <type>Handler</type>
        </argument>
        <argument line="37">
          <name>$backend</name>
          <default><![CDATA[]]></default>
          <type>Backend</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="46" package="Default">
        <name>create</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="see" description="\ezp\Persistence\Content\Section\Handler" refers="\ezp\Persistence\Content\Section\Handler"/>
        </docblock>
        <argument line="46">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="46">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="60" package="Default">
        <name>update</name>
        <type>function</type>
        <docblock line="57">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="57" name="see" description="\ezp\Persistence\Content\Section\Handler" refers="\ezp\Persistence\Content\Section\Handler"/>
        </docblock>
        <argument line="60">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="60">
          <name>$name</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="60">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="77" package="Default">
        <name>load</name>
        <type>function</type>
        <docblock line="74">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="74" name="see" description="\ezp\Persistence\Content\Section\Handler" refers="\ezp\Persistence\Content\Section\Handler"/>
        </docblock>
        <argument line="77">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="87" package="Default">
        <name>loadAll</name>
        <type>function</type>
        <docblock line="82">
          <description><![CDATA[Get all section data]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="82" name="return" description="" type="\ezp\Persistence\Content\Section[]">
            <type by_reference="false">\ezp\Persistence\Content\Section[]</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="99" package="Default">
        <name>loadByIdentifier</name>
        <type>function</type>
        <docblock line="92">
          <description><![CDATA[Get section data by identifier]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="92" name="param" description="" type="string" variable="$identifier">
            <type by_reference="false">string</type>
          </tag>
          <tag line="92" name="return" description="" type="\ezp\Persistence\Content\Section">
            <type by_reference="false">\ezp\Persistence\Content\Section</type>
          </tag>
          <tag line="92" name="throws" description="If section is not found" type="\ezp\Base\Exception\NotFound">
            <type by_reference="false">\ezp\Base\Exception\NotFound</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$identifier</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="113" package="Default">
        <name>delete</name>
        <type>function</type>
        <docblock line="110">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="110" name="see" description="\ezp\Persistence\Content\Section\Handler" refers="\ezp\Persistence\Content\Section\Handler"/>
        </docblock>
        <argument line="113">
          <name>$id</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="121" package="Default">
        <name>assign</name>
        <type>function</type>
        <docblock line="118">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="118" name="see" description="\ezp\Persistence\Content\Section\Handler" refers="\ezp\Persistence\Content\Section\Handler"/>
        </docblock>
        <argument line="121">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
        <argument line="121">
          <name>$contentId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence\Storage\InMemory" line="138" package="Default">
        <name>assignmentsCount</name>
        <type>function</type>
        <docblock line="132">
          <description><![CDATA[Number of content assignments a Section has]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="132" name="param" description="" type="mixed" variable="$sectionId">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="132" name="return" description="" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="138">
          <name>$sectionId</name>
          <default><![CDATA[]]></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="ezp/Persistence/Handler.php" hash="d46bad00d7ee7fbda49addcce3e5307a">
    <parse_markers>
      <error line="18" code="50012">No short description for method contentHandler()</error>
      <error line="23" code="50012">No short description for method searchHandler()</error>
      <error line="28" code="50012">No short description for method contentTypeHandler()</error>
      <error line="33" code="50012">No short description for method contentLanguageHandler()</error>
      <error line="38" code="50012">No short description for method locationHandler()</error>
      <error line="43" code="50012">No short description for method trashHandler()</error>
      <error line="48" code="50012">No short description for method userHandler()</error>
      <error line="53" code="50012">No short description for method sectionHandler()</error>
      <error line="58" code="50012">No short description for method beginTransaction()</error>
      <error line="62" code="50012">No short description for method commit()</error>
      <error line="66" code="50012">No short description for method rollback()</error>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/Persistence/Handler.php</error>
    </parse_markers>
    <interface namespace="ezp\Persistence" line="16" package="Default">
      <name>Handler</name>
      <full_name>\ezp\Persistence\Handler</full_name>
      <extends/>
      <docblock line="12">
        <description><![CDATA[The main handler for Storage Engine]]></description>
        <long-description><![CDATA[]]></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="21" package="Default">
        <name>contentHandler</name>
        <type>function</type>
        <docblock line="18">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="18" name="return" description="" type="\ezp\Persistence\Content\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="26" package="Default">
        <name>searchHandler</name>
        <type>function</type>
        <docblock line="23">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="23" name="return" description="" type="\ezp\Persistence\Content\Search\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Search\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="31" package="Default">
        <name>contentTypeHandler</name>
        <type>function</type>
        <docblock line="28">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="28" name="return" description="" type="\ezp\Persistence\Content\Type\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Type\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="36" package="Default">
        <name>contentLanguageHandler</name>
        <type>function</type>
        <docblock line="33">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="33" name="return" description="" type="\ezp\Persistence\Content\Language\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Language\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="41" package="Default">
        <name>locationHandler</name>
        <type>function</type>
        <docblock line="38">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="38" name="return" description="" type="\ezp\Persistence\Content\Location\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Location\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="46" package="Default">
        <name>trashHandler</name>
        <type>function</type>
        <docblock line="43">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="43" name="return" description="" type="\ezp\Persistence\Content\Location\Trash\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Location\Trash\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="51" package="Default">
        <name>userHandler</name>
        <type>function</type>
        <docblock line="48">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="48" name="return" description="" type="\ezp\Persistence\User\Handler">
            <type by_reference="false">\ezp\Persistence\User\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="56" package="Default">
        <name>sectionHandler</name>
        <type>function</type>
        <docblock line="53">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
          <tag line="53" name="return" description="" type="\ezp\Persistence\Content\Section\Handler">
            <type by_reference="false">\ezp\Persistence\Content\Section\Handler</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="60" package="Default">
        <name>beginTransaction</name>
        <type>function</type>
        <docblock line="58">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="64" package="Default">
        <name>commit</name>
        <type>function</type>
        <docblock line="62">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="ezp\Persistence" line="68" package="Default">
        <name>rollback</name>
        <type>function</type>
        <docblock line="66">
          <description><![CDATA[]]></description>
          <long-description><![CDATA[]]></long-description>
        </docblock>
      </method>
    </interface>
  </file>
  <file path="ezp/index.php" hash="715167d7a17566e9e268892672616b9a">
    <parse_markers>
      <error line="1" code="50007">No page-level DocBlock was found in file ezp/index.php</error>
    </parse_markers>
    <namespace-alias name="Configuration">ezp\Base\Configuration</namespace-alias>
    <namespace-alias name="ServiceContainer">ezp\Base\ServiceContainer</namespace-alias>
    <namespace-alias name="Content">ezp\Content\Concrete</namespace-alias>
    <namespace-alias name="User">ezp\User\Concrete</namespace-alias>
    <include line="13" type="Require">
      <name>bootstrap.php</name>
    </include>
  </file>
  <file path="index.php" hash="e54b57cedcd14e57952d72a3bc15359a" package="eZ">
    <docblock line="2">
      <description><![CDATA[eZ Publish Next]]></description>
      <long-description><![CDATA[<p>This file on purpose does not use any PHP 5 language features to be able to exit with
message about wrong php version even on PHP 4.</p>]]></long-description>
      <tag line="2" name="copyright" description="Copyright (C) 1999-2012 eZ Systems AS. All rights reserved."/>
      <tag line="2" name="license" description="http://opensource.org/licenses/gpl-2.0.php GNU General Public License v2.0"/>
      <tag line="2" name="package" description="eZ"/>
      <tag line="2" name="doc" description="Copy this file to www/index.php to get started, for more info see doc/readme.txt"/>
    </docblock>
    <include line="40" type="Require" package="Default">
      <name>bootstrap.php</name>
      <docblock line="36">
        <description><![CDATA[Get ServiceContainer]]></description>
        <long-description><![CDATA[]]></long-description>
        <tag line="36" name="var" description="" type="\eZ\Publish\Core\Base\ServiceContainer">
          <type by_reference="false">\eZ\Publish\Core\Base\ServiceContainer</type>
        </tag>
      </docblock>
    </include>
  </file>
  <package name="Default"/>
  <package name="Examples"/>
  <package name="FieldTypeProviderInterface"/>
  <package name="eZ">
    <package name="Publish">
      <package name="API">
        <package name="Repository">
          <package name="Exceptions"/>
          <package name="Values">
            <package name="Content">
              <package name="Query"/>
            </package>
          </package>
        </package>
      </package>
      <package name="Core">
        <package name="API"/>
      </package>
    </package>
  </package>
  <namespace name="eZ">
    <namespace name="Publish">
      <namespace name="API">
        <namespace name="Repository">
          <namespace name="Exceptions"/>
          <namespace name="Values">
            <namespace name="Content">
              <namespace name="Query">
                <namespace name="Criterion">
                  <namespace name="Operator"/>
                </namespace>
                <namespace name="SortClause">
                  <namespace name="Target"/>
                </namespace>
              </namespace>
            </namespace>
            <namespace name="ContentType"/>
            <namespace name="IO"/>
            <namespace name="User">
              <namespace name="Limitation"/>
            </namespace>
          </namespace>
        </namespace>
      </namespace>
      <namespace name="Core">
        <namespace name="API">
          <namespace name="Content"/>
        </namespace>
        <namespace name="Base">
          <namespace name="Configuration">
            <namespace name="Parser"/>
          </namespace>
          <namespace name="Exception"/>
        </namespace>
      </namespace>
      <namespace name="SPI">
        <namespace name="FieldType"/>
      </namespace>
    </namespace>
  </namespace>
  <namespace name="ezp">
    <namespace name="Base">
      <namespace name="Collection"/>
      <namespace name="Configuration">
        <namespace name="Parser"/>
      </namespace>
      <namespace name="Exception"/>
      <namespace name="Image"/>
      <namespace name="Legacy"/>
      <namespace name="Proxy"/>
    </namespace>
    <namespace name="Content">
      <namespace name="Field"/>
      <namespace name="FieldType">
        <namespace name="Author"/>
        <namespace name="BinaryFile"/>
        <namespace name="Checkbox"/>
        <namespace name="Country">
          <namespace name="Exception"/>
        </namespace>
        <namespace name="DateAndTime"/>
        <namespace name="Float"/>
        <namespace name="Image">
          <namespace name="Exception"/>
        </namespace>
        <namespace name="Integer"/>
        <namespace name="Keyword"/>
        <namespace name="Media"/>
        <namespace name="Rating"/>
        <namespace name="Selection"/>
        <namespace name="TextBlock"/>
        <namespace name="TextLine"/>
        <namespace name="Url"/>
        <namespace name="XmlText">
          <namespace name="Input">
            <namespace name="Parser"/>
          </namespace>
        </namespace>
      </namespace>
      <namespace name="Language"/>
      <namespace name="Location">
        <namespace name="Exception"/>
        <namespace name="Trash">
          <namespace name="Exception"/>
        </namespace>
      </namespace>
      <namespace name="Query"/>
      <namespace name="Search"/>
      <namespace name="Section"/>
      <namespace name="Type">
        <namespace name="Group"/>
      </namespace>
      <namespace name="Utils"/>
      <namespace name="Version"/>
    </namespace>
    <namespace name="Io">
      <namespace name="Exception"/>
      <namespace name="Storage">
        <namespace name="Legacy">
          <namespace name="FileResourceProvider"/>
        </namespace>
      </namespace>
    </namespace>
    <namespace name="Persistence">
      <namespace name="Content">
        <namespace name="Language"/>
        <namespace name="Location">
          <namespace name="Trash"/>
        </namespace>
        <namespace name="Query">
          <namespace name="Criterion">
            <namespace name="Operator"/>
          </namespace>
          <namespace name="SortClause">
            <namespace name="Target"/>
          </namespace>
        </namespace>
        <namespace name="Relation"/>
        <namespace name="Search"/>
        <namespace name="Section"/>
        <namespace name="Type">
          <namespace name="Group"/>
        </namespace>
        <namespace name="UrlAlias"/>
      </namespace>
      <namespace name="Fields"/>
      <namespace name="Storage">
        <namespace name="InMemory"/>
        <namespace name="Legacy">
          <namespace name="Content">
            <namespace name="FieldValue">
              <namespace name="Converter">
                <namespace name="Exception"/>
              </namespace>
            </namespace>
            <namespace name="Gateway">
              <namespace name="EzcDatabase"/>
            </namespace>
            <namespace name="Language">
              <namespace name="Gateway"/>
            </namespace>
            <namespace name="Location">
              <namespace name="Gateway"/>
              <namespace name="Trash"/>
            </namespace>
            <namespace name="Search">
              <namespace name="Gateway">
                <namespace name="CriterionHandler"/>
                <namespace name="SortClauseHandler"/>
              </namespace>
            </namespace>
            <namespace name="Section">
              <namespace name="Gateway"/>
            </namespace>
            <namespace name="Type">
              <namespace name="ContentUpdater">
                <namespace name="Action"/>
              </namespace>
              <namespace name="Gateway"/>
              <namespace name="Update">
                <namespace name="Handler"/>
              </namespace>
            </namespace>
          </namespace>
          <namespace name="Exception"/>
          <namespace name="EzcDbHandler"/>
          <namespace name="User">
            <namespace name="Gateway"/>
            <namespace name="Role">
              <namespace name="Gateway"/>
            </namespace>
          </namespace>
        </namespace>
      </namespace>
      <namespace name="User"/>
    </namespace>
    <namespace name="User">
      <namespace name="Exception"/>
      <namespace name="Group"/>
      <namespace name="Role"/>
    </namespace>
  </namespace>
  <marker>todo</marker>
  <marker>fixme</marker>
</project>
